{
  "Assets/Fallencake/ModularUIPack/Docs/getting-started.html": {
    "href": "Assets/Fallencake/ModularUIPack/Docs/getting-started.html",
    "title": "Getting Started | ModularUIPack",
    "summary": "Getting Started"
  },
  "Assets/Fallencake/ModularUIPack/Docs/introduction.html": {
    "href": "Assets/Fallencake/ModularUIPack/Docs/introduction.html",
    "title": "Introduction | ModularUIPack",
    "summary": "Introduction"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [9.1.3] - 2024-09-25 Fixed Animation Preview window sometimes does not display deformed Sprites. (DANB-704) Sprite Resolver missing sprite previews when dealing with large number of entries. (DANB-716) Misaligned label previews in Sprite Resolver's inspector. (DANB-719) Sprite Resolver component not updated after Sprite Library Asset has been modified. (DANB-732) IK gizmos are displayed in the SceneView when IKManager2D is active in Animation Preview window. (DANB-737) IK solvers are misaligned when bones have different depths. (DANB-750) [9.1.2] - 2024-08-21 Fixed Sprite Bone Influence tab bone reordering. (DANB-632) Renaming functionality for Labels is available to users when multiple Labels are selected. (case DANB-672) Fixed SpriteSkin's playmode test failures. (case DANB-691) Documentation, comments, and other requirements to conform to Package Validation. (DANB-710) [9.1.1] - 2024-05-06 Fixed Fixed the the memory leak in the SpriteSkin component. (case DANB-602) Fixed the IK bones flipped at certain angels. (case DANB-583) Sprite Library's labels and categories cannot be reordered. (case DANB-592) Fixed the incorrect transform cache capacity in the SpriteSkin component. (case DANB-614) Added Added safety checks to SpriteSkin's APIs. [9.1.0] - 2023-12-14 Fixed Blend weight vertex attribute is added only when sprite has bones. (case DANB-520) Sprite Library editor drag and drop interactions. (case DANB-535) Sprite Library editor drag and drop blocked by labels. (case DANB-558) Adjust the copy-paste logic to not paste sprite mesh to the same sprite twice. (case DANB-530) Sprite Library Asset is selected on creation. (case DANB-542) Sprite Resolver previews not visible after editor regained focus. (case DANB-564) Added SpriteSkin's Auto Rebind property can now be accessed from scripts. (case DANB-490) Sprite Library public API to save an asset as a .spriteLib SpriteLibrarySourceAsset. [9.0.4] - 2023-09-05 Fixed Fixed an issue where the FK doesn't blend correctly with the IK if solver solves from the bind pose. (case DANB-482) Added correct help documentation link to Sprite Library Asset. (case DANB-486) [9.0.3] - 2023-04-18 Fixed Fixed Sprite Resolver inspector not able to set category to 'No Category' if it contains the old hash value. (case DAB-395) Fixed Sprite Resolver inspector not updating its previews when the category is set externally to 'No Category'. (case DANB-389) Fixed an issue where the Limb IK solver will become unstable when the child bones have different Z position. (case DANB-413) Fixed an issue where changing Sprite Library reference in the Inspector will result in an exception. (case DANB-426) Fixed an issue where the CCD and Fabrik solvers will become unstable when the child bones have different Z position. (case DANB-418) Added Updated IK parameter names and comments in public APIs. [9.0.2] - 2023-02-27 Added Added support for Collections 2.0.0. Fixed an issue where \"System.ArgumentException\" thrown when opening sprite Prefab with Script. (DANB-342) Fixed Fixed an issue where IKEditorManager updates even when there are no active IK Manager 2Ds in the Scene. (case DANB-345) Fixed an issue where undoing vertex painting results in a displaced mesh. (case DANB-355) Fixed an issue where IKGizmos will throw an exception in the editor when IKSolver has an unassigned Solver in its list. (case DANB-371) Fixed SpriteResolver does not animation with animation clip when upgrading from 2020.3. (case DANB-377) IMGUIContainer:ProcessEvent error occurs when selecting a PSD embedded SpriteLibraryAsset as a Main Library of another Sprite Library Asset. (case DANB-380) [9.0.1] - 2022-10-11 Fixed Fixed a case where pasting bones in the Skinning Editor would move bones rather than copy them. (case DANB-179) Fixed an issue where selecting bones in the Skinning Editor after removing any bone in the skeleton will throw an exception. (case DANB-186) Fixed a case where setting IKManager2D's or Solver2D's weight to '0' doesn't update solver's effector position. (case DANB-191) Fixed an issue where undo the addition of a Sprite Skin component would crash the editor. (DANB-201) Fixed a case where new bones are not selected after pasting them in the Skinning Editor and an exception is thrown. (DANB-209) Fixed a case where the auto weight generation would associate incorrect bones to vertices. (case DANB-22) Improved the Auto Geometry generation speed. Fixed a case where a .psd/.psb with a Main Skeleton assigned would generate incorrect bind poses. (Case DANB-225) Fixed IK Manager 2D's inspector slow downs. (case DANB-215) Fixed an issue where the Sprite Skin editor would throw an exception if Sprite Renderer doesn't have a Sprite assigned to it. Changed Expand and frame on bone selection. [9.0.0] - 2022-08-03 Added Added bone weight index validation in SpriteSkin's validate method, to ensure valid data before continuing with deformation. Fixed Fixed a case where moving vertices forcefully in the Skinning editor could cause a quad reset of the mesh. (case DANB-7) Fixed a case where multi selecting Sprite Skins would cause a null reference exception to be thrown. (case DANB-126) Changed Refactored internal triangulation and tessellation APIs. [9.0.0-pre.3] - 2022-05-31 Changed Update dependency package version. [9.0.0-pre.2] - 2022-05-20 Fixed Creating a new vertex or an edge outside of the main geometry is now handled correctly. (case 1398541) Fixed an issue where null reference exceptions would show when the Skinning Editor was open during play mode. (case 1419720) Fixed Sprite Library Asset 'Revert' behavior. (case 1417743) Fixed Sprite Library Asset multi-editing in the Inspector window. (case 1417747) Fixed an issue where Variant Sprite Libraries would not be updated when the Main Library is changed. (case DANB-5) Changed Added ability to create Sprite Library Asset variant from the create menu. Added dialog box to the Skinning Editor when entering Play Mode to allow saving unsaved changes. [9.0.0-pre.1] - 2022-03-21 Added Added the ability to cancel mesh generation in the Skinning Editor. Changed 2D Animation now depends on the Collections package. Sprite Skin's AutoRebind can now swap between all bones underneath the rootBone. Updated Visibility Tab documentation page. Sprite Skins are now registered/deregistered in batches for improved instatiation/destroy performance. Updated ListView event listeners to use new selection API. Fixed Fixed an issue where the animation window's preview of IK targets would not be the same as in Play Mode. (case 1391590) Sprite Library cannot reference itself in the Main Library field or any asset that references it. (case 1401464) Fixed an issue where moving vertices in the Skinning Editor might result in invalid edges. (case 1386153) Fixed an issue where the SpriteSkin components would not get initialized on editor launch. (case 1401139) Fixed an issue when Skinning Editor will lose reference after exiting Play mode. (case 1405289) Fixed an issue where the Skinning Editor's copy/paste tool would fail if two bones shared the same name. (case 1405028) [8.0.0] - 2022-01-25 Changed Package release version. Fixed Sprite Skin's help button now leads to the correct documentation page. (case 1383765) Fixed the isolate behavior in the Sprite tab in the Visibility panel. (case 1387184) [8.0.0-pre.4] - 2021-11-24 Added Added support in the asset upgrading tool for animation clips authored across multiple Unity editor versions. Added a check to validate collinearity among vertices before tessellation. Changed Updated the 2D Animation Upgrader documentation section with new information regarding Animation Clip upgrading. Fixed Added additional fallback for when the bursted tessellation step fails. (case 1372686) Sprite selection now reacts only to the left mouse button. (case 1371567) Fixed an issue where a Sprite Skin outside of the camera frustum enters the frustum, which could cause an editor and player crash. (case 1377867) Slider labels in the Skinning Editor now register input for easier value tweaking. (case 1294945) [8.0.0-pre.3] - 2021-10-21 Changed Update to latest com.unity.2d.common package [8.0.0-pre.2] - 2021-10-11 Changed Sprite Library Asset are now named \"New Sprite Library Asset.spriteLib\" by default on creation. Updated Toolbar and Visibility tab buttons' selection color. Updated package documentation. Fixed Sprite selection actions now work with Undo. (case 1367257) Fixed an issue where removing an edge in the Skinning editor would result in the mesh falling back to a quad. (case 1365831) Quads are now generated at correct positions after removing all vertices from Sprite meshes. (case 1366633) [8.0.0-pre.1] - 2021-08-06 Added Added an asset upgrading tool, which can upgrade older Sprite Library Assets and Animation Clips to the latest version. Changed SpriteResolver.SetCategoryAndLabel and SpriteResolver.ResolveSpriteToSpriteRenderer now returns a bool to signal if the methods managed to resolve the request or not. Orientation function being replaced with a simpler version. Fixed Thumbnails in Sprite Library Asset flicker when the Library Asset contains many Categories and Labels. (case 1333228) SpriteLibraryAsset Category & Label does not generate hash in Inspector. (case 1340587) SpriteResolver inspector selects first element when failing to resolve. (case 1340070) IKManager2D does not detect classes inheriting from Solver2D. (case 1343260) Skinning Editor tooltips updated. Bone and Sprite influence lists are displayed correctly. (case 1349041) Sprite Library Assets are now being cached properly. (case 1347339) Sprite outline in the Skinning Editor is now rendered based on Sprite's geometry. (case 1335586) Animation Preview windows can now show Sprite deformation, Sprite Swapping and IK controlled movement. Removed the need to set Broken and Constant tangent on each key when animating a SpriteResolver. Fixed render texture size error in the Skinning Editor. (case 1357552) Skinning Editor toolbar buttons now focus on hoykey presses. (case 1358714) Fixed an issue where opening certain .psb files would result in errors. (case 1358972) Fixed a case where quads generated in the Skinning Editor would be created with the wrong size and position. (case 1361053) Fixed an issue where variant Sprite Libraries would not display its main library content. (case 1362389) Fixed an issue where IK Solvers would not be updated when previewing an animation clip. (1354389) Fixed an issue where copying mesh and bone data from a .psb containing a single sprite would throw an exception. (case 1351543) Fixed an issue where an error would show up when destroying a Sprite Skin component while deep profling. (case 1364910) [7.0.0-pre.3] - 2021-07-05 Fixed Thumbnails in Sprite Library Asset flicker when the Library Asset contains many Categories and Labels. (case 1333228) SpriteLibraryAsset Category & Label does not generate hash in Inspector. (case 1340587) SpriteResolver inspector selects first element when failing to resolve. (case 1340070) IKManager2D does not detect classes inheriting from Solver2D. (case 1343260) Skinning Editor tooltips updated. [7.0.0-pre.2] - 2021-05-19 Fixed Fixed Sprite Resolver component not updated when new categories/labels are added into Sprite Library asset. (case 1321069) [7.0.0-pre.1] - 2021-05-05 Changed Version bump for Unity 2021.2. Moved Copy & Paste Rig buttons in the Skinning Editor into their own Rig category. Moved Preview & Restore Pose button in the Skinning Editor into their own Pose category. Replaced Triangle.Net with our own tessellation solution. Added Added shortcuts at the back of the Skinning Editor buttons tooltips for better discoverability. Added a color picker for each bone in the Skinning Editor's Visiblity tab. Added the Sprite Influence panel that allows to change a bone influence on the selected Sprite. Fixed Fixed crash when disabling Sprite Skin when multithreaded rendering is enabled. (case 1296355) [6.0.0] - 2021-03-17 Changed Update version for release. [6.0.0-pre.3] - 2021-03-15 Changed Updated manual. Fixed Deleting bones from a skeleton referenced by another character sometimes throws IndexOutOfRangeException. (case 1304768) [6.0.0-pre.2] - 2021-01-16 Changed Update license file. Added Initial documentation update for new features for 6.0.0. Fixed SpriteResolver resets to the current Sprite from SpriteRenderer if exist in Sprite Library. [6.0.0-pre.1] - 2020-11-02 Changed Sprite Swap related features moved out of experimental namespace. Removed editing of Sprite Swap feature in Skinning Module. Updated Sprite Swap workflow focusing on Project Window and Inspector. Sprite Library Asset is created via AssetImporter. Added Sprite Library Asset supports variant. Sprite Library supports override during editing. Supports sharing of bone structures in Skinning Module. Added position, rotation and bone color editing in Skinning Module. Fixed Added missing tooltips in the Sprite Skin inspector. (case 1285255) [5.0.3] - 2020-10-15 Fixed Fixed Sprite with no animation data is being processed during AssetPostProcessor. Fixed properties under the Sprite Library Asset overlapping in inspector. (case 1280017) Fixed vertical slider handle is not aligned and placed slightly to the right side in the Bone Influence window. (case 1260568) [5.0.2] - 2020-08-31 Fixed Fixed Visibility window overlaps with weights and geometry window when Sprite Editor Window resizes. (case 1263353) Fixed 'Depth' column label gets clipped in Visibility Tool Window. (case 1257991) Fixed 'Invalid worldAABB' error message when repeatedly pressing Pack Preview button. (case 1270150) Fixed Null reference exception when changing values of a material while recording animation with Skinning Module enabled. (case 1267300) Improved memory and speed of Animation SpritePostProcess for large sprite count. [5.0.1] - 2020-07-24 Fixed Fixed Skinning module flickers when creating in category in Visibility Window. (case 1244097) Fixed NullReferenceException when creating Preset for SpriteSkin component. (case 1254873) Updated optional dependency support for Collections to 0.9.0-preview.6 and Burst 1.3.3. (case 1255839) [5.0.0] - 2020-05-11 Changed Version bump for Unity 2020.2. Added Combined 2D IK package with 2D Animation package. Fixed Remove unused XR dependency. (case 1249390) Fixed NullReferenceException when creating prefab with SpriteSkin component. (case 1245149) [4.2.4] - 2020-05-19 Fixed Fixed compilation error by depending on latest 2D Common package. [4.2.3] - 2020-04-26 Changed Improved performance by batching buffer submission when Collection and Burst package is installed Fixed Fix 'ArgumentException' when creating UXML Template Asset with 2D Animation package installed (case 1239680) [4.2.2] - 2020-03-26 Fixed Fixed bone name field in weight slider does not display bone name (case 1226249) Fixed SpriteResolver's Inspector not updated when GameObject is disabled Changed Improved deformation performance when Collection and Burst package is installed Added Allow reordering of bone order in Bone Influence window. This is to allow fine tuning of bone order when shown in SpriteSkin's Inspector [4.2.1] - 2020-03-20 Fixed Fixed inconsistent line ending [4.2.0] - 2020-03-11 Added Add alwaysUpdate option to SpriteSkin to determine if SpriteSkin execution should occur even when the associated SpriteRenderer is culled Added message to inform user on dependent packages when viewing certain sample Scenes Added API to access deformed vertices from SpriteSkin Changed Improved SpriteSkinEditor UI Adjust length of popup and value fields for Weight Slider Window Removed Remove Bounds Gizmo from SpriteSkin Remove Reset Bounds button from SpriteSkinEditor Fixed Fixed Sprite asset used by SpriteSkin in Scene is being deleted Fixed broken documentation links in inspectors Fixed Sprite deformation not updated when GameObject is being enabled Fixed exception after reverting from creating new vertices and edges Fixed visual defect after undoing changes to Bone Transform properties in SpriteSkin's Inspector [4.1.1] - 2020-01-20 ###Fixed Fix 2D Animation not working when reloading scene in runtime (case 1211100) ###Added Bone visibility persist after apply Sprite visibility persist after apply ###Changed Deformed Sprite's bounds are now calculated and bounds property is removed from SpriteSkin's inspector (case 1208712) [4.1.0] - 2019-12-18 Changed Changed default shortcut key for \"Animation/Create Vertex\" from \"Shift-D\" to \"Shift-J\" Changed default shortcut key for \"Animation/Weight Brush\" from \"Shift-C\" to \"Shift-N\" Fixed Fix visual glitch when using SpriteSwap with Multi-threaded rendering (case 1203380) Fix bone name misaligned under Weight Slider Inspector when a name contains more than 26 letters (case 1200873) Fix bones not chained correctly when splitting bone in certain cases Fix 'Label' and 'Sprite' name overlaps with its input field when preset of \"Sprite Library Asset\" is created (case 1201061) Fix bone names can be empty (case 1200861) Fix bone gets created even though clicked on Visibility Panel (case 1200857) Fix NullReferenceException when using shortcut 'Shift+1' in certain cases (case 1200849) Added Expose SpriteSkin component to be accessible from scripts. [4.0.1] - 2019-11-26 Changed Changed how Samples are imported into the user's project Updated Third Party Notices file Fixed Fix Animation Samples crashes when installing on certain machines (case 1185787) [4.0.0] - 2019-11-06 Changed Version bump for Unity 2020.1 Improve optional performance boost by installing Burst and Collections package. Currently tested with com.unity.collections 0.1.1-preview com.unity.burst 1.1.2 Added Skinning Module now persists the following state after Apply or Revert is clicked in Sprite Editor Window Current view mode i.e. Character or Spritesheet Mode Sprite Selection Bone Selection Preview Pose Vertex Selection Visibililty Tool Active State Weight Brush Settings Fixed Update to use new UIElements ListView API [3.0.7] - 2019-10-18 Fixed Fix Search reset button is visible in Visibility tool when nothing is entered into the search field (case 1182627) Fix Sprite outline disappears when the Selected Outline Color alpha value is less than 255 (case 1186776) Fix button's label spelling error in 'Generate For All Visible' (case 1188621) [3.0.6] - 2019-09-18 Changed Remove usage of Resource folder for assets needed by package. Fixed Fix GC allocation when using Sprite Resolver. [3.0.5] - 2019-09-06 Added Optional performance boost by installing Burst package. Samples showing different how to produce different outcomes Changed Sprite and Group in Sprite Visibility Window appear in same order as original art source file Fixed Fix missing bone data in Sprite when importing with AssetDatabase V2 [3.0.4] - 2019-08-09 Added Add related test packages Added tangent deform for lighting support Fixed Fixed Amount slider not working in Weight Slider Panel Fixed exception when changing size to less than 0 in SpriteLibraryAssetInspector Fixed Sprite visual corruption when swapping Sprite using SpriteResolver ###Changed Make Size property field in Weight Brush draggable for changing brush size Rename SpriteLibraryAsset::GetCategorylabelNames to SpriteLibraryAsset::GetCategoryLabelNames Change string hash for Category and Label name. This might break existing animation usage with SpriteResolver. Add Experimental tag on Sprite Swap related features [3.0.3] - 2019-07-17 Changed Update documentation Update to latest Mathematics package version [3.0.2] - 2019-07-13 Changed Mark package to support Unity 2019.3.0a10 onwards. [3.0.1] - 2019-07-12 Changed Fix path length due to validation failure. [3.0.0] - 2019-06-17 Changed Remove preview tag. Remove experimental namespace [2.2.0-preview.3] - 2019-06-06 Added BoneGizmos can be toggled in the SceneView Gizmos dropdown Scrollbar does not show for toolbar when required to scroll Change Sprite Library implementation. APIs redesigned. This will cause compilation errors if previous APIs are used Data serialization change. Previous Asset and Component data will not be compatible [2.2.0-preview.2] - 2019-05-10 Added BoneGizmos will only show in selected hierarchies. Associate nearest Bone to Sprite intead of root Bone when no Bones are overlapping the Sprite Fixed Sprite not showing after it is being culled due to bone animation Add icons for Sprite Library Asset, Sprite Library Component and Sprite Resolver Component Fixed Sprite Library Asset Inspector Property Field text clipping SpriteResolver will assign Sprite to SpriteRenderer even it resolves to a missing Sprite Add visual feedback in SpriteResolver Inspector for missing Sprite [2.2.0-preview.1] - 2019-05-09 Added Upgrade for 2019.2 Copy and Paste rework Visibility Window remains open when switching between tools Reparent Bone tool removed and functionality moved into Bone Visibility Panel Added Sprite Library feature Add Layer Grouping support in Sprite Visibility Panel [2.1.0-preview.4] - 2019-04-29 Added Fix skinning not in sync with the rendering. [2.1.0-preview.3] - 2019-04-24 Added Set Burst compilation off for internal build [2.1.0-preview.2] - 2019-02-25 Added Fix enable skinning on add SpriteSkin component Upgrade dependency package version for Unity 2019.1 support Fix case 1118093: SpriteSkin.onDrawGizmos() increases memory usage. [2.1.0-preview.1] - 2019-01-25 Added Update package to work with 2019.1 Improve animation runtime performance Fix bone reparenting sibling order Fix Sprite Visibility Tool in disabled state in certain cases Update documents [2.0.0-preview.1] - 2018-11-20 Added Overhauled 2D Animation workflow. Refer to updated documentation for workflow changes. Single Sprite Editor Window module for 2D Sprite Rigging workflow Unified Bone, Geometry and Weight tools in a single window Supports Multiple Sprite Single Character rigging workflow through 2D PSD Importer Package. SpriteSkin now uses user define bounds for renderer culling [1.0.16-preview.2] - 2018-11-14 Added Fix 2 Issues: Prefabs with SpriteSkin loses references to bone hierarchy when Library folder is rebuilt/different. The scene viewport shows the character without any bones applied, needing an re-import. [1.0.16-preview.1] - 2018-07-18 Added Fix error log about VertexAttribute [1.0.16-preview] - 2018-06-20 Added Fix Documentation warnings Fix error log complaining about DidReloadScripts signature. Fix issues with generate outline [1.0.15-preview] - 2018-04-12 Added New Version suffix (preview) Improved Scene View gizmos for better manipulation of bone rotation and position Added notification when Sprites are imported with incorrect weights Fixed bug where textures with max texture size could not generate geometry"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/2DIK.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/2DIK.html",
    "title": "2D Inverse Kinematics (IK) | ModularUIPack",
    "summary": "2D Inverse Kinematics (IK) Overview The 2D Inverse Kinematics (IK) feature set allows you to apply 2D IK to the bones and Transforms of your characters’ animation skeletons. 2D IK automatically calculates for the positions and rotations of a chain of bones moving towards a target position. This makes it easier to pose and animate character limbs for animation, or to manipulate a skeleton in real-time. Applying 2D IK to character skeletons The following workflow continues from the 2D Animation package animation workflow, and demonstrates how to apply 2D IK to your character skeletons. Refer to the hierarchy of bones created with the 2D Animation package's Bone tools of the Skinning Editor. Add the IK Manager 2D component to the GameObject at the top of the hierarchy. This is usually the main root bone of the entire character skeleton. Add to the IK Solvers list by selecting which type of IK Solver to use. The IK Solvers are also added as additional GameObjects in the hierarchy. With an IK Solver selected, create and set the Effector and Target for the IK Solver. Position bones by moving the Target's position to move the chain of bones with IK applied. Example demonstrating how to use the IK Manager 2D The IK Manager 2D component controls the IK Solvers in the hierarchy. Add the Manager component to the highest bone in the hierarchy, commonly referred to as the Root bone. In this example, add the component to Plunkah as it is the Root bone in the hierarchy: To add an IK Solver, select the + symbol at the bottom right of the IK Solvers list (see below). Select an IK Solver from the three options in the dropdown menu - Chain (CCD), Chain (FABRIK), and Limb. Each type of IK Solver uses a different algorithm to solve for the position of Effectors. IK Solvers are iterated in descending order, with Solvers lower in the list referring to the positions set by the Solvers higher in the list. The order of Solvers usually reflects the order of bones/Transforms in the skeleton hierarchy. For example, if the arm bone is the child of the torso bone, then the torso's IK Solver should be set above the arm’s Solver in the list. Rearrange the Solvers by dragging the leftmost edge of a row up or down. Weight Weight measures the degree that a Solver’s solution affects the positions of the bones/Transforms in the chain. The IK Manager 2D has a master Weight property that affects all Solvers it controls. It is applied in addition to the Solver’s individual Weight settings. Restore Default Pose Select this to reset all bones and Transforms back to their original positions. IK Solvers The IK Solver calculates the position and rotation the Effector and its connected bones should take to achieve their Target position. Each type of IK Solver has its own algorithm that makes them better suited to different kinds of conditions. The following properties are available to all Solvers: Property Description Effector Define the bone or Transform the IK Solver solves for. Target The Transform which is used to indicate the desired position for the Effector. Constrain Rotation This constrains the rotation of the Effector to the rotation of the Target. Restore Default Pose Enable to restore the bones to their original positions before 2D IK is applied. Disable to apply 2D IK in relation to the Effector’s current position and rotation. Weight Use the slider to adjust the degree the IK Solver’s solution affects the original Transform positions. At the lowest value of 0, the IK solution is ignored. At the maximum value of 1 the IK solution is fully applied. This value is further influenced by the IK Manager's master Weight setting. The following properties are only available to Chain (CCD) and Chain (FABRIK) - Chain Length The number of bones/Transforms (starting from the Effector) in the chain that the IK solution is applied to. Iterations The number of times the algorithm runs. Tolerance The threshold where the Target is considered to have reached its destination position, and when the IK Solver stops iterating. Limb This is a standard two bone Solver that is ideal for posing joints such as arms and legs. This Solver’s chain length is fixed to three bones - starting from the Effector bone/Transform and including up to two additional bones in its chain. Chain (CCD) - Cyclic Coordinate Descent This IK Solver uses the Cyclic Coordinate Descent algorithm, which gradually becomes more accurate the more times the algorithm is run. The Solver stops running once the set tolerance or number of iterations is reached. The following property is only available to the Chain (CCD) IK Solver: Property Description Velocity The speed the IK algorithm is applied to the Effector until it reaches its destination. Chain (FABRIK) - Forward And Backward Reaching Inverse Kinematics This IK Solver uses the Forward And Backward Reaching Inverse Kinematics (FABRIK) algorithm. It is similar to Chain (CCD) as its solution becomes more accurate the more times its algorithm is run. This Solver stops running once the set Tolerance or number of Iterations is reached. The Chain (FABRIK) IK Solver generally takes less iterations to reach the Target's destination compared to Chain (CCD), but is slower per iteration if rotation limits are applied to the chain. This Solver is able to adapt quickly to if the bones are manipulated in real-time to different positions. ##Creating an Effector and its Target After creating an IK Solver, the next step is to set the Effector and its Target. A Target is a Transform that represents the target position the Effector attempts to reach. As the Effector moves towards the Target position, the IK Solver calculates for the position and rotation of the Effector and the chain of bones it is connected to. Follow the steps below to set a Target: Select the last bone in the chain. Create an empty Transform (right-click > Create Empty). It is automatically created as a child of the highlighted bone. Move the position of the Transform to the tip of the last bone in the chain. Select the IK Solver. With its Inspector window open, drag the Transform from the hierarchy onto the Effector field. Click the Create Target button. A Target is created at the Transform's position. If the Create Target button appears inactive, ensure that the Chain Length value is set to one or greater. The Target is created as a child of the IK Solver. It appears as a circle gizmo in the Scene view. Move the Target to manipulate the connected chain of bones. The Scene view Gizmo Toggle or customize the display settings of the IK Gizmos to adjust their visibility when animating your characters. This is useful when you need to improve their readability or to reduce on-screen noise when editing animating your characters. Global IK Gizmos Toggle You can toggle the IK Gizmos by going to the Gizmos drop-down menu at the upper right of the Scene view window, then select or clear IKManager2D (menu: Gizmos > Scripts > IKManager2D) to enable or disable the Gizmos respectively. Solver Gizmos Customize Solver Gizmos via the IK Manager 2D component that manages the Solvers. From the IK Manager 2D Component Inspector, you can individually hide the Solver's Gizmo to isolate only the Solvers that you are interested in. To further distinguish the Gizmos, you can also customize the colors of the Gizmos from the IK Manager 2D Component Inspector Scripting API Reference Adding New Solvers You can add your own solver by extending from the class Solver2D. Your extended class will then show up as a new solver under the solver menu in the IKManager2D component. Solver2D This is the base class for all IK Solvers in this package. IKManager2D will detect all classes extending this and accept it as a Solver it can control. Implement or override the following methods to create your own IK Solver: protected abstract int GetChainCount() This function returns the number of IK chains the solver owns. Use this to return the number of IK chains your solver owns. public abstract IKChain2D GetChain(int index) This function returns the IKChain2D at the given index. Use this to return the IKChain2D your solver owns at the given index. protected virtual bool DoValidate() This function does validation for all parameters passed into the solver. Use this to check if your solver is set up correctly with all inputs. protected virtual void DoInitialize() This function initializes the solver and builds the IK chains owned by the solver. This is called whenever the solver is invalid after changing the target of the solver or other parameters of the solver. Use this to initialize all the data from the parameters given to the solver, such as the IK chains owned by the solver. protected virtual void DoPrepare() This function prepares and converts the information of the Transforms (position, rotation, IK parameters etc) to structures which can be used by the IK algorithms. Use this to do any work to gather data used by your solver when updating the IK positions. protected abstract void DoUpdateIK(List effectorPositions) This function calculates and sets the desired IK positions for the Transforms controlled by the solver given a list of effector positions for each chain owned by the solver. The effector positions may be overridden by user positions if manipulated from the SceneView. protected virtual Transform GetPlaneRootTransform() This function returns the transform whose localspace XY plane is used to perform IK calculations. Use this to define the Transform used. IKChain2D This is the class which stores the transforms involved in an IK chain. When a chain is set up with a target and a transform count, initializing the Solver will populate the chain with the right transforms if valid. Target - The transform which is used as the desired position for the target. Effector - The transform to perform IK on to reach a desired position. TransformCount - The number of transforms involved in the IK solution starting from the target. This is generally equivalent to ChainLength in solvers. Transforms - All transforms involved in the chain. In general, the last transform in this is the target transform and the first transform is considered the root transform for the chain. Lengths - The lengths between each transform in the chain. Solver2DMenu This attribute allows you to tag your Solver2D with a different name under the IKManager2D. Use this if you do not want to use the name of the class of the Solver2D. Example when giving the LimbSolver2D the name 'Limb' in the menu: [Solver2DMenuAttribute(\"Limb\")]"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/Animating-actor.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/Animating-actor.html",
    "title": "Animating an actor | ModularUIPack",
    "summary": "Animating an actor After importing and rigging an actor, you can begin animating by simply dragging the rigged actor into the Scene view. By repositioning the different bones of the actor on the Animation timeline with Unity's animation workflow and tools. The mesh of the actor deforms with the positioning of the rigged bones, creating smooth animation transitions. Aside from this method, there are other ways that you can animate with the 2D Animation package. The following are a few examples based on the Sample scenes available for you to import to use with the package. Sprite Swap The 2D Animation package allows you to use the Sprite Swap feature to swap to different Sprites at runtime, from swapping only a single part of an actor to swapping the entire Sprite Library Asset it refers to. Other Sample projects Sample projects are distributed with the 2D Animation package and available for import. These projects include examples of the different ways you can animate with the package features such as an Animated Swap. Refer to the respective Sample documentation pages for more information."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/AssetUpgrader.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/AssetUpgrader.html",
    "title": "2D Animation Asset Upgrader | ModularUIPack",
    "summary": "2D Animation Asset Upgrader The 2D Animation package and its assets are often updated with major and minor tweaks over time. Some asset improvements can be automatically applied when you upgrade to the latest version of the package. However, some of these changes require a manual step in order to have the assets use the latest code path. The 2D Animation Asset Upgrader tool eases the transition and upgrade of older assets to newer ones. This tool has the following features: Upgrades Sprite Library Asset files ending in .asset to Sprite Library Source Asset files ending in .spriteLib. Moves Sprite Library Assets baked into .psb files created in Unity 2019 and Unity 2020 out into their own separate Sprite Library Source Asset files ending in .spriteLib. Upgrades Animation Clips that animate Sprites based on the Sprite Resolver component's Category and Label hash in Unity 2019 and Unity 2020, to Sprite Resolver's new Sprite Hash property from Unity 2022 onwards. Upgrades Animation Clips animating the Sprite Resolver component's Sprite Key property in Unity 2021, to Sprite Resolver's new Sprite Hash property from Unity 2022 onwards. Getting Started Before upgrading any assets in your current project, make sure to source control or back up your project. Go to Window > 2D > 2D Animation Asset Upgrader to open the 2D Animation Asset Upgrader. Upgrading Sprite Libraries Follow these steps to upgrade the Sprite Libraries in the project. Open the 2D Animation Asset Upgrader. Select the Sprite Libraries button to open the Sprite Libraries tab. Select the Scan project button. The window then displays a list of all the Sprite Libraries that you can upgrade. Clear any Sprite Library Assets which you do not want to upgrade. Select the Upgrade selected button to begin the upgrading process. The editor then displays a pop-up window to inform you that the upgrade cannot be reverted, and any Asset Bundles connected to the Sprite Libraries will need to be rebuilt. Select Yes to proceed with the upgrade, or No to cancel the upgrading process. Once the upgrading process is complete, the 2D Animation Asset Upgrader will display the status of the upgrading process for each of the selected assets. Select the Open upgrade log button to get more detailed information about the different upgrade warnings and errors that may appear. The upgrade log will also list all the Asset Bundles that need to be rebuilt for the upgrading process. Upgrade Animation Clips Follow these steps to upgrade the Animation Clips in the project: Open the 2D Animation Asset Upgrader. Select the Animation Clips button to open the Animation Clips tab. Select the Scan project button. The window then displays a list of all the Animation Clips that you can upgrade. Clear any Animation Clips which you do not want to upgrade. Select the Upgrade selected button to begin the upgrading process. The editor then displays a pop-up window to inform you that the upgrade cannot be reverted, and that any Asset Bundles connected to the Animation Clips will need to be rebuilt. Select Yes to proceed with the upgrade, or No to cancel the upgrading process. Once the upgrading process is complete, the 2D Animation Asset Upgrader will display the status the upgrading process for each of the selected Animation Clips. Select the Open upgrade log button to get more detailed information about the upgrade warnings and errors that may appear. The upgrade log will also list all the Asset Bundles that need to be rebuilt for the upgrading process. Common upgrading errors and solutions The following are the common errors you may face when upgrading your projects, and their suggested solutions. Referring to the upgrade log for general debugging The first step to debugging an upgrade failure is to refer to the upgrade log. The 2D Animation Asset Upgrader writes each action it takes into the log, helping you to track down the point of failure. 9/11/2021 2:06:23 PM Asset Upgrading --------------- Verifying if the asset Talk (UnityEngine.AnimationClip) is an AnimationClip. Extracting SpriteHash bindings from clip. Found 0 bindings. Extracting SpriteKey bindings from clip. Found 0 bindings. Extracting Category bindings from clip. Found 0 bindings. Extracting Label keyframes from clip. Found 3 keyframes. Extracting Label bindings from clip. Found 1 bindings. Merging different types keyframes from the same bindings, into the same binding list. We now have 1 binding lists. Order the keyframe data in binding=Hand by time. Converting keyframes into uniformed format for binding=Hand Cannot find a category for keyframe at time=0 in binding=Hand. Cannot find a category for keyframe at time=3.383333 in binding=Hand. Cannot find a category for keyframe at time=4.966667 in binding=Hand. Expected 3 keyframes after cleanup for binding=Hand, but ended up with 0. The upgrade of the clip Talk failed. Some keyframes could not be converted in the animation clip. In this example, the upgrade log shows the actions and results from upgrading an Animation Clip that contains only Label hashes, but no Category hashes. The 2D Animation Upgrader writes to the log that it cannot find a Category hash for three out of three keyframes. This results in a failure to upgrade the Animation Clip. When some keyframes could not be converted in the Animation Clip One of the most common reasons for this error is when an Animation Clip contains either Sprite Resolver Category hash keys or Sprite Resolver Label hash keys, but not both types of hash keys at the same time. This example shows an incorrect Animation Clip setup where the Animation Clip contains only the Label hash, but not a Category hash, which leads to the above error. This example shows the corrected setup, where the Animation Clip contains both the Label hash and the Category hash. Fix this error by recording a Sprite Swap on the first frame in the Animation Clip. Once the Sprite Swap is added, the 2D Animation Asset Upgrader is able to upgrade the Animation Clip."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/CharacterParts.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/CharacterParts.html",
    "title": "Swapping individual Sprites | ModularUIPack",
    "summary": "Swapping individual Sprites You can use Sprite Swap to change only one Sprite on the actor without affecting the other Sprites. This allows you to alter part of an actor's visuals (for example, changing its clothes or skin to a different color) while keeping the rest of the visuals the same. In the following example, there are two Sprites that are variations of the actor’s scarf, with one being green and the other being blue. This workflow demonstrates how to switch from one to the other in the same actor: Left: The original green scarf Sprite. Right: An alternate blue scarf Sprite. Place the Sprites for both scarves into the same Sprite Library Asset, and add them both to the same Category (named Scarf). Give each of the Sprites a unique Label name (in this case green scarf and blue scarf respectively). This and the previous step can be automated by dragging and dropping sprites into the Categories tab empty space. In the Scene, select the Instantiated Prefab and then select the Scarf GameObject in the Hierarchy window. Go to the Sprite Resolver component of the Scarf GameObject. The Sprite Resolver‘s visual selector displays the two Sprites available in the Scarf Category. Select the blue scarf to switch the Sprite rendered by the Scarf GameObject to it instead. The Sprite Resolver's Label is set to blue scarf. If you want to switch more than one Sprite at a time, consider swapping the Sprite Library Asset to switch to an entire alternate set of Sprites. Sprites pivot alignment When working with skinned Sprites, the positions of their Meshes' vertices are calculated based on the current skeleton pose, and are unaffected by each Sprite’s individual pivot. However, when swapping Sprites which are not skinned (that is not Rigged to an actor’s skeleton), then they may not align correctly as their pivots are not in the same relative positions. This is especially noticeable if the Sprites are of very different sizes. The following example shows how Sprites can misalign when a skinned Sprite is swapped with an unskinned one: Figure 1: The original open hand Sprite. Figure 2: Swapping to the thumbs up Sprite. In this example, the GameObject containing the Sprite and the Sprite Swap component are aligned to match the open hand Sprite in the Skinning Editor. As the thumbs up Sprite is not rigged to the same skeleton, it appears misaligned as its pivot location is not in the same relative position as the original Sprite. To align the unskinned thumbs up Sprite, you must adjust its pivot to match the relative position of the open hand Sprite’s pivot. Note: If a Sprite is rigged to a skeleton, then its individual pivot location is overridden by the influence and position of the bone it is weighted to . To change the pivot position of a Sprite, first select the Sprite in the Sprite Editor, which causes the Sprite panel to appear at the bottom right of the Sprite Editor window. The Sprite panel shows details of the selected Sprite, such as its Name, Position, and Pivot properties. You can select from a dropdown list of predefined pivot options from the Pivot menu. These include options such as Center and Top Left, as well as Custom Pivot (this unlocks the Custom Pivot position property settings, allowing you to input your own custom position for the pivot). In this example, the two swapped Sprites are aligned by changing the Pivot property from Center to Custom Position, and inputting the Custom Pivot position that aligns the thumbs up Sprite with the open hand Sprite. After applying the changes, the swapped Sprite is now aligned with the rest of the actor after the Sprite Swap."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/CharacterRig.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/CharacterRig.html",
    "title": "Actor skinning and weighting workflow | ModularUIPack",
    "summary": "Actor skinning and weighting workflow The following steps are the general workflow for preparing your actor for animation with the Skinning Editor, after you have imported it into Unity. Follow the steps below to create the bones, generate the meshes, and adjust the weights for your actor. For more specific samples and examples, refer to the samples distributed with the 2D Animation package and the sample documentation included here. Use the Create Bone tool to build the bones of the actor skeleton. With the tool selected, click to define the start-point of the bone. Then move the cursor to where the bone should end, and click again to set the bone’s end-point. After creating a bone, the tool allows you to set the end-point of the second bone and so on, in order to create a chain of bones. To continue a chain of bones from any bone, select the Create Bone tool and click an existing bone, then click its end-point. A new bone is started from the end-point, creating a chain. Alternatively, you can set the start-point of the new bone away from its parent bone. The child bone still belongs to the same chain and this is reflected in the bone hierarchy. A faded link shows the red and blue bones are connected in a chain. After creating the bones of the actor, generate the geometry Mesh for the Sprites. It is recommended to use the Auto Geometry tool to auto-generate the geometry Mesh. With the Auto Geometry tool selected, select a Sprite and then select the Generate For Selected button to generate a Mesh for that Sprite only. To Generate For All Visible Sprites, click the generate button without selecting any Sprite. Refine the generated Meshes further by using the Edit Geometry Geometry tool, or create your own Mesh outline with the Create Vertex and Create Edge Geometry tools. Paint weights onto the Sprite geometry to adjust how much influence a bone has on the vertices of the Mesh. This affects how the mesh deforms when the actor is animated. It is recommended to use the Auto Weights tool to auto-generate the weights. The Auto Weights tool only generates weights for Sprites that have both a geometry Mesh, and bones intersecting their Mesh: The Generate For All Visible button is available when you do not select any specific Sprite. Select it to generate weights for all valid Sprite Meshes in the editor. The Generate For Selected button is available when you have a Sprite selected in the editor. Select it to generate weights for only the selected Sprite. Use the Weight Slider and Weight Brush tools to further adjust the weights of the Mesh vertices. To edit which bones influence a Sprite, select it and then go to the Bone Influence tool. A list of bones currently influencing the Sprite’s Mesh are listed in this panel at the bottom-right of the editor. To remove a bone, select it from the list and select Remove (-) at the bottom right of the list. Select Remove (-) at the bottom right of the panel. To add a bone as an influencer to the currently selected Sprite Mesh, select the bone in the editor window and select Add (+) to add it to the list. To do the reverse and edit which Sprites are being influenced by a bone, select the bone you want to examine, and then go to the Sprite Influence tool. Similarly to the Bone Influence tool, there is an Add (+) and Remove (-) button. Test your rigged actor by posing it with the Preview Pose tool. Move and rotate the different bones to check that the geometry Mesh deforms properly. Previewing poses can also be done while the following tools are selected: the Weight Brush, Weight Slider, Bone Influence, Auto Weights, and Visibility tools. To restore a rigged actor to its original pose, select Reset Pose from the Pose toolbar. Edit the default pose by moving the actor bones and joints with the Edit Bone tool. After you have completed rigging your actor, you are now prepared to animate the actor."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/Examples.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/Examples.html",
    "title": "Importing Samples | ModularUIPack",
    "summary": "Importing Samples Sample scenes are available for import from the Package Manager under Samples, which demonstrate the different ways you can use the features in the 2D Animation package to achieve a variety of effects and outcomes. Select Import to download and install the Sample projects and Assets. Each Sample project contains specific examples with ready-made Assets, demonstrating how to use the 2D Animation package's features and the results and outcomes you can achieve with them. When the import is complete, Unity installs the Sample projects to Assets/Samples/2D Animation/[X.Y.Z]/Samples; where [X.Y.Z] is the version of the installed 2D Animation package. The following is the list of Sample projects and their respective documentation. Note that some of these Samples require and refer to the PSD Importer package: Simple - a single Sprite rig with simple bone hierarchy and rigging. Single Skinned Sprite - a more advance single Sprite actor. Character - Imported with the PSD Importer Sprite Swap - - Contains examples of the different ways to use Sprite Swap. Animated Swap Part Swap Full Skin Swap DLC Swap Skeleton Sharing Runtime Swap"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/PreparingArtwork.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/PreparingArtwork.html",
    "title": "Preparing and importing artwork | ModularUIPack",
    "summary": "Preparing and importing artwork Use the 2D Animation package together with the PSD Importer package to import your artwork for animation. The PSD Importer imports the graphic data from each Photoshop Layer as Sprites, and provides various importer options that prepare your artwork for animation. The PSD Importer only supports the Adobe Photoshop .psb file format, thus it is recommended to create your artwork in Adobe Photoshop or any other graphic software which supports the Adobe .psb file format. When preparing your character or prop artwork, it is recommended to prepare them in a neutral or idle position. Depending on the complexity and use of your animation, it is also recommended to separate the individual parts of the artwork onto different Photoshop Layers (see Example 1 below). The artwork file must be saved in the Adobe Photoshop .psb file format, which is functionally identical to the more common Adobe .psd format, but supports much larger images than the .psd format (up to 300,000 pixels in any dimension). To convert artwork from the .psd format to the .psb format, open and save the .psd files as .psb files in Adobe Photoshop. Example 1: Layered character artwork in Adobe Photoshop. PSD Importer features The PSD Importer has many features and options that prepare the actor for animation. For example, enable the Mosaic option to have Unity automatically generate a Sprite sheet from the imported layers; or enable Character Rig to have Unity generate a Prefab with Sprites generated from the imported source file, with the Sprites arranged into their original positions based on the source file. Refer the PSD Importer's documentation for more information about the different options and their functions. Example 2: The imported actor's layers arranged into a Sprite sheet, and reassembled into their original positions in the generated Prefab. Workflow between 2D Animation and PSD Importer There are several ways to animate with the 2D Animation package, depending on how your artwork is prepared and how your animation will be used in your Unity Project. The 2D Animation package contains sample projects with examples of the different ways to use the package. You can import these using the Package Manager. Refer to the Importing Samples documentation for more information. The following is a general workflow for importing a multilayered and multipart character into Unity for 2D animation with the PSD Importer. For a more detailed specific example, see Rigging a character imported with the PSD Importer: Save your artwork as a .psb file in Adobe Photoshop by selecting the Large Document Format under the Save As menu, or convert an existing .psd file into the .psb format. Import the .psb file into Unity with the PSD Importer, which generates a Prefab containing Sprites based on the layers of the source file. This Prefab is referred to as an 'actor' when used with the 2D Animation package. Select the actor and go to its Inspector window to select its Importer settings. Refer to the PSD Importer documentation and the imported Samples and respective documentation to determine which settings are a best fit for your Project. For example, the following are the recommended import settings for a character with multiple limbs and layers in its source file: Set Texture Type to Sprite(2D and UI). Set Sprite Mode to Multiple. Select the Mosaic check box. Select the Character Rig check box. Select the Use Layer Grouping check box to preserve any Layer Groups in the original .psb source file. Select Apply to apply the above settings. Once the artwork is imported, a Prefab is generated from the graphic data of each layer as individual Sprites, which may be arranged in their original position or as a Sprite sheet depending on the selected importer options. The generated Prefab is referred to as an 'actor' when used with the 2D Animation package. The generated actor is now ready for rigging. Drag the actor Prefab into the Scene view to begin animating. Unity automatically adds the Sprite Skin component to the actor which deforms the Sprite using GameObject Transforms to represent the bones that are rigged and weighted to the Sprite in the Skinning Editor."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Asset.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Asset.html",
    "title": "Sprite Library Asset in Unity | ModularUIPack",
    "summary": "Sprite Library Asset in Unity The Sprite Library Asset is an Unity asset that contains the Sprites that you want to use for Sprite Swapping. This page explains what are the Sprite Library Asset properties and how to create a Sprite Library Asset or a Sprite Library Asset variant. A Sprite Library Asset groups the Sprites it contains into Categories, and you can give these Sprites unique names called Labels to differentiate them. You can edit the Sprite Library Asset's content in the Sprite Library Editor window (refer to its documentation for more details). In the Sprite Swap workflow, after creating a Sprite Library Asset or several assets, you can select the Sprite Library Asset you want to use with the Sprite Library component, and the Sprite Resolver component will pull information from the asset selected. Create a Sprite Library Asset To create a Sprite Library Asset, go to Assets > Create > 2D > Sprite Library Asset. Sprite Library Asset properties Select the Sprite Library Asset and go to its Inspector window to view the following properties. Property Description Open in Sprite Library Editor Select this to open the Sprite Library Editor window to edit the content of this asset. Main Library Leave this property empty to have this Sprite Library Asset refer to its own Categories and Labels. Assign a different Sprite Library Asset to have it become the Main Library of the selected Sprite Library Asset, which will now refer to the second asset's Categories and Labels instead. Doing so also converts the selected Sprite Library Asset into a Variant asset of the Sprite Library Asset set as the Main Library. Revert Select this to reset property changes back to the last saved state. Selecting this removes all unsaved changes. Apply Select this to save the current property settings. Create a Sprite Library Asset Variant A Sprite Library Asset Variant inherits Categories and Labels from a selected Sprite Library Asset, instead of referring to its own. There are two ways to create a Variant. Create through the menu After creating a Sprite Library Asset, select it in the Project window, then go to Assets > Create > 2D > Sprite Library Asset Variant to create a Variant asset that references it. Convert a Sprite Library Asset into a Variant You can convert an existing Sprite Library Asset into a Variant of another by setting another Sprite Library Asset as its Main Library. Additional resources Sprite Library Editor Setting up for Sprite Swap Overrides to the Main Library"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Drag.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Drag.html",
    "title": "Drag sprites to create or edit Categories and Labels | ModularUIPack",
    "summary": "Drag sprites to create or edit Categories and Labels This page shows the different ways you can create or edit Categories and Labels in a Sprite Library Asset by dragging sprites directly into the Sprite Library Editor window. You can automatically create new Categories and Labels by dragging sprites or PSD Importer supported file types directly into the Sprite Library Editor window. Prerequisites PSD Importer package is required for the Sprite Library Editor to recognize imported .psb files. Create a new Category In the open Sprite Library Editor window, drag a sprite directly onto the Categories column to create a new Category. You can't create Labels without selecting an existing Category first. Create a new Label for each sprite Select a Category, then drag a or a selection of sprites into an empty space in the Labels column. Dragging the head sprite into the Labels column creates a new Label named head in the selected Category. Unity creates a new Label for each sprite in the selection and gives it the same name as the sprite it references. Note: If an existing Label with the same name already exists at the destination, then the editor appends _X to the new Label's name, where X is the next number in sequence, starting from zero. Dragging in a selection of sprites all named head results in additional Labels created with the _X suffix for each sprite. Replace a Label's sprite reference Drag a sprite onto an existing Label. The editor replaces the sprite reference to the new sprite. The Label's name remains unchanged. Create a single Category with multiple Labels Select multiple sprites from the Project window. Drag the selected sprites into the Categories column to create a new Category. The Category is automatically named after the first sprite in the selection. Note: If an existing Category with the same name already exists at the destination, then the editor appends _X to the new Category's name, where X is the next number in sequence, starting from zero. Create Categories for each Layer and Layer Group After you prepare the .psb of your character, import it into Unity with the PSD Importer package. Note: The following requires the PSD Importer package to be installed. Enable Use Layer Group in the imported .psb's properties. Drag the imported .psb file into the Sprite Library Editor's Categories column. The editor creates a Category for each Layer and Layer Group, and creates Labels for each sprite. Sprites which belonged to the same Layer Group are automatically grouped into the same Category. Replace each Labels' sprite references The following steps how to replace each Label's sprite reference with sprites from a different imported .psb. Note: This method only works if the imported .psb has Layers and Layer Groups with the same exact names as the original .psb used to create the Categories and Labels. This method is useful when you have multiple characters with the same Layers and Layer Groups and want to replace their respective sprites without creating a new Sprite Library Asset. Enable Use Layer Groups in the replacement .psb file's properties. Drag the replacement .psb onto an empty space in the Categories column and release. All sprite references of the same name and in the same Categories are automatically replaced with their respective counterparts from the replacement .psb. Additional resources PSD Importer package Preparing and importing artwork"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Editor-UI.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Editor-UI.html",
    "title": "Sprite Library Editor reference | ModularUIPack",
    "summary": "Sprite Library Editor reference The Sprite Library Editor window displays the content of the selected Sprite Library Asset. Use the editor to view, create, or edit the Categories and the Labels in the selected Sprite Library Asset. A: The name of the Sprite Library Asset opened in this editor. B: This displays this asset's Main Library if it's a Variant asset. Refer to Variant asset-specific properties for more information. C: The saving options for changes made in this editor. D: Enter a text string here to filter the Categories or Labels by name. Select the magnifying glass icon to the left of the filter to bring up its context menu. Saving options Property Description Revert Select this to discard all unsaved changes and to return to the last saved state of the asset. Save Select this to keep all unsaved changes and include them in the saved state of the asset. Auto Save Enable this option to have the editor automatically save when you make any changes to the asset. Main Library Property Description Assign a Sprite Library Asset to this to set it as the opened Sprite Library Asset's Main Library, and it will inherit the Main Library's Categories and Labels. Doing so also converts the opened Sprite Library Asset into a Sprite Library Asset Variant. Filter context menu Property Description Category and Label Search for the entered search string in both Category and Label names. Category Search for the entered search string in only Category names. Label Search for the entered search string in only Label names. Categories and Labels columns Property Description Categories Displays all Categories the opened Sprite Library Asset contains. Select Add (+) at the top left of this column to add a new empty Category to this asset. Local foldout group Groups all Categories created in this Sprite Library Asset. Inherited foldout group Groups all Categories inherited from this Sprite Library Asset Variant's Main Library. Note: This is only available if the opened Sprite Library Asset is a Variant asset. Labels Displays all Labels a selected Category contains, when you select one from the Categories column. Select Add (+) at the top left of this column to add a new empty Label to this asset. (Sprite) object field Displays the sprite that this Label refers to. This is blank by default. Select a sprite by opening the object picker, or drag a sprite directly onto this field. Variant asset-specific properties The following properties and UI features are visible only when you open a Sprite Library Variant Asset in the Sprite Library Editor. E: The breadcrumb trail showing the names of the opened Variant asset and Library assets it inherits from. F: The Main Library the Variant asset inherits from. G: The Inherited group type that displays all Categories inherited from the Main Library. H: A vertical white line which shows that an override is present. Label context menu Right-click over a Label in the Labels column to open this context menu. Property Description Create a new Label Create a new local Label in the selected Category. Rename Label Rename the selected Label. This is unavailable if it's an inherited Label. Delete Selected Labels Deletes all selected Labels. This is unavailable if they're inherited Labels. Revert Selected Overrides Removes all overrides made in the selected Labels, and returns them back to their inherited state. Removes all overrides in the selected Category. Show Label Location This is only available if the selected Label has a set sprite reference. Select this to open the sprite that the Label references. Additional resources Sprite Library Editor fundamentals Setting up for Sprite Swap"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Editor.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Editor.html",
    "title": "Sprite Library Editor fundamentals | ModularUIPack",
    "summary": "Sprite Library Editor fundamentals The Sprite Library Editor window is where you edit the content of a selected Sprite Library Asset. Select a Sprite Library Asset and then select Open in Sprite Library Editor in its Inspector window to open this editor. You can also open the Sprite Library Editor window directly by going to Window > 2D > Sprite Library Editor. A Sprite Library Asset groups the sprites it contains into Categories and Labels, and you edit their contents in the Sprite Library Editor window. This page shows you the basic features of the Sprite Library Editor and how to begin editing a Sprite Library Asset. Categories Creating a new Category in the Categories column. Use Categories to contain and group Labels together for a common purpose to make it easier to organize your sprites. For example, you can create a Category named 'Hat' for Labels which refer to sprites of hats for your character. To create a new Category, select Add (+) in the Categories column, or drag sprites directly into the Sprite Library Editor window. Give each Category a unique name to ensure that the editor correctly identifies each individual Category. Local and inherited Categories Inherited and Local foldout groups in the Categories column. There are two types of Categories: Local: A Local Category is a Category created in the open Sprite Library Asset in the editor window. Inherited: An Inherited Category is a Category retrieved from the Sprite Library Asset set as the Main Library. Note: You can't rename inherited Categories, to ensure that the Category names in the Sprite Library Asset Variant matches the originals in the Main Library. This ensures that the Variant asset can inherit all Categories and Labels from the Main Library. To make changes to an inherited Category's content, you can create overrides to an inherited Category or Label such as adding new Labels or changing the Sprite an inherited Label references instead. Labels A Category contains multiple Labels, with each Label referencing a single sprite in the project. When you are setting up for Sprite Swap, Labels with similar functions are commonly placed in the same Category. For example, a Category named 'Hats' may contain Labels which each reference a different hat sprite. To create a new Label, select Add (+) in the Labels column, or drag Sprite directly into the Sprite Library Editor window. Create a new Label by selecting Add (+). Note: If a Label is inherited from a Main Library and exists in an inherited Category, you can't rename the inherited Label to ensure that it matches the original's name in the Main Library. This ensures that the Variant asset can inherit all Categories and Labels from the Main Library. You can create new Labels or edit the sprite reference of an inherited Label as overrides to an inherited Category or Label. Refer to Overrides in the Main Library for more information. Useful editor features The following editor features make it more convenient to edit the contents of a Sprite Library Asset. For more information about all available editor features, refer to the Sprite Library Editor reference. Navigate between different assets When you open a Sprite Library Asset Variant in the Sprite Library Editor, you can use the Sprite Library Editor breadcrumb trail to navigate between different Sprite Library Assets that the opened asset inherits from. Select an asset in the breadcrumb trail to select it in the Project window. Toggle between list or grid view You can view the sprite content of Labels in a list or in a grid. To toggle between these two views, select the respective icon at the lower right of the editor window, and use the slider to adjust the size of the visual preview. Filter Categories and Labels by name Filter the Categories and Labels by entering a text string into the filter bar in the upper right of the window. You can adjust the parameters of the filter by using the filter context menu. Additional resources Sprite Library Editor reference Drag sprites to create or edit Categories and Labels Overrides to the Main Library"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Main-Library.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Main-Library.html",
    "title": "Overrides to the Main Library | ModularUIPack",
    "summary": "Overrides to the Main Library When you create a Sprite Library Asset, you have the option of converting it into a Sprite Library Asset Variant, or creating a Variant asset of the selected Sprite Library Asset. A Variant asset inherits all the Categories and Labels from the Sprite Library Asset as its Main Library. You can't directly change the Categories and Labels inherited from the Main Library, but you can add to the inherited content by adding new Categories and Labels in the form of overrides. Inherited Categories and Labels limitations Assigning another existing Sprite Library Asset to the Main Library property of the current Sprite Library Asset allows the current Asset to access all Categories and Labels contained in the assigned Sprite Library Asset. Inherited Categories are visible in the Sprite Library Editor window in the Inherited foldout group, while the Local foldout group contains all Categories that exist solely in the current asset. You can't rename or remove the Labels of inherited Categories, but you can add new Labels to an inherited Category as an override. Create overrides An override is any change you make to the contents of an inherited Category. While you can't rename or remove inherited Labels, you can do the following in an inherited Category: Create a new Label. Change the sprite that the Label references. Revert overrides in selected Labels or for all inherited Categories and Labels. The Sprite Library Editor window displays a vertical white line next to inherited Categories and inherited Labels when an override is present. Change the sprite reference You can change a Label's sprite reference by selecting a different sprite from the object picker next to the Sprite object field. You can also change the sprite reference by dragging the desired sprite directly onto to a Label. To revert sprite reference changes made to selected Labels, right-click the Label(s) and select Revert Selected Overrides from the context menu to restore all sprite references back to their original inherited state from the Main Library. Revert changes to Labels in inherited Categories by selecting Revert Selected Overrides. To revert all overrides in the selected inherited Category, select Revert All Overrides from the context menu. Caution: Overrides aren't included in the save state of the Sprite Library Editor, and reverting overrides will remove all overrides regardless of the previous save state. To undo the last action, press Ctrl+Z (macOS: Cmd+Z)."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Resolver.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-Resolver.html",
    "title": "Sprite Resolver component in Unity | ModularUIPack",
    "summary": "Sprite Resolver component in Unity The Sprite Resolver component pulls information from the Sprite Library Asset assigned to the Sprite Library component at the root of the actor Prefab, and displays the Sprites available for selection. This component is part of the Sprite Swap setup and workflow, where attaching the Sprite Resolver component to a GameObject that's part of an actor Prefab allows you to change the Sprite rendered by that GameObject's Sprite Renderer component. Property settings The component contains two properties - Category and Label - and the Visual variant selector interface which displays thumbnails of the Sprites within the Sprite Library Asset. Inspector window properties of Sprite Resolver component. Property Function Category Select the Category that contains the Sprite you want to use for this GameObject. Label Select the Label name of the Sprite you want to use for this GameObject. Visual variant selector Select the thumbnail of the Sprite you want to use. This selector displays all Sprites contained in the selected Category above. Additional resources Setting up for Sprite Swap Sprite Library Asset in Unity Sprite Library component in Unity"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-component.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SL-component.html",
    "title": "Sprite Library component in Unity | ModularUIPack",
    "summary": "Sprite Library component in Unity The Sprite Library component defines which Sprite Library Asset a GameObject refers to at runtime. When you attach this component to a GameObject, the Sprite Resolver component attached to the same GameObject or child GameObject will refer to the Sprite Library Asset set by the Sprite Library component. This allows you to change the Sprite referenced by a Sprite Renderer with the Sprite Resolver component. Property settings In the Sprite Library component’s Inspector window, assign the desired Sprite Library Asset to the Sprite Library Asset property. After assigning a Sprite Library Asset, the Inspector window shows a visual preview of the content in the selected Sprite Library Asset. Component functions Within the Sprite Library component Inspector window, you can commit the same overrides to the assigned Sprite Library Asset as you would to the Main Library in the Sprite Library Editor window. You add or remove new Categories, add or remove new Labels in a Category, and change the sprite a Label refers to. Modified Sprites Example: A modified sprite retrieved from the Sprite Library Asset. The + icon appears at the upper left of a Label entry when: You add a new Label to a Category from the retrieved Sprite Library Asset. You change the sprite reference of a Label from the original sprite reference retrieved from the Sprite Library Asset. Category and Label name conflict behavior The following are the ways Unity resolves any name conflicts that may occur when you replace the assigned Sprite Library Asset in the Sprite Library Asset property with another Sprite Library Asset. If the same Category name already exists in the current set Sprite Library Asset, then Unity merges the Labels from Categories with the same name in both Sprite Library Assets into a single Category with that name. If there are Labels with the same name within the same Category when you assign the Sprite Library Asset, then Unity merges the Labels into a single Label. The merged Label uses the sprite reference from the replacement Sprite Library Asset instead. Note: When you remove a Sprite Library Asset from the Sprite Library Asset property, overrides aren't saved to that Sprite Library Asset. All changes remain in the Sprite Library component. Additional resources Swapping Sprite Library Assets Overrides to the Main Library"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SLASwap.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SLASwap.html",
    "title": "Swapping Sprite Library Assets | ModularUIPack",
    "summary": "Swapping Sprite Library Assets If swapping each Sprite of an actor individually takes too much effort, you can instead swap the entire Sprite Library Asset to another one containing alternate Sprites. The following example shows how to switch from a Sprite Library Asset of color Sprites to another one containing identical Sprites but in grayscale: Left: An actor with the color Sprite Library Asset. Right: The same actor with the grayscale Sprite Library Asset. Create visual variants of your actor's artwork. In this example, the original artwork is in color and a grayscale variant of it is created as an alternate Sprite set. Both should be saved to separate .psb files. Import both .psb files into the Unity Editor. Both become separate Model Prefabs in the Asset window. Create a Sprite Library Asset and assign each Sprite of the actor to a unique Category. For convenience, name each Category and Label after the respective body part of the actor. You can also drag and drop your Sprites into the empty space in the Categories tab to populate them automatically. Save the changes once complete. The Category and Label names for the parts of the color actor. Repeat step 3 for the grayscale actor. Use the same Category and Label names for the corresponding gray Sprites. Remember that you can drag and drop your Sprites to empty space in the Categories and their corresponding Labels should now have a new Sprite reference. The grayscale Sprites with the same corresponding Category and Label names. Drag the color Model Prefab into the Scene view, and go to the root GameObject. Add a Sprite Library component to the root GameObject and assign the color Sprite Library Asset created in step 3 to the Sprite Library Asset property. For every Sprite Renderer in the Instantiated Prefab, add a Sprite Resolver component and ensure that the Sprite Resolver component has the same Sprite selected as the Sprite Renderer. With the Inspector window of the color Prefab root GameObject remaining open, go to the Asset window and assign the Sprite Library Asset created in step 4 to the Sprite Library Asset property of the Sprite Library component. The Sprites of the color Prefab should have switched to their grayscale counterparts of the grayscale Sprite Library Asset. The Sprite Library Asset property is set to the grayscale version of the original Sprite Library Asset and the actor's Sprites have switched accordingly."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SLAsset.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SLAsset.html",
    "title": "Sprite Library Asset | ModularUIPack",
    "summary": "Sprite Library Asset A Sprite Library Asset groups multiple Sprites into Categories and unique Label names. It is used in combination with the Sprite Library component and Sprite Resolver component to swap Sprite graphics at runtime. To create the Asset, go to Assets > Create > 2D > Sprite Library Asset. To create the Asset variant that inherits Categories and Labels from a selected Sprite Library Asset, first select the main asset in the Project window, then go to Assets > Create > 2D > Sprite Library Asset Variant. Sprite Library Asset Inspector window Once the Sprite Library Asset is created, select the Asset and go to its Inspector window. Sprite Library Asset Inspector properties Property Function Open in Sprite Library Editor Select this button to open a Sprite Library Editor window where the content of the Asset can be edited. Main Library Assign another Sprite Library Asset here to make it the main reference for the current Sprite Library Asset. The current Sprite Library Asset becomes a variant of the Main Library, which allows it to access the Main Library's Categories and Entries. Revert This resets changes in the Inspector back to the last saved state. Unsaved changes are removed. Apply This saves the current value of Main Library in the Sprite Library Asset. Sprite Library Editor window Sprite Library Editor window allows editing the content of the Sprite Library Asset. It can be accessed by double-clicking on the selected Sprite Library Asset in Project window, selecting the Open in Sprite Library Editor button in the Inspector, or by selecting it from menu Window > 2D > Sprite Library Editor. Categories A Category contains selected Labels that have been grouped together for a common purpose. Make sure that each Category has a unique name. To create a new Category, select the '+' button, or drag and drop Sprites directly into the Sprite Library Editor window. Categories tab with the '+' button The Categories Tab can contain Local and Inherited Categories: Local Categories are Categories created in the Sprite Library Asset currently being edited. Inherited Categories are retrieved from the Main Library. Inherited categories cannot be renamed to ensure that the Main Library and variant Sprite Library Assets contain Categories with exactly the same name. Any inherited Category can be overridden by adding new Labels or changing the Sprite reference in a inherited Label. Local & Inherited foldout groups in the Categories tab. Labels Each Category can contain many Labels and each Label can reference a single Sprite in the project. To create a new Label, select the '+' button, or drag and drop Sprite directly into the Sprite Library Editor window. Labels tab with the '+' button If the Label exist in the Inherited Category, it cannot be renamed to ensure that the Main Library and Assets that reference that Sprite Library contain the same Categories and Labels. To revert changes in the inherited Category, select the Labels you wish to revert and right-click to open the context menu and select Revert Selected Overrides or Revert All Overrides if you want to make the entire Category the same as it is in the Main Library. Changes to Labels in inherited Categories can be reverted in the Labels tab. Sprite Library Editor window allows Labels to be viewed in a list or in a grid. To toggle between these two, use the buttons at the bottom of the window and use the slider to adjust the size of the Label elements. Search for Categories and Labels Categories and Label tabs can be filtered by the search phrase in the search bar in the top-right side of the window. Drag and drop You can quickly populate Categories and Labels by dragging Sprites or PSD Importer supported file types into the Sprite Library Editor window. Create a new Category with one Label for each Sprite Drag and drop Sprites to an empty space in the Categories tab to create a new Category with one Label for each Sprite in the selection. The Category is be named after the first Sprite in the selection and Labels are named after the Sprite's name. If there are any conflicting name, it will be appended with _X suffix for example ConflictingSpriteName_0. Example: Drag and drop multiple Sprites to an empty space in Categories Tab. Result: One Category with Labels for each Sprite in the Selection Create a new Category for each Layer Group with one Label for each Sprite in a Layer To create Categories for each Layer Group with Labels that match Layers in that group simply drag and drop PSD Importer supported file e.g. .psd or .psb. Make sure that Use Layer Group is checked. Result: One Category for each Layer Group and Labels for each Layer. To replace each Label's Sprite reference with Sprites from a different file, simply drag and drop it to an empty space in the Categories Tab. Result: Each Label's Sprite reference is replaced. Replace each Label's Sprite in the Category Drag and drop Sprites to an existing Category. For each Sprite in the selection, a new Label with the same name will be created. If a Label with the same name already exists, its Sprite reference will be replaced with the first Sprite from the selection. Example: Category with several Labels. Result: Labels are replaced after drag and drop. Create a new Label for each Sprite in the Category Drag and drop Sprites to an empty space in the Labels tab. For each Sprite in the selection, a new Label with the same name will be created. If a Label with the same name already exists the _X suffix will be added to the newest Label. Example: Category with before dragging and dropping Sprites. Result: Additional Cateories created with suffix _0, _1 etc. Replace a Label's Sprite Drag and drop a Sprite to an existing Label. Example: Drag and drop a Sprite on a Label. Result: Label's Sprite reference is replaced with the first Sprite in the selection. Main Library Assigning another existing Sprite Library Asset to the Main Library property of the current Sprite Library Asset allows the current Asset to access all Categories and Labels contained in the assigned Sprite Library Asset. Categories retrieved from the Main Library Asset are grouped under the Inherited foldout group, and all new Categories that exist only in the current Asset are grouped under the Local foldout group. The Labels of the Categories retrieved from the Main Library property can't be renamed or removed. However, you can add new Labels to a Category which was retrieved from the Sprite Library Asset assigned to the Main Library property. You can also edit a Label to change the Sprite that it refers to by selecting the object picker and choosing a different Sprite. It's also possible to drag and drop a Sprite to a Label to change its Sprite. To revert changes to a Sprite, select the Label, right-click and select Revert Selected Overrides to restore it to the original Sprite that was retrieved from the Main Library. Use Sprite Library Editor breadcrumbs to navigate between between different Sprite Library Assets that the edited Asset inherits from. After clicking on an Asset in the breadcrums it will be selected in the Project window. Sprite Library component The Sprite Library component defines which Sprite Library Asset a GameObject refers to at runtime. Attach this component to a GameObject or any parent GameObject of a Sprite Resolver component to allow the Sprite Resolver to change the Sprite that is being used by a Sprite Renderer. In the Sprite Library component’s inspector, you can assign the desired Sprite Library Asset to use. By assigning a Sprite Library Asset, the component’s Inspector shows a preview of the content in the Sprite Library Asset Similar to the Sprite Library Editor window, you can add new Categories, change the Sprite a Label refers to, and add a new Sprite Label into the Category in Sprite Library component's Inspector window. Modified Sprites Example: A Sprite retrieved from the Main Library that has been modified. The + icon appears on a Sprite when: A new Label is added to the Sprite Library Asset in a Category retrieved from the Sprite Library Asset property. A Label retrieved from the Sprite Library Asset property has its Sprite reference changed. When assigning a Sprite Library Asset to the Sprite Library Asset property, if the same Category name already exists in the current Sprite Library Asset, then the Labels from both Categories are merged into a single Category. Similarly, any Labels in the same Category that have the same names are merged. The Label uses the Sprite that was referred to in the current Sprite Library Asset instead of the one from the Sprite Library Asset if they are merged. When a Sprite Library Asset is removed from the Sprite Library Asset property, any changes that were made to the current Sprite Library Asset remain. Sprite Resolver component The Sprite Resolver component is attached to each GameObject in the Prefab. The component pulls information from the Sprite Library Asset (assigned to the Sprite Library component at the root of the Prefab). The component contains two properties - Category and Label - and a visual Variant Selector that displays thumbnails of the Sprites contained in the Sprite Library Asset. Inspector view of Sprite Resolver component. Property Function Category Select which Category you want to use a Sprite from for this GameObject. Label Select the Label of the Sprite you want to use for this GameObject. (Visual variant selector) Displays selectable thumbnails of the Sprites contained in this Category. Select the Sprite you want the Sprite Renderer to render by selecting from the Category and Label dropdown menus, or select the Sprite directly in the visual variant selector."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SkinEdToolsShortcuts.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SkinEdToolsShortcuts.html",
    "title": "Editor tools and shortcuts | ModularUIPack",
    "summary": "Editor tools and shortcuts Labelled 2D Animation Skinning Editor tools The Skinning Editor tools are split-up into the following groups: A. Editor toolbar B. Pose tools C. Bone tools D. Geometry tools E. Weight tools F. Rig tools Editor toolbar This toolbar lets you toggle between Character and Sprite Sheet modes. It also contains the Visibility toggle. Tool Default Shortcut Function Toggle View Mode Shift + 2 Switch between the Character and Sprite Sheet view modes. Visibility Shift + P Toggles the Sprite visibility panel, which controls the visibility of the Sprite meshes and bones in the editor window. Toggle Tool Text Shift + ` Show or hide text on tool buttons. Pose tools This is a toolbar that contains the options to Preview Pose and restore the default pose with Restore Pose. Tool Default Shortcut Function Preview Pose Shift + Q Enable this mode when moving and rotating an actor's model and joints to preview its poses after rigging. Any changes made in this mode are not saved. Reset Pose Shift + 1 Restores an actor's bones and joints to their original positions. Set Pivot Shift + T Enable this tool to edit the pivot point of the actor with the Pivot Panel options. Pivot Panel The Pivot Panel appears when you enable the Set Pivot tool. Property Function Pivot Select the desired location of the Pivot from the dropdown menu. Position Enter a value from 0 to 1 to adjust the X and Y position of the pivot. This is a normalized value from 0 to 1, where (0,0) is lower left of workspace and (1,1) is the upper right of the workspace. Bone tools Use the Bone Tools to create and edit the bones of your character and their hierarchy. Tool Default Shortcut Function Edit Bone Shift + W Reposition the bones into a new position. These changes are automatically saved as the default bind pose for the Restore Bind Pose tool. Sprite geometry does not deform with the bones in this mode, even if the bones are attached as influencers. Create Bone Shift + E Click and drag to create bones. Split Bone Shift + R Splits the selected bone. Bone panel The Bone panel appears at the lower right of the editor window when you select a bone with one of the Bone Tools active. Property Function Name Displays the name of the selected bone. Enter a new name here to rename the selected bone. Position The world position of the bone. Rotation The world rotation value of the bone. Bone Color The color of the bone. Depth Displays the Z-value of the selected bone that determines the render order of the vertices under its influence (refer to the examples below). Enter a new value (which can be negative) to change the render order of the affected vertices. Refer to the bone tab and hierarchy tree documentation for more information on how the Depth value affects the way the Sprite mesh is rendered and deformed. Setting the Depth value The following examples show how the Depth value of a selected bone affects the render order of the mesh vertices it influences. In this example, the selected bone (orange) and has an intitial Depth value of 1. Example 1: With the Depth value of 1, the vertices that are influenced by it (the blue are of the Sprite and mesh) appear in front of the other vertices, which have a lower Depth value. However, by setting the bone's Depth to -1 instead, When the selected bone’s Depth is set to -1 instead, the vertices that are influenced by it appears behind of the other vertices. Geometry tools Use the Geometry tools to generate and edit the meshes of the different Sprites that make up your character. Tool Default Shortcut Function Auto Geometry Shift + A Select to auto-generate meshes for Sprites. When this tool is selected, the Geometry panel becomes available at the lower right of the Skinning Editor. Edit Geometry Shift + S Edit generated meshes by repositioning vertices. Create Vertex Shift + D Create new vertices to create geometry. Create Edge Shift + G Create new edges to create geometry. Split Edge Shift + H Split an existing edge into two. Geometry panel The Geometry panel is only visible when Auto Geometry is enabled. It contains the available settings that affect how the geometry of selected Sprites are generated. Visible only when Auto Geometry is enabled. Property Function Outline Detail Use the slider to adjust the accuracy of the generated geometry’s outline to the outline of the Sprite. Smaller values create simpler outlines, while larger values create denser outlines that fit to the Sprite’s outline more accurately. Alpha Tolerance Use the slider to set the alpha value threshold to consider when generating geometry. Pixels with an alpha value lower than the set tolerance value are considered transparent during outline detection when the geometry is generated. Subdivide Use the slider to adjust the tessellation of the Sprite mesh by adding or decreasing the number of vertices inside the generated mesh. Weights Enable to automatically assign weights between the generated geometry mesh and nearby bones. Generate For Selected/Generate For All Visible Select this button to generate a geometry mesh for selected Sprites based on the property settings above. To generate geometry for all Sprites in the Skinning Editor, do not have any Sprite selected when you select this button. Weight tools Vertices in the generated geometry meshes are influenced by different bones which affect how the meshes deform during animation. The percentage of influences from different bones for each vertex is contained in the weight information assigned to that vertex, which you can control with the following Weight tools. To add weights to your Sprites, you can first ensure that there are bones overlaying the Sprites and geometry has been generated. Tool Default Shortcut Function Auto Weights Shift + Z Auto-generate weights between the geometry and bones. When this tool is selected, the Weights panel becomes available at the lower right of the Skinning Editor that displays the available settings and the option to generate weights for. Weight Slider Shift + X Use the slider to adjust weights. Weight Brush Shift + N Adjust weights by painting with a brush. Bone Influence Shift + V Select which bones influence a Sprite. Sprite Influence Shift + M Select which Sprites are being influenced by a bone. Weights panel The Weights panel appears at the lower right of the Sprite Editor window when Auto Weights under the Weight tools is selected. Property Function Associate Bones Select this box to automatically associate bones to the Sprite geometry they overlay. Generate/Generate All Select this button to generate weights for the currently selected Sprite, or for all Sprites if no Sprite is selected. This does not do anything if geometry has not been generated for the Sprites, or if no bones are associated with the Sprite geometry. Normalize Normalizes the weights of the selected Sprite, or all Sprites if no specific Sprite is selected. Clear Clear the weights of the selected Sprite, or of all Sprites if no specific Sprite is selected. Weight Slider Property Function Mode The current behavior of the Weight Slider tool. Add and Subtract Select this mode to have all sliders influence all vertices around the selected bone (currently displayed in the Bone property). Grow and Shrink Select this mode to have all sliders influence only vertices that are already affected by the selected bone (which is selected in the Bone property). Smooth Averages the weights of all vertices with their neighbors to create an even distribution of weight across all vertices. Bone (unavailable if Mode > Smooth) Displays the currently selected bone. Use the drop-down menu to select a different bone, or select another bone. Normalize Select this to ensure the total normalized weight of all vertices of a selected Sprite mesh is equal to one. Amount Amount of weight applied on selected vertices. Vertex Weight Adjust the bone weights of selected vertices. Weight Brush Property Function Mode The current behavior mode of the weights tool. Add and Subtract Select this mode to have all sliders influence all vertices around the selected bone. Grow and Shrink Select this mode to have all sliders influence only vertices that are already affected by the selected bone. Smooth Averages the weights of vertices with their neighbors to create a smoother distribution of weights. Bone The bone that the Brush is painting influence for. Select a different bone via the drop-down menu. Normalize Enable to ensure the normalized weight of painted vertices will equal to 1. Size Size of the weight brush cursor. Hardness Amount of weight applied by the brush per brushstroke. Higher values increase the weight per brushstroke, up to the maximum of 100 where the full weight is applied at once. Step Number of increments needed to apply the full weight of brush. Bone Influences panel The Bone Influences panel displays a list of bones that are currently influencing the selected Sprite mesh. When the Skinning Editor is set to Character mode, the Bone Influences panel allows you to add a bone to the list which includes its influence in the deformation of the selected Sprite’s mesh, or remove a bone from the list which removes its influence instead. To add a bone to the list, select the bone in the Skinning Editor window and then select Add (+) at the lower right of the panel. To remove a bone from the list, select the bone in the list or in the editor window and then select Remove (-). Rearranging bone order You can rearrange the bone order in the Bone Influences panel by selecting and the dragging the respective bone entries up or down the list. The order of the bones in the Bone Influences panel determines the order of the bones on the Sprite Skin component. This is especially important when replacing the Sprite for deformation in the Sprite Renderer, such as when using Sprite Swap, as you can ensure the bone order remains the same between the Sprites and that the correct Transform drives the correct deformation. Sprite Influences panel The Sprite Influences panel displays a list of Sprite meshes that are currently being influenced by the selected bone. When the Skinning Editor is set to Character mode, the Sprite Influences panel allows you to remove an unwanted Sprite mesh from the list so that it’s not influenced by the selected bone. It’s also possible to add a selected Sprite to the list which will include the selected bone’s influence in its deformation. To add a Sprite mesh to the list, select the bone in the Skinning Editor window as well as the Sprite you want to add, and then select Add (+) at the lower right of the panel. To remove a Sprite from the list, select it in the list or in the editor window and then select Remove (-). Rig tools The Rig tools contain the option to Copy and Paste bones from and into a skeleton rig. Tool Default Shortcut Function Copy Ctrl + C Copies the bone and mesh data from the current selection. Paste Ctrl + V Pastes the copied bone and mesh data to the current selection. Paste Shift + B Use this shortcut to show additional pasting options. Copy and Paste behavior Once you have rigged the skeleton and bone weights of your actor, you can reuse the same rigged skeleton with other Model Prefabs by using the Copy and Paste options on the Rig tools. This is useful if you need to quickly create characters that share the same build and animations. You can only Copy and Paste if the source and destination Model Prefabs have the same number of Sprites and Sprite names. When you Copy and Paste the bone and mesh data, the following occurs: Copied bone data is pasted to the destination. Mesh, weights, and bone association of source Sprite(s) are pasted to destination Sprite(s) with the same names. Copy behavior To copy sprite data, select a sprite and then select Copy. This copies the mesh and bone data associated with that sprite. If no sprite is selected, then this copies the data of all sprites' currently in the Skinning Editor window instead. Paste behavior To paste copied sprite data, select the Paste button. This opens the Paste panel at the lower right of the editor window which contains the following data options. Select which data you want to paste from the copied sprite data. Paste dialog box. Option Function Bones Paste bone data. Mesh Paste mesh data. Flip X Paste the data but mirrored along the X-axis. Flip Y Paste the data but mirrored along the Y-axis. To paste copied sprite data, select a sprite and then select Paste. This pastes the selected data to a selected sprite. If no sprite is selected, then this pastes the data to all sprites’ currently in the Skinning Editor window with the same name as the copied sprite."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SkinningEditor.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SkinningEditor.html",
    "title": "Skinning Editor | ModularUIPack",
    "summary": "Skinning Editor The Skinning Editor module is added to the Sprite Editor when you install the 2D Animation package. Use the editor's tools to create the bones of your actor's skeleton, generate and edit its mesh geometry, and adjust the weights that bind the bones to the meshes as you rig your actor. The Skinning Editor is found in the modules drop-down menu at the top left of the Sprite Editor. Opening the Skinning Editor To begin working with an actor in the Skinning Editor: Select the actor Prefab that's created when importing your artwork into the Project, and go to its Inspector window. Select the Sprite Editor button in the Inspector window to open the actor in the Sprite Editor. In the Sprite Editor, select the Skinning Editor module from the upper left drop-down menu of the editor window. An actor in the Skinning Editor with the different panels of tools available. Refer to the editor tools and shortcuts documentation for more information about the different tools and functions available in the Skinning Editor. How to select a Sprite in the editor Depending on the actor, there may be multiple Sprites in the Skinning Editor at once. Select specific Sprites in the Skinning Editor window in the following ways: Double-click a Sprite to select it in the editor window. An orange outline and wireframe appears on the selected Sprite. The color of the outline color can be changed in Tool Preferences. If the Sprite you want to select is behind other Sprites, hover the cursor over where the desired Sprite is, and double-click to cycle through all Sprites at the cursor location until you select the desired Sprite. To deselect a selected Sprite, double-click on a blank area in the editor window. How to select bone or Mesh vertices in the editor To select a bone or vertices when using the Bone and Geometry tools: Click a bone or mesh vertex to select it specifically. Draw a rectangle over multiple bones or vertices to make a multiple selection. Right-click to deselect any selected bone or mesh vertices."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SpriteSkin.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SpriteSkin.html",
    "title": "Sprite Skin component | ModularUIPack",
    "summary": "Sprite Skin component When the Sprite Skin component is added to a GameObject that also contains the Sprite Renderer component with a Sprite assigned, the Sprite Skin deforms that Sprite by using the bones that were rigged and weighted to the Sprite in the Skinning Editor. After preparing and importing your artwork into Unity, bring the generated Prefab into the Scene view and Unity automatically adds the Sprite Skin component to the Prefab. This component is required for the bones to deform the Sprite meshes in the Scene view. The Sprite Skin deforms a Sprite by using GameObject Transforms to represent the bones that were added to the Sprite in the Skinning Editor module. Sprite Skin component settings. Property Function Always Update Enable this to have the Sprite Skin continue to deform the Sprite even when the visual is not in the view of the Camera. Auto Rebind Enable this to have the component attempt to find the correct GameObject Transforms to use as bones for the Sprite by using the GameObject Transform set in the Root Bone property as the starting point. Root Bone Use this property to indicate which GameObject Transform to use as the Root Bone for the Sprite. Bones This shows the list of bones that are being set up for the Sprite in the Skinning Editor module. Each Sprite’s Bone entry must have a GameObject Transform associated with it for correct deformation. Create Bones The button lets you create GameObject Transform(s) to represent the Sprite’s Bone and assign them to the Root Bone property and the individual Bones entry. The Root Bone that is created is placed as a child of the GameObject of the Sprite Skin. The button is only enabled if the Root Bone property isn't assigned. Reset Bind Pose The button resets the GameObject Transforms assigned in the Bones entry to the bind pose value set up for the Sprite in the Skinning Editor module. Auto Rebind When you enable Auto Rebind, Sprite Skin attempts to automatically locate the GameObject Transform that is needed for the current Sprite assigned to the Sprite Renderer. This is triggered when the Sprite in the Sprite Renderer property is changed. When a rebind is required, the Sprite Skin looks for the GameObject Transform name that matches the bone name in the Skinning Editor module. Example: Selecting a Sprite in the Bone Panel shows the bones currently rigged to and influencing the Sprite, along with their names. In the above example, the Sprite is rigged with three connected bones - starting with 'bone_1' as the root bone, 'bone_2' as a child of 'bone_1', and 'bone_3' as a child of 'bone_2'. For the Sprite Skin component to automatically locate the bones successfully, GameObject Transforms with the same name and hierarchy as shown in the above example must be available in the Scene. By setting the Sprite Skin’s Root Bone property to the correct GameObject Transform, Sprite Skin will then map the GameObject Transform to the Sprite’s rigged bone of the same name. For the Auto Rebind to be successful, the name and the hierarchy of the rigged bones and the GameObject Transforms must match. This means that changing the name of the bones in the Skinning Editor will require you to update the names of the GameObject Transforms to match as well."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SpriteSwapIntro.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SpriteSwapIntro.html",
    "title": "Introduction to Sprite Swap | ModularUIPack",
    "summary": "Introduction to Sprite Swap This page introduces what's Sprite Swap, its different uses and its limitations. Sprite Swap refers to changing the rendered Sprite of a GameObject at runtime, which is useful when animating the Sprites that make up a 2D actor or other GameObjects. For example, you can swap the individual Sprites that make up an animated actor to create multiple actors that share the same skeleton (requires the PSD Importer package; or create animation clips by swapping the Sprites at runtime. You can import sample projects for the 2D Animation package by selecting the option in the 2D Animation package window. Refer to the individual Sprite Swap examples pages for more information about these samples. Required assets and components Sprite Swap requires the following Assets and component, which are available with the 2D Animation package: Sprite Library Asset: The Sprite Library Asset contains a set of selected Sprites which are assigned to different Categories and Labels. Sprite Library component: The Sprite Library component determines which Sprite Library Asset a GameObject refers to. Sprite Resolver component: The Sprite Resolver component requests a Sprite registered to the Sprite Library Asset by referring to the Category and Label value of the desired Sprite. Technical limitations The following are technical limitations which you should keep in mind when using Sprite Swap. Skeletal animation limitations If you want to animate your actor and use Sprite Swap with skeletal animation, both sprites that are swapped must have an identical skeleton. Use the Copy and Paste tools of the Skinning Editor to duplicate the bone and skeleton data from one sprite to another to ensure they will swap correctly. Animator limitations In a single Animator Controller, you can't have one Animation Clip animating the Sprite Renderer’s assigned sprite while another Animation Clip animates the Sprite Resolver’s sprite hash. If these two clips are in the same Animator Controller, they will conflict with each other and cause unwanted playback results. Use the following recommended methods to resolve this issue. The first method is to separate the Animation Clips into separate Animator Controllers that contain only clips that animate either a Sprite Renderer’s sprite or the Sprite Resolver’s sprite hash but not both types in the same Animator Controller. The second method is to update all Animation Clips to the same type so that they can all remain in a single Animator Controller. To do so, convert all clips animating a Sprite Renderer’s sprite to animating a Sprite Resolver’s sprite hash, or vice versa. Additional resources Animation Skinning Editor PSD Importer package"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SpriteSwapLanding.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SpriteSwapLanding.html",
    "title": "Sprite Swap | ModularUIPack",
    "summary": "Sprite Swap Use Sprite Swap to change a GameObject's rendered Sprite at runtime. You can swap the entire set of Sprites that make up a character (referred to as an 'actor') at once, or swap specific Sprites and 'parts' of an actor to create animation loops or other game-related features. For various examples of how you can use this feature in a Project, import sample Projects for the 2D Animation package and refer to the Sprite Swap examples for examples of the different ways you can use Sprite Swap in your Projects. Topic Description Introduction to Sprite Swap Understand Sprite Swap, its requirements and limitations. Sprite Library Asset in Unity Understand what the Sprite Library Asset is and how to use its features. Sprite Library Editor fundamentals Understand how to use the Sprite Library Editor's main features. Overrides to the Main Library Create overrides are and understand how to use them to make changes. Drag sprites to create or edit Categories and Labels Drag sprites to perform certain functions in the Sprite Library Editor automatically. Sprite Library component in Unity Understand what the Sprite Library component is and how to use its features. Sprite Resolver component in Unity Understand what the Sprite Resolver component is and how to use it. Setting up Sprite Swap Understand how to set up the different components and assets needed to use Sprite Swap. Additional resources PSD Importer package"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SpriteSwapSetup.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SpriteSwapSetup.html",
    "title": "Setting up for Sprite Swap | ModularUIPack",
    "summary": "Setting up for Sprite Swap The following steps Follow the steps below to create a Sprite Library Asset, and choose which GameObjects refer to the Asset: Select the Sprite Library Asset from the Asset creation menu by going to Asset > Create > 2D > Sprite Library Asset Select the new Sprite Library Asset and open it in the Sprite Library Editor. The editor displays the list of Categories and Labels available in the Asset. Select + at the lower right of the List to add a new Category. Enter a name into Category (the default name is 'New Category'). Each Category in the same Sprite Library Asset must have a unique name. Add new Labels into the Category by either selecting + and then selecting a Sprite from the Object Picker window; or by dragging a Sprite, Texture or PSD Importer supported file type onto an empty space within the Categories tab Create an empty GameObject (menu: Right-click on the Hierarchy window > Create Empty). Select it and then add the Sprite Renderer component. Add the Sprite Library component to the same GameObject. Assign the Sprite Library Asset created in step 3 to Sprite Library Asset. Add the Sprite Resolver component to the same GameObject. Open the Category drop-down menu, and select a Category you created in step 3. The Label drop-down menu will become available and display thumbnails of the Sprites contained in the Category. Select a Sprite in the Sprite Resolver component to replace the current Sprite rendered by the Sprite Renderer component with the one you have selected."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SpriteVis.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/SpriteVis.html",
    "title": "Sprite Visibility panel | ModularUIPack",
    "summary": "Sprite Visibility panel Use the Sprite Visibility panel to increase or decrease the visibility of bones and sprite meshes. Toggle the Sprite Visibility panel by selecting the Visibility tool button along the upper right of the editor window: The panel appears on the right-side of the editor window. It has two sliders at the top that control the visibility of the bones and Sprite meshes within the editor window. Move either slider further to the left to decrease the visibility of the bones or meshes respectively, and to the right to increase their visibility. The Bone tab displays the Bone hierarchy of the character Prefab. The Sprite tab displays the names of the Sprites and their grouping hierarchy. Bone tab and hierarchy tree The Bone tab selected. Select the Bone tab to view the list of bones in the character Prefab. The list reflects the hierarchy of bones you created with the Bone tools. You can reparent and reorder bones directly from the bone tab by dragging selected bones up and down the list. Toggle the visibility of each bone by selecting the icon next to it. Property Function Toggle the visibility of each bone by selecting this icon next to the bone. +Alt (macOS: +Option) Toggle the visibility of a bone and its children by selecting this icon while holding Alt (macOS: holding Option). Bone The name of the Bone. Depth Displays the Z-value of bones that are influencing the same Sprite Mesh. The parts of the Mesh that is influenced by a bone with higher Depth value will render in front of the Mesh influenced by bones with lower Depth value. A bone’s Depth value is 0 by default. Color The color of the Bone. Sprite tab Select the Sprite tab to see the list of Sprites that make up the character Prefab in the Skinning editor window. The names and order of the Sprites mirror their names, layer and grouping order in the original source file. Toggle the visibility of a Layer by selecting the icon next to it. Hold Alt (macOS: hold Option) to view it in isolation and hide every other Layer."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "Introduction to 2D Animation What's new 2D Animation Asset Upgrader Preparing and importing artwork Sprite Skin component Skinning editor Tool Preferences Editor tools and shortcuts Sprite Visibility panel Actor rigging and weighing workflow Animating an actor 2D Inverse Kinematics Sprite Swap Introduction to Sprite Swap Sprite Library Asset in Unity Sprite Library Editor fundamentals Sprite Library Editor reference Overrides to the Main Library Drag sprites to create or edit Categories and Labels Sprite Library component in Unity Sprite Resolver component in Unity Setting up for Sprite Swap How to swap individual Sprites Swapping Sprite Library Assets Importing Samples Simple Single Skinned Sprite Character Sprite Swap sample projects Skeleton Sharing Runtime Swap"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ToolPref.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ToolPref.html",
    "title": "Tool Preferences | ModularUIPack",
    "summary": "Tool Preferences Adjust the appearance of the 2D Animation tools for the Skinning Editor in the Preferences menu: Edit > Preferences > 2D > Animation. Tool Preferences Setting Function Hide Tool Text Enable this option to hide the tool text to have a compact view. Selected Outline Color Customize the outline color of selected Sprite and bone. Sprite Outline Size Use the slider to adjust the outline thickness of a selected Sprite. Bone Outline Size Use the slider to adjust the outline thickness of a selected bone. Enable Hide Tool Text to only display the tool icons in the Skinning Editor window."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-psd-importer.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-psd-importer.html",
    "title": "Rigging a character imported with the PSD Importer | ModularUIPack",
    "summary": "Rigging a character imported with the PSD Importer This sample demonstrates how to rig an actor that is made from multiple Sprites, imported with the PSD Importer. Open the Asset Assets/Samples/2D Animation/[X.Y.Z]/Samples/3 Character/Sprites/Fei.psb in the Skinning Editor module to examine how the Sprite is rigged. The _Character sample Scene shows how the Asset is used in a Scene, when it is animated with animation that deforms its Sprite mesh. Follow the steps below to reconstruct the _Character sample Scene: In this sample, the source file Fei.psb is imported into the Editor with the PSD Importer with its Character Rig property enabled. The importer generates a Prefab as a sub-Asset of the imported source file. The importer generates Sprites based on the layers of the source file. In this sample, the actor's bones are already rigged and weighted. Experiment editing the bones and mesh with the Skinning Editor's various tools. Drag the generated Prefab from the Project window into the Scene. This becomes a GameObject named 'Fei'. Add the Animator component to the 'Fei' GameObject. Locate the Fei Animator Controller Asset in Assets/Samples/2D Animation/[X.Y.Z]/Samples/4 Character/Animation/Animators/Fei.controller and assign this Asset to the Animator’s Controller property."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-runtime-swap.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-runtime-swap.html",
    "title": "Runtime Swap | ModularUIPack",
    "summary": "Runtime Swap This sample demonstrates how you can use the Sprite Library API to override a specific Entry. Note that the sample requires the PSD Importer installed. Open the 6 Runtime Swap Scene to see the sample in action. The graphic Assets are located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Sprites: Knight.psb Skeleton.psb The Skeleton.psb uses the .skeleton Asset from the Knight.psb for its rigging. It also references the Knight.spriteLib Sprite Library Asset located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Sprites. Runtime Swap script A custom MonoBehaviour script called the RuntimeSwap is attached to the KnigtboyRig GameObject. The script is located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Scripts/Runtime/RuntimeSwap.cs Pressing a button (in the sample Scene) with a Sprite from the Skeleton.psb causes the script to use the override API from the Sprite Library to override that Sprite Entry. m_SpriteLibraryTarget.AddOverride(entry.sprite, entry.category, entry.entry); Pressing a button with a Sprite from the Knight.psb causes the script to use the override rest API from the Sprite Library to remove the Sprite Entry override. m_SpriteLibraryTarget.RemoveOverride(entry.category, entry.entry);"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-simple.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-simple.html",
    "title": "Simple single Sprite actor and rig | ModularUIPack",
    "summary": "Simple single Sprite actor and rig This sample shows a simple single Sprite rigged actor, which was imported with the PSD Importer package. The Project and Assets can be found in the following location (the version number folder may differ): Sample project location in the Project window (for 2D Animation 9.0). Open the Asset Assets/Samples/2D Animation/[X.Y.Z]/Samples/1 Simple/Sprites/Boris.psd in the Skinning Editor module to examine how the Sprite is rigged. The _Simple Scene shows how the Asset is used in a Scene when it is animated with animation that deforms its Sprite mesh. Follow the steps below to reconstruct this _Simple sample Scene: Create a new Scene, and create one empty GameObject and name it 'Root'. Drag the 'Boris' psd file into the scene and attach it to the Root GameObject as its child. Add an Animator component to the 'Root' GameObject. Locate the Root Animator Controller Asset in Assets/Samples/2D Animation/[X.Y.Z]/Samples/1 Simple/Animation/Animator/Root.controller. Assign this Asset to the Animator component's Controller property. Add an Animator component to the 'Boris' GameObject. Locate the Boris Animator Controller Asset in Assets/Samples/2D Animation/[X.Y.Z]/Samples/1 Simple/Animation/Animator/Boris.controller and assign this Asset to the Animator’s Controller property."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-single-skinned-sprite.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-single-skinned-sprite.html",
    "title": "Single Sprite rig with bone branching | ModularUIPack",
    "summary": "Single Sprite rig with bone branching This sample project is a slightly more complex example of a single Sprite rig similar to the Simple project, but with bone branching instead of a single branch rig. The Sprite was imported with the PSD Importer package. The Project and Assets can be found in the following location (the version number folder may differ): Open the Asset Assets/Samples/2D Animation/[X.Y.Z]/Samples/2 Single Skinned Sprite/Sprites/Plunkah.psd in the Skinning Editor module to examine how the Sprite is rigged. The _Single Skinned Sprite sample Scene show how the Asset is used in a Scene when it is animated with animation that deforms its Sprite mesh. Follow the steps below to reconstruct the _Single Skinned Sprite sample Scene: Create a new Scene, and drag the 'Plunkah' psd file into the scene. Add the Animator component to the 'Plunkah' GameObject. Locate the Plunkah Animator Controller Asset in Assets/Samples/2D Animation/[X.Y.Z]/Samples/2 Single Skinned Sprite/Animation/Plunkah.controller and assign this Asset to the Animator’s Controller property."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-skeleton-sharing.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-skeleton-sharing.html",
    "title": "Skeleton Sharing | ModularUIPack",
    "summary": "Skeleton Sharing This sample demonstrates how Skeleton sharing can be set up and leverages on the other samples before this. Note that the following requires the PSD Importer installed. Open the 5 Skeleton Sharing.unity Scene to see this sample in action. This sample's setup is similar to the one in the Full Skin Swap sample. The visual Assets are located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Sprites: Knight.psb Wolf.psb The Wolf.psb uses the .skeleton Asset from the Knight.psb, which means that the Wolf.psb is prepared using the same skeleton structure as the Knight.psb. The Wolf actor also uses the following Sprite Library Assets located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Sprites: Knight.spriteLib Wolf.spriteLib The Knight.spriteLib is assigned to the Main Library property for the Wolf.spriteLib is. The Wolf.spriteLib has been setup so that the torso Category is not overridden, which allows it to use the Sprite from Knight.spriteLib. The Wolf actor uses the same torso Sprite as the Knight actor."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-sprite-swap.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/ex-sprite-swap.html",
    "title": "Sprite Swap examples | ModularUIPack",
    "summary": "Sprite Swap examples This following sample projects demonstrate the different ways you can use Sprite Swap to achieve different effects and outcomes. The Scenes for the following samples can be all found in Assets/Samples/2D Animation/[X.Y.Z]/Samples/4 SpriteSwap: Animated swap Part swap Full skin swap DLC swap Skeleton Sharing Runtime Swap Animated Swap This sample demonstrates how to use Sprite Swap to create a reusable Animation Clip for animations that include both Sprite swapping and deformation of the Sprites. Note: Install the PSD Importer package to use this sample. Open the Scene file 1 Animated Swap.unity to see the sample in action. Initial frame with the hands in thumbs-up position. This sample uses two different source files located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Sprites. The Assets used are: dialog.psb dialog gray.psb These Assets are imported with the PSD Importer with its Character Rig property enabled. Both Assets are rigged with the same skeleton, and each Asset has two different Sprites for the hands which are swapped during the animation. Swapped to a frame with the hands open. They are located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 Sprite Swap/Sprite Library and are: dialog.spriteLib dialog gray.spriteLib Follow the steps below to reconstruct the sample Scene: Drag both dialog.psb and dialog gray.psb Prefabs from the Project window into the Scene. Add the Sprite Library component to dialog GameObject, then assign the dialog.spriteLib Asset to its Sprite Library Asset property. Add the Sprite Library component to dialog gray GameObject, then assign the dialog gray.spriteLib Asset to its Sprite Library Asset property. Expand the dialog GameObject's hierarchy and disable the R_arm_2 child GameObject. This Asset is not required as it is swapped in during the animation. Go to the R_arm_1 GameObject, and add the Sprite Resolver component. Select the R_arm_2 graphic from the Label drop-down menu or from its thumbnail. Repeat steps 4 to 5 with the dialog gray GameObject. Add the Animator component to the dialog and dialog gray GameObjects. Locate the Dialog Animator Controller Asset in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 Sprite Swap/Animation/Animators and assign it to the Animator component's Controller property. In this sample, the Sprite Library component is not attached to the same GameObject as the Sprite Resolver component. The Sprite Resolver attempts to locate a Sprite Library component starting from the same GameObject it is on and then traverse up the GameObject hierarchy. This lets a single or multiple Sprite Resolvers use the same Sprite Library component by attaching the Sprite Library component to a common root GameObject that the Sprite Resolver components are attached to. Part Swap This sample demonstrates how to swap Sprite Assets using the API provided by changing the Sprite Resolver data. Open the 2 Part Swap.unity Scene to see the sample in action. In the Scene, each part has three different visual options that can be swapped. The graphic Assets are located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Sprites: Knight.psb Skeleton.psb Witch.psb A Sprite Library Asset containing Sprites made from all three graphic Assets above is created. A Category is created for each body part of the actor, with three Entries derived from the three different versions of the character. The Asset is located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Sprite Library/Part Swap.spriteLib. Corresponding parts from each of the three versions of the actor, and named accordingly. Attach the Sprite Library component to the KnightRig GameObject in the Scene. Assign the Part Swap.spriteLib Asset to its Sprite Library Asset property. Add the Sprite Resolver component to all Sprite Renderers under the KnightRig GameObject. Assign a Sprite that matches its corresponding GameObject, depending on the body part that GameObject represents. For example, select one of the Sprites in the 'Body' Category for the Sprite Resolver attached to the KnightRig GameObject and so on. With this setup, you can swap any part of the actor to another Sprite individually. Swap part script A custom MonoBehaviour script called SwapPart is attached to the KnightRig GameObject. This script is located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Scripts/Runtime/SwapPart.cs. The script holds a reference to a Sprite Library component for retrieval of swappable Sprites. It also holds an array of data that describes the Category of Sprites in the Sprite Library that can be changed by a Sprite Resolver component. When the Swap Part script starts up, it attempts to fetch the Sprite Library Asset that is used by a Sprite Library component. var libraryAsset = spriteLibrary.spriteLibraryAsset; From this Sprite Library Asset, it then fetches the Entries and Label names that are in a Category. var labels = libraryAsset.GetCategoryLabelNames(swapOption.category); This is then used to populate the UI Drop Down list. When a value changes in the UI Drop Down List, it then sets the Sprite Resolver component to use the relevant Sprite. swapOption.spriteResolver.SetCategoryAndLabel(swapOption.category, swapOption.dropdown.options[x].text); Full Skin Swap This sample demonstrates how to swap Sprite visuals using the provided API by changing the Sprite Library Asset referenced by the Sprite Library component. Open the 3 Full Swap.unity Scene to see the sample in action. In the Scene, there are three different visual Asset options that you can swap to. The Assets are located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Sprites: Knight.psb Wolf.psb Witch.psb The Sprite Library Assets have identical Categories, Entries, and Label names but with different Sprites selected. The Assets are located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Sprite Library. Knight.spriteLib Wolf.spriteLib Witch.spriteLib Attach the Sprite Library component to the KnightRig GameObject. Assign the Knight.spriteLib Asset to its Sprite Library Asset property. Add the Sprite Resolver component to each of the Sprite Renderers under the KnightRig GameObject. Assign a Sprite to each Sprite Resolver that corresponds to the body part they are attached to. For example, the torso Sprite is selected for the Sprite Resolver attached to the torso GameObject. Swap Full Skin Script A custom MonoBehaviour script called SwapFullSkin is attached to the KnightRig GameObject. This script is located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Scripts/Runtime/SwapFullSkin.cs Where a value changes in the UI Drop Down List, the component sets the relevant Sprite Library Asset to be used for the Sprite Library component. spriteLibraryTarget.spriteLibraryAsset = spriteLibraries[value]; DLC Swap This sample demonstrates how to swap Sprite visuals by changing the referenced Sprite Library Asset referenced by the Sprite Library component, using the API provided. This sample builds on the Full Skin Swap sample. This difference from the Full Skin Swap method is that the Sprite Library Asset is loaded from an AssetBundle during runtime and added to the Sprite Library component at a later time. Open the 4 DLC Swap.unity Scene to see the sample in action. To ensure the AssetBundle works correctly, check that the Skeleton.spriteLib Asset in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Sprite Library is labeled with its corresponding AssetBundle tag. The Skeleton.spriteLib Asset labeled with 'skeleton'. Load Swap DLC Script A custom MonoBehaviour script called LoadSwapDLC is attached to the Load DLC GameObject. The script is located in Assets/Samples/2D Animation/[X.Y.Z]/Samples/5 SpriteSwap/Scripts/Runtime/LoadSwapDLC.cs The script starts up when the DLC is loaded, it scan the AssetBundles for any Sprite Library Assets. Once the Sprite Library Assets are loaded, it adds these Entries into the SwapFullSkin script from the Full Skin Swap sample."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/index.html",
    "title": "Introduction to 2D Animation | ModularUIPack",
    "summary": "Introduction to 2D Animation The 2D Animation package includes features and tools that allow you to quickly rig and animate 2D characters in Unity in a variety of ways. The different versions of the 2D Animation package are supported by the following versions of Unity respectively: Package version Unity Editor version 9.x.x 2022.2 8.x.x 2022.1 7.x.x 2021.2 6.x.x 2021.1 5.x.x 2020.2 or 2020.3 4.x.x 2020.1 3.x.x 2019.3 or 2019.4 2D Animation and PSD Importer package integration Use the 2D Animation package with the PSD Importer package to easily import character artwork created in Photoshop into Unity, and prepare it for animation with the 2D Animation package. The PSD Importer is an Asset importer that supports Adobe Photoshop .psb files, and generates a Prefab made of Sprites based on the source file and its layers. The generated Prefab of a character or prop to be animated with the 2D Animation package is called an 'actor'. The .psb file format has identical functions as the more common Adobe .psd format, with additional support for much larger image sizes. Refer to the PSD Importer package documentation for more information about the importer’s features. Upgrading Sprite Library Assets and Animation Clips The 2D Animation package and its assets are often updated with major and minor tweaks over time. Some asset improvements can be automatically applied when you upgrade to the latest version of the package. However, some of these changes require a manual step in order to have the assets use the latest code path. The 2D Animation Asset Upgrader tool eases the transition and upgrade of older assets to newer ones. Refer to the 2D Animation Asset Upgrader section for more information."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/whats-new.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Documentation~/whats-new.html",
    "title": "What's new in version 9.0 | ModularUIPack",
    "summary": "What's new in version 9.0 Added Added a new Sprite Library Editor to make authoring and editing of Sprite Libraries easier. Updated 2D Animation now depends on the Collections package, which enables bursted and multithreaded Sprite deformation by default. Sprite Skin's Auto Rebind can now swap between all bones underneath the rootBone."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.2d.animation copyright © 2023 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/README.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/README.html",
    "title": "| ModularUIPack",
    "summary": "Note: This package is available as a prerelease, so it is not ready for production use. The features and documentation in this package might change before it is verified for release. 2D Character Animation Editor tools and runtime scripts to support the authoring of 2D Animated Characters. Editor Tooling Skinning Editor Available through Sprite Editor Window module Bone tools allow creation of bind poses easily. Supports flexible setup of complex hierarchy. Mesh tools allow auto mesh tesselation or manual tesselation Weight tools allow auto weight calculation and weight painting Runtime Support SpriteSkin deformation 2D IK"
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Samples~/AnimationSamples/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Samples~/AnimationSamples/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.2d.animation Samples © 2022 Unity Technologies Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Samples~/AnimationSamples/README.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Samples~/AnimationSamples/README.html",
    "title": "2D Animation Samples | ModularUIPack",
    "summary": "2D Animation Samples See the 2D Animation Samples Documentation for more information on the samples."
  },
  "Library/PackageCache/com.unity.2d.animation@9.1.3/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.2d.animation@9.1.3/Third Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: Clipper License Type: Boost Software License - Version 1.0 - August 17th, 2003 Copyright (c) 2010-2014 Angus Johnson http://www.angusj.com/delphi/clipper.php Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this license (the \"Software\") to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software is furnished to do so, all subject to the following: The copyright notices in the Software and this entire statement, including the above license grant, this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Eigen License Type: Mozilla Public License Version 2.0 Copyright owner unknown http://eigen.tuxfamily.org/ https://www.mozilla.org/en-US/MPL/2.0/ Component Name: libigl License Type: Mozilla Public License Version 2.0 Copyright (c) 2019 Alec Jacobson, Daniele Panozzo, Christian Schüller, Olga Diamanti, Qingnan Zhou, Sebastian Koch, Jeremie Dumas, Amir Vaxman, Nico Pietroni, Stefan Brugger, Kenshi Takayama, Wenzel Jakob, Nikolas De Giorgis, Luigi Rocca, Leonardo Sacht, Kevin Walliman, Olga Sorkine-Hornung, Teseo Schneider, and others. https://libigl.github.io/ https://www.mozilla.org/en-US/MPL/2.0/"
  },
  "Library/PackageCache/com.unity.2d.aseprite@1.1.8/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.2d.aseprite@1.1.8/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [1.1.8] - 2025-01-07 Fixed Fixed an issue where the importer inspector would throw an exception if an animation clip was empty of data. (DANB-788) Fixed an issue where the Z-Index would not be taken into account when the import mode is set to \"Merge Frame\". (DANB-787) [1.1.7] - 2024-11-12 Fixed Fixed an issue where adding Sprite Bones would cause the Sprites to become corrupt in the importation. (DANB-779) Fixed an issue where the position rect would not get updated after being set in the Sprite Editor. Fixed an issue where the references to sprites would be lost when adding new layers to an Aseprite file. (DANB-782) Fixed an issue where the default compression would be set to \"Normal Quality\" instead of the expected \"Uncompressed\". [1.1.6] - 2024-08-30 Fixed Fixed an issue where SpriteRenderers would lose their reference if an Aseprite file's name was changed. (DANB-692) [1.1.5] - 2024-06-19 Fixed Reduced the font size slightly in the importer headers to match other inspector headers in Unity. (DANB-644) Fixed an issue where the Sort Order would not be reset in Animation Clips when making use of the Z-index in Aseprite. [1.1.4] - 2024-05-02 Fixed Fixed an issue where Sprite Renderers would be hidden after transitioning from one Animation Clip to another. Fixed an issue where generated AnimationClips would be 0.01 seconds too long. [1.1.3] - 2024-03-25 Fixed Fixed an issue where the importer would not parse palette data from the \"old palette\" chunks. Fixed an issue where the Physics Shapes would not take the Sprite Rects into account, causing the outline to be wrongly offset. Fixed an issue where .ase/.aseprite files containing z-index data would fail to import. (DANB-608) [1.1.2] - 2024-03-10 Fixed Fixed an issue where the Mosaic padding did not show up in Sprite Sheet import mode. Fixed an issue where using Sprite Padding with individual import mode would misalign the GameObjects in the generated model prefab. Fixed an issue where the Aseprite package would contest with the XR subsystem package over the InternalAPIEditorBridge.005. (UUM-49338) [1.1.1] - 2024-01-03 Fixed Fixed an issue where the Sprite Editor could be opened even though there was no valid texture to open it with. Fixed an issue where the importer would not generate a square power-of-two texture for compressions which needs it (pvrtc). Fixed an issue where changes to linked cells would not be taken into account when reimporting. [1.1.0] - 2023-11-24 Added Added a mosaic padding option to the importer editor. Added \"Generate Physics Shape\" option to the importer editor. Changed Fixed an issue where the background importer would act on files that were not Aseprite files. [1.0.0] - 2023-05-17 Added Added a new event to the Aseprite Importer which is fired at the last import process step. Made the Aseprite file property publicly available. Made the Aseprite file parsing API publicly available. Fixed Fixed an issue where the Animation Window would no longer detect Animation Clips on a prefab. (DANB-458) [1.0.0-pre.4] - 2023-04-16 Added Added a property to set the padding within each generated SpriteRect. Added an option to select import mode for the file, either Animated Sprite or Sprite Sheet. Fixed Fixed an issue where the platform settings could not be modified. (DANB-445) Fixed an issue where the Animation Events would be generated with the wrong time stamp. [1.0.0-pre.3] - 2023-03-23 Added Burst compiled the texture generation tasks to speed up importation of Aseprite files. (Note: Only for Unity 2022.2 and newer). Layer blend modes are now supported with Import Mode: Merge Frames. Added ability to generate Animation Events from Cell user data. Added ability to export Animator Controller and/or Animation Clips. Added canvasSize to the Aseprite Importer's public API. Fixed Fixed an issue where the last frame in a generated Animation Clip would receive an incorrect length. (DANB-434) Improved the background importer, so that it only imports modified Aseprite files in the background. [1.0.0-pre.2] - 2023-02-27 Added Added support for individual frame timings in animation clips. Added support for layer groups. Added support for Layer & Cel opacity. Added support for repeating/non-repeating tags/clips. Changed The importer UI is now re-written in UI Toolkit. If a Model Prefab only contains one SpriteRenderer, all components will be placed on the root GameObject, rather than generating a single GameObject to house them. A Sorting Group component is added by default to Model Prefabs with more than one Sprite Renderer. Fixed Fixed an issue where renaming an Aseprite file in Unity would throw a null reference exception. (DANB-384) Fixed an issue where the background importer would import assets even when Unity Editor has focus. Fixed an issue where the Pixels Per Unit value could be set to invalid values. [1.0.0-pre.1] - 2023-01-06 Added First release of this package."
  },
  "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/AsepriteFeatures.html": {
    "href": "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/AsepriteFeatures.html",
    "title": "Aseprite Features | ModularUIPack",
    "summary": "Aseprite Features This page highlights which Aseprite feature the Aseprite Importer supports/does not support. Supported features File formats .ase & .aseprite Color modes (All modes are supported) RGBA Grayscale Indexed Layer settings Visible/Hidden layer Hidden layers are not imported by default. This can be changed by checking “Include hidden layers” in the import settings. Layer blend modes All blend modes are supported with Import Mode: Merge frames. Layer & Cell opacity Linked Cells Tags Only Animation Direction: Forward is supported. Values set in the repeating field only have two results on import: ∞ will result in a looping Animation Clip. This value is the default for all Tags in Aseprite. 1 -> N will result in a non looping Animation Clip. Individual frame timings Layer groups The importer respects the visibility mode selected for the group. If a group is hidden, underlying layers will not be imported by default. Layer groups will be generated in the prefab hierarchy if the import mode is set to Individual layers. Unsupported features Slices Tilemaps"
  },
  "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/ImporterFAQ.html": {
    "href": "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/ImporterFAQ.html",
    "title": "Frequently asked questions | ModularUIPack",
    "summary": "Frequently asked questions How are the layers sorted in Unity? When an Aseprite file is imported using the Import Mode: Individual, every layer from the source file becomes a GameObject inside the generated model prefab. If the layer is a normal layer (and not a group layer), it has a SpriteRenderer component added to it. To make sure each SpriteRenderer renders in the same order as inside Aseprite, Unity automatically assigns a value to the Order in Layer field on the SpriteRenderer component. This value is a combination of two variables, the order of the layer inside Aseprite, where the bottom layer has the value of 0, and the top layer has the value of Number of layers, e.g., if the source file contains five layers, the top layer will have the value of 5. The second value is the z-index, which can be set per cell in Aseprite. The final formula to calculate the Order in Layer value is: Layer count from the bottom + Z-Index of the current cell. Apart from the Order in Layer value, Unity also adds a Sorting Group component onto the root GameObject of the model prefab, to make sure that every SpriteRenderer within the prefab is sorted together. For more information about general 2D sorting in Unity, see the 2D Sorting page in the Unity manual. Which actions cause Sprite data to be overwritten? The Aseprite Importer will overwrite custom Sprite data authored in the Sprite Editor when the following actions are performed: Updated any of the following importer settings: Pivot alignment Pivot space Custom pivot point Sprite padding Changed the cell's size in Aseprite. Packing texture's size has changed. Removed or renamed a layer. How to combine multiple sprite sheets into one? You can make use of Sprite Atlases to combine multiple sprite sheets into a single texture. Read more about Sprite Atlas here. Combining multiple sprite sheets into one is a good way to reduce the draw calls in a scene. Why is my trimmed Aseprite file not trimmed in Unity? When modifying the canvas size, make sure the Trim content outside the canvas checkbox is checked. This way, the stored texture will be cropped to the specified size. How to add events to Animation Clips? Animation Events can be generated by adding user data to Cells inside Aseprite. Follow these steps to add an Animation Event to a frame: In Aseprite, select any cel in the frame you want to add an event to. Right-click on the cel and select Cel Properties. Press the User Data-button to the left of the Opacity slider to bring up the User Data-field. Enter the event name in the following format: event:EventName. E.g. event:OnIdle. Save the file and switch over to Unity. Open the Animation Window and inspect the Animation Clip. You can see that the event has been added to the frame. To receive the event, place the following script on the same GameObject as the Animator is located on: using UnityEngine; public class MyEventReceiver : MonoBehaviour { // In our example, we created an event called \"OnIdle\". // This should be changed to the event name you specified in Aseprite. private void OnIdle() { Debug.Log(\"OnIdle was called.\"); } } How to make changes to an Animator Controller? The Aseprite Importer generates an Animator Controller if the Aseprite file contains more than one frame, and the Animation Clip checkbox is checked in the importer. This Animator Controller is Read-Only, meaning that it cannot be changed. The Animator Controller is Read-Only. If you like to have an Animator Controller which you can change, follow these steps: Select an Aseprite file in Unity. Press the Export Animation Assets-button. In the popup, make sure the Animator Controller checkbox is checked. Leave the Animation Clips checkbox unchecked if you do not wish to edit any of the clips. Press Export and select a folder to place the Asset(s) into. An Animator Controller should now be located in the selected folder. If the Animation Clip checkbox was left unchecked, all the states within the Animator Controller are linked back to the Aseprite file, meaning that the clips will stay up to date with any changes made in Aseprite. Do note that if you add a new tag in Aseprite, you need to add the resulting Animation Clip to the exported Animator Controller, as this will not happen automatically. How to inject custom assets on import? The Aseprite Importer comes with an event, OnPostAsepriteImport, which is fired at the end of the import process. This event can be used to inject or change the generated assets when importing an Aseprite file. using UnityEditor; using UnityEditor.U2D.Aseprite; using UnityEngine; public class GameObjectInjector : AssetPostprocessor { void OnPreprocessAsset() { if (assetImporter is AsepriteImporter aseImporter) aseImporter.OnPostAsepriteImport += OnPostAsepriteImport; } static void OnPostAsepriteImport(AsepriteImporter.ImportEventArgs args) { var myGo = new GameObject(\"MyGameObject\"); args.context.AddObjectToAsset(myGo.name, myGo); } }"
  },
  "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/ImporterFeatures.html": {
    "href": "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/ImporterFeatures.html",
    "title": "Importer features | ModularUIPack",
    "summary": "Importer features Default Texture settings The Aseprite Importer sets the following default settings to the generated texture: Texture type: Sprite Sprite mode: Multiple Pixel per unit: 100 Mesh type: Tight Wrap mode: Clamp Filter mode: Point Compression: None Generate Mip Maps: False Aseprite Importer Inspector properties The Aseprite Importer is available after you import a .ase/.aseprite file into your Project. Aseprite Importer Inspector properties General Property Description Import Mode How the file should be imported. This is set to Animated Sprite by default. Sprite Sheet The file is imported as a Sprite Sheet, and can be sliced up in the Sprite Editor. Animated Sprite The file is imported with animation in mind. Animation assets are generated and attached to a model prefab on import. Pixels Per Unit Set the number of pixels that equals one Unity unit. Mesh Type Set the Mesh type that Unity generates for the Sprite. This is set to Tight by default. Full Rect Unity maps the Sprite onto a rectangular Mesh. Tight Unity generates a Mesh based on the outline of the Sprite. If the Sprite is smaller than 32 x 32 pixels, Unity always maps it onto a Full Rect quad Mesh, even if you select Tight. Generate Physics Shape Generates a default physics shape from the outline of the Sprite/s when a physics shape has not been set in the Sprite Editor. Layer import Property Description Include Hidden Layers Enable this property to include the hidden layers of the .ase/.aseprite file in the import. This property is set to False by default. Import Mode Use this property to specify how the layers from the source file are imported. This property is set to Merge Frame by default. Individual Layers Every layer per frame generates a Sprite. Merge Frame This is the default option. All layers per frame are merged into one Sprite. Pivot Space Select the space pivots should be calculated in. This property is set to Canvas by default. Canvas Calculate the pivot based on where the Sprite is positioned on the source asset's canvas. This is useful if the Sprite is being swapped out in an animation. Local This is the normal pivot space used when importing a standard image in Unity. Pivot Alignment How a Sprite's graphic rectangle is aligned with its pivot point. This property is set Bottom by default. Mosaic Padding External padding between each SpriteRect. This property is set 4 pixels by default. Sprite Padding Internal padding within each SpriteRect. This property is set 0 pixels by default. Generate assets Property Description Model Prefab Enable this property to generate a model prefab setup to look like the first frame in Aseprite. This property is set to True by default. Sorting Group Add a Sorting Group component to the root of the generated model prefab if it has more than one Sprite Renderer. This property is set to True by default. Shadow Casters Enable this property to add Shadow Casters to all GameObjects with a SpriteRenderer. This property is set to False by default. Note that this checkbox is only available in Unity 2023.1 and newer. Animation Clips Enable this property to generate Animation Clips based on the frame data in the file. Every tag in Aseprite generates one Animation Clip. If no tag is present, one Animation Clip is generated which covers all frames in the file. The Animation speed is based on the Constant Frame Rate defined in Aseprite. The length is based on the number of frames included in the tag/file. This property is set to True by default. Export Animation Assets The Animator Controller and the Animation Clips are generated as Read-Only assets. This option can be used to export editable versions of these assets. Aseprite Importer Preferences The Aseprite Importer Preferences can be found at Unity > Settings > 2D > Aseprite Importer. Aseprite Importer Preferences Property Description Background import Enable this property to enable asset import when the Unity Editor is in the background. This property is set to True by default."
  },
  "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "Introduction to Aseprite Importer What's new Aseprite features Importer features FAQ"
  },
  "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/index.html",
    "title": "Introduction to Aseprite Importer | ModularUIPack",
    "summary": "Introduction to Aseprite Importer The Aseprite Importer is an Asset importer that imports Aseprite's .ase and .aseprite files into Unity. See Aseprite Features to read more about which features from Aseprite are supported by the importer. See Importer Features to read more about which features the Aseprite Importer provides. Getting Started If you are using any of the following Unity versions or newer, Aseprite Importer package comes preinstalled when creating a new 2D or 2D URP project. Unity 2023.2.0a19 Unity 2023.1.0f1 Unity 2022.3.2f1 Unity 2021.3.28f1 You can also manually add the Aseprite Importer package by: Open Package Manager. Search for Aseprite Importer. Select 2D Aseprite Importer and press the install button. If you see a Burst popup saying that a new version of Burst has been installed, restart the editor. You are now ready to import .ase and .aseprite files into your project. Note: You need to use Unity 2021.3.15f1 or newer."
  },
  "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/whats-new.html": {
    "href": "Library/PackageCache/com.unity.2d.aseprite@1.1.8/Documentation~/whats-new.html",
    "title": "What's new in version 1.1.0 | ModularUIPack",
    "summary": "What's new in version 1.1.0 Added a mosaic padding option to the importer editor. Added \"Generate Physics Shape\" option to the importer editor."
  },
  "Library/PackageCache/com.unity.2d.aseprite@1.1.8/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.aseprite@1.1.8/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.2d.aseprite copyright © 2025 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.aseprite@1.1.8/README.html": {
    "href": "Library/PackageCache/com.unity.2d.aseprite@1.1.8/README.html",
    "title": "| ModularUIPack",
    "summary": "Aseprite Importer ScriptedImporter to import .ase/.aseprite files into Unity."
  },
  "Library/PackageCache/com.unity.2d.common@8.0.4/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.2d.common@8.0.4/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [8.0.4] - 2024-09-25 Added Internal support for AssetPreview methods. [8.0.3] - 2024-06-25 Fixed DANB-604 Fix case where Spriteshape vertex array exceeds limit even though it has not reached 64K. [8.0.2] - 2023-10-25 Fixed Fixed an issue where PSDImporter atlas size does not follow PVRTC compression format for the iOS platform [8.0.1] - 2022-10-11 Changed Refactored the internal triangulation and tessellation APIs. [8.0.0] - 2022-08-03 Changed Refactored internal triangulation and tessellation APIs. Update com.unity.burst dependency version to 1.7.3 to support latest PS4 SDK. Added support for different sized texture inputs in ImagePacker. [8.0.0-pre.2] - 2022-05-31 Added Moved internal API from animation to common package. [8.0.0-pre.1] - 2022-03-21 Changed Minimized memory allocated for UTess. [7.0.0] - 2022-01-25 Changed Package release version. Fixed 1382695 Fixed case where control point selection flickers when drag and multi-select points in scene Optimized texture space needed for rect packing [7.0.0-pre.4] - 2021-11-24 Added Added internal method to get build target's group name. Added access to the internal helper method IsUsingDeformableBuffer. Fixed Allow internal TextureGenerator helper consider swizzle data. Fixed 1368956 Deleting certain vertices in sprite mesh leads to mesh resetted to quad incorrectly [7.0.0-pre.3] - 2021-10-21 Fixed Fixed passing in invalid argument to TextureGenerator for swizzling. [7.0.0-pre.2] - 2021-10-11 Fixed 1361541 Fix crash encountered when deleting vertices of sprite mesh in SkinningEditor [7.0.0-pre.1] - 2021-08-06 Changed Update Unity supported version to 2022.1 [6.0.0-pre.4] - 2021-07-05 Added Internal API for applying Sprite Editor Window changes [6.0.0-pre.3] - 2021-05-19 Fixed Fixed issues in tesselation library. [6.0.0-pre.2] - 2021-05-14 Fixed Fixed metafiles conflicts [6.0.0-pre.1] - 2021-05-05 Changed Version bump for Unity 2021.2 [5.0.0] - 2021-03-17 Changed Update version for release [5.0.0-pre.2] - 2021-01-16 Changed Update license file [5.0.0-pre.1] - 2020-10-30 Changed Version bump for Unity 2021.1 [4.0.3] - 2020-10-15 Fixed Allow 2D Packages to access internal constant value for asset creation instance id [4.0.2] - 2020-08-31 Fixed Allow launching Sprite Editor Window to target a specific asset [4.0.1] - 2020-07-07 Fixed Updated to use non-experimental AssetImporter namespace (case 1254381) [4.0.0] - 2020-05-11 Changed Version bump for Unity 2020.2 [3.0.0] - 2019-11-06 Changed Update version number for Unity 2020.1 [2.0.2] - 2019-08-09 Added Add Seconday Texture settings into TextureSettings for TextureGenerator Add related test packages [2.0.1] - 2019-07-13 Changed Mark package to support Unity 2019.3.0a10 onwards. [2.0.0] - 2019-06-17 Added Drop preview tag. Remove experimental namespace [1.2.0-preview.2] - 2019-06-04 Added Remove Image Packer Debug Window Move tests out of package [1.2.0-preview.1] - 2019-02-20 Added Update for Unity 2019.2 support. [1.1.0-preview.2] - 2019-03-18 Added Remove deprecated call to Unity internal API [1.1.0-preview.1] - 2019-01-25 Added Added versioning for CI."
  },
  "Library/PackageCache/com.unity.2d.common@8.0.4/Documentation~/Common.html": {
    "href": "Library/PackageCache/com.unity.2d.common@8.0.4/Documentation~/Common.html",
    "title": "Introduction | ModularUIPack",
    "summary": "2D Common Introduction This package contains shared code used by various 2D packages such as Sprite Shape and 2D Animation. The package is currently for internal use only, and not meant for public use at this time."
  },
  "Library/PackageCache/com.unity.2d.common@8.0.4/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.common@8.0.4/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.2d.common copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.common@8.0.4/README.html": {
    "href": "Library/PackageCache/com.unity.2d.common@8.0.4/README.html",
    "title": "| ModularUIPack",
    "summary": "2D Shared Code UTess - a 2D geometry generation toolkit. ImagePacker - fits a list of textures or rects into a bigger rect."
  },
  "Library/PackageCache/com.unity.2d.common@8.0.4/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.2d.common@8.0.4/Third Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: cdt2d License Type: The MIT License Copyright (c) 2015 Mikola Lysenko https://github.com/mikolalysenko/cdt2d Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [5.0.3] - 2022-10-20 Added Added editor assembly reference to Unity.RenderPipelines.Universal.2D.Runtime Changed Move internal tests to Pixel Perfect Tests package [5.0.2] - 2022-09-21 Added Added URP Pixel Perfect Camera converter Fixed Removed AudioModule package dependency from sample project Changed Hide duplicate Pixel Perfect menus if URP Package is installed [5.0.1] - 2021-08-06 Fixed Fixed a bug where clear buffer was executed out of order (case 129263) Changed Update compatibility warning text (case 1337165) [5.0.0] - 2021-03-17 Changed Update version for release [5.0.0-pre.2] - 2021-01-16 Changed Update license file [5.0.0-pre.1] - 2020-10-30 Changed Version bump for Unity 2021.1 [4.0.1] - 2020-06-10 Fixed Fixed the broken documentation URL of the Component. [4.0.0] - 2020-05-11 Changed Version bump for Unity 2020.2 [3.0.2] - 2020-03-28 Fixed Fixed an issue where Cinemachine Pixel Perfect Extension didn't work when CinemachineBrain Update Method is anything other than Late Update. [3.0.1] - 2019-11-14 Changed Deploy samples as individual files. Made the editor class internal. Changed License file [3.0.0] - 2019-11-06 Changed Update version number for Unity 2020.1 [2.0.3] - 2019-11-06 Changed Deprecated the CinemachinePixelPerfect extension. Use the one from Cinemachine v2.4 instead. [2.0.2] - 2019-07-13 Changed Mark package to support Unity 2019.3.0a10 onwards. [2.0.1] - 2019-07-12 Changed Deploy Samples as UnityPackage. [2.0.0] - 2019-07-05 Added Added CinemachinePixelPerfect, a Cinemachine Virtual Camera Extension that solves some compatibility issues between Cinemachine and Pixel Perfect Camera. Fixed Fixed an issue where recompiling scripts while a Pixel Perfect Camera is running would cause null reference exeptions. [1.0.1-preview] - 2018-06-19 Changed Disabled \"Run In Edit Mode\" button for presets and inactive game objects. \"Run In Edit Mode\" is now automatically disabled when you enter play mode. Fixed Fixed an issue where some UI text was missing from the preset inspector. Addressed a performance warning you could get when you target mobile platforms. [1.0.0-preview] - 2018-05-03 This is the first preview release of Unity Package <2D Pixel Perfect>. This initial release contains a Pixel Perfect Camera component which ensures your pixel art remains crisp and clear at different resolutions, and stable in motion."
  },
  "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "2D Pixel Perfect"
  },
  "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/Documentation~/index.html",
    "title": "2D Pixel Perfect | ModularUIPack",
    "summary": "2D Pixel Perfect The 2D Pixel Perfect package contains the Pixel Perfect Camera component, which ensures your pixel art remains crisp and clear at different resolutions, and stable in motion. It is a single component that makes all the calculations Unity needs to scale the viewport with resolution changes, so that you don’t need to do it manually. You can use the component settings to adjust the definition of the rendered pixel art within the camera viewport, and you can use the Run in Edit Mode feature to preview any changes immediately in the Game view. Attach the Pixel Perfect Camera component to the main Camera GameObject in the Scene, it is represented by two green bounding boxes centered on the Camera gizmo in the Scene view. The solid green bounding box shows the visible area in Game view, while the dotted bounding box shows the Reference Resolution. The Reference Resolution is the original resolution your Assets are designed for, its effect on the component's functions is detailed further in the documentation. Before using the component, first ensure your Sprites are prepared correctly for best results with the the following steps. Preparing Your Sprites After importing your textures into the project as Sprites, set all Sprites to the same Pixels Per Unit value. In the Sprites' Inspector window, set their Filter Mode to ‘Point’. Set their Compression to 'None'. Follow the steps below to correctly set the pivot for a Sprite Open the Sprite Editor for the selected Sprite. If __Sprite Mode __is set to ‘Multiple’ and there are multiple Sprite elements, then you need to set a pivot point for each individual Sprite element. Under the Sprite settings, set Pivot to ‘Custom’, then set Pivot Unit Mode to ‘Pixels’. This allows you to set the pivot point's coordinates in pixels, or drag the pivot point around freely in the Sprite Editor and have it automatically snap to pixel corners. Repeat for each Sprite element as necessary. Snap Settings To ensure the pixelated movement of Sprites are consistent with each other, follow the below steps to set the proper snap settings for your project. To open the Snap settings, go to Edit > Snap Settings. Set the Move X/Y/Z properties to 1 divided by the Pixel Perfect Camera’s Asset Pixels Per Unit (PPU) value. For example, if the Asset PPU is 100, you should set the Move X/Y/Z properties to 0.01 (1 / 100 = 0.01). Unity does not apply Snap settings retroactively. If there are any pre-existing GameObjects in the Scene, select each of them and select Snap All Axes to apply the Snap settings. Properties The component's Inspector window Property Function Asset Pixels Per Unit This is the amount of pixels that make up one unit of the Scene. Match this value to the Pixels Per Unit values of all Sprites in the Scene. Reference Resolution This is the original resolution your Assets are designed for. Upscale Render Texture Enable this property to create a temporary rendered texture of the Scene close-to or at the Reference Resolution, which is then upscaled. Pixel Snapping (only available when ‘Upscale Render Texture’ is disabled) Enable this feature to snap Sprite Renderers to a grid in world space at render-time. The grid size is based on the Assets’ Pixels Per Unit value. Crop Frame Crops the viewport with black bars to match the Reference Resolution along the checked axis. Check X to add horizontal black bars, and Y to add vertical black bars. For more information and a visual example, refer to the Property Details below. Stretch Fill (available when both X and Y are checked) Enable to expand the viewport to fit the screen resolution while maintaining the viewport's aspect ratio. Run In Edit Mode Enable this checkbox to preview Camera setting changes in Edit Mode. This causes constant changes to the Scene while active. Current Pixel Ratio (available when ‘Run In Edit Mode’ is enabled) Shows the size ratio of the rendered Sprites compared to their original size. Additional Property Details Reference Resolution This is the original resolution your Assets are designed for. Scaling up Scenes and Assets from this resolution preserves your pixel art cleanly at higher resolutions. Upscale Render Texture By default, the Scene is rendered at the pixel perfect resolution closest to the full screen resolution. Enable this option to have the Scene rendered to a temporary texture set as close as possible to the Reference Resolution, while maintaining the full screen aspect ratio. This temporary texture is then upscaled to fit the entire screen. The result is unaliased and unrotated pixels, which may be a desirable visual style for certain game projects. Pixel Snapping Enable this feature to snap Sprite Renderers to a grid in world space at render-time. The grid size is based on the Assets Pixels Per Unit value. Pixel Snapping prevents subpixel movement and make Sprites appear to move in pixel-by-pixel increments. This does not affect any GameObjects' Transform positions. Crop Frame Crops the viewport along the checked axis with black bars to match the Reference Resolution. Black bars are added to make the Game view fit the full screen resolution. Uncropped Cropped Cinemachine Extension As both the Pixel Perfect Camera and Cinemachine modify a Camera’s orthographic size, using these two systems together in a single Scene would cause them to fight for control over the Camera and likely produce unwanted results. To solve this incompatibility, add the Cinemachine Pixel Perfect extension to your virtual cameras. You can find more information about the extension’s features in the Cinemachine documentation."
  },
  "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.2d.pixel-perfect copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/README.html": {
    "href": "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/README.html",
    "title": "2D Pixel Perfect | ModularUIPack",
    "summary": "2D Pixel Perfect Quick start guide: Add Pixel Perfect Camera component to your main camera. Set Assets Pixels Per Unit and Reference Resolution. Enter Play Mode and see the result."
  },
  "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/Samples~/Scenes and Extras/Third-Party Notices.html": {
    "href": "Library/PackageCache/com.unity.2d.pixel-perfect@5.0.3/Samples~/Scenes and Extras/Third-Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "This asset is governed by the Asset Store EULA; however, the following components are governed by the licenses indicated below: A. Roboto Copyright Google 2004 Apache 2.0 TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2004 Google Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [8.0.5] - 2024-05-06 Fixed Fixed layers are not shown in LayerImportSettings after unselecting all layers and applying. (Case DANB-569) [8.0.4] - 2023-12-14 Fixed Provide custom packing override for users to override to address DANB-526. (Case DANB-526) [8.0.3] - 2023-10-25 Fixed Fixed an issue where PSDImporter atlas size does not follow PVRTC compression format for the iOS platform [8.0.2] - 2022-12-01 Fixed Fixed an issue where the editor would crash when importing .psd/.psb files with their layers outside of the document canvas. (Case DANB-300) Fixed an issue where the amount of alpha removed from layers would not be re-applied as final position offset of the layers. Fixed an issue where the generated GameObjects would be laid out differently from how they appear in the DCC tool. (Case DANB-298) [8.0.1] - 2022-10-11 Fixed Improved import speed and memory allocation for psd/psb files by reducing the intermediate texture buffers. Fixed an editor freeze caused by over allocating intermediate texture buffers. (Case DANB-140) Fixed an issue where some layers would become invisible when merging multiple layers together. (Case DANB-131) [8.0.0] - 2022-08-03 Changed Package release version. Fixed Fixed exception when showing PSDImporter inspector. (DANB-196) [8.0.0-pre.3] - 2022-05-31 Changed Update dependency package version. [8.0.0-pre.2] - 2022-05-20 Fixed Fixed Sprite missing reference on certain source file created by third party tools. (Case DANB-30) [8.0.0-pre.1] - 2022-03-21 Fixed Allow multi editing for PSDImporter Settings tab. (Case 1400534) Fixed import not importing when Apply is clicked on Inspector. Changed SpriteSkins generated by the PSD Importer now have their rootBone assigned to the root object of the model prefab. Added Added drop down list utility in Layer Management tool for quick selection of layers for import. [7.0.0] - 2022-01-25 Changed Package release version. Fixed Fixed null exception when importing files with masks. (Case 1388820) [7.0.0-pre.4] - 2021-11-24 Fixed Fixed per platform settings does not get applied in Windows platform. (Case 1376608) Fixed unable to change mipmap settings in inspector. (Case 1379426) Fixed PSDImporter to able to specify swizzle data. Added Added ability to change swizzle format in inspector. [7.0.0-pre.3] - 2021-10-21 Changed Update to latest com.unity.2d.animation package [7.0.0-pre.2] - 2021-10-11 Fixed Fixed artifacts on images when flatten Fixed exception \"PsdInvalidException: Unrecognized layer section type\" when importing certain files. [7.0.0-pre.1] - 2021-08-06 Changed Update Unity supported version to 2022.1 Fixed Removed memory requirement check since we cannot properly determine if there will be enough memory to import the file (case 1338690) [6.0.0-pre.4] - 2021-07-05 Fixed Fixed changing PSD Importer inspector fields causes UnityEditor.ObjectPreview errors (case 1333823) Fixed 2D PSDImporter always imports .psb files when switching build platforms (case 1327701) Fixed 2D PSDImporter doesn't apply settings from Sprite Editor Window when changes made in Inspector (case 1339799) [6.0.0-pre.3] - 2021-05-17 Changed Update dependency version [6.0.0-pre.2] - 2021-05-14 Changed Update dependency version [6.0.0-pre.1] - 2021-05-05 Changed Version bump for Unity 2021.2 Added Add ability to use Photoshop file's layer name to map to SpriteRect instead of using layer id Provide auto custom Physics shape generation option Add support to collapse layers in a Photoshop file's group Improve PSDImporter Inspector Fixed Fixed Unity hang when importing certain PSD files (case 1312835) [5.0.0] - 2021-03-17 Changed Update version for release [5.0.0-pre.3] - 2021-03-15 Changed Updated documentation [5.0.0-pre.2] - 2021-01-16 Changed Update license file Fixed Fixed case 1291323 where upgrading from PSDImporter v2 causes Sprite to be missing [5.0.0-pre.1] - 2020-11-02 Added Added bone sharing from other PSDImporter file [4.0.2] - 2020-08-31 Fixed Fixed importing files with vector layers generates textures incorrectly (case 1266986) Fixed Sprite Editor Window doesn't show the Sprite when the Inspector is locked and the Sprite is not selected in the Project window [4.0.1] - 2020-07-07 Fixed Fixed ArgumentException thrown when 2D Game Kit is imported for the first time (case 1244287) Updated to use non-experimental AssetImporter (case 1254380) [4.0.0] - 2020-05-11 Changed Version bump for Unity 2020.2 [3.1.4] - 2020-04-09 Fixed Fix PSD import issues with PSD file without unique layer id Fix crash on importing huge PSD files Fix metafile not updated when reimporting Fix error when importing PSB files with 32-bit color Changed Improve PSD file import performance [3.1.3] - 2020-03-20 Changed Update 2D Animation dependency [4.0.0] - 2020-03-11 Changed Version bump for Unity 2020.2 [3.1.2] - 2020-02-27 Fixed Fixed broken documentation links in inspectors Fixed empty GameObjects created in certain cases [3.1.1] - 2020-01-09 Fixed Fix wrong dependency version [3.1.0] - 2019-12-16 Added Expose PSDImporter class to be accessible via scripting Added example in manual to show how to set PSDImporter as default importer for PSD files. [3.0.0] - 2019-11-06 Changed Update version number for Unity 2020.1 Update documentation [2.0.6] - 2019-10-18 Fixed Fixed SpriteRect name clash when Photoshop layer is renamed to the same name as an exisiting user created SpriteRect [2.0.5] - 2019-08-06 Fixed Physics Shape not saved into Sprite when importing with AssetDatabase V2 Added Experimental feature to have Sprites with same name generated from source file Support for providing Layer and Group order to Animation Skinning Module [2.0.4] - 2019-08-09 Added Add related test packages Add support Secondary Texture Module in Sprite Editor Window Fixed Texture and SpriteLibraryAsset subassets in PSDImporter now follows the main asset's name. [2.0.3] - 2019-07-20 Changed Update 2D Animation dependency [2.0.2] - 2019-07-13 Changed Mark package to support Unity 2019.3.0a10 onwards. [2.0.1] - 2019-06-12 Changed Update 2D Animation dependency [2.0.0] - 2019-06-17 Changed Remove preview tag Remove experimental namespace [1.2.0-preview.2] - 2019-06-07 Added Change API to internal access Only generate Sprite Library Asset if there is entry Do not reset Reslice checkbox after Inspector apply [1.2.0-preview.1] - 2019-03-15 Added Update support for 2019.2 Integrate with 2D Animation Sprite Library Integrate with new 2D Animation Character Group Fix asset name conflict [1.1.0-preview.2] - 2019-04-23 Added Fix potential name clashing issues with ScriptedImporter Fix Prefab asset using wrong name. Note this will break Prefab references if upgrading from previous versions. [1.1.0-preview.1] - 2019-02-19 Added Update dependency for 2019.1 support [1.0.0-preview.3] - 2019-02-19 Added Fix compilation error in .NET 3.5 [1.0.0-preview.2] - 2019-01-25 Added Fix unable to rig Sprites created manually Remove legacy packing tag Default Texture Type is changed to 'Sprite (2D and UI)' Default Sprite Mode is changed to 'Multiple' [1.0.0-preview.1] - 2018-11-20 Added New release ScriptedImporter for importing Adobe Photoshop file Supports handling of Adobe Photoshop layers Creates Sprites from individual layers Handles include or exclude hidden layers Supports Prefab generation that reconstruct generated Sprites to original art asset layout Prefab generation supports GameObject grouping based on Adobe Photoshop layer grouping Supports 2D Animation v2 single character with multiple Sprites workflow"
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/PSD-importer-SpriteRect.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/PSD-importer-SpriteRect.html",
    "title": "How the PSD Importer uses SpriteRect data | ModularUIPack",
    "summary": "How the PSD Importer uses SpriteRect data The PSD Importer can store five separate sets of SpriteRect data, with one set for each of the five combinations of Importer property settings below: When Sprite Mode is set to Single. When Sprite Mode is set to Multiple. When Sprite Mode is set to Multiple, and Individual Sprites (Mosaic) is enabled. When Sprite Mode is set to Multiple, both Individual Sprites (Mosaic) and Use as Rig are enabled, and there is no Skeleton Asset assigned as the Main Skeleton. When Sprite Mode is set to Multiple, both Individual Sprites (Mosaic) and Use as Rig are enabled, and a Skeleton Asset is assigned as the Main Skeleton. Each set of data is persistent, and does not affect or overwrite the data of other sets. This means you can save different SpriteRect data for different importer settings for the same source file. The SpriteRect data persists even if you modify the dimensions and position of images in the source file, as long as the original Layer ID of the source layers remains the same. Modifying SpriteRect data The SpriteRect defines the location of the Sprite on the Texture that Unity generates from the imported source file. You can modify the location and size of each SpriteRect in the Sprite Editor. Moving the SpriteRect Example 1: Original SpriteRect location of the ‘head’ Sprite on the combined Sprite sheet Texture. Example 2: Drag the corners of the SpriteRect to modify its dimensions and location, or enter the coordinates and dimensions in the Sprite panel. A SpriteRect’s modified dimensions and location on the Texture is reflected for its respective Sprite in the Scene view. Original character prefab and its ‘head’ Sprite with unmodified SpriteRect data. Character prefab with its ‘head’ Sprite’s SpriteRect data modified. SpriteRect follows the position of its source layer When you enable the Individual Sprites (Mosaic) importer setting, the PSD Importer arranges the different layers of the source file together to form a single combined Texture when it is imported. The importer generates a SpriteRect for each of these imported layers which follows the position of its associated layer wherever that layer is placed in the combined Mosaic Texture. Before example: The SpriteRect of the ‘head’ layer after moving its SpriteRect from its original position. After example: Some of the layers are hidden in the source file before it is reimported into the Editor. The reimported Texture is different from the original, but the 'head' layer's SpriteRect follows its source layer to its placement in the new Texture. Resizing the source file or image Note that a SpriteRect’s size and position remains the same if you change the image or canvas size of its source layer in the source file. You must manually edit the size and position of the SpriteRect in the Sprite Editor, or select and apply the Automatic Reslice option to regenerate the SpriteRect completely from the source file. Before example: Original position and size of the SpriteRect for the generated ‘head’ Sprite from the 'head' layer. After example: After increasing the size of the 'head' layer, the SpriteRect's position and size remains the same. SpriteRect data persists until you manually delete the SpriteRect, or select the Automatic Reslice option and apply it in the importer settings. When you do this, Unity discards all user modifications for the current set of SpriteRect data and regenerates all the SpriteRects from the current source file. Summary of source file modifications and their effects on SpriteRect data Modification to the source file Effect on SpriteRect data Add a new layer or enable layer visibility The PSD importer automatically generates a new Sprite from the new layer, or newly visible layer, with its associated SpriteRect. Delete a layer or disable layer visibility The PSD Importer deletes the associated Sprite and SpriteRect from the Project file. Rename a layer By default, the SpriteRect copies the new name of its source layer. However if you rename the SpriteRect in the Sprite Editor, then it retains its modified name and does not copy the source layer’s new name. Change a layer or canvas size When a source layer's size changes, the size and position of its related SpriteRect remain the same and do not reflect the changes made to its source layer. To make the SpriteRect reflect the changes made to its source layer, manually edit the SpriteRect’s dimensions in the Sprite Editor, or go to the PSD Importer settings and select and apply the Automatic Reslice option. Name collision errors A name collision error occurs when two or more layers have the same name. This can happen for the following reasons: Two or more layers in the imported source file have the same name. However, Photoshop group layers with the same names do not cause this issue. A new layer that the PSD Importer creates in the source file has the same name as a SpriteRect you have created or modified. A layer is renamed to the same name as a SpriteRect you have modified. A previously hidden layer with the same name as an existing SpriteRect becomes visible and Unity imports it. When a name collision occurs, one SpriteRect retains the original name while the other is appended with a running number to the others (starting with 1). Which SpriteRect retains their original name is based on the following priority: A SpriteRect you have created or modified. The first layer in the source file, starting from the bottom of the layer stack. Currently existing SpriteRects in the Project."
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/PSD-importer-properties.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/PSD-importer-properties.html",
    "title": "| ModularUIPack",
    "summary": "#PSD Importer Inspector properties The PSD Importer is available after you import a .psb file into your Project. Select the .psb Asset file and set its Texture Type to Sprite (2D and UI). The PSD Importer properties are split between two main tabs, with the following properties available. PSD Importer Inspector properties ##Settings tab The Settings tab allows you to customize how the PSD Importer imports a file. The settings are categorized into individual section fold-outs. ###General Property Description Texture Type Select Sprite (2D and UI) to import the Texture as a Sprite. The is required to begin using the imported Texture with the 2D Animation package. Sprite Mode Use this property to specify how Unity extracts the Sprite graphic from the image. This property is set to Multiple by default. Single Select this option to have Unity treat the imported Texture as a single Sprite Asset without multiple individual parts. This is ideal for characters which are drawn on a single layer in the source file instead of being split onto multiple layers. Multiple This is the default option. Select this option to have Unity create a Sprite for each layer in the source file. This is ideal for complex artwork which has different parts split between multiple layers in the source file, and prepares the imported Textures for animation with the 2D Animation package. Pixels Per Unit Sets the number of pixels that equal to one Unity unit. Mesh Type Sets the Mesh type that Unity generates for the Sprite. This is set to Tight by default. Full Rect Unity maps the Sprite onto a rectangular Mesh. Tight Unity generates a Mesh based on the outline of the Sprite. If the Sprite is smaller than 32 x 32 pixels, Unity always maps it onto a Full Rect quad Mesh, even if you select Tight. Extrude Edges Use the slider to determine how much to extend the Mesh from the edge of the Sprite. Generate Physics Shape Enable this option to generate a default [Physics Shape](https://docs.unity3d.com/2017.4/Documentation/Manual/SpritePhysicsShapeEditor.html) from the outline of the Sprite, if a [Custom Physics Shape](https://docs.unity3d.com/Manual/CustomPhysicsShape.html) has not be defined Automatic Reslice This is available only when the Import Mode is set to Individual Sprites (Mosaic). Enable this setting to regenerate the Sprite from the imported layers and clear any changes you have made to the Sprite and its metadata. ####Automatic Reslice Enable this setting to discard all user modifications for the current set of SpriteRect data and regenerate all SpriteRects based on the current source file. Extra SpriteRect metadata (such as weights and bones data) persist if they remain valid with the regenerated SpriteRects. ###Layer Import The following section is only available if the Texture Type is set to Multiple. Property Description Include Hidden Layers Enable this property to include the hidden layers of the .psb file in the import. This produces the same import result as making all layers visible in the source file unhiding all layers in the source file before you importing it into Unity. Clear this option if you want to only import the visible layers in the .psb file. Keep Duplicate Name Enable this setting to make the PSD Importer generate Sprites from the source files with the exact same name as their source layers, even when there are multiple layers with the same name. Use Layer Group This setting is only available when you enable Character Rig. Enable this setting to make the importer generate a Prefab that follows the layer and grouping hierarchy of the imported .psb. file. Layer Mapping Select this option to use the internal ID provided by the .psb file to map between the .psb file’s layer and the generated Sprite. Use Layer ID Select this to only import the visible layers in the .psb file. Use Layer Name Select this option to use the name of the layer in the .psb file to map between the .psb file’s layer and the generated Sprite. Note that for this option to work correctly, each layer's name needs to be unique. Duplicated names might cause layers to be mapped to the wrong Sprite. Use Layer Name (Case Sensitive) Select this option to use the name of the layer (with case sensitivity) in the .psb file to map between the .psb file’s layer and the generated Sprite. Note that for this option to work correctly, each layer's name needs to be unique. Duplicated names might cause layers to be mapped to the wrong Sprite. Import Mode Use this property to specify how the layers from the source file are imported. This property is set Individual Sprites (Mosaic) by default. Individual Sprites (Mosaic) Select this option to have the PSD Importer generate individual Sprites from the individual layers of the source file, and combines them into a single Texture in a Sprite sheet layout. Merged Select this to have the PSD Importer generate a Texture with all layers merged. Mosaic Padding Settings to control the padding space between each layer in the texture when Import Mode is set to Individual Sprites (Mosaic). Sprite Padding Settings to increase the size of each Sprite's rect in the texture when Import Mode is set to Individual Sprites (Mosaic). ####Individual Sprites (Mosaic) Enable this to have the PSD Importer attempt to create a Texture with each layer from the source file laid out in a mosaic manner. Individual layers are imported as separate Sprites merged into a single Texture in the form of a mosaic. ####Merged Enable this option to have the PSD Importer create a Texture with the layers from the Photoshop source file as if all layers were flattened. ####Keep Duplicate Names Unity's default import behavior when there are duplicate names is to append \"_[number]\" to the Sprites and SpriteRects it generates from source layers with identical names. Enable this feature to instead have Unity give both Sprites and SpriteRects the exact same name as their source layer, even when they are duplicate names. ####Layer Group By default, the importer only generates GameObjects for layers in the source file. This is for performance reasons to minimize the number of GameObjects needed for the Prefab. The generated Prefab with Layer Group set to Ignore Layer Groups. To include and maintain the group and hierarchy structure as per the source file, you can set the Layer Group to As Per Source File, as shown in the example below. The generated Prefab of the same source file with Layer Group set to As Per Source File. ###Character Rig This section is only available if the Texture Type is set to Multiple and Import Mode is set to Individual Sprites (Mosaic). Property Description Use as Rig Enable this property to have the PSD Importer generate a Prefab based on the imported source file. The PSD Importer generates Sprites from the imported layers of the source file, and the Sprites’ hierarchy and positions are based on their layer hierarchy and their positions in the source file. Main Skeleton This is only available when Use as Rig is enabled. Assign the Skeleton Asset that this character Prefab’s bone hierarchy will reference. If no Skeleton Asset is assigned, the importer will automatically generate a Skeleton Asset as a sub-Asset of this character. The Skeleton Asset contains the bone hierarchy of the Asset that was defined in the 2D Animation package's Skinning Editor (refer to Skeleton Sharing for more information). Pivot This is only available when Use as Rig is enabled. Select the pivot point of the Sprite. Custom Define the X and Y coordinates of a custom Pivot location. (All location choices) Select the location where you want to place the pivot on the Sprite from the dropdown menu. ####Use as Rig Enable this property to have the PSD Importer generate a Prefab containing Sprites based on the layers of the imported source file. The PSD Importer also automatically gives the Sprites an Order in Layer value that sorts them according to their positions in the layer hierarchy in the source file. As a result, the generated Prefab recreates the arrangement and appearance of the assets in the original source file as closely as possible. The name of each Sprite in the Prefab is the same as the source layer it is based on, unless a name collision error occurs, which is usually due to duplicate names in the source layers. If the Sprite contains bone or weight data, the PSD Importer automatically adds the Sprite Skin component to it. This happens if the Sprite has been rigged with bones and weights in the Skinning Editor already and the source file is being reimported, or you have manually copied and pasted the bone and weight data onto the Sprites. ####Main Skeleton A skeleton Asset (.skeleton) is an Asset that contains the bone hierarchy structure that can be animated with the 2D Animation package. The Main Skeleton property is only available when you import a .psb file with the Use As Rig importer setting enabled. After importing the .psb file, assign a .skeleton Asset to the Main Skeleton property to have the generated prefab character be automatically rigged with the bone hierarchy structure contained in that .skeleton Asset. If there is no .skeleton Asset assigned to the importer’s Main Skeleton property, then a .skeleton Asset is automatically generated as a of the imported source file and it will be named ‘[Asset File Name] Skeleton’. You can share .skeleton Assets between different generated Prefabs by assigning the same .skeleton as their Main Skeleton property when they're imported. When you open and edit the character in 2D Animation package’s Skinning Editor, the module will display the bone hierarchy provided by the skeleton Asset assigned to Main Skeleton for rigging. ##Layer Management Tab The Layer Management Tab allows you to customize how the Importer imports the layers from the Photoshop file. ###Layer hierarchy tree Group layers in Photoshop are represented with a fold-out folder icon in the hierarchy tree of the Layer Management tab, while regular Photoshop layers in Photoshop represented only by their names. ###Layer visibility Groups or layers that are hidden in the source file are indicated with different color text compared to visible groups or layers. ###Layer Importing The checkbox on each Group/Layer indicates if the Group or Layer from the Photoshop file should be imported. The Group or Layer will be imported when the checkbox is selected. Clear the Include Hidden Layers option in the Layer Management Tab or Settings Tab will only import visible layers from the source file. If a hidden group or layer is mark for import in this state, a warning icon will appear. To import a hidden layer, select the Include Hidden Layers checkbox either in the Settings Tab or in the Layer Management Tab To batch select or deselect layers, you can use the drop down menu located at header of the Layer Importing column. Collapsing Groups The Photoshop layers in a Group can be collapsed into a single Sprite when imported. Hover the cursor over a Group Layer and the Collapse icon appears on its left. Collapse icon with arrow facing down. Click the icon to indicate that the layers in the selected Group should be imported as a single Sprite. Uncollapsing Groups Hovering over a Collapsed Group layer reveals the Uncollapse icon (the arrow faces upwards). Select the icon again to uncollapse the Group layer and to import all Layers in the Group as separate Sprites. Subgroups within Group layers If a Group contains other Group layers and is collapsed, then the layers in the subgroups will also be collapsed into a single Sprite. If a child Group is currently set to be collapsed, then the parent group will have separate icons indicating that are child Groups currently set to collapse."
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/PSD-override.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/PSD-override.html",
    "title": "PSD File Importer Override | ModularUIPack",
    "summary": "PSD File Importer Override From Unity 2019.30f1 onwards, you can customize the PSD Importer to import files with the .psd extension. To do that you need to create custom scripts that call the AssetDatabaseExperimental.SetImporterOverride method. Example SetImporterOverride scripts PSDImporterOverride.cs using UnityEngine; namespace UnityEditor.U2D.PSD { [ScriptedImporter(1, \"psd\", AutoSelect = false)] internal class PSDImporterOverride : PSDImporter { [MenuItem(\"Assets/2D Importer\", false, 30)] [MenuItem(\"Assets/2D Importer/Change PSD File Importer\", false, 30)] static void ChangeImporter() { foreach (var obj in Selection.objects) { var path = AssetDatabase.GetAssetPath(obj); var ext = System.IO.Path.GetExtension(path); if (ext == \".psd\") { var importer = AssetImporter.GetAtPath(path); if (importer is PSDImporterOverride) { Debug.Log(string.Format(\"{0} is now imported with TextureImporter\", path)); AssetDatabaseExperimental.ClearImporterOverride(path); } else { Debug.Log(string.Format(\"{0} is now imported with PSDImporter\", path)); AssetDatabaseExperimental.SetImporterOverride<PSDImporterOverride>(path); } } } } } } PSDImporterOverrideEditor.cs namespace UnityEditor.U2D.PSD { [CustomEditor(typeof(UnityEditor.U2D.PSD.PSDImporterOverride))] internal class PSDImporterOverrideEditor : PSDImporterEditor { } }"
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "PSD Importer Overview PSD Importer Inspector properties Skeleton sharing How SpriteRect data is used PSD File Importer Override"
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/index.html",
    "title": "Overview | ModularUIPack",
    "summary": "Overview The PSD Importer is an Asset importer that imports Adobe Photoshop .psb files into Unity, and generates a Prefab of Sprites based on the imported source file. The .psb file format is functionally identical to the more common Adobe .psd format, but supports much larger images than the .psd format (up to 300,000 pixels in any dimension). To convert existing artwork from .psd to .psb format, you can open them in Adobe Photoshop and then save them as .psb files. Importing .psb files with the PSD Importer allows you to use features such as Mosaic (to automatically generate a Sprite sheet from the imported layers) and Character Rig (to reassemble the Sprites of a character as they are arranged in their source files). The PSD Importer currently only supports two Texture Modes: Default and Sprite. Note: The Sprite Library Asset is no longer editable from the Skinning Editor of the 2D Animation from version 6.0 onwards as the Category and Label options have been removed from the Sprite Visibility panel. However, the PSD Importer will continue to automatically generate Sprite Library Assets if relevant data from a previous version is present. Supported and unsupported Photoshop effects When importing a .psb file into Unity with the PSD Importer, the importer generates a prefab of Sprites based on the image and layer data of the imported .psb file. To ensure the importer imports the file correctly, ensure that the Photoshop file is saved with Maximize Compatibility enabled. The PSD Importer does not support all of Photoshop’s layer and visual effects or features. The PSD Importer ignores the following Photoshop layer properties and visual effects when it generates the Sprites and prefab: Channels Blend Modes Layer Opacity Effects If you want to add visual effects to the generated Sprites, you can add additional Textures to the Sprites with the Sprite Editor's Secondary Textures module. Shaders can sample these Secondary Textures to apply additional effects to the Sprite, such as normal mapping. Refer to the Sprite Editor: Secondary Textures documentation for more information."
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/skeleton-sharing.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Documentation~/skeleton-sharing.html",
    "title": "Skeleton sharing | ModularUIPack",
    "summary": "Skeleton sharing You can share .skeleton Assets between different imported Assets by assigning the .skeleton Asset from one to the other's Main Skeleton property. This feature can be used together with the 2D Animation package to edit the bones of the .skeleton Assets in the 2D Animation package's Skinning Editor. To demonstrate how to skeleton sharing, refer to the following example of two actors (characters or other Assets imported for animation with the 2D Animation package) that were imported into Unity with the PSD Importer called 'Primary' and 'Variant'. The goal is to share the .skeleton Asset of 'Primary' with 'Variant'. | --|-- Primary | Variant The 2D Animation package is required to create and edit the bones of the .skeleton Assets of imported Assets. In this example, the bones of 'Primary' are created and rigged in 2D Animation's Skinning Editor (refer to the 2D Animation package documentation for further information). A bone hierarchy connected together to form the skeleton of 'Primary'. When importing an Asset without anything set in the Main Skeleton property, the PSD Importer generates a .skeleton Asset for the Asset and automatically names it as '[Asset File Name] Skeleton'. Any bones rigged for 'Primary' is saved to the .skeleton Asset 'Primary Skeleton'. To share the 'Primary Skeleton' with 'Variant', select 'Variant' and go to its PSD Importer settings. Assign 'Primary Skeleton' to the Main Skeleton property to have 'Variant' reference that .skeleton Asset as its own bone hierarchy. The Bone tools are greyed out and unavailable when opening 'Variant' in the Skinning Editor. When an actor references another actor's .skeleton Asset instead of its own, the Bone Tools in the Skinning Editor are disabled. To edit the bones, open the original actor (that the .skeleton Asset belongs to) in the Skinning Editor and edit the bones. Any changes to the original .skeleton Asset is reflected in any actor which references it. In this example, changes made to 'Primary Skeleton' are reflected in the 'Variant' actor's bone hierarchy ."
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.2d.psdimporter copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/README.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/README.html",
    "title": "| ModularUIPack",
    "summary": "PSB Importer ScriptedImporter to import Adobe Photoshop PSB file format Feature Generate texture and sprite by mosaicing layers Option to generate Prefab to reconstuct the image from generated Sprites Option to import hidden layers"
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Samples~/PSDImporterSamples/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Samples~/PSDImporterSamples/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.2d.psdimporter Samples © 2023 Unity Technologies Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Samples~/PSDImporterSamples/PSDImporterCustomPacker/README.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Samples~/PSDImporterSamples/PSDImporterCustomPacker/README.html",
    "title": "PSDImporter Custom Image Packer | ModularUIPack",
    "summary": "PSDImporter Custom Image Packer This example shows how to override the default image packing algorithm in the PSDImporter. The example utilizes the m_Pipeline SerializedProperty that is defined in the PSDImporter. The m_Pipeline is a ScriptableObject reference and in the PSDImporter it will determine what method is available in the SciptableObject and execute those methods accordingly. Refer to the CustomPackScriptableObject.cs for more details."
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Samples~/PSDImporterSamples/README.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Samples~/PSDImporterSamples/README.html",
    "title": "2D PSDImporter Samples | ModularUIPack",
    "summary": "2D PSDImporter Samples 2D PSDImporter samples showing various use cases."
  },
  "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.2d.psdimporter@8.0.5/Third Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: Photoshop PSD FileType Plugin for Paint.NET License Type: MIT Copyright (c) 2006-2007 Frank Blumenberg Copyright (c) 2010-2016 Tao Yue https://www.psdplugin.com/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Yet Another PSD Parser License Type: BSD Copyright (c) 2006, Jonas Beckeman http://www.codeproject.com/KB/graphics/PSDParser.aspx Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of Jonas Beckeman nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY JONAS BECKEMAN AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JONAS BECKEMAN AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  "Library/PackageCache/com.unity.2d.sprite@1.0.0/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.2d.sprite@1.0.0/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [1.0.0] - 2020-09-22 ###Added Added confirmation dialog when user pressed on Apply/Revert button on the Sprite Editor Window. This can be enabled/disabled in Preferences [1.0.0] - 2019-01-25 ###Added This is the first release of Sprite Editor, as a Package"
  },
  "Library/PackageCache/com.unity.2d.sprite@1.0.0/Documentation~/DataProvider.html": {
    "href": "Library/PackageCache/com.unity.2d.sprite@1.0.0/Documentation~/DataProvider.html",
    "title": "Sprite Editor Data Provider API | ModularUIPack",
    "summary": "Sprite Editor Data Provider API By using the Sprite Editor Data Provider API, the user can add, change and remove Sprite data in a custom importer or editor tool. Refer to the code examples below to see how the API is applied. Important: Some of the following examples contains an additional section of code which is needed if you are using Unity 2021.2 or newer. If you are using Unity 2021.1 or older, you should remove the indicated section to ensure the code compiles properly. How to get ISpriteEditorDataProvider instances The following examples show you how to use the API to get each respective instance. Importer using UnityEditor; using UnityEditor.U2D.Sprites; using UnityEngine; public class MyAssetPostProcessor : AssetPostprocessor { private void OnPreprocessTexture() { var factory = new SpriteDataProviderFactories(); factory.Init(); var dataProvider = factory.GetSpriteEditorDataProviderFromObject(assetImporter); dataProvider.InitSpriteEditorDataProvider(); /* Use the data provider */ // Apply the changes made to the data provider dataProvider.Apply(); } } Texture using UnityEditor; using UnityEditor.U2D.Sprites; using UnityEngine; public static class MyCustomTool { [MenuItem(\"Custom/Update Sprite Settings\")] static void UpdateSettings() { foreach (var obj in Selection.objects) { if (obj is Texture2D) { var factory = new SpriteDataProviderFactories(); factory.Init(); var dataProvider = factory.GetSpriteEditorDataProviderFromObject(obj); dataProvider.InitSpriteEditorDataProvider(); /* Use the data provider */ // Apply the changes made to the data provider dataProvider.Apply(); // Reimport the asset to have the changes applied var assetImporter = dataProvider.targetObject as AssetImporter; assetImporter.SaveAndReimport(); } } } } How to add Sprites static void AddSprite(ISpriteEditorDataProvider dataProvider) { // Define the new Sprite Rect var newSprite = new SpriteRect() { name = \"MyNewSprite\", spriteID = GUID.Generate(), rect = new Rect(0, 0, 32, 32) }; // Add the Sprite Rect to the list of existing Sprite Rects var spriteRects = dataProvider.GetSpriteRects().ToList(); spriteRects.Add(newSprite); // Write the updated data back to the data provider dataProvider.SetSpriteRects(spriteRects.ToArray()); // Note: This section is only for Unity 2021.2 and newer // Register the new Sprite Rect's name and GUID with the ISpriteNameFileIdDataProvider var spriteNameFileIdDataProvider = dataProvider.GetDataProvider<ISpriteNameFileIdDataProvider>(); var nameFileIdPairs = spriteNameFileIdDataProvider.GetNameFileIdPairs().ToList(); nameFileIdPairs.Add(new SpriteNameFileIdPair(newSprite.name, newSprite.spriteID)); spriteNameFileIdDataProvider.SetNameFileIdPairs(nameFileIdPairs); // End of Unity 2021.2 and newer section // Apply the changes dataProvider.Apply(); } How to change Sprite data static void SetPivot(ISpriteEditorDataProvider dataProvider) { // Get all the existing Sprites var spriteRects = dataProvider.GetSpriteRects(); // Loop over all Sprites and update the pivots foreach (var rect in spriteRects) { rect.pivot = new Vector2(0.1f, 0.2f); rect.alignment = SpriteAlignment.Custom; } // Write the updated data back to the data provider dataProvider.SetSpriteRects(spriteRects); // Apply the changes dataProvider.Apply(); } How to remove Sprites static void RemoveSprite(ISpriteEditorDataProvider dataProvider, string spriteName) { // Get all the existing Sprites and look for the Sprite with the selected name var spriteRects = dataProvider.GetSpriteRects().ToList(); var index = spriteRects.FindIndex(x => x.name == spriteName); // Remove the entry of the Sprite if found if (index >= 0) spriteRects.RemoveAt(index); // Write the updated data back to the data provider dataProvider.SetSpriteRects(spriteRects.ToArray()); // Note: This section is only for Unity 2021.2 and newer // Get all the existing SpriteName & FileId pairs and look for the Sprite with the selected name var spriteNameFileIdDataProvider = dataProvider.GetDataProvider<ISpriteNameFileIdDataProvider>(); var nameFileIdPairs = spriteNameFileIdDataProvider.GetNameFileIdPairs().ToList(); index = nameFileIdPairs.FindIndex(x => x.name == spriteName); // Remove the entry of the Sprite if found if (index >= 0) nameFileIdPairs.RemoveAt(index); spriteNameFileIdDataProvider.SetNameFileIdPairs(nameFileIdPairs); // End of Unity 2021.2 and newer section // Apply the changes dataProvider.Apply(); } How to update Outline data static void SetOutline(ISpriteEditorDataProvider dataProvider) { // Get the ISpriteOutlineDataProvider var outlineDataProvider = dataProvider.GetDataProvider<ISpriteOutlineDataProvider>(); // Loop over all Sprites and set their outline to a quad var spriteRects = dataProvider.GetSpriteRects(); foreach (var spriteRect in spriteRects) { var halfWidth = spriteRect.rect.width / 2f; var halfHeight = spriteRect.rect.height / 2f; var quadOutline = new Vector2[4] { new Vector2(-halfWidth, -halfHeight), new Vector2(-halfWidth, halfHeight), new Vector2(halfWidth, halfHeight), new Vector2(halfWidth, -halfHeight) }; var outlines = new List<Vector2[]>(); outlines.Add(quadOutline); var spriteGuid = spriteRect.spriteID; outlineDataProvider.SetOutlines(spriteGuid, outlines); } // Apply the changes dataProvider.Apply(); } Additional resources Full list of other available data providers is available in the package's Scripting API section."
  },
  "Library/PackageCache/com.unity.2d.sprite@1.0.0/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.2d.sprite@1.0.0/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "2D Sprite package Sprite Editor Data Provider API"
  },
  "Library/PackageCache/com.unity.2d.sprite@1.0.0/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.2d.sprite@1.0.0/Documentation~/index.html",
    "title": "2D Sprite package | ModularUIPack",
    "summary": "2D Sprite package Install the 2D Sprite package to install the Sprite Editor, which allows you to create and edit Sprite assets. The Sprite Editor Data Provider API also allow user extensibility to add custom behaviour for editing various Sprite related data. To install the package, search for it in the Package Manager window and install it from the registry. If you created your Project with the 2D Template, this package is automatically installed. This version of Sprite Editor is compatible with the following versions of the Unity Editor: 2019.4 and later (recommended) Topic Description Sprite Editor (User Manual) Understand how to use the main features of the Sprite Editor. Sprite Editor Data Provider APIs Understand how to use the APIs available edit Sprite data. Package contents The following table indicates the folder structure of the Sprite package: Location Description <Editor> Root folder containing the source for the Sprite Editor. <Tests> Root folder containing the source for the tests for Sprite Editpr used the Unity Editor Test Runner. Documentation revision history Date Reason April 13, 2022 Added Sprite Editor Data Provider API samples January 25, 2019 Document created. Matches package version 1.0.0 Additional resources Sprite Editor: Custom Outline Sprite Editor: Custom Physics Shape Sprite Editor: Secondary Textures"
  },
  "Library/PackageCache/com.unity.2d.sprite@1.0.0/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.sprite@1.0.0/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.2d.sprite copyright © 2019 Unity Technologies Licensed under the Unity Package Distribution License (see https://unity3d.com/legal/licenses/Unity_Package_Distribution_License ). Unless expressly provided otherwise, the software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.sprite@1.0.0/README.html": {
    "href": "Library/PackageCache/com.unity.2d.sprite@1.0.0/README.html",
    "title": "About Sprite Editor | ModularUIPack",
    "summary": "About Sprite Editor Use Unity’s Sprite Editor to create and edit Sprite assets. Sprite Editor provides user extensibility to add custom behaviour for editing various Sprite related data. Installing Sprite Editor To install this package, follow the instructions in the Package Manager documentation. Using Sprite Editor The Sprite Editor Manual can be found [here] (https://docs.unity3d.com/Manual/SpriteEditor.html). Technical details Requirements This version of Sprite Editor is compatible with the following versions of the Unity Editor: 2019.2 and later (recommended) Package contents The following table indicates the folder structure of the Sprite package: Location Description <Editor> Root folder containing the source for the Sprite Editor. <Tests> Root folder containing the source for the tests for Sprite Editpr used the Unity Editor Test Runner. Document revision history Date Reason January 25, 2019 Document created. Matches package version 1.0.0"
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [9.0.5] - 2024-09-25 Fixed DANB-730 \"System.IndexOutOfRangeException\" is thrown when increasing Sprite Shape Mesh size beyond limits [9.0.4] - 2024-06-25 Fixed DANB-604 Fix case where Spriteshape vertex array exceeds limit even though it has not reached 64K. [9.0.3] - 2024-05-06 Fixed DANB-555 Fix Crash on DynamicHeapAllocator::Deallocate when changing SpriteShapeController splineDetail value through Script to 1 [9.0.2] - 2023-02-27 Fixed DANB-328 Fix case where BezierUtility.BezierPoint function parameters are not in the right order DANB-307 Fix case where Error �A Native Collection has not been disposed, resulting in a memory leak occurs in Play Mode DANB-279 Fix case where Spriteshape with tangents enabled has shadow artifacts after reopening the project [9.0.1] - 2022-10-11 Fixed DANB-177 Fix case where SpriteShapeController does not initialize collider data. DANB-224 Fix case where adding a new element to Custom Geometry Modifier spams errors. [9.0.0] - 2022-08-03 Changed Refactored internal triangulation and tessellation APIs. [9.0.0-pre.1] - 2022-03-21 Added Added versioning for GeometryCreator and GeometryModifier scripts so SpriteShape geoemetry is regenerated when it changes. Fill Tessellation in C# Job is now set as default tessellator. GC allocations are reduced when using this option. Fixed 1394404 Fix case where Tangent Data is always saved even when not in use for SpriteShapeRenderer when GeometryCache is active. 1391968 Fix case where \"Invalid memory pointer was detected in ThreadsafeLinearAllocator::Deallocate!\" error is thrown when Sprite is in Atlas with Tight Packing 1399392 Fix case where SpriteShape with Cache Geometry enabled does not update arrays when saving scene off-screen. 1400229 Fix case where SpriteShape corner does not respect the ControlPoint height. 1387298 Fix case where SpriteShape throws ArgumentException error when checking position validity of a point added to Spline 1401376 Fix case where Shape of PolygonCollider2D doesn't update when Sprite Shape contains vertex at [0,0] and it's Profile doesn't have any Sprites. [8.0.0] - 2022-01-25 Changed Package release version. Fixed 1392653 Fix case where SpriteShapeGeometry Cache does not update when n selecting a different Object when EditTool is active. [8.0.0-pre.5] - 2021-11-24 Fixed 1367509 Fix case where SpriteShapeProfile corner fields disappear when a field above has been deleted in the Inspector. 1363468 Fix case where shortcut keys do not work after editing sprite variant list in SpriteShape Controller. 1382718 Fix Case when setting SpriteShape corners to Disabled, the first corner does not visually change [8.0.0-pre.4] - 2021-10-21 Changed Update to latest com.unity.2d.common package [8.0.0-pre.3] - 2021-10-18 Fixed Fixed package.json to remove com.unity.2d.path dependency. [8.0.0-pre.2] - 2021-10-11 Fixed 1368107 Fix case where Bounds can cause spriteshape not load in when running Player. 1364012 Fix crash when optimizing the geometry of the SpriteShape in certain cases. [8.0.0-pre.1] - 2021-08-06 Added Add actionable console log when encounter vertex count limit exception Improved estimation of vertices required for geometry to minimize memory alloction. Added user preferences for Controlpoint/Tangent/Spline color. Added support for Global Grid Snapping. Changed Remove dependency to path package Moved Control point specific data from Inspector to a Scene Overlay Window. Fixed Fixed Bounds of SpriteShapeRenderer. Update manual to reflect reorganization of menu item. 1346430 Fix case where all open Scenes were dirtied when editing a SpriteShape Spline. 1343836 Fix case where triangular spriteshape with 0 offset collider does not generate collision shape. 1356204 Fix case where Sprite Shapes appear only when their pivot is revealed in the Scene view. 1348701 Fix case where colliders do not extend to the end of the sprite texture when Sprite Borders are enabled. 1362440 Fix case where Edge and Polygon colliders have missing edges on certain open-ended shapes. 1363215 Fix case where enabling Fill Tessellation and setting profile's fill offset to positive causes errors. 1368129 Fix case where Sprite Shape default materials were not initialized correctly. [7.0.0-pre.3] - 2021-05-17 Changed Update dependency version [7.0.0-pre.2] - 2021-05-14 Changed Update dependency version [7.0.0-pre.1] - 2021-05-05 Fixed 1274010 2D light is rendered in half in its Y-axis when two Sprite Shape objects with same Order In Layer are visible on the Screen 1313579 SpriteShape Prefabs does not work properly when GeometryCache is enabled. 1315086 When SpriteShapeController has \"Update Collider\" set to true, it will dirty the scene every time its selected 1306434 PrefabStage is moving out of UnityEditor.SceneManagement.Experimental namepace in 2021.2 1319096 At certain cases, vertex data allocation may not be enough and overflows. 1321978 Edge collider 2D and polygon collider 2D creates different collision shapes during playmode 1317728 On deselecting game object from the Inspector window leads to deselecting Sprite Shape Renderer 1326983 SpriteShape Cache Geometry does not update when changing SpriteShape Profile. Changed Version bump for Unity 2021.2 [6.0.0] - 2021-03-17 Changed Update version for release [6.0.0-pre.3] - 2021-02-28 Fixed 1294930 Exception thrown continuously on creating Range in the preset of Sprite Shape when Undo/Redo operation is performed earlier 1303998 Enabling Fill Tessellation on controller and setting the profile's fill offset to negative causes errors 1293760 Sprite Shape generates Edge Colliders with deformed corners 1305867 Sprite shape edge collider has a gap at end point if optimise collider is disabled 1286378 Sprite Shape incorrect normal generation [6.0.0-pre.2] - 2020-11-25 Changed Update license file Fixed 1273635 Fixed error when adding AngleRange to SpriteShapeProfile Preset that was reset before. 1287237 Fixed ArgumentException when tangents and cache geometry are enabled on SpriteShapeController component. 1240514 Fixed InvalidOperationException thrown continuously on adding SpriteShapeController component to a GameObject with SpriteRenderer. 1284920 Fixed PolygonCollider2D generated with a single vertex when a GameObject has a SpriteShapeController with just 3 vertices. [6.0.0-pre.1] - 2020-10-30 Changed Version bump for Unity 2021.1 Height is interpolated linearly between control points that are both linear and smoothly if otherwise. [5.1.0] - 2020-09-24 Added Added C# Job Tessellation support for Fill Area of SpriteShape. Fixed 1274400 SpriteShape Bounding Box does not take into account certain vertices 1273705 Assertion failed exception is thrown on undoing after clicking on Create Range button 1273635 Errors occurs when adding range on Reset-ed Preset of the SpriteShapeProfile 1271817 Icon is missing on creating SpriteShapeProfile at the time of creating 1280016 Unable to create Sprite Shape Profile along with ArgumentNullException thrown in the Project window 1274776 NullReferenceException thrown on performing Redo operation after creating Range property in the SpriteShape profiler preset [5.0.2] - 2020-08-31 Fixed 1267542 Sprite Variant Window does not appear in Sprite Shape Controller Component when selecting a Spline pivot point. 1265846 Dragging Sprite Shape Profile to Hierarchy creates a Game Object in main Scene when being in Prefab Mode [5.0.1] - 2020-07-17 Changed If Geometry is baked using SpriteShapeGeometryCache, do not check for dirty once data is updated to prevent GC. Updated Help Section to point to the correct URLs. Fixed 1242910 Unable to add item on Resetting the Preset of the SpriteShapeProfile 1256914 Exception thrown continuously when Undo operation is performed with sprites are assigned earlier 1263266 BakeCollider requires GC every frame even when there are no changes in SpriteShape [5.0.0] - 2020-05-28 Added Sample script GenerateSpriteShapes.cs to demonstrate force generating invisible SpriteShapes on runtime scene load. Changed Version bump for Unity 2020.2 Fixed 1246133 Error occurs when unselecting Cache Geometry for Sprite Shape prefab 1240380 OnGUI in SpriteShapeController creates GC allocs. 1235972 \"A Native Collection has not been disposed, resulting in a memory leak\" is thrown when 2D Sprite Shape Controller is disabled 1240514 InvalidOperationException thrown continuously on adding \"Sprite Shape Controller\" Component to a Sprite object 1241841 Disabled corner option does not work on existing spriteshape upgraded from a previous version [4.1.1] - 2020-04-20 Added Added BakeMesh to save generated geometry data. Added warning when a valid SpriteShape profile is not set. [4.1.0] - 2020-03-16 Added Stretched Corners. Fixed 1226841 Fix when Collider generation allocation. 1226856 SpriteShape Edge Collider does not extend to End-point even if Edges dont overlap. 1226847 SpriteShape Corner Threshold does not work. [4.0.3] - 2020-03-09 Fixed 1220091 SpriteShapeController leaks memory when zero control points are used 1216990 Colliders should also respect Pivot property of Edge Sprites. 1225366 Ensure SpriteShape are generated when not in view on Runtime. [4.0.2] - 2020-02-11 Changed Improved Memory Allocations. Fixed Fixed OnDrawGizmos to Get/Release RenderTexture through CommandBuffer. [4.0.1] - 2019-11-26 Changed Updated License file Updated Third Party Notices file Changed how Samples are installed into user's project Fixed Fixed where the last point of the Sprite Shape does not behave correctly when using Continuous Points in a closed shape (case 1184721) [4.0.0] - 2019-11-06 Changed Update version number for Unity 2020.1 [3.0.7] - 2019-10-27 Fixed Added missing meta file Changed Update com.unity.2d.path package dependency [3.0.6] - 2019-09-27 Added Added support to set CornerAngleThreshold. Burst is now enabled for performance boost. Fixed Fix (Case 1041062) Inputting Point Position manually causes mesh to not conform to the spline Fix GC in confirming Spline Extras sample. Fix hash Validation errors. Removed resources from Packages. [3.0.5] - 2019-09-05 Fixed Fix (Case 1159767) Error generated when using a default sprite for Corner sprite or Angle Range sprite in Sprite Shape Profile Fix (Case 1178579) \"ArgumentOutofRangeException\" is thrown and SpriteShapeProfile freezes on reset [3.0.4] - 2019-08-09 Added Added tangent channel support for proper 2D lighting in URP. [3.0.3] - 2019-07-24 Added Add related test packages [3.0.2] - 2019-07-13 Changed Update to latest Mathematics package version [3.0.1] - 2019-07-13 Changed Mark package to support Unity 2019.3.0a10 onwards. [3.0.0] - 2019-06-19 Changed Stable Version. Remove experimental namespace. [2.1.0-preview.8] - 2019-06-12 Changed Fix (Case 1152342) The first point of the Sprite Shape does not behave correctly when using Continuous Points Fix (Case 1160009) Edge and Polygon Collider does not seem to follow the spriteshape for some broken mirrored tangent points Fix (Case 1157201) Edge Sprite Material changed when using a fill texture that is already an edge sprite on spriteshape Fix (Case 1162134) Open ended Spriteshape renders the fill texture instead of the range sprite [2.1.0-preview.7] - 2019-06-02 Changed Fix Variant Selection. [2.1.0-preview.6] - 2019-06-02 Changed Fix Null reference exception caused by SplineEditorCache changes. Fill Inspector changes due to Path integration. [2.1.0-preview.4] - 2019-05-28 Changed Upgrade Mathematics package. Use path editor. [2.1.0-preview.2] - 2019-05-13 Changed Initial version for 2019.2 Update for common package. [2.0.0-preview.8] - 2019-05-16 Fixed Fixed issue when sprites are re-ordered in Angle Range. Updated Samples. [2.0.0-preview.7] - 2019-05-10 Fixed Version Update and fixes. [2.0.0-preview.6] - 2019-05-08 Fixed Added Sprite Variant Selector. Fix Variant Bug (https://forum.unity.com/threads/spriteshape-preview-package.522575/page-6#post-4480936) Fix (Case 1146747) SpriteShape generating significant GC allocations every frame (OnWillRenderObject) [2.0.0-preview.5] - 2019-04-18 Fixed Shape angle does not show the accurate sprite on certain parts of the shape. SpriteShape - Unable to use the Depth buffer (https://forum.unity.com/threads/spriteshape-preview-package.522575/page-6#post-4413142) [2.0.0-preview.4] - 2019-03-28 Changed Disable burst for now until we have a final release. [2.0.0-preview.3] - 2019-03-25 Fixed Update Common version. [2.0.0-preview.2] - 2019-03-08 Fixed Fix Edge Case Scenario where Vertices along Continuous segment could be duplicated.. Ensure that Collider uses a valid Sprite on Generation. [2.0.0-preview.1] - 2019-02-27 Changed Updated version. [1.1.0-preview.1] - 2019-02-10 Added Spriteshape tessellation code is re-implemented in C# Jobs and utilizes Burst for Performance. Added Mirrored and Non-Mirrored continous Tangent mode. Simplified Collider Generation support and is part of C# Job/Burst for performance. Added Shortcut Keys (for setting Tangentmode, Sprite Variant and Mirror Tangent). Ability to drag Spriteshape Profile form Project view to Hierarchy to create Sprite Shape in Scene. Simplified Corner mode for Points and is now enabled by default. Added Stretch UV support for Fill Area. Added Color property to SpriteShapeRenderer. Fixed SpriteShapeController shows wrong Sprites after deleting a sprite from the top angle range. Empty SpriteShapeController still seem to show the previous Spriteshape drawcalls Streched Sprites are generated in between non Linked Points Corners sprites are no longer usable if user only sets the corners for the bottom Sprites in SpriteShape still shows even after user deletes the SpriteShape Profile SpriteShape doesn't update Point Positions visually at runtime for Builds Spriteshape Colliders does not update in scene immediately Fixed constant Mesh baking (https://forum.unity.com/threads/spriteshape-preview-package.522575/page-4#post-3925789) Fixed Bounds generation issue (https://forum.unity.com/threads/spriteshape-preview-package.522575/page-5#post-4079857) Sprite Shape Profile component breaks when creating range Fixed when sprite is updated in the sprite editor, the spriteshape is not updated. Fixed cases where Spline Edit is disabled even when points are selected. (https://forum.unity.com/threads/spriteshape-preview-package.522575/#post-3436940) Sprite with SpriteShapeBody Shader gets graphical artifacts when rotating the camera. When multiple SpriteShapes are selected, Edit Spline button is now disabled. (https://forum.unity.com/threads/spriteshape-preview-package.522575/page-3#post-3764413) Fixed texelSize property (https://forum.unity.com/threads/spriteshape-preview-package.522575/page-4#post-3877081) Fixed Collider generation for different quality levels. (https://forum.unity.com/threads/spriteshape-preview-package.522575/page-4#post-3956062) Fixed Framing Issues (https://forum.unity.com/threads/spriteshape-preview-package.522575/page-5#post-4137214) Fixed Collider generation for Offsets (https://forum.unity.com/threads/spriteshape-preview-package.522575/page-5#post-4149841) Fixed Collider generation for different Heights (https://forum.unity.com/threads/spriteshape-preview-package.522575/page-5#post-4190116) Changed SpriteShape Asset parameters WorldSpace UV, PixelPerUnit have been moved to SpriteShapeController properties. Collider generation has been simplified and aligns well with the generated geometry (different height, corners etc.) Removed Remove redundant parameters BevelCutoff and BevelSize that can be done by simply modifying source spline. [1.0.12-preview.1] - 2018-08-03 Added Fix issue where Point Positions do not update visually at runtime for Builds [1.0.11-preview] - 2018-06-20 Added Fix Spriteshape does not update when Sprites are reimported. Fix SpriteShapeController in Scene view shows a different sprite when user reapplies a Sprite import settings Fix Editor Crashed when user adjusts the \"Bevel Cutoff\" value Fix Crash when changing Spline Control Points for a Sprite Shape Controller in debug Inspector Fix SpriteShape generation when End-points are Broken. Fix cases where the UV continuity is broken even when the Control point is continous. [1.0.10-preview] - 2018-04-12 Added Version number format changed to -preview [0.1.0] - 2017-11-20 Added Bezier Spline Shape Corner Sprites Edge variations Point scale SpriteShapeRenderer with support for masking Auto update collision shape"
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/CustomGeometry.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/CustomGeometry.html",
    "title": "Generating Custom Geometry | ModularUIPack",
    "summary": "Generating Custom Geometry The Custom Geometry feature is found in the Sprite Shape Controller. It allows you to use a custom script to generate or modify Sprite Shape geometry. The custom script is written as a ScriptableObject and is reusable. API Examples ###Generating new geometry To generate new geometry, refer to the following example code. public abstract class SpriteShapeGeometryCreator : ScriptableObject { public abstract int GetVertexArrayCount(SpriteShapeController spriteShapeController); public abstract JobHandle MakeCreatorJob(SpriteShapeController spriteShapeController, NativeArray<ushort> indices, NativeSlice<Vector3> positions, NativeSlice<Vector2> texCoords, NativeSlice<Vector4> tangents, NativeArray<SpriteShapeSegment> segments, NativeArray<float2> colliderData); } Note: The default generator script that ships with the Sprite Shape package is itself written as a SpriteShapeGeometryCreator (refer to Runtime/SpriteShapeDefaultCreator.cs). Any custom SpriteShapeGeometryCreator set through the script or Inspector will override this default Object. ###Modifying existing geometry To modify generated geometry, refer to the following example code. public abstract class SpriteShapeGeometryModifier : ScriptableObject { public abstract JobHandle MakeModifierJob(JobHandle generator, SpriteShapeController spriteShapeController, NativeArray<ushort> indices, NativeSlice<Vector3> positions, NativeSlice<Vector2> texCoords, NativeSlice<Vector4> tangents, NativeArray<SpriteShapeSegment> segments, NativeArray<float2> colliderData); } Note: SpriteShapeGeometryModifier is only applicable when either: SpriteShapeDefaultCreator is used and the vertex data only needs modification. Or a custom SpriteShapeGeometryCreator is used with default channels accepted in MakeCreatorJob. SpriteShapeGeometryModifier cannot be used when MakeCreatorJob creates a Job with custom Channel data. Examples by usage Creating a simple quad with the size of the Bounds with SpriteShapeGeometryCreator: // A simple C# job to generate a quad. public struct CreatorJob : IJob { // Indices of the generated triangles. public NativeArray<ushort> indices; // Vertex positions. public NativeSlice<Vector3> positions; // Texture Coordinates. public NativeSlice<Vector2> texCoords; // Sub-meshes of generated geometry. public NativeArray<UnityEngine.U2D.SpriteShapeSegment> segments; // Input Bounds. public Bounds bounds; public void Execute() { // Generate Positions/TexCoords/Indices for the Quad. positions[0] = bounds.min; texCoords[0] = Vector2.zero; positions[1] = bounds.max; texCoords[1] = Vector2.one; positions[2] = new Vector3(bounds.min.x, bounds.max.y, 0); texCoords[2] = new Vector2(0, 1); positions[3] = new Vector3(bounds.max.x, bounds.min.y, 0); texCoords[3] = new Vector2(1, 0); indices[0] = indices[3] = 0; indices[1] = indices[4] = 1; indices[2] = 2; indices[5] = 3; // Set the only sub-mesh (quad) var seg = segments[0]; seg.geomIndex = seg.spriteIndex = 0; seg.indexCount = 6; seg.vertexCount = 4; segments[0] = seg; // Reset other sub-meshes. seg.geomIndex = seg.indexCount = seg.spriteIndex = seg.vertexCount = 0; for (int i = 1; i < segments.Length; ++i) segments[i] = seg; } } [CreateAssetMenu(fileName = \"SpriteShapeQuad\", menuName = \"ScriptableObjects/SpriteShapeQuad\", order = 1)] public class SpriteShapeQuad : SpriteShapeGeometryCreator { public override int GetVertexArrayCount(SpriteShapeController sc) { // Set the maximum size required for the Vertices. return 64; } public override JobHandle MakeCreatorJob(SpriteShapeController sc, NativeArray<ushort> indices, NativeSlice<Vector3> positions, NativeSlice<Vector2> texCoords, NativeSlice<Vector4> tangents, NativeArray<UnityEngine.U2D.SpriteShapeSegment> segments, NativeArray<float2> colliderData) { NativeArray<Bounds> bounds = sc.spriteShapeRenderer.GetBounds(); var spline = sc.spline; int pointCount = spline.GetPointCount(); Bounds bds = new Bounds(spline.GetPosition(0), spline.GetPosition(0)); for (int i = 0; i < pointCount; ++i) bds.Encapsulate(spline.GetPosition(i)); bounds[0] = bds; var cj = new CreatorJob() {indices = indices, positions = positions, texCoords = texCoords, segments = segments, bounds = bds}; var jh = cj.Schedule(); return jh; } } Changing UV data with SpriteShapeGeometryModifier: // A simple C# job to move the UV along the x-axis. If this is called repeatedly each frame it creates UV Animation effect. To get this called each frame, use RefreshSpriteShape API of SpriteShapeController. public struct UVAnimatorJob : IJob { // We are only modifying UV data. public NativeSlice<Vector2> uvs; // Offset to move x coordinates of UV. public float offset; public void Execute() { // Move x coordinates of UV data. for (int i = 0; i < uvs.Length; ++i) { var uv = uvs[i]; uv.x = (uv.x + offset) % 1.0f; uvs[i] = uv; } } } [CreateAssetMenu(fileName = \"SpriteShapeUVAnimator\", menuName = \"ScriptableObjects/SpriteShapeUVAnimator\", order = 1)] public class SpriteShapeUVAnimator : SpriteShapeGeometryModifier { public override JobHandle MakeModifierJob(JobHandle generator, SpriteShapeController spriteShapeController, NativeArray<ushort> indices, NativeSlice<Vector3> positions, NativeSlice<Vector2> texCoords, NativeSlice<Vector4> tangents, NativeArray<SpriteShapeSegment> segments, NativeArray<float2> colliderData) { var mj = new UVAnimatorJob(){ uvs = texCoords, offset = UnityEngine.Time.time}; var jh = mj.Schedule(generator); return jh; } } Advanced usage The following is an example of advanced usage of the API by creating geometry with vertex colors. In the function MakeCreatorJob below, GetChannels is invoked to get additional colors other than the default. The input parameters for MakeCreatorJob are overwritten by the GetChannels function. Note: Only SpriteShapeGeometryCreator can be used when updating any other channels that are not part of the MakeCreatorJob parameters. public struct ColorCreatorJob : IJob { // Indices of the generated triangles. public NativeArray<ushort> indices; // Vertex positions. public NativeSlice<Vector3> positions; // Texture Coordinates. public NativeSlice<Vector2> texCoords; // Color of Vertces. public NativeSlice<Color32> colors; // Sub-meshes of generated geometry. public NativeArray<UnityEngine.U2D.SpriteShapeSegment> segments; // Input Bounds. public Bounds bounds; public void Execute() { // Generate Positions/TexCoords/Indices for the Quad. positions[0] = bounds.min; texCoords[0] = Vector2.zero; colors[0] = Color.red; positions[1] = bounds.max; texCoords[1] = Vector2.one; colors[1] = Color.blue; positions[2] = new Vector3(bounds.min.x, bounds.max.y, 0); texCoords[2] = new Vector2(0, 1); colors[2] = Color.green; positions[3] = new Vector3(bounds.max.x, bounds.min.y, 0); texCoords[3] = new Vector2(1, 0); colors[3] = Color.yellow; indices[0] = indices[3] = 0; indices[1] = indices[4] = 1; indices[2] = 2; indices[5] = 3; // Set the only sub-mesh (quad) var seg = segments[0]; seg.geomIndex = seg.spriteIndex = 0; seg.indexCount = 6; seg.vertexCount = 4; segments[0] = seg; // Reset other sub-meshes. seg.geomIndex = seg.indexCount = seg.spriteIndex = seg.vertexCount = 0; for (int i = 1; i < segments.Length; ++i) segments[i] = seg; } } [CreateAssetMenu(fileName = \"SpriteShapeColorQuad\", menuName = \"ScriptableObjects/SpriteShapeColorQuad\", order = 1)] public class SpriteShapeColorQuad : SpriteShapeGeometryCreator { public override int GetVertexArrayCount(SpriteShapeController sc) { return 64; } public override JobHandle MakeCreatorJob(SpriteShapeController sc, NativeArray<ushort> indices, NativeSlice<Vector3> positions, NativeSlice<Vector2> texCoords, NativeSlice<Vector4> tangents, NativeArray<UnityEngine.U2D.SpriteShapeSegment> segments, NativeArray<float2> colliderData) { NativeArray<Bounds> bounds = sc.spriteShapeRenderer.GetBounds(); var spline = sc.spline; int pointCount = spline.GetPointCount(); Bounds bds = new Bounds(spline.GetPosition(0), spline.GetPosition(0)); for (int i = 0; i < pointCount; ++i) bds.Encapsulate(spline.GetPosition(i)); NativeSlice<Color32> colors = default(NativeSlice<Color32>); sc.spriteShapeRenderer.GetChannels(32000, out indices, out positions, out texCoords, out colors); var cj = new ColorCreatorJob() {indices = indices, positions = positions, texCoords = texCoords, colors = colors, segments = segments, bounds = bds}; var jh = cj.Schedule(); return jh; } }"
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/FillTessellation.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/FillTessellation.html",
    "title": "Fill Tessellation (C# Job) | ModularUIPack",
    "summary": "Fill Tessellation (C# Job) Example of a Sprite Shape: the blue area is the inner fill geometry, while the green area is the edge geometry. The geometry of a Sprite Shape is made up of its outer edge (for both Open and Closed Shapes and its inner fill (only for Closed Shapes). Both edge and fill geometry are always generated in a C# Job which provides performance benefits and avoids potential performance loss from garbage collection (refer to Understanding Automatic Memory Management for more information). Running C# Job also gains additional performance if the Burst package is installed in the same Project. If Fill Tessellation (C# Job) is disabled, the fill geometry is generated in the main thread using LibNess.NET instead (see What is multithreading? for more information). Requirements The Fill Tessellation (C# Job) option in the Sprite Shape Controller Inspector window To enable Fill Tessellation (C# Job), select a Sprite Shape and then select the Fill Tessellation (C# Job) checkbox in its Inspector window; clear the checkbox to disable the feature. The Sprite Shape must also fulfill the following requirements for this feature to work: The Sprite Shape must not have any duplicate points or points that are too close to each other. Duplicate points can occur if you drag a point over another point. The Sprite Shape’s edges cannot intersect or overlap each other. Note: If Fill Tessellation (C# Job) is enabled but the Sprite Shape does not fulfill these requirements, then the Sprite Shape’s Fill geometry will not be generated. Disable Fill Tessellation (C# Job) to enable the default tessellation method to generate the geometry. Enabling or disabling this option does not affect the edge geometry tessellation method which is always in a C# Job. Recommended tessellation method The following are examples and reasons for when either method of tessellation is recommended, depending on the requirements of your project. When Fill Tessellation (C# Job) is recommended Enabling Fill Tessellation (C# Job) is ideal for situations where you want to reduce memory usage for improved CPU performance. For example, when you have dynamic Sprite Shape objects generated at runtime, or are animating Sprite Shape objects at runtime. Both scenarios feature CPU intensive processes, and enabling Fill Tessellation (C# Job) helps to reduce the memory usage of these processes and improve performance overall. In general, enabling Fill Tessellation (C# Job) is also recommended whenever size and memory usage are important constraints to consider for your application or game. When default LibTess.NET is recommended It is recommended to disable the Fill Tessellation (C# Job) option and use the default LibTess.NET generation method whenever the Sprite Shape cannot meet the requirements that allow it to be generated in a C# Job. This could be because the Sprite Shape has a complex spline shape, with overlapping edges or duplicate points. If the Sprite Shape is being generated with non-deterministic and random input points for the shape of its spline, then it is recommended to use LibTess.NET as it is not guaranteed that the Sprite Shape fulfils the Fill Tessellation requirements. If you enabled Cache Geometry under the Sprite Shape Controller properties, then it is recommended that you use LibTess.NET instead of Fill Tessellation. The Sprite Shape’s geometry is cached as it is generated in the Editor, and this stored data is used at runtime instead of being generated at runtime. Both the LibTess.NET and Fill Tessellation options use this stored data instead of recalculating and regenerating the geometry if it is available. As LibTess.NET is more flexible and is able to accept a wider range of inputs when generating the Sprite Shape, it is recommended to disable Fill Tessellation if Cache Geometry is used."
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/SSCollision.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/SSCollision.html",
    "title": "Enabling Collision | ModularUIPack",
    "summary": "Enabling Collision Attach a Collider 2D component to your Sprite Shape to enable the Collider properties in the Sprite Shape Controller. However, note that only the Edge and Polygon Collider 2D components can be used with Sprite Shapes. The Collider mesh automatically updates itself to the shape of the Sprite Shape when attached. See the Collider section of the Sprite Shape Controller page for more details about the various Sprite Shape Collider options. Manually editing the Collider mesh By default, the Collider mesh is automatically reshaped to match the Sprite Shape every time it is edited. To make manual edits to the Collider mesh directly, disable both Update Collider in the Sprite Shape Controller's Collider settings by clearing their respective checkboxes. This prevents the Sprite Shape Controller from updating the Collider mesh automatically and overriding your manual edits."
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/SSController.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/SSController.html",
    "title": "Sprite Shape Controller | ModularUIPack",
    "summary": "Sprite Shape Controller The Sprite Shape Controller component is automatically attached to the GameObject created when a Sprite Shape Profile is dragged into the Scene. You edit the shape of the Sprite Shape's outline through the Controller's settings. The Controller displays different settings depending on different conditions. Property Settings - Default The default component settings below are displayed when Edit Spline is not enabled. Property Function Profile Select the Sprite Shape Profile used by this Sprite Shape. Edit Spline Enable to make the Control Points of the Sprite Shape visible and editable. Spline - Detail Select the tessellation quality of the rendered Sprite Shape mesh. High/Medium/Low Quality options available. Open Ended Disable to connect both ends of the Sprite Shape together to form an enclosed Shape. Enable to leave both ends of the Sprite Shape unconnected. Adaptive UV Enabled by default. When enabled, Unity attempts to seamlessly tile the Sprites along the Sprite Shape path by deforming the Sprites to between Control Points. Disable this property to tile Sprites with no deformation and at their exact width. Sprites may appear cutoff if the space between Control Points is shorter than the width of the Sprite. Enable Tangents Enable this property if there are features which require tangent calculations, such as when utilizing the Shaders with the 2D Universal Render Pipeline. Corner Threshold Use this slider to set the threshold of when a point is considered a corner of the Sprite Shape, where the value is the angle between adjacent edges and angles at the. A point is considered a corner at the threshold value and lower. The default value is 30 degrees. Set a custom value to override this default value. Fill - Fill Tessellation (C# Job) Generate fill geometry in C# Job. Stretch UV Enable this setting to have Unity stretch the UV of the Fill texture across the Full Rect of the Sprite Shape. Custom Geometry Creator Set the Scriptable Object that generates custom geometry. By default a built-in generator is set when created. Custom Geometry Modifier Set a list of Scriptable Objects that modifies generated geometry. Pixels Per Unit (only available when Stretch UV is disabled) This values affect the appearance of the Fill texture of the Sprite Shape. This value affects the scale of the Fill texture, with higher values reducing the size of the texture. The default value is 100. World Space UV (only available when Stretch UV is disabled) Enable to apply the Fill texture according to the World Space UV, instead of per GameObject UV. With Edit Spline enabled and a Control Point selected Enable Edit Spline in the Controller settings to make Control Points on the Sprite Shape visible and editable. Selecting a Control Point enables the following additional Controller settings. A: Global snap toggle Point - Tangent Mode Select one of three Point Modes to change the way tangents on Control Points are edited. Linear No curve is formed between the Control Point and its neighboring points. Continuous Mirrored Two tangents appear on opposite sides of the Control Point, and the spline between the Control Point and its neighbors becomes curved. Adjust the tangents to change the shape of the curve. The angle between the two tangents is always 180 degrees in this mode. Broken Mirrored Two tangents appear on opposite sides of the Control Point, and the spline between the Control Point and its neighbors becomes curved. Adjust the tangents to change the shape of the curve. The length and angle of the tangents can be adjusted independently in this mood. Position The local x and y coordinates of a selected Control Point. Height Increase or decrease the height of Sprites at the Control Point by a factor of 0.1 to 4. Corner Sets whether Corner Sprites are rendered at Control Points. Set to Automatic by default. Disabled A Sprite is not rendered at the selected Control Point. Automatic The Control Point displays the assigned Corner Sprite, if both it and its neighbors are in Linear Point Mode. Stretched The Corner Sprite at the selected Control Point is connected to its adjacent neighbors, stretching the Sprite. See the list of required criteria below to use this feature. Sprite Variant Select the Sprite Variant from the visual Variant selector. Press N to cycle through all available Variants for the Control Point. Global snapping When Edit Spline is enabled, select the Global Snap icon (see A in screenshot above) to toggle Grid Snapping on or off. Stretched Corners This feature allows the Sprite Shape to form corners with stretched Sprites between adjacent edges between the corner point and its neighbors. Select the Stretched option from the Corner dropdown menu, and ensure the following criteria are met: Both the selected and adjacent points have the same Height. Sprites rendered at the Corner point and its neighboring points must have the same Sprite pivot position. Additional Collider settings Add either the Polygon Collider 2D or Edge Collider 2D component to the Sprite Shape to enable additional Collider settings in the Sprite Shape Controller. Refer to Enabling Collision for more details about enabling Colliders with Sprite Shapes. Colliders are always optimized by cleaning up extra control points that are colinear. Collider - Update Collider Enabled by Default. Enable this option to have the Collider mesh be updated to the Sprite Shape's current shape as the Sprite Shape is edited. Disable if you are editing the Collider mesh separately from the Sprite Shape and to use a custom Collider mesh. Offset Select the amount to extrude the Collider mesh towards the edge of the Sprite Shape. The range is from -0.5 to 0.5, starting at 0 by default. Detail Sets the tessellation quality of the rendered Collider. High/Medium/Low Quality options available. Editing the Spline To edit the mesh outline of the Sprite Shape, click the Edit Spline button to make the Shape's spline and its Control Points become visible and editable. When Edit Spline is enabled, move the Control Points of the Sprite Shape to adjust its overall shape and size. Add additional Control Points by clicking on the spline in between Control Points. Press the Del/Delete key to remove the currently selected Control Point. With a Control Point selected, cycle through the __Point Modes __by pressing the M key. To change the Mode of multiple Control Points at once, ensure that all selected Control Points are the same Mode first before cycling or selecting another Mode. To change the Sprite Variant currently displayed at a selected Control Point, press the N key to cycle through all available Variants. All shortcut keys can be rebound under the Shortcut menu (menu: Edit > Shortcuts... > SpriteShape Editing). Point Modes When a Control Point is selected, its Point Mode can be one of three modes- Linear, Mirrored, and Non-Mirrored. The Point Mode determines the behavior of the tangents that are used to adjust the spline between Control Points. Each Control Point can be set to a specific Point Mode and contain its own settings. Linear Point Mode In Linear Point Mode, there are no tangents to control the curve between the Control Point and its neighbors, curves are not formed between Control Points and Sprites may overlap if they intersect. Adjust which Sprite is displayed when two or more intersect by adjusting their Order value in the Sprite Shape Profile's Angle Range settings. Continuous Mirrored Point Mode In Continuous Mirrored Point Mode, tangents appear on both sides of the selected Control Point to create a curve between the Control Point and its neighbors. Adjust the shape of the curve with the tangents. In this mode, the angle between the tangents is always maintained at 180 degrees although their lengths from the can vary. Press B to mirror the length of the last edited tangent onto the opposite tangent. Broken Mirrored Point Mode In Broken Mirrored Point Mode, tangents appear on both sides of the selected Control Point to create a curve between the Control Point and its neighbors. Adjust the shape of the curve with the tangents. In this mode, the length and angle of each tangent can be adjusted independently. Press B to mirror the length of the last edited tangent onto the opposite tangent. In this mode, pressing B also causes the angle of the opposite tangent to become exactly 180 degrees from the last edited tangent."
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/SSPreferences.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/SSPreferences.html",
    "title": "Sprite Shape Preferences | ModularUIPack",
    "summary": "Sprite Shape Preferences You can select the colors used by a Sprite Shape's spline and control points through the Sprite Shape Preferences window (menu: Edit > Preferences > 2D > Sprite Shape). These colors are displayed when you enable Edit Spline in the Sprite Shape Controller properties and edit the Sprite Shape."
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/SSProfile.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/SSProfile.html",
    "title": "Sprite Shape Profile | ModularUIPack",
    "summary": "Sprite Shape Profile The Sprite Shape Profile contains the settings that determine which Sprites that appear on a Sprite Shape at specific Angle Ranges, as well as other display settings. You can use the same Profile for multiple Sprite Shapes in a Scene. Create a Sprite Shape Profile from the Editor main menu (menu: Assets > Create > Sprite Shape Profile), and select from the two available options: Open Shape and Closed Shape. Property Function Control Points - Use Sprite Borders Enable to draw the Sprite Borders of a Sprite at the Control Point. Define the Sprite Borders in the Sprite Editor. Fill - Texture Set the Texture to be used as a Fill to this field. Has no effect if the Open Ended property in the Sprite Shape Controller settings is enabled. Offset Determines the border offset at the edges of the Fill texture. Angle Ranges (tool) Use this tool to create Angle Ranges and assign Sprites to those ranges. Start (degrees) Enter the starting angle for the selected Angle Range in degrees. End (degrees) Enter the ending angle for the selected Angle Range in degrees. Order Determines the display priority when Sprites intersect. Sprites with higher values are rendered above lower ones. Sprites List of Sprites assigned to the selected Angle Range. Displays a list of all Sprites assigned to the selected Angle Range. The order of Sprites in the list determines their Sprite Variant number, starting from zero at the top of the list. The first Sprite at the top of the list is the Sprite displayed by default at a Control Point. Corners - (All Corner options) Assign specific Sprites to be displayed on the Sprite Shape at the respective corners. Open Shape Use the Open Shape preset Profile to create Shapes made from a single edge outline with tiled Sprites along its edge. This preset is ideal for creating level elements such as platforms. Drag the Open Shape Profile into the Scene view to automatically generate a Sprite Shape with Open Ended enabled in its Sprite Shape Controller settings. Closed Shape Use the Closed Shape preset Profile to create Shapes that encompass an enclosed area. The Closed Sprite Shape can display and tile a Fill texture in the enclosed area, if a Fill texture is set in its Profile settings. Use this preset to create large solid filled Shapes that are ideal for backgrounds or large platforms. Drag the Closed Shape Profile into the Scene view to automatically generate a Sprite Shape with Open Ended disabled in its Sprite Shape Controller settings. The Closed Shape Profile's preset Angle Ranges create a square Sprite Shape by default. A key feature of the Sprite Shape Profile is the Angle Ranges tool. Assigning an Angle Range determines what Sprite is displayed at specific angles, as the Sprite Shape is deformed in the Scene. Creating Angle Ranges Method 1: To create an Angle Range, click the Create Range button at the bottom of the Angle Ranges tool: The Create Range button is only visible if the Preview Handle is over an area without an Angle Range (see the example image below). Method 2: Another way is to hover your cursor over an empty area of the Angle Range circle. An outline appears to show the possible default angle range. Click to create this Angle Range. Editing the Angle Range degrees The range covered by the currently selected Angle Range is displayed at the bottom of the tool. You can edit a range by entering new values into Start and End, or drag either endpoint of the tool to the desired angles. A range cannot be extended into an existing neighboring range. To delete an Angle Range, select the range and then press the Del/Delete key. Assigning Sprites After creating the Angle Ranges, the next step is to assign Sprites to those ranges. The Sprites list is found beneath the Angle Ranges tool. It lists all the Sprites assigned to the selected range. To add Sprites to the list, click the + icon to insert a new row to the list. Click the circle icon next to the empty row to open the Object Picker window, which displays all available Sprites in the project. You can also drag a Sprite directly onto a row to add it to the list. The Sprite at the top of the list is the default Sprite displayed on the Sprite Shape. Refer to the other Sprites in the list by their Sprite Variant number. See the Sprite Shape Controller page for more details. Drag the leftmost ends of the rows up or down to reorder the list, which changes the Sprite Variant numbers of the Sprites accordingly. Previewing Sprites of multiple Angle Ranges After assigning Sprites to multiple Angle Ranges, rotate the Preview Handle around the Angle Range tool to preview the Sprites assigned those ranges."
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "Overview Sprite Shape Profile Sprite Shape Controller Fill Tessellation in a C# Job Generating Custom Geometry Enabling Collision Preferences"
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Documentation~/index.html",
    "title": "2D Sprite Shape | ModularUIPack",
    "summary": "2D Sprite Shape Overview The Sprite Shape is a flexible and powerful world building Asset that features Sprite tiling along a shape's outline that automatically deforms and swaps Sprites based on the angle of the outline. Additionally, you can assign a Fill texture to a Sprite Shape to create filled shapes with tiled textures as backgrounds or other large level-building props. The following are examples of Sprite Shapes used to construct different parts of various levels. Sprite Shapes comprise of two parts - the Sprite Shape Profile Asset, and the Sprite Shape Controller component. The Sprite Shape Profile contains the angle settings and Sprites used by the Sprite Shape, and you edit the Sprite Shape's outline with the Sprite Shape Controller component. Importing Sprites for Sprite Shapes When importing Sprites, use the following property settings to ensure that the Sprites are compatible for use with Sprite Shape: Texture Type - Set this to ‘Sprite (2D and UI)’. Other Texture types are not supported for Sprite Shapes. Sprite Mode - Set this to ‘Single’ if the Texture contains only a single Sprite. Mesh Type - This must be set to Full Rect for the Sprite to be used with Sprite Shape. In addition, if the Sprites used for the Sprite Shape are part of a Sprite Atlas, disable both Allow Rotation and Tight Packing options under the Sprite Atlas’ properties so that the Sprites can be used by the Sprite Shape. Creating a Sprite Shape general workflow Create Sprite Shapes with the following steps: Create a Sprite Shape GameObject from the main GameObject menu (menu: GameObject > 2D Object > Sprite Shape) and select from the two available options: Open Shape Closed Shape Edit the outline of the Sprite Shape with the Sprite Shape Controller component settings. Enable Physics 2D interactions for your Sprite Shapes by attaching a Collider component. To further customize the shape and outline of a Sprite Shape: Create a Sprite Shape Profile from the main menu (menu: Assets > Create > 2D > Sprite Shape Profile). Create Angle Ranges and assign Sprites in the Sprite Shape Profile. Assign the Sprite Shape Profile to a Sprite Shape Controller's Profile settings. The same Profile can be used by multiple Sprite Shapes."
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.2d.spriteshape copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/README.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/README.html",
    "title": "About 2D SpriteShape | ModularUIPack",
    "summary": "About 2D SpriteShape Use the 2D SpriteShape package as a powerful worldbuilding tool that allows you to tile Sprites along the path of a shape, with the Sprites automatically deforming in response to different angles according to their settings. For example, use 2D SpriteShapes to quickly build various 2D platforms by editing their spline paths into different shapes. Installing 2D SpriteShape To install this package, please follow the instructions in the Package Manager documentation. Links to Feature Documentation and Useful Resources 2D SpriteShape Online Documentation 2D SpriteShape Samples 2D SpriteShape Discussion Forums Requirements This version of 2D SpriteShape is compatible with the following versions of the Unity Editor: 2018.1 and later (recommended)"
  },
  "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.2d.spriteshape@9.0.5/Third Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: LibTessDotNet License Type: SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008) Copyright (C) 2011 Silicon Graphics, Inc. https://github.com/speps/LibTessDotNet All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice including the dates of first publication and either this permission notice or a reference to http://oss.sgi.com/projects/FreeB/ shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Except as contained in this notice, the name of Silicon Graphics, Inc. shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization from Silicon Graphics, Inc."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog [3.1.3] - 2024-09-19 Fixed [GameObjectBrush] Allow expansion of SceneRoot Grid foldout when clicking on label [GridInformation] Fix exception when serializing GridInformation component if component is part of a Prefab [3.1.2] - 2023-08-21 Fixed [GameObjectBrush] Use cell offset to determine location of GameObject when painting and erasing [3.1.1] - 2023-05-01 Fixed [GameObjectBrush] Set HideFlags of instantiated GameObject to HideFlags.None when painting [GridInformation] Fix serialization of GridInformationKey/Value [3.1.0] - 2023-01-16 Added [AnimatedTileEditor] -Add field to change TileAnimationFlags (For 2022.2.x) [RuleTile] -Add RotatedMirror rule which checks neighbors using both the mirror and rotation Rule in addition to the standard rotation Rule Fixed [GameObjectBrush] Fix placement of GameObjects for Hexagon Layouts with Anchor [GameObjectBrush] Align rotation and flip to 2D View in Editor [RandomBrush] Use default color and transform when painting over with RandomBrush Changed [AnimatedTileEditor] Moved to Unity.2d.Tilemap.Extras.Editor [3.0.3] - 2022-11-03 Fixed [GridInformation] Implement IEquatable for GridInformationKey [PrefabRandomBrush] Fix possible NullReferenceException in PrefabRandomBrush [GameObjectBrush] Fix placement of GameObjects when Cell Gap is set [3.0.2] - 2022-04-01 Fixed [RuleOverrideTile] -Mark RuleOverrideTile InstanceTile as dirty when overriding RuleTile for the RuleOverrideTile changes [RuleOverrideTile] -Fix undo for RuleOverrideTile when overriding RuleTile has changed [RuleTileEditor] -Fix height for ReorderableList when extending the view for marking Rules [3.0.1] - 2022-03-03 Fixed [AnimatedTileEditor] -Fix undo when setting number of Sprites for Animated Tile [RuleTile] -Fix data for custom container fields not being transferred in RuleOverrideTiles overriding a Custom Rule Tile [RuleTileEditor] -Fix undo when setting number of Rules for Rule Tile [RuleTileEditor] -Use different text color for Extend Neighbors with dark and light skin [3.0.0] - 2021-08-06 Update version to 3.0.0 for Unity 2022.1 Changed [GameObjectBrush] Add canChangePosition [GameObjectBrush] Use GridLayout from BrushTarget if it has one [HexagonalRuleTile] Fix GetOffsetPositionReverse [RuleOverrideTile] Create instance Tile on override [RuleTile] Add scripting documentation [RuleTileEditor] Add drag and drop rect for Sprites to create initial TilingRules [RuleTileEditor] Add field to change number of TilingRules [RuleTileEditor] Add blank space to the end of the Rule list [RuleTileEditor] Add undo for changes [AnimatedTileEditor] Add undo for changes [TintBrush] Convert cell positions to world positions based on the Grid used [TintBrush] Add k_ScaleFactor for better precision when painting on non-rectangular Tilemaps Fixed [RuleTile] Fixed error in RuleTileEditor when removing all Rules and adding a new Rule [2.2.0] - 2021-06-01 Changed [RuleTileEditor] Add tooltips to fields Add required package dependencies [2.1.0] - 2021-05-06 Changed [RuleTile] Improve performance of RuleTile caching [RuleTileEditor] Allow non-public fields with the SerializeField attribute as custom fields for RuleTile Make U2DExtrasPlaceholder internal Fixed [RuleTileEditor] Fix exception when adding a new Rule when no Rule is selected [2.0.0] - 2021-03-17 Update version to 2.0.0 [2.0.0-pre.3] - 2021-02-19 [HexagonalRuleTile] Fix issue with mirror rule [RuleTile] Add min and max animation speedup [RuleOverrideTile] Fix import issue when upgrading from a previous version of RuleOverrideTile [RuleTileEditor] Add new rule below selected rule in RuleTileEditor [RuleTileEditor] Add dropdown to duplicate Rule [2.0.0-pre.2] - 2020-11-26 Changed Update documentation Add contribution notice in README.md Update Third Party Notices.md [PrefabBush] Add pick [PrefabBush] Add tooltip for \"Erase Any Objects\" field [PrefabBrush][GameObjectBrush] Account for Anchor when using GetObjectsInCell in PrefabBrush and GameObjectBrush [CustomRuleTileScript] Allow Custom Rule Tile template script to be created regardless of where template script is installed (from a package or in the project) [2.0.0-pre.1] - 2020-10-14 Update version to 2.0.0-pre.1 [1.6.2-preview] - 2020-09-25 Changed [RuleTile/RuleOverrideTile/AdvancedRuleOverrideTile] Renamed Game Object to GameObject [RuleTile] Fix menu order for RuleOverrideTile [RuleOverrideTile] Fix menu order for RuleOverrideTile [AdvancedRuleOverrideTile] Fix Rule toggle for AdvancedRuleOverrideTile [GameObjectBrush] Use correct position when ClearSceneCell [GameObjectBrush] Update cells when size changes [GameObjectBrush] Clear cell for Prefabs [LineBrush] Clear previews from base.OnPaintSceneGUI [PrefabBrush] Fix box erase [1.6.1-preview] - 2020-08-11 Changed Update samples [1.6.0-preview] - 2020-05-27 Changed Updated for Unity 2020.1 [GameObjectBrush] Allow painting, erasing and picking on Tile Palette [GameObjectBrush] Add Paint on Scene view to GameObjectBrush [PrefabBush] Add BoxFill to PrefabBrush [PrefabBush] Add Rotation to PrefabBrush Consolidated menu items [1.5.0-preview] - 2020-02-14 Added Added CONTRIBUTING.md Updated LICENSE.md Added [PrefabRandomBrush] Split functionality of PrefabBrush to PrefabBrush and PrefabRandomBrush [PrefabBrush/PrefabRandomBrush] Add Erase Any Objects toggle to choose between erasing any Objects or Objects in the Brush Changed Consolidated menu items Fixed [WeightedRandomTile] Fixed WeightedRandomTile messing up Random.seed! [1.4.0] - 2020-01-07 Added [RuleTile / HexagonalRuleTile / IsometricRuleTile / RuleOverrideTile] Added Asset Preview for TilingRules [RuleTile] Hidden Rule field [CustomRuleTile] Support custom field of Object type [CustomRuleTile] Support HideInInspector, DontOverride attributes [RuleOverrideTile] Move advanced mode to AdvancedRuleOverrideTile [RuleOverrideTile] Add GameObject overrides [RuleOverrideTile] List height lessen [RuleOverrideTile] Don't override null sprite [RuleOverrideTile] Add static preview [AdvancedRuleOverrideTile] List GUI simplify [RuleOverrideTile / AdvancedRuleOverrideTile] Show unused overrides [RuleOverrideTile / AdvancedRuleOverrideTile] Support multiple inheritance [RuleOverrideTile / AdvancedRuleOverrideTile] Prevent circular reference [AnimatedTile] Added Animation Start Frame which helps to calculate the Animation Start Time for a given Tilemap Fixed [RuleTile] Fixed RuleTile InstantiatedGameObject rotation/scale [RuleTile] Fixed override tiles have not update when default properties changed [AdvancedRuleOverrideTile] Fix override rule lost reference when source rule reorder [PrefabBrush] Use WorldToCell comparison when getting GameObjects using PrefabBrush [1.3.1] - 2019-11-06 Changed [RuleTile] Simplified [RuleTile] Caching all RuleTile neighbor positions for Tilemap to speedup refresh affected tiles Fixed [RuleTile] Fix remote positions missing of MirrorXY (#148) [HexagonalRuleTile] Fix ApplyRandomTransform() of HexagonalRuleTile missing MirrorXY case [RuleOverrideTile] Fix RuleOverrideTile does not refresh when add/remove rule [RuleTile] Fix random rotation calculation mistake [RuleTile] Fix cache data will not update when rule change [1.3.0] - 2019-11-01 Changed [RuleTile] changed from using index to using position. [RuleTile] Additional storage rule position. [RuleTile] Delete DontCare rule. [RuleTile] Rule list increased Extend Neighbor toggle. When selected, it will increase the rule range that can be set. [RuleTile] No longer fixed to checking around 8 rules. [RuleTile] RefreshTile() will refresh affected remote Tiles. [RuleTile] Delete GetMatchingNeighboringTiles(), no longer get nearby Tiles in advance, the performance is affected. (may be changed to cache later) [IsometricRuleTile] Rewrite. [HexagonalRuleTile] Rewrite. [LineBrush] Fix for Tiles disappear after selection and drag with LineBrush [RuleTile] Add MirrorXY Transform Rule [1.2.0] - 2019-10-17 Changed [PrefabBrush] Erase GameObjects at target position before painting [RuleTileEditor] Made RuleTileEditor and children public [RuleTile] Roll back m_Self to this. [RuleOverrideTile] Remove m_OverrideSelf property. [RuleOverrideTile] Inherit custom properties from custom RuleTile. [RuleOverrideTile] Change m_RuntimeTile to m_InstanceTile. [1.1.0] - 2019-08-23 Changed Validate Gap and Limit for GroupBrush Fix z iterator for RandomBrush Check randomTileSets on addToRandomTiles Add Anchor to GameObjectBrush and PrefabBrush [1.1.0] - 2019-03-22 Changed Copy GameObject when copying TilingRule in RuleOverrideTile [1.1.0] - 2019-03-08 Added Added com.unity.2d.tilemap as a dependency of com.unity.2d.tilemap.extras Changed Custom Grid Brushes have been updated to the UnityEditor.Tilemaps namespace [1.0.0] - 2019-01-02 This is the first release of Tilemap Extras, as a Package"
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/CONTRIBUTING.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/CONTRIBUTING.html",
    "title": "Contributing | ModularUIPack",
    "summary": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions. Once you have a change ready following these ground rules. Simply make a pull request!"
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/AdvancedRuleOverrideTile.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/AdvancedRuleOverrideTile.html",
    "title": "Advanced Rule Override Tile | ModularUIPack",
    "summary": "Advanced Rule Override Tile Contributions by: johnsoncodehk, Autofire Advanced Rule Override Tiles are Tiles which can override a subset of Rules for a given Rule Tile while maintaining most of the other set Rules of the Rule Tile. This allows you to create Tiles that provide specialized behavior in specific scenarios. Properties Property Function Tile The Rule Tile to override. Depending on the Rule Tile that is overridden, there may be further properties which you can override here. Any public property in the Rule Tile that does not have a RuleTile.DontOverride attribute will be shown here and can be overridden. Usage First select the Rule Tile to be overridden in the Tile property. The Rule Override Tile editor then displays the different rules in the selected Rule Tile which you can override. Select the Rule which you want to override by toggling the Rule. This will allow you to modify the output of the Rule, such as the Sprite, the GameObject or the Collider Type. The outputs are the same as the original Rule Tile and are detailed there. The matching Rule itself cannot be changed here and is displayed here to help identify it. Paint with the Advanced Rule Override Tile using the Tile Palette tools."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/AnimatedTile.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/AnimatedTile.html",
    "title": "Animated Tile | ModularUIPack",
    "summary": "Animated Tile Contribution by: MahdiMahzuni An Animated Tile runs through and displays a list of Sprites in sequence to create a frame-by-frame animation. Animated Tile editor window Properties Property Function Number of Animated Sprites Number of Animated Sprites in the Animated Tile. Sprite list The list displaying the current order of Sprites for this Animated Tile’s animation which plays in sequence. Set a Sprite by selecting the Select button at the bottom right of the Sprite preview, then choosing the Sprite from the dialog box. Select and hold the = next to each Sprite to reorder their place in the animation sequence. Minimum Speed The minimum possible speed at which the Animation of the Tile is played. A speed value will be randomly chosen between the minimum and maximum speed. Maximum Speed The maximum possible speed at which the Animation of the Tile is played. A speed value will be randomly chosen between the minimum and maximum speed. Start Time The starting time of this Animated Tile. This allows you to start the Animation from a particular time. Start Frame The starting frame of this Animated Tile. This allows you to start the Animation from a particular Sprite in the list of Animated Sprites. Collider Type The Collider shape generated by the Tile. Flags The Flags which control the Tile Animation. Loop Once The Tile Animation will loop through once and stop at the last Sprite of the animation. Pause Animation The Tile Animation will pause and not run. Update Physics The Tile Animation will update the Physics Shape in the TilemapCollider2D whenever it switches to the next Sprite in the animation. Usage Create the Animated Tile by selecting and ordering the Sprites that makes up its animation sequence in the Animated Tile editor, then paint the Animated Tile with the Tile Palette tools. Game view, painted with the Group Brush."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/Brushes.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/Brushes.html",
    "title": "Scriptable Brushes | ModularUIPack",
    "summary": "Scriptable Brushes You can script Brushes to paint items based on the position and conditions of the cell it targets on the Grid Layout. Brush paint behavior can be further modified by the selected editing Tool, such as Erase or Floodfill. Here are some implementations of Scriptable Brushes which can help save time when designing your Tilemap: GameObject Brush Random Brush Line Brush Group Brush Refer to the Scriptable Brushes documentation for more information."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/Contributors.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/Contributors.html",
    "title": "Contributors | ModularUIPack",
    "summary": "Contributors Thank you to all who have contributed to this repository! johnsoncodehk nicovain superkerokero pmurph0305 janissimsons distantcam Pepperized MahdiMahzuni DreadBoy DoctorShinobi CraigGraff Autofire AVChemodanov ream88 Quickz capnslipp TrentSterling vladderb trobol HyagoOliveira RyotaMurohoshi ManickYoj n4n0lix If anybody has been missed, please do let us know!"
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/CustomRulesForRuleTile.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/CustomRulesForRuleTile.html",
    "title": "Custom Rules for Rule Tile | ModularUIPack",
    "summary": "Custom Rules for Rule Tile Contribution by: johnsoncodehk Use this template script to create new custom Rule Tiles with matching options that differ from the Rule Tile’s default options (namely This and Not This). This creates selectable options for each Rule in your custom Rule Tile. Template features Inheritable Rule Tile. Customizable properties. Expand or rewrite both neighbor Rules and the GUI display of the Rules. Usable with by RuleOverrideTile Create from a template script. Neighbor Rules tooltips. Backward compatible. Creating a custom Rule Tile script Create a Custom Rule Tile script by going to Assets > Create > Custom Rule Tile Script. Name the newly created file when prompted. After creating the file, you can edit it to add new matching options and custom algorithms for testing matches. Examples Custom properties: public class MyTile : RuleTile { public string tileId; public bool isWater; } Custom rules: public class MyTile : RuleTile<MyTile.Neighbor> { public class Neighbor { public const int MyRule1 = 0; public const int MyRule2 = 1; } public override bool RuleMatch(int neighbor, TileBase tile) { switch (neighbor) { case Neighbor.MyRule1: return false; case Neighbor.MyRule2: return true; } return true; } } Expansion rules public class MyTile : RuleTile<MyTile.Neighbor> { public class Neighbor : RuleTile.TilingRule.Neighbor { // 0, 1, 2 is using in RuleTile.TilingRule.Neighbor public const int MyRule1 = 3; public const int MyRule2 = 4; } public override bool RuleMatch(int neighbor, TileBase tile) { switch (neighbor) { case Neighbor.MyRule1: return false; case Neighbor.MyRule2: return true; } return base.RuleMatch(neighbor, tile); } } Siblings Tile 1 public class MyTile : RuleTile<MyTile.Neighbor> { public List<TileBase> sibings = new List<TileBase>(); public class Neighbor : RuleTile.TilingRule.Neighbor { public const int Sibing = 3; } public override bool RuleMatch(int neighbor, TileBase tile) { switch (neighbor) { case Neighbor.Sibing: return sibings.Contains(tile); } return base.RuleMatch(neighbor, tile); } } Siblings Tile 2 public class MyTile : RuleTile<MyTile.Neighbor> { public int siblingGroup; public class Neighbor : RuleTile.TilingRule.Neighbor { public const int Sibing = 3; } public override bool RuleMatch(int neighbor, TileBase tile) { MyTile myTile = tile as MyTile; switch (neighbor) { case Neighbor.Sibing: return myTile && myTile.siblingGroup == siblingGroup; } return base.RuleMatch(neighbor, tile); } }"
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/GameObjectBrush.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/GameObjectBrush.html",
    "title": "GameObject Brush | ModularUIPack",
    "summary": "GameObject Brush This Brush instances, places and manipulates GameObjects onto the Scene. Use this Brush as an example for creating custom Brushes which can target and manipulate other GameObjects beside Tiles. Usage First select the GameObject Brush from the Brush drop-down menu. With the Brush selected, then select the Picker Tool from the Tile Palette toolbar. Use the Select Tool to select GameObjects from the Scene that you want the GameObject Brush to paint with. Note that these GameObjects must be a child of the active Grid to be selectable with this Brush. When painting with the GameObject Brush, the Brush will instantiate GameObjects picked onto the Scene. Implementation The GameObjectBrush inherits from the GridBrush and overrides several methods when implemented. The following methods are overridden: It overrides the Paint method to paint a GameObject. It overrides the Erase method to erase the GameObjects from the Scene. It overrides the BoxFill method to paint a GameObject in each cell defined by the Box Tool. It overrides the Move methods to move GameObjects in the Scene. It overrides the Flip methods to flip GameObjects in the picked selection."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/GridInformation.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/GridInformation.html",
    "title": "Grid Information | ModularUIPack",
    "summary": "Grid Information This is a simple component that stores and provides information based on Grid positions and keywords. Usage Add this Component to a GameObject with a Grid component. To store information on to the Grid Information component, use the following APIs: public bool SetPositionProperty(Vector3Int position, String name, int positionProperty) public bool SetPositionProperty(Vector3Int position, String name, string positionProperty) public bool SetPositionProperty(Vector3Int position, String name, float positionProperty) public bool SetPositionProperty(Vector3Int position, String name, double positionProperty) public bool SetPositionProperty(Vector3Int position, String name, UnityEngine.Object positionProperty) public bool SetPositionProperty(Vector3Int position, String name, Color positionProperty) To retrieve information from the Grid Information component, use the following APIs: public T GetPositionProperty<T>(Vector3Int position, String name, T defaultValue) where T : UnityEngine.Object public int GetPositionProperty(Vector3Int position, String name, int defaultValue) public string GetPositionProperty(Vector3Int position, String name, string defaultValue) public float GetPositionProperty(Vector3Int position, String name, float defaultValue) public double GetPositionProperty(Vector3Int position, String name, double defaultValue) public Color GetPositionProperty(Vector3Int position, String name, Color defaultValue) You can use this in combination with Scriptable Tiles to get the right TileData when creating the layout of your Tilemap."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/GroupBrush.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/GroupBrush.html",
    "title": "Group Brush | ModularUIPack",
    "summary": "Group Brush This Brush picks Tiles which are grouped together according to their position and its set properties. Set the Gap value to identify which Tiles belong to the group, and set the Limit value to ensure that the picked group remains within the desired size. Use this Brush as an example to create your own Brushes that can choose and pick specific Tiles Properties Property Function Gap This value represents the minimum number of cells that must be in between picked Tiles. Only Tiles that are at least this many cells apart are picked by the Brush and placed in the group. Set this value to 0 to pick up all Tiles that are directly adjacent to each other in the group. Limit This value represents the maximum number of cells around the initial picked position. Only Tiles within this range of cells are picked by the Brush and placed in the group. Usage Select the Group Brush, and use the Picker Tool and pick a position on the Tilemap. The Group Brush selects a group of Tiles based on its set properties and creates a Group. Implementation The Group Brush inherits from the Grid Brush. It overrides the Pick method when picking a group of Tiles based on their position and its set properties."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/LineBrush.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/LineBrush.html",
    "title": "Line Brush | ModularUIPack",
    "summary": "Line Brush Contribution by : CraigGraff This Brush draws a line of Tiles onto a Tilemap. With this Brush selected, click once to set the starting point of the line and click again at another position to set the ending point of the line. This Brush then draws a line of Tiles between the two points. Use this as an example to create custom Brush behavior to make painting more efficient. Properties Property Function Line Start Active Indicates whether the Line Brush has started drawing a line. Fill Gaps Ensures that there are orthogonal connections between all Tiles that connect the start and end of the line. Line Start The current starting point of the line. Usage Select the Line Brush, then click once on a cell of the Tilemap to set the starting point of the line, then click on a second cell to set the ending point of the line. The Brush then draws the line of Tiles between the two set points. When the Line Brush is active, a blue outline will indicate the starting point of the line. To have Tiles which are orthogonally connected from start to end, enable the Fill Gaps property in the Brush Editor. Implementation The Line Brush inherits from the Grid Brush and overrides the Paint method to implement the line painting functionality."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/Other.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/Other.html",
    "title": "Other | ModularUIPack",
    "summary": "Other This section will contain other useful scripts which you can use and other details in the future."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/RandomBrush.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/RandomBrush.html",
    "title": "Random Brush | ModularUIPack",
    "summary": "Random Brush This Brush places random Tiles onto a Tilemap by selecting from defined Tile Sets while painting onto the the Tilemap. Use this as an example to create custom Brushes which store specific data per Brush, and to make Brushes with randomized painting behavior. Properties Property Function Pick Random Tiles Enable this property to pick the Tiles from the current selection as a random Tile Set. Add To Random Tiles Enable this property to add the picked Tile Sets to existing Tile Sets instead of replacing them. Tile Set Size Set the size of the Tile Set that is painted by this Brush. Number of Tiles The number of Tile Sets. Tile Set The Tile Set to randomize from Tiles The Tiles in the Tile Set. Usage To create a Tile Set, first define the size of the Tile Set you want to paint by setting its size values in the Tile Set Size property. Then you can add Tile Sets manually with the Brush Editor or select them from an existing Tile Palette. To select Tile Sets from an existing Tile Palette, enable the Pick Random Tiles property and select the Tile Sets using the Picker Tool. This will create a Tile Set, or multiple Sets if the picked size is larger than the size set in the Tile Set Size property. Enable the Add To Random Tiles property to add a picked selection of Tiles onto new or existing Tile Sets instead of replacing them. In this example, 3 Tile Sets of 1x2 are created. When painting with the Random Brush, the Random Brush will randomly pick from the available Tile Sets while painting the Tiles. Implementation The Random Brush inherits from the Grid Brush and implements the following overrides: It overrides the Paint method to paint random selections of Tiles from chosen Tile Sets. It overrides the Pick method to be able to pick selections of Tiles for the random Tile Sets."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/RuleOverrideTile.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/RuleOverrideTile.html",
    "title": "Rule Override Tile | ModularUIPack",
    "summary": "Rule Override Tile Contributions by: johnsoncodehk, Autofire Rule Override Tiles are Tiles which can override the Sprites and GameObjects for a given Rule Tile while maintaining the Rule set of the Rule Tile. This allows you to create Tiles that provide variations of a Rule Tile without setting new Rules. Properties Property Function Tile The Rule Tile to override. Depending on the Rule Tile that is overridden, there may be further properties which you can override here. Any public property in the Rule Tile that does not have a RuleTile.DontOverride attribute will be shown here and can be overridden. Usage First select the Rule Tile to be overridden in the Tile property. The Editor then displays the different Sprites and GameObjects in the selected Rule Tile which you can override. The editor displays the original Sprites that are used in the Rule Tile in the left column. Select the Sprites that override each of the respective original Sprites on the right ‘Override’ column. When the Rule Tile has a match that would usually output the original Sprite, it will instead output the override Sprite. Below that, the editor displays the original GameObjects that are used in the Rule Tile in the left column. Select the GameObjects that override each of the respective original GameObjects on the right ‘Override’ column. When the Rule Tile has a match that would usually output the original GameObject, it will instead output the override GameObject. If you have modified the original Rule Tile and changed the Sprites there, the Rule Override Tile will note that the original Sprites are missing. You can check the original Rule Tile to see if it is set up correctly or set the Override Sprites to None to remove the override. Paint with the Rule Override Tile using the Tile Palette tools."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/RuleTile.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/RuleTile.html",
    "title": "Rule Tile | ModularUIPack",
    "summary": "Rule Tile Contributions by: johnsoncodehk, DreadBoy, AVChemodanov, DoctorShinobi, n4n0lix This is a generic visual Tile that other Tiles such as the Terrain Tiles, Pipeline Tile, Random Tile or Animated Tiles are based on. There are specific types of Rule Tiles for each of the Tilemap grid types. The default Rule Tile is for the default Rectangle Grid type; the Hexagonal Rule Tile is for the Hexagonal Grid type; and the Isometric Rule Tile is for the Isometric Grid types. The different types of Rule Tiles all possess the same properties. Properties The Rule Tile editor of a Terrain Tile. Property Function Default Sprite The default Sprite set when creating a new Rule. Default GameObject The default GameObject set when creating a new Rule. Default Collider The default Collider Type set when creating a new Rule. Tiling Rules Tiling Rules properties Property Function Rule The Rule Type for this Rule. GameObject The GameObject for the Tile which fits this Rule. Collider The Collider Type for the Tile which fits this Rule Output The Output for the Tile which fits this Rule. Each Output type has its own properties. Output: Fixed Property Function Sprite Display this Sprite for Tiles which fit this Rule. Output: Random Property Function Noise The Perlin noise factor when placing the Tile. Shuffle The randomized transform given to the Tile when placing it. Size The number of Sprites to randomize from. Sprite The Sprite for the Tile which fits this Rule. A random Sprite will be chosen out of this when placing the Tile. Output: Animation Property Function MinSpeed The minimum speed at which the animation is played. MaxSpeed The maximum speed at which the animation is played. Size The number of Sprites in the animation. Sprite The Sprite for the Tile which fits this Rule. Sprites will be shown in sequence based on the order of the list. Editor Properties Property Function Extend Neighbor Enabling this allows you to increase the range of neighbors beyond the 3x3 box. Setting up a Rule Tile Set up the Rule Tile with the required rules with the Rule Tile editor. In the Rule Tile editor, you can change, add, duplicate or remove Rules in the Tiling Rules list. Click on the + or - buttons to add or remove Rules. If you have a Rule selected, clicking on the + button will allow you to choose between adding a new Rule or duplicating the selected Rule. The newly created Rule will be placed after the current selected Rule. Select and hold the top left corner of each row to drag them up or down to change the order of the Rules in the list. Rule Tile Editor When you add a new Rule, the Rule editor displays the following: the list of Rule properties, a 3x3 box that visualizes the behavior of the set Rules, and a Sprite selector that displays a preview of the selected Sprite. The 3x3 box represents the neighbors a Tile can have, where the center represents the Tile itself, and the eight bordering cells are its neighboring Tiles in their relative positions to the Tile. Each of the neighboring cells can be set with one of three options: Don't Care, This and Not This. These define the behavior of the Rule Tile towards these Tiles. Edit the 3x3 box to set up the Rule the Tile must match. Options Rule Tile behavior Don't Care The Rule Tile ignores the contents in this cell. This The Rule Tile checks if the contents of this cell is an instance of this Rule Tile. If it is an instance, the rule passes. If it is not an instance, the rule fails. Not This The Rule Tile checks if the contents of this cell is not an instance of this Rule Tile. If it is not an instance, the rule passes. If it is an instance, the rule fails. If all of the neighbors of the Rule Tile match the options set for their respective directions, then the Rule is considered matched and the rest of the Rule properties are applied. When the Rule is set to Fixed, the Rule will only match exactly the conditions set for its neighbors. The example below will only match if there are the same Rule Tiles to the left and right of it. When the Rule is set to ‘Rotated’, the 3x3 box will be rotated 90 degrees each time the Rule fails to match and it will try to match again with this rotated 3x3 box. If the Rule now matches, the contents of this Rule will be applied as well as the rotation required to match the Rule. Use this if you want the Rule to match for the four 90 degree rotations if rotation is possible. When the Rule is set to Mirror X, Mirror Y or Mirror XY, the 3x3 box will be mirrored in that axis each time the Rule fails to match and it will try to match again with this mirrored 3x3 box. If the Rule now matches, the contents of this Rule will be applied as well as the mirroring required to match the Rule. Use this if you want the Rule to match for the mirrored locations if mirroring is possible. If you want the Rule Tile to have a Random output, you can set the Output to Random. This will allow you to specify a number of input Sprites to randomize from. The rotation of the Sprites can be randomized as well by changing the Shuffle property. If you want the Rule Tile to output a Sprite Animation, you can set the Output to Animation. This will allow you to specify a number of Sprites to animate sequentially. The speed of the Animation can be randomized as well by changing the Speed property. When Extend Neighbors is enabled, the 3x3 box can be extended to allow for more specific neighbor matching. The Transform rule matching (eg. Rotated, Mirror) will apply for the extended neighbors set. Paint with the Rule Tile in the same way as other Tiles by using the Tile Palette tools. For optimization, please set the most common Rule at the top of the list of Rules and follow with next most common Rule and so on. When matching Rules during the placement of the Tile, the Rule Tile algorithm will check the first Rule first, before proceeding with the next Rules."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "Overview Scriptable Brushes GameObject Brush Group Brush Line Brush Random Brush Scriptable Tiles Animated Tile Rule Tile Rule Override Tile Other Grid Information Custom Rules for Rule Tile Contributors"
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/Tiles.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/Tiles.html",
    "title": "Scriptable Tiles | ModularUIPack",
    "summary": "Scriptable Tiles You can script Tiles to adapt to different criteria and conditions, such as its position on the Tilemap. It then displays the Sprite which meets its scripted requirements. This allows you to create different Tiles that can help you save time and be more efficient when creating Tilemaps. Refer to the Scriptable Tiles page for more information. The following Scriptable Tiles are included in this package, with examples of how they are implemented. You can use these Tiles as the base for your own custom Tiles as well. Animated Tile Rule Tile Rule Override Tile"
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Documentation~/index.html",
    "title": "2D Tilemap Extras | ModularUIPack",
    "summary": "2D Tilemap Extras The 2D Tilemap Extras package contains reusable 2D and Tilemap editor scripts which you can use for your own Projects, and as the basis for your own custom Brushes and Tiles. You can freely customize the behavior of the scripts to create new Brushes that suit different uses or scenarios. To find these additional Brushes, open the Tile Palette window (menu: Window > 2D > Tile Palette) and open the Brush drop-down menu near the bottom of the editor. Select from the available Brush options for different effects. The source code for these scripts can be found in the repository 2d-extras, and examples of the implemented scripts can be found in the sister repository 2d-techdemos. Scriptable Brushes GameObject: This Brush instances, places and manipulates GameObjects onto the Scene. Use this as an example to create Brushes which targets GameObjects, other than Tiles, for instancing and manipulation. Group: This Brush picks groups of Tiles based on their positions relative to each other. Adjust the size of groups the Brush picks by setting the Gap and Limit properties. Use this Brush as an example to create Brushes that pick Tiles based on specific criteria. Line: This Brush draws a line of Tiles between two points onto a Tilemap. Use this as an example to modify Brush painting behavior to make painting more efficient. Random: This Brush places random Tiles onto a Tilemap. Use this as an example to create Brushes which store specific data per Brush and to make Brushes which randomize behavior. Scriptable Tiles The following are the Scriptable Tiles included in this package. You can create (menu: Create > Tiles ) the following additional Tile types that are included with this package. Animated: This Tile runs through and displays a list of Sprites in sequence to create a frame-by-frame animation. Rule Tile: This is a generic visual Tile that accepts rules you create with the Tiling Rules editor to create different Tilesets. Rule Tiles are the basis of the Terrain, Pipeline, Random or Animated Tiles. There are different types of Rule Tiles for each of the Tilemap grid types. The default Rule Tile is only used with the Rectangle Grid type Tilemap, while the Hexagonal and Isometric Rule Tiles are used with their respective Grid types. Hexagonal Rule Tile: A Rule Tile for Hexagonal Grids. Enable the Flat Top property for a Flat Top Hexagonal Grid, or clear it for a Pointed Top Hexagonal Grid. Isometric Rule Tile: A Rule Tile for use with Isometric Grids. Rule Override Tile: This Tile can override Sprites and GameObjects for a given Rule Tile to provide different behaviour without changing the original Rules. Advanced Rule Override Tile: This Tile can override a subset of Rules for a given Rule Tile to provide specialized behavior, while keeping the rest of the original Rules intact. Other GridInformation: A simple MonoBehavior that stores and provides information based on Grid positions and keywords. Custom Rules for RuleTile: This helps to create new custom Rules for the Rule Tile with more options."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "2D Tilemap Extras copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/README.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/README.html",
    "title": "2d-extras | ModularUIPack",
    "summary": "2d-extras 2d-extras is a repository containing helpful reusable scripts which you can use to make your games, with a slant towards 2D. Feel free to customise the behavior of the scripts to create new tools for your use case! Implemented examples using these scripts can be found in the sister repository 2d-techdemos. All items in the repository are grouped by use for a feature and are listed below. How to use this You can use this in two different ways: downloading this repository or adding it to your project's Package Manager manifest. Alternatively, you can pick and choose the scripts that you want by placing only these scripts in your project's Assets folder. Download Setup Download or clone this repository into your project in the folder Packages/com.unity.2d.tilemap.extras. Package Manager Manifest Requirements Git must be installed and added to your path. Setup The following line needs to be added to your Packages/manifest.json file in your Unity Project under the dependencies section: \"com.unity.2d.tilemap.extras\": \"https://github.com/Unity-Technologies/2d-extras.git#master\" Tilemap For use with Unity 2021.1.0f1 onwards. Please use the 2020.3 branch for Unity 2020.1-2020.3 versions. Please use the 1.5.0-preview tag for Unity 2019.2-2019.4 versions. Please use the 2019.1 tag for Unity 2019.1 versions. Please use the 2018.3 branch or the 2018.3 tag for Unity 2018.3-2018.4 versions. Please use the 2018.2 branch or the 2018.2 tag for Unity 2018.2 versions. Please use the 2017 branch or the 2017 tag for earlier versions of Unity (from 2017.2 and up). Brushes Coordinate: This Brush displays the cell coordinates it is targeting in the SceneView. Use this as an example to create brushes which have extra visualization features when painting onto a Tilemap. Line: This Brush helps draw lines of Tiles onto a Tilemap. The first click of the mouse sets the starting point of the line and the second click sets the ending point of the line and draws the lines of Tiles. Use this as an example to modify brush painting behaviour to making painting quicker with less actions. Random: This Brush helps to place random Tiles onto a Tilemap. Use this as an example to create brushes which store specific data per brush and to make brushes which randomize behaviour. Prefab: This Brush instances and places the containing Prefab onto the targeted location and parents the instanced object to the paint target. Use this as an example to quickly place an assorted type of GameObjects onto structured locations. PrefabRandom: This Brush instances and places a randomly selected Prefabs onto the targeted location and parents the instanced object to the paint target. Use this as an example to quickly place an assorted type of GameObjects onto structured locations. GameObject: This Brush instances, places and manipulates GameObjects onto the scene. Use this as an example to create brushes which targets objects other than tiles for manipulation. TintBrush: Brush to edit Tilemap per-cell tint colors. TintBrushSmooth: Advanced tint brush for interpolated tint color per-cell. Requires the use of custom shader (see TintedTilemap.shader) and helper component TileTextureGenerator. Group: This Brush helps to pick Tiles which are grouped together by position. Gaps can be set to identify if Tiles belong to a Group. Limits can be set to ensure that an over-sized Group will not be picked. Use this as an example to create brushes that have the ability to choose and pick whichever Tiles it is interested in. Tiles Animated: Animated Tiles are tiles which run through and display a list of sprites in sequence. Pipeline: Pipeline Tiles are tiles which take into consideration its orthogonal neighboring tiles and displays a sprite depending on whether the neighboring tile is the same tile. Random: Random Tiles are tiles which pseudo-randomly pick a sprite from a given list of sprites and a target location, and displays that sprite. Terrain: Terrain Tiles, similar to Pipeline Tiles, are tiles which take into consideration its orthogonal and diagonal neighboring tiles and displays a sprite depending on whether the neighboring tile is the same tile. RuleTile: Generic visual tile for creating different tilesets like terrain, pipeline, random or animated tiles. Hexagonal Rule Tile: A Rule Tile for use with Hexagonal Grids. Enable Flat Top for Flat Top Hexagonal Grids and disable for Pointed Top Hexagonal Grids. Isometric Rule Tile: A Rule Tile for use with Isometric Grids. RuleOverrideTile: Rule Override Tiles are Tiles which can override a subset of Rules for a given Rule Tile to provide specialised behaviour while keeping most of the Rules originally set in the Rule Tile. Weighted Random: Weighted Random Tiles are tiles which randomly pick a sprite from a given list of sprites and a target location, and displays that sprite. The sprites can be weighted with a value to change its probability of appearing. Other GridInformation: A simple MonoBehaviour that stores and provides information based on Grid positions and keywords. Custom Rules for RuleTile: This helps to create new custom Rules for the Rule Tile. Check the Wiki or this great video for more information on how to use this! Contribution Notice From 7 January 2019 until 12 February 2020, all contributions are licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license)."
  },
  "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap.extras@3.1.3/Third Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: Line Brush public static IEnumerable GetPointsOnLine(Vector2Int p1, Vector2Int p2) License Type: MIT Copyright (c) 2020 Eric Woroshow http://ericw.ca/notes/bresenhams-line-algorithm-in-csharp.html Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ericw.ca / Content © 2009-2020 Eric Woroshow. All rights reserved. Code under MIT license unless otherwise noted. Component Name: Line Brush License Type: MIT Copyright © 2017 CraigGraff (https://github.com/CraigGraff) https://github.com/Unity-Technologies/2d-extras/pull/6 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Animation Tile License Type: MIT Copyright © 2017 MahdiMahzouni (https://github.com/MahdiMahzouni) https://github.com/Unity-Technologies/2d-extras/pull/12 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Coordinate Brush License Type: MIT Copyright © 2018 nicovain (https://github.com/nicovain) https://github.com/Unity-Technologies/2d-extras/pull/20 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Weighted Random Tile License Type: MIT Copyright © 2018 nicovain (https://github.com/nicovain) https://github.com/Unity-Technologies/2d-extras/pull/20 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Rule Tile Editor License Type: MIT Copyright © 2018 DreadBoy (https://github.com/DreadBoy) https://github.com/Unity-Technologies/2d-extras/pull/22 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Weighted Random Tile License Type: MIT Copyright © 2018 distantcam (https://github.com/distantcam) https://github.com/Unity-Technologies/2d-extras/pull/26 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Rule Override Tile License Type: MIT Copyright © 2018 johnsoncodehk (https://github.com/johnsoncodehk) https://github.com/Unity-Technologies/2d-extras/pull/29 and https://github.com/Unity-Technologies/2d-extras/pull/36 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Rule Override Tile Editor License Type: MIT Copyright © 2018 johnsoncodehk (https://github.com/johnsoncodehk) https://github.com/Unity-Technologies/2d-extras/pull/29 and https://github.com/Unity-Technologies/2d-extras/pull/36 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Rule Tile License Type: MIT Copyright © 2018 johnsoncodehk (https://github.com/johnsoncodehk) https://github.com/Unity-Technologies/2d-extras/pull/36 and https://github.com/Unity-Technologies/2d-extras/pull/38 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Rule Tile Editor License Type: MIT Copyright © 2018 johnsoncodehk (https://github.com/johnsoncodehk) https://github.com/Unity-Technologies/2d-extras/pull/36 and https://github.com/Unity-Technologies/2d-extras/pull/38 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Custom Rule Tile License Type: MIT Copyright © 2018 johnsoncodehk (https://github.com/johnsoncodehk) https://github.com/Unity-Technologies/2d-extras/pull/38 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Create Asset Menus License Type: MIT Copyright © 2018 janissimsons (https://github.com/janissimsons) https://github.com/Unity-Technologies/2d-extras/pull/49 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Rule Tile License Type: MIT Copyright © 2018 DoctorShinobi (https://github.com/DoctorShinobi) https://github.com/Unity-Technologies/2d-extras/pull/51 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Rule Tile Editor License Type: MIT Copyright © 2018 DoctorShinobi (https://github.com/DoctorShinobi) https://github.com/Unity-Technologies/2d-extras/pull/51 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE."
  },
  "Library/PackageCache/com.unity.2d.tilemap@1.0.0/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap@1.0.0/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog [1.0.0] - 2019-09-18 Added Allow child GameObjects in the Palette Asset to be shown in the Tile Palette Add toggle to allow rendering of Gizmos in the Tile Palette Add OnSceneGUI API to GridBrushEditorBase for GUI calls for the active Brush (OnPaintSceneGUI is called only when the appropriate EditorTool is active) Add GridPaletteUtility to create Palette Assets through scripting [1.0.0] - 2019-06-06 Added Rename package to 2D Tilemap Editor Switch to a Paintable tool after picking from a Picking Is Default Paintable Grid if the previous tool was a tool that did not allow painting Store last used brush per session to persist when going into and out of PlayMode [1.0.0] - 2019-03-22 Added Allow users to convert Prefabs to Tile Palettes by dragging and dropping a valid Prefab onto the Tile Palette Window Add toggle to allow changing of Z Position with GridBrush Expose GridPaintingState.scenePaintTarget to allow users to change currently active target for Tile Palette Window Expose GridPaintingState.validTargets to allow users to get currently valid targets for Tile Palette Window Expose GridPaintingState.gridBrush to allow users to change currently active GridBrush for Tile Palette Window Expose GridPaintingState.palette to allow users to change currently active Palette for Tile Palette Window Expose TileUtility to allow users to create default Tiles through scripts Add CreateTileFromPaletteAttribute to allow users to specify how Tiles are created when dragging and dropping assets to the Tile Palette Window Changed Convert TilePalette to use EditorTools API [1.0.0] - 2019-01-02 This is the first release of Tilemap Editor, as a Package"
  },
  "Library/PackageCache/com.unity.2d.tilemap@1.0.0/Documentation~/TilemapEditor.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap@1.0.0/Documentation~/TilemapEditor.html",
    "title": "About Tilemap Editor | ModularUIPack",
    "summary": "About Tilemap Editor Use Unity’s Tilemap Editor to create and edit a variety of 2D levels using Tile Assets arranged on the Grid and Tilemap GameObjects. This also supports specialized types of Tilemaps, such as Hexagonal and Isometric Tilemaps. Installing Tilemap Editor To install this package, follow the instructions in the Package Manager documentation. Using Tilemap Editor The Tilemap Manual can be found [here] (http://docs.unity3d.com/Documentation/Manual/class-Tilemap.html). The Tile Palette Manual can be found [here] (https://docs.unity3d.com/Manual/Tilemap-Palette.html). Technical details Requirements This version of Tilemap Editor is compatible with the following versions of the Unity Editor: 2019.2 and later (recommended) Package contents The following table indicates the folder structure of the Tilemap Editor package: Location Description <Editor> Root folder containing the source for the Tilemap Editor used to edit Tilemaps inside the Unity Editor. <Tests> Root folder containing the source for the tests for Tilemap Editor used the Unity Editor Test Runner. Document revision history Date Reason January 2, 2019 Document created. Matches package version 1.0.0"
  },
  "Library/PackageCache/com.unity.2d.tilemap@1.0.0/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap@1.0.0/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.2d.tilemap copyright © 2019 Unity Technologies ApS Licensed under the Unity Package Distribution License (see https://unity3d.com/legal/licenses/Unity_Package_Distribution_License ). Unless expressly provided otherwise, the software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.2d.tilemap@1.0.0/README.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap@1.0.0/README.html",
    "title": "| ModularUIPack",
    "summary": "Tilemap Editor."
  },
  "Library/PackageCache/com.unity.2d.tilemap@1.0.0/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.2d.tilemap@1.0.0/Third Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "Component Name: Bresenham's Line Algorithm in C# License Type: MIT Copyright © 2009-2020 Eric Woroshow http://ericw.ca/notes/bresenhams-line-algorithm-in-csharp.html Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [1.8.19] - 2025-01-17 Changed Source file checksums are now included in pdb debugging files, so that Visual Studio can warn when source files differ from when the pdb was built Added support for HashCode.Combine Fixed Fixed hash generation error for derived default interface methods Fixed resolution of local variable types in generic default interface methods Fixed crash that could occur when a target method of BurstCompiler.CompileFunctionPointer was already decorated with [MonoPInvokeCallback]. If this existing attribute existed in a namespace other than AOT, Burst's IL postprocessor would add a second [MonoPInvokeCallback], resulting in a runtime crash on IL2CPP. Fix crash when trying to Burst compile a project without any Bursted code with debug info enabled, when it has already been compiled without debug info before. Fixed BC1055: Unable to resolve the definition of the method ... errors when compiling code using in method parameters for multiple CPU targets Fixed an issue preventing debugging of managed methods that use direct call, regardless of whether Burst compilation is manually disabled Fixed a rare concurrency issue in the entry point finder. Added [Android] Support for 16Kb page sizes Removed Known Issues [1.8.18] - 2024-09-04 Added Added the UNITY_BURST_DISABLE_COMPILATION environment variable as an alternative to the --burst-disable-compilation command-line argument Removed Changed Fixed Static fields used in static constructors were sometimes incorrectly set to read only, despite being written. Fixed a case of the editor getting stuck loading during a domain reload if Burst was set to synchronous compilation Fixed hashing bug that could occur when method signatures differed only by generic parameter count Branches within if (cpufeaturesupported) blocks could cause the transform pass to miss identify which blocks are supporting which features, leading to errors at compile time about intrinsics not being in matching blocks. Fixed 'cannot open input file ucrt.lib' error when building for Universal Windows Platform and targeting SDK 10.0.26100.0 Known Issues [1.8.17] - 2024-07-22 Added Removed Changed Improved performance of Burst-compiled code in the Windows x64 Editor by only emitting context-saving code when the code being compiled contains a throw Improved error message for pointer-like types in non-readonly static fields ARM 32-bit is no longer built for Universal Windows Platform when targeting SDK 10.0.26100.0 or newer Fixed Fixed another compiler crash caused by faulty alias analysis BurstAotSettings files are no longer written to disk unless default settings are changed Fixed the BurstDebugInformation_DoNotShip folder not being saved outside the player build folder for Embedded Linux and QNX platforms Fixed direct negation of enums was not correctly promoting the underlying type, causing wrong results. Fixed that Mathf.Approximately would return the wrong result approximately all of the time Fixed an issue with default interface methods which would result in compiler errors due to IL corruption. Creating a project with a space in the path would cause burst to fail on windows arm64. Fixed 'Failed to find Windows SDK' error when targeting the latest installed Windows SDK version for Universal Windows Platform builds Known Issues [1.8.16] - 2024-05-29 Fixed Fixed compiler crash caused by faulty alias analysis [1.8.15] - 2024-05-10 Added Removed Changed Fixed An issue with auto promotion from bool to float that can occur with newer Roslyn. Fixed compilation error when trying to use MemoryMarshal.GetReference on Spans Fixed crash caused by faulty no-alias analysis Fix build error when Product Name contains illegal path characters. Improved the compilation time for projects with many assemblies/assembly-define symbols Known Issues [1.8.14] - 2024-04-04 Fixed Fixed burst sometimes throwing FileNotFoundException Fixed incorrect handling of [Conditional] attributes in some circumstances Fixed that some or all scripting symbol defines wouldn't be known by Burst in player builds Added Removed Changed [1.8.13] - 2024-02-29 Added Added clearer diagnostic error for certain bad usages of IsSupportedXXX intrinsics. Added support for Burst with the visionOS Simulator SDK. Added support for Windows Arm64. Fixed Fixed InvalidCompilerException when usage of IsSupportedXXX intrinsic results in no branches being generated. Fixed information in documentation regarding scheduling generic jobs through generic methods. Fixed a crash caused by arithmetic or bitwise negation on native integers followed by a cast to a pointer. Fixed that the burst debug information folder would sometimes be saved in project root folder. Fixed System.ArgumentNullException exception in ILPostProcessing when encountering a library using mscorlib Fixed an issue where if two modules were referencing the same external method (dllImport) an internal compiler error could occur - \"Burst internal compiler error: Burst.Compiler.IL.CompilerException: Error while verifying module: DISubprogram attached to more than one function\" Fixed \"Failed to find entry-points: ... An item with the same key has already been added\" error that could occur in the presence of precompiled (usually obfuscated) assemblies that contained methods overloaded only by return type Removed Changed Known Issues [1.8.12] - 2024-01-02 Fixed Fixed the managed fallback for bursts intrinsic functions cvt_ss2si, cvtss_si32, and cvtss_si64 to follow midpoint rounding standard of nearest even. Fixed an issue where use of certain intrinsics could cause a compile error even if properly guarded by the appropriate IsXXXSupported property. If an exception is thrown from burst compiled code in the Editor on Windows there was potential for certain callee saved registers to be corrupted. In order to fix this ( editor only - player builds are unaffected), we now save some additional context on each entry point. Fixed burst not differentiating between overloaded generic functions such as T foo(int val) and T foo(T val) when the function calls are foo(1); foo (1). Burst would previously only compile the T foo(T val) function. Fixed android builds throwing a NullReferenceException. Fixed arithmetic and bitwise negation on native integers. Fixed an issue where underflows of nint and nuint at compile time would lead to incorrect code. Burst recompiles assemblies due to hashes mismatching because of the way assembly defines are combined into the hash. Fixed constant SHUFFLE function not seen as a constant when called indirectly through a FunctionPointer Added Removed Changed Update default LLVM to version 16 Known Issues [1.8.11] - 2023-11-16 Added Burst support for Apple visionOS [1.8.10] - 2023-11-02 Fixed Fixed the Burst Inspector not displaying target methods if namespace/class contained the method name. Linking libstdc++/libc++ statically on HMI platforms Fixed an issue that caused an empty variable to be returned if it is between a zero initializer Native debug information would fail to reflect the contents of parameters to functions. For native debug information, type symbols can now be referenced using :: separator between namespaces (C++ style) - E.g. Example.Type becomes Example::Type. Fixed that changing certain player build platform settings (like SDK version) would not trigger Burst to recompile Fixed invalid burst string formats leading to internal compiler error. Fixed QNX player builds on 32-bit ARM Fixed an error thrown by the Burst Inspector when opening a non-static job with special characters in its name Fixed an issue that caused alignments for global values to be wrong, which could lead to a rare AVX2 specific crash. Added Added support for System.Math functions Acosh, Asinh, Atanh, Cbrt, CopySign, Log2, SinCos, FusedMultiplyAdd, and ILogB Removed Remove all code specific to DOTS Runtime Changed Use mimalloc as our native allocator on Windows to speed up concurrently executing LLVM work Known Issues [1.8.9] - 2023-09-22 Changed Minor behind-the-scenes changes that should not affect users. [1.8.8] - 2023-07-24 Fixed Fixed error when trying to use direct call to a nested protected class Fixed that converting a negated unsigned type to a float would produce a mismatching value in Burst versus .Net/Mono Fixed that the Burst Inspector handled negation of unsigned types differently than .Net for static readonly fields or static constructors Fixed Burst sometimes returning wrong value for static readonly fields or static constructors. Fixed a possible source of invalid alignment, avx2 storing to stack was given a slot with the wrong alignment. Fixed System.NotImplementedException: Unimplemented Instruction Extension Tail_ error when the code contained tail-calls Fixed wrong alignment for v128 when doing an indirect access. Fix compiler crash when compiling different assemblies that define methods or types with the exact same name and namespace Fixed using Armv9 target in the Burst Inspector not formatting the assembly. Fixed that jobs wouldn't be Burst compiled for player builds with high stripping Fixed burst not being able to find external function leading to crashing the Editor Prevented Burst emitting errors even when Burst was disabled via the --burst-disable-compilation command line option Under some conditions (if the error in compilation occurred in a location that didn't have valid debug information), building a player might not generate any files, and not display any errors. Fixed uint to float conversion edge-case Fixed syntax highlight missing for some ARM instructions. Added Added support for default interface methods Added ability to support hashing against different target frameworks. Added support for string interpolation in exception messages Removed Changed Fixed a compile-time performance regression in 1.8.7 that could result in slower Burst compilation and increased memory usage during compilation Direct call is now correctly disabled for methods that are decorated with both [BurstCompile] and [UnmanagedCallersOnly] attributes (such methods shouldn't be called directly from managed code) Add support for Math.Clamp (this API is available when Api Compatibility Level is set to .NET Standard 2.1) Known Issues [1.8.7] - 2023-06-07 Added Add proper license attribution for MUSL and SLEEF libraries. Removed Changed Changed focus for initial Burst Inspector focus to actually get the search hit in focus. Fixed Fix QNX builds using the qnxInstallationPath editor build setting Fixed an issue causing source file handles to be left open (preventing saving in an ide, if in debug scripting mode and the file is used in the burst path). Fixed an issue when targeting multiple cpu architectures (e.g. SSE2 & AVX2) that under some circumstances would lead to code attempting to execute paths not designed for that cpu. Fixed an issue that caused builds to fail due to the System.Diagnostics.Tracing assembly not being found Fixed a warning that occurred when opening Burst AOT Settings while in Play Mode Fixed a hashing error that could occur when an operator overload method is used as a Burst entry point Fixed crash on linux if debug logging was enabled. Fixed \"The specified path is not of a legal form (empty)\" error Calls to methods with multiple [Conditional] attributes are now kept if any one of the conditions are met Fixed Burst implementation of IntPtr.GetHashCode() being different than .Net Fixed an issue that caused the digits and MidpointRounding parameters of Math.Round be ignored Known Issues [1.8.4] - 2023-03-20 Fixed Fixed possible deadlock when compiling after domain reload Fixed incorrect codegen when having multiple try-finally blocks inside another try-finally block (for example from foreach loops) Domain completed stall when switching between debug/release scripting modes when burst compilation is needed for items in the new domain. Fixed \"An item with the same key has already been added\" compiler error that could occur when duplicate field names were present in obfuscated assemblies Fixed \"Failed to find entry-points: Mono.Cecil.AssemblyResolutionException: Failed to resolve assembly\" error that was displayed when Burst tried to compile an assembly that had C# compilation errors Fixed code-gen issue where side-effects before a conditional throw would be ignored Burst managed breakpoints might fail to work, after a domain reload. Fixed that some changes made to versioned assemblies wouldn't get picked up and compiled by Burst Fixed line highlight and register highlight not clearing when Burst Inspector settings change. Fixed Burst compilation error relating to UnityEngine.Assertions.Assert.Fail when doing player builds with high stripping settings Fixed a BadImageFormatException error that could occur in some player builds Neon intrinsics: fixed default target CPU for Arm Mac Standalone builds Fixed MethodDecoderException when trying to call CompileFunctionPointer on a nested static method Fixed incorrect pdb path for AoT dll libraries Fixed inaccurate stacktraces when throwing an exception from Burst in specific cases Fixed \"An item with the same key has already been added\" hashing error that could occur if obfuscators changed nested type names to have the same name and different namespaces Added Add support for ChromeOS in Unity versions 2020.3 and 2019.4. Windows/ARM64 targeting support Removed Changed Changed Burst Inspector input handling so that arrow-keys can be used to select in search boxes. Made Burst Inspector's target job load asynchronous. Known Issues [1.8.3] - 2023-01-30 Added Added selection of line and highlight of selected line and selected lines register usage. FunctionPointer ()::Invoke usage is now checked and patched to ensure the calling convention is compatible with burst. Added SIMD smell test to the Burst Inspector, highlighting ARM or x86-64 SIMD instruction differently depending on whether they work for packed or scalar inputs. Added a toggle for filtering out \".Generated\" jobs from the Burst Inspector target job list. Added a Burst AOT setting for the kind of debug information generated for player builds Fixed Fixed AoT linking error on Windows Link based linkers when file paths (typically user names/home folders) contain non-ASCII characters. Fixed ARM vector registers not being highlighted. Fixed Burst Inspector sometimes throwing ArugmentOutOfRangeException when copying without color-tags from assembly that is colored. Fixes error when calling direct call method from background thread without having previously called a BurstCompiler API from the main thread Fixes \"Plain Without Debug Information\" outputting assembly with debug information. Fixed a hashing error that could occur when a struct implements a generic interface multiple times with different generic parameters An issue that could cause function pointers to point to the wrong burst function, if a domain reload occurs and a compilation started before the reload, completes soon after. Fixed bug in a small set of managed fallback versions of intrinsics, where the bitwise representation of float values would not be maintained Fixed player build error that could occur if the project contains an assembly whose name doesn't match the assembly filename Crashes on 32bit cpus when an entry point with byvalue paramaters was called, when using dispatch (multiple supported cpu targets). Fixed module verification errors when using overloaded functions as function pointers Fixed an issue the definition order of overloaded methods with function pointer parameters would decide which overload was actually being used Fixed compiler AccessViolationException that could occur when compiling two or more types with the same name but different source assemblies Burst now updates its list of assembly paths if they change, for instance - adding packages that contain precompiled assemblies. Fixed a stall that could occur at Editor shutdown Fixed BC1361 error when trying to compile large static readonly arrays. Fixed compilation error when using CompileFunctionPointer from Burst in code compiled with Roslyn on .NET 7+ Fixed a BadImageFormatException error that could occur in DOTS Runtime builds Fixed the inspector job tree view splitting jobs, with '.' in their parameters. Fixed internal compiler error when implcitly converting an array to a Span Fixed managed fallback implementation of Sse4_2.cmpestrs \"LLVM IR Optimisation Diagnostics\" tab in Burst Inspector was blank if \"Native Debug Mode Compilation\" was enabled; this is now fixed Fixed burst tree view items leading to wrong job if some jobs where hidden from view by filter or similar. Fixed \"Callee/caller attribute ABI did not match!\" error that could occur in certain player builds when calling an entry point that had at least one struct-by-value parameter Fixed namespace collision that could occur between Unity.Burst.Cecil.dll and the com.unity.nuget.mono-cecil package Enum values cast to integers in a format string previously output the enum type name; now the integer value is correctly output Fix Burst compilation on QNX Arm Fixed visual artifact in Burst Inspector, where block of enhanced code was cut at the bottom. Fixed compiler crash when invoking FunctionPointers based on a generic delegate in DOTS Runtime Fixed internal compiler error that occurred when creating debug metadata from certain obfuscated dlls Fixed \"Assertion failed on expression: \"exception == SCRIPTING_NULL\" errors and editor crash when the project path contained multi-byte Unicode characters Changed Changed burst inspector source location comments from \"===\" to either \";\" or \"#\" depending on the given assembly kind. Changed horizontal code focus in the Burst Inspector to only scroll when branches fill more than half the space Changes so target job list in the Burst Inspector is a fold-able/expandable tree view, instead of a simple list. Improved how optimisation remarks are displayed in the \"LLVM IR Optimisation Diagnostics\" tab in Burst Inspector to make them more useful Burst now only generates full debug information when \"Native Debug Mode Compilation\" and script debug information is enabled Removed Known Issues [1.8.2] - 2022-11-18 Added Changed Fixed Fixed an issue where sometimes the wrong body of an overloaded entrypoint would be used Failing to link if ; in path Fixed Burst being disabled in the Editor after changing script optimization mode (i.e. from Release to Debug or vica-versa) C# Debug information was incorrectly ignored for methods that had multiple source files. This caused native debug information to be dropped for code generated methods, and prevented the disabling of burst for such methods when a managed break point was set in Unity 2022.2 or greater (see https://docs.unity3d.com/Packages/com.unity.burst@1.8/manual/debugging-profiling-tools.html). Pointer addition of byte would incorrectly sign extend the byte, instead of zero extend. lib_burst_generated.txt was not being output. Player stripping levels higher than minimal would fail to build with burst if they used String.Formatters, String Copy, or BurstDiscard. Fixed error when building player caused by calling an entrypoint method from within other Burst-compiled code iOS/tvOS burst libraries are now using explicit min os version, as configured in player settings. Fixed Burst AOT setting \"Enable Optimizations\" not being applied in player builds Fixed player builds not being recompiled when changing only Burst AOT settings (and changing nothing else) in Unity 2022.2+ Error caused by the MonoDebuggerHandling.dll requiring VCRuntime to be installed. Removed Known Issues [1.8.1] - 2022-10-12 Added Added a custom lld wrapper, to save package space in transit and on disk. Added hover box information for assembly instructions. Changed Upgraded Burst to use LLVM Version 14.0.6 by default, bringing the latest optimization improvements from the LLVM project. Ensured our executables and libraries on macOS and Linux are stripped to reduce package size. Changed how we handle domain reloads within Burst to avoid paying a 250ms cost on each domain reload when using Burst. With the relaxation in Unity 2022.2 or newer that we can call CompileFunctionPointer from a background thread, we now use this mechanism in Burst to handle Direct Call methods, resulting in a cost saving during Domain Reload. Added a categorized index of Neon intrinsics supported in Burst to the Manual Changed the documentation so that it is super clear that exceptions in player builds cause the application to abort. Fixed Fixed a compiler crash that could occur with code that followed the pattern Debug.Log($\"{variable}\") Compiling with line only debug information could cause a compiler crash on certain platforms PDB path associated with windows player dll had the wrong filename, resulting in broken symbols. Fixed documentation issues with Neon intrinsics where the comparison operation would not match the actual one Fixed bug that could occur when swapping large structs by value Fixed \"Unable to resolve type T. Reason: Unknown.\" error when accessing a field of a struct referenced via a pointer behind a reference. Fixed some arm64 instructions not being labelled as instructions. If burst is disabled, and an assembly is changed, burst won't recompile that assembly once burst is re-enabled. Removed Known Issues [1.8.0] - 2022-09-13 Added Added experimental atomic and/or operations to Burst. Changed math.fmod in combination with a Burst job compiled with FloatPrecision.Low will now generate a more optimized low-precision version of the function. Burst now respects the checkbox \"Enable Armv9 Security Features for Arm64\" in the Player settings, making Android builds generate PAC/BTI instructions if enabled. In Burst AOT Settings, only the relevant CPU Architectures dropdowns for the current build target and architecture are now displayed The callstack of the invalid external call is now included when reporting BC1091 Changed so code is focused when branch arrows are present. Changed so Burst reported errors are not collapsible. Removed Fixed An Internal Compiler Error that could occur if a function that requires a struct ret (due to ABI) has been discarded by other logic. Fixed a bug with locally declared array variables in functions where storing null into them could cause invalid codegen. Fixed a bug in Burst player builds where sufficiently complicated Bursted code could cause a deadlock deep within LLVM. Fixed that UWP builds wouldn't respect the specified \"Target SDK Version\" and \"Visual Studio Version\" settings Fixed Burst inspector sometimes freezing when selecting between blocks. Fixed the Burst Inspector sometimes becoming unresponsive when selecting text. Fixed a race condition with the Burst log timings such that previously reported results could be included in subsequently reported timings. Fixed the managed fallbacks for bzhi and bextr to match what the native hardware instructions do. Fixed a bug in the static readonly constant expression evaluation (what we call the IL interpreter) whereby it would not truncate unsigned integers correctly. Fixed that compilation would have full debug info forced on Fixed incorrect code-gen when a function is both used normally and as a function-pointer Known Issues The PDB path associated with the Windows Player dll is incorrect, resulting in broken symbols. [1.8.0-pre.2] - 2022-08-03 Fixed Fixed hashing bug that could occur when a function pointer type is used in a method parameter Fix selection and copying of folded blocks Fixed hashing error that could occur in the presence of multiple synthesized explicit interface implementations with the same name and signature Fixed a compiler crash if users used __refvalue or __arglist in Burst. Neither of these are supported, but now we will nicely tell you via a compiler error that they aren't supported. Fixed a compiler error when trying to acquire the function pointer of a generic function from Bursted code. Fix some ARM branch instructions not being processed as such. Using a function only through a C# function pointer could cause a crash Whitespace changes in ILPP'd assemblies would not be detected. Issue where a warning could be generated about the debug information version mismatching warning: ignoring debug info with an invalid version (0) during link. Interface methods where not being hashed correctly for constrained types, which would result in burst failing to recompile code that had changed in an implementation class. Fixed a safety check bug with Span/ReadOnlySpan and Slice(start, length) where if start + length was equal to the Length of the original span, the safety check would incorrectly report an out-of-bounds access. Linking issue when exports differ only by module. Disabling Burst from the command line via --burst-disable-compilation no longer results in Burst errors when building a player for Android Corrupted binary could be produced on M1 if there was not enough space for UUID+codesign injection. ;'s in paths would cause burst to fail. Note - Also requires a fix in the Editor, so if your project has ;'s in its path, the workaround is to remove the ; from the folder name for now. Fixed error when compiling assemblies with spaces in their names Fixed access violation race condition bug Fixed a bug where static fields in generic types could in some situations be initialized with the incorrect value Fixed last line in Burst Inspector not being select-able using the mouse cursor. Fix error that occurs with a specific formulation of IL, using xx with an early out escape and unbalanced calculation stack. (Object reference not set to an instance of ... in CollectBlock.ToVisitOrder) Changed Changed burst inspector toggles to popup menus. Removed label from burst inspector popup menu into the menu itself. Used explicit namespace for UnityEditor.PackageManager.Events to avoid conflicts. Improved \"hashing\" performance. This is the part of Burst that determines whether anything significant has changed in .NET assemblies, and therefore whether that assembly to be compiled. Entry point function names weren't always included in crash callstacks; now they are Search pattern from previous job is not carried over to the new. Changed so block of 1 line cannot be folded in the Burst Inspector Added Setting a breakpoint in an attached managed debugger (Rider/VS Unity Debugger...) on a method that is burst compiled, will switch off the burst code path for that method, allowing it to be debugged as normal. Added toggle to filter Unity tests on and off. Assembly is now searchable either through CTRL + f or the contex menu associated with the inspector view. Search options include case sensitivity, whole word match, and regex. Intrinsic support for UnsafeUtility.IsNativeContainerType Added an actual definition for HPC# in the package docs. Check that calling convention is correctly set to Cdecl for functions whose addresses are taken via ldftn. Added focus on current job in the burst inspector. Added copy to burst inspector, which ignores underlying color tags. Removed Known Issues [1.8.0-pre.1] - 2022-05-06 Changed Always preserve frame pointers in Burst. This results in a neglible performance hit (less than 0.5% in benchmarks), but ensures that stack recovery for stack traces is always possible. Class libraries are now built with netstandard 2.0 The minimum Xcode version to build for iOS, iPadOS, and tvOS with Burst is now 12.0.0. Upgraded Burst to use LLVM Version 13.0.1 by default, bringing the latest optimization improvements from the LLVM project. Fixed \"error while hashing\" message that could appear during compilation Made Burst explicitly check for any compilation requests that came from AssemblyBuilder, and do not compile these with Burst. These exist outside the normal compilation pipeline, and Burst could not support them (but we now explicitly check for that case). Made Burst's ILPP 22% faster by caching dependent assemblies that the being-processed assembly uses. Changed how we process static readonly fields in static constructors such that we'll allow more computational budget per static field. This fixes the case where having too many static readonly variables in a single static constructor could fail to compile, while they would work if each was in their own static constructors. Collapsed block of code in burst inspector now shows the blocks first line of code. Upgraded Burst to use LLVM Version 14.0.0 by default, bringing the latest optimization improvements from the LLVM project. Changed the default alignment for SharedStatic's from 4 to 16. Added Branches now highlights when you hover them. Branches are clickable; directing the view to the other end of the branch when clicked. Added support for the System.Runtime.CompilerServices.IsExternalInit workaround documented here into Burst when used in 2022.1+. Enabled keyboard navigation in the right pane of the burst inspector. Added version number to debug metadata for llvm Experimental support for Armv9 SVE2 CPU target for Android Added a Target Arm64 CPU setting in Burst AOT Settings for Android Removed Removed the requirement that BurstLoader has to initialize BurstReflection during a domain reload, making BurstLoader setup 2x faster during domain reloads. Fixed Error if install in build folder is used without ever using a regular build. Fixed a performance regression with IJobParallelFor where vectorization didn't happen for cases where it previously would have. Fixed a compiler miscompile if you loaded a static readonly v128 and passed it straight to a function as an argument. Removed implicit dependencies to pre-compile binaries in CodeGen which would otherwise cause assembly resolution conflicts. Fixed a Unity 2021.2 and newer bug that manifested with UWP builds - we were using the wrong unityaot folder in the Unity editor distribution with Burst. Fixed a really subtle caching bug in the compiler where if you had a job that compiled successfully at least once, then it failed (you used managed state for instance), then you closed the editor and restarted, if the compiler threads started in precisely a strange combination then Burst might accidentally never recompile the job which failed previously. Fixed potential hang in Editor when compiling a Burst entry point method that is defined in a generic class Fix for the X.pdb: The process cannot access the file because it is being used by another process issue our users were seeing. We were taking a FileShare.Read lock, when we needed to take FileShare.ReadWrite. Fixed a bug where the compiler would reject a try/finally statement if it was the first thing in a method Fixed a performance regression affecting some vectorization in Burst 1.7+ (LLVM 12+). Inspector performance regression. Improved UWP linker error message to clarify which VS components need to be installed for UWP Fixed a bug that meant Burst was accidentally enabled in secondary Unity processes, including the asset import worker and out-of-process profiler (see changelog entry for 1.6.0-pre.1 for more context around this) Keybindings for copy and selection did not depend on OS. Right pane vertical scrollbar not always showing correctly. Inspector font style changing when entering and exiting play mode. Fixed access violation error that could occur when reading from a static readonly variable Made --burst-force-sync-compilation command-line option actually work Fixed a bug that was exposed by a Script Updater running against the Entities tests, whereby if some sort of pre-domain-reload code (some sort of teardown like thing) called into Burst, the script updater could have caused Burst to purge valid function pointers, resulting in us trying to execute a DLL location that we had already unloaded. Fixed a super rare bug whereby if you kicked off two compilations very close together (most likely when running Unity in some sort of headless build-a-player mode), Burst could throw an exception on a burst hash cache file being locked by the process. Fix a bug where if you had a long running compilation and a new compilation came in, some threads in the thread pool could (if unlucky) block trying to dirty the assembly in our Burst caching infrastructure while waiting for the compilation to complete. Fix a bug where codegen differences could occur when using a local vector variable that was being captured by reference and passed to a called function, versus when it wasn't. Fixed an exception that could occur if you had the Burst AOT Settings menu docked in the Editor, and then did a player build. Trying to change any of the Burst AOT Settings would throw an exception (unless you closed and reopened the Burst AOT Settings). Fixed a bug where we could leave background tasks around forever when we had actually completed them (could only happen if two re-compilation requests arrived close together, meaning we'd cancel the first but never report to the background tasks that we had cancelled them!). Fix the Burst link.xml output to preserve C# methods we rely on, alongside the static constructors that we preserved previously. Fixed errors when working with paths containing special characters Fixed a bug where if you used FloatMode.Fast with math.pow, where the y argument to math.pow was actually sourced from an integer, illegal codegen would be generated (LLVM would try and call out to powf from the cstdlib). Worked around an ordering issue with post-processing in 2020.3 and earlier by deferring the early compilation of script assemblies in the editor until the entire pipeline has completed. Fixed a bug in 2022.1+ where calling Debug.Log in a static constructor would result in a Burst failure. Fixed another rare case of the file-is-locked bug where the Burst IL Post Processor could incorrectly hold a file lock on a pdb. Fixed a bug when calling profiling CreateMarker on iOS, Burst could fail at runtime saying it was unable to find CreateMarker__Unmanaged. Fixed that the crc32_u64 second parameter should have been a ulong. Added a new ulong variant and marked the old long variant as [Obsolete]. Fixed a bug where using ReinterpretStore(someIndex, (ushort)someValue) could cause an internal compiler error in Burst. Fixed a potential deadlock whereby if Burst was compiling in the background (the background tasks window showed Burst in it) and a user switched from release to debug in the editor, Burst could cause a deadlock. A potential issue with the debug info mover pass, that meant it only affected the first entry point in a module Fixed hashing error that could occur with unbound generic type Fixed a bug where if you had synchronous compilation on a job, disabled Burst compilation and entered playmode, then exited playmode, and finally re-enabled Burst compilation, a hang could occur. Fixed a bug where toggling Burst enable <-> disable during a playmode execution using Burst, and then attaching the managed debugger, could cause an editor crash. Fixed a memory leak where during hashing we'd pin a GC object and never unpin and free it. Fix burst inspector sometimes stalling during loading for script reloads. Fixed a super rare bug where Burst could hit an internal error with System.InvalidOperationException: Nullable object must have a value. Fixed a regression where out parameters of C# 9.0 function pointers weren't working in Burst. Fixed internal compiler error when encountering a calli with closed generics Fixed bug in static constructor ordering in the presence of indirect dependencies between static constructors (i.e. static constructor -> static method -> static constructor) that could result in a runtime crash Added workaround for \"cannot dlopen until fork() handlers have completed\" issue seen in macOS 12.3 Fixed compiler crash when trying to dynamically call BurstCompiler.CompileFunctionPointer in Burst-compiled code Fix compiler crash when the only usage of a static field was in a formatted exception string Fixed burst inspector sometimes not rendering text or rendering text on top of other text. Fixed selection rendering off-by-one error at last line of each block. Fixed a bug with Span and ReadOnlySpan types where if the indices used were not already 32-bit signed integers, an internal compiler error would occur if running with safety checks enabled. Fixed a really convoluted bug that could manifest in Burst returning out of date cached libraries, which would manifest as random exceptions in Burst jobs/function-pointers (users deleting the BurstCache would workaround the bug). Known Issues [1.7.0-pre.2] - 2021-12-06 Changed Improved the compiler performance when doing large struct copies by detecting more cases where a load/store can be safely converted to a move-memory operation. Used BuildReport::summary::subtarget to detect headless (server) player builds on 2022.1+. Don't move pdbs out of build folder for UWP builds. Changed how we display the timings when a user has the Show Timings option enabled in the Burst menu, by cleaning up and presenting the information in a (hopefully!) clearer way. Fixed Fixed constant folding when using Hint.Likely or Hint.Unlikely intrinsics - the compiler is now able to fold these calls away entirely if the input value is constant. Fixed an internal compiler error when casting a void* to a pointer-to-vector and then access the element. One Definition Rule optimisation would break if multiple modules shared static constructors due to an issue with sharing code but not data. Fixed type initialization error, and invalid log messages about needing to add [MonoPInvokeCallback] to be compatible with IL2CPP, that could occur in a player build with Burst disabled ILPP issue for dots runtime whereby a calli patch could generate bad IL if the first instruction replaced was the target of a branch. Fixed a bug where fixed used in conjunction with Span or ReadOnlySpan would cause a compiler error. Fixed a codegen issue with Unity 2021.2 and System.Buffer.MemoryCopy. Fixed compiler crash when trying to load a generic static field Fixed \"UnityException: CompileAsyncDelegateMethod can only be called from the main thread.\" error that was logged in standalone players when the first invocation of a direct-call method was from a background thread Fix the very rare bug whereby the Burst Hash Cache files (*.bhc) will sometimes cause an exception in the editor log. Fixed the documentation to note that the System.Runtime.CompilerServices attributes [CallerLineNumber], [CallerMemberName], and [CallerFilePath] work with Burst, with the restriction that you cannot format the [CallerMemberName], and [CallerFilePath] strings yet. Fixed an issue where with optimizations disabled, using half conversions on platforms that did not natively support half could cause linker errors. Fix error when trying to Direct Call a method belonging to a private nested type Fixed some memory leaks between the C# and C++ parts of the Burst compiler, and added some CI tooling to ensure this doesn't happen again. Fixed a bug where our [BurstCompile] job finding code would not find methods in generic base classes in places where we knew the concrete-generic type (for instance struct Foo<T> { [BurstCompile] struct MyJob : IJob { void Execute() {} } }, struct Bar<T> : Foo<T> {}, and struct Haz : Bar<int> {} - we wouldn't find the concrete Foo<int>::MyJob in Burst). Fixed editor crash when trying to debug a DirectCalled method Fixed a bug whereby complicated try/finally nesting could trip up the compiler. Fixed a bug in the fixed string processing whereby we'd miscompile a fixed string that was within a struct inside a SharedStatic (depending on how it was used). Fixed a bug in the entry-point finding code whereby we wouldn't correctly resolve a nested generic struct's job if it was within a concrete generic class that was outwith the root assembly set. Added Ability to partially select and copy text in the burst inspector. Right clicking the inspector view reveals a context menu, allowing selecting all text and copying selection. Removed The button \"Copy to Clipboard\". Removed Newtonsoft.Json as a dependency Known Issues [1.7.0-pre.1] - 2021-10-21 Fixed Fixed an issue where dsym folders would be not be copied across to the DoNotShip folder when building a multi architecture build for mac os. Fixed bug that could lead to \"Failed to resolve method with name hash X and signature hash Y\" compiler error Fixed compiler error that occurred when calling BurstCompiler.CompileFunctionPointer with a delegate type that was decorated with a custom attribute Linking would fail on non-Windows platforms if the project folder contained a single-quote Fixed the \"could not find path tempburstlibs\" error message popping up when building for Android and Burst is disabled Fixed bug that could lead to incorrect compiler errors for calls to GetHashCode from a generic type Incorrect conversions between signed and unsigned vector types Detects if the simulator is the target of a player build for iOS/tvOS and disables burst, as at present this configuration is not supported by burst. [SkipLocalsInit] now correctly doesn't zero-initialize variables in a function (previously it only avoided zero-initialization of stackalloc created variables). Fixed a bug whereby sometimes some LLVM intrinsics could be incorrectly marked as unused causing invalid codegen with calls to math.acos. The cache for pdbs was becoming stale. This caused issues with wrong source information being shown in the inspector, and potentially wrong debug information being generated for bursted code in editor sessions. Missing output messages from some tools when a failure occurred. Fixed a bug with sqrt_ps for 128-bit types where it would crash the compiler. ArgumentOutOfRangeException due to _renderBlockStart and _renderBlockEnd not being probably initialized when all blocks were above the scroll position. Arrows were rendered even though they were not within the current view. Made it save the actual line numbers for code blocks in _blockLine even when the block is below the view. Removed the starting newline character when copying, and when rendering plain assembly kind. Fixed a bug where a player build that had multiple assemblies that had structs declared with the same name and same contents but different [BurstCompile] methods in them, would wrongly only pick a single struct to Burst-compile. Crash in burst module initialization if multiple modules are compiled and then linked in a different order. Fixed our platform documentation to accurately reflect the current supported platforms with Burst. Inspector menu buttons were seen as available, even though they were not supported, when viewing i.e. .NET IL code. Burst will now handle projects special characters in their project-name Static constructor sorting didn't account for dependencies within calls' IL Static constructor cyclic checks also included method calls when this is not necessary and fails on burst runtime logging code Fixed the bug @tertle found when loading a vector from a struct pointer that is marked as in. Fixed that implicitly casting a scalar half to a vector type would cause the compiler to crash Fixed a crash that could occur when loading legacy Burst AOT settings and then entering play mode Stack overflow caused by placement of alloca under certain function transforms. linker errors on macOS due to long command lines, swapped to using filelists for inputs. Fixed issue that could cause bcl.exe to fail with an exit code of 1 but not output any compilation errors Added Added support for DOTS Runtime running / loading .Net Core assemblies. Added support for System.Span<T> and System.ReadOnlySpan<T> within Bursted code. These types are not allowed as entry-point arguments. Folding/collapsing code in inspector Branch arrows (can be switched off) Automatically collapses less important blocks of disasssembly (focuses on code). Burst now generates a link.xml automatically to avoid issues with stripping causing missing symbols at runtime from static constructor usage. Removed Removed the Use Platform SDK Linker option from Burst AOT Settings for desktop platforms. Removed the player build BC1370 exception warnings as users only found them annoying. Changed Made the cost of initializing Direct Call methods for execution 33x faster during domain reload. Upgraded Burst to use LLVM Version 12.0.0 by default, bringing the latest optimization improvements from the LLVM project. Change the optimization pipeline to run the loop unroller exclusively after the loop vectorizer. This improves codegen in a lot of cases (mostly because the SLP vectorizer is unable to vectorize all the code that the loop unroller could have). Intrinsics: Neon vst1 APIs are now fully supported Made fmod and floating-point modulus use a faster algorithm to improve performance. Made the SharedStatic initialization cost during static constructor initialization time 13.3x faster. Improved iteration time by triggering Burst compilation immediately after .NET assemblies have been compiled Upgraded the minimum supported PS4 SDK to 8.00. Updated the minimum Xcode required for Burst to compile for the Apple iOS/tvOS plaforms to 12.0. Burst now waits for all threads to complete on shutdown, rather than performing a thread abort, as that could lead to a race condition with Dispose. Known Issues Burst does not work correctly when a project has a semi-colon in its name [1.6.0-pre.3] - 2021-07-27 Fixed Fixed a bug where methods with the same name and namespace, but in different assemblies, could resolve to the wrong method. Burst no longer logs a warning when opening the standalone Profiler Fixed an UnauthorizedAccessException that could occur when using Burst in players built for the macOS App Sandbox Fixed a bug that could cause an incorrect compilation error when using a primitive type as a generic argument in a static method entry point Crash due to member function debug information on tvOS. Fix documentation to make clear that ref / out parameters are supported on [BurstDiscard] methods. Fixed a NullReferenceException in the Burst compiler when multi-dimensional arrays were used. The compiler now produces a correct error message telling users that multi-dimensional arrays are not supported by Burst. Fixed DOTS Runtime Job Marshalling behaviour to properly handle marshalling generic Job types when not all closed forms of the generic type require marshalling. Fixed a Burst package warning in our editor compiler integration with respect to BuildOptions.EnableHeadlessMode. Fixed small race which could cause an unexpected exception when finishing a standalone compilation task. Building for Apple Silicon architecture on macOS would produce a universal binary, now it behaves correctly. tvOS/iOS and other statically linked platforms would fail to burst compile if the burst compiled code contained references to functions that were [DllImport(\"__Internal\")], due to a mismatch in calling convention. Fixed a bug whereby if you had $\"{too} {many} {fixed} {string} {formatted} {arguments}\" in a string formatter, Burst wouldn't be able to correctly understand how to transform this for the purposes of logging or fixed-string construction. Fixed where Unity.Burst.CompilerServices.Constant.IsConstantExpression is evaluated to be later in the compilation pipeline, to let it catch more constant expressions (for instance post-inlining). Rare non zero return code from bcl after successfully building.. Only check assembly cache when the main-thread is requesting some Burst code - meaning that kicking off eager compilation is 1.6x faster than before. stackalloc byte[] with an array initializer was previously only supported when the stackalloc size was 8 or less. Sizes greater than 8 are now supported. Fixed an error that could occur with the form \"System.InvalidOperationException: Could not find burst.initialize function in library 'SomeLibrary'\" Fixed incorrect runtime behavior that could occur when casting a pointer to a generic type Fixed a bug where stackalloc's could be wrongly hoisted out of loops. Added [Preserve] attribute to prevent stripping a compiler service call Fixed incorrect compiler error that could occur when casting a pointer to a generic type and then calling a method with generic parameters Fixed incorrect compiler error that could occur with explicit-layout structs when setting a Size smaller than the natural struct size Added Universal (Apple Silicon + X64) versions of extra build tools Add Android x86_64 and re-enable x86 support Added support for having [MarshalAs(UnmanagedType.U1)] or [MarshalAs(UnmanagedType.I1)] on a bool external function parameter. Neon intrinsics: Added vst1* experimental APIs Added a global player build setting to let users specify the default optimization choice for Burst. Native support for Apple Silicon. Added support for StructLayoutAttribute.Pack Additional notes about BurstCompiler.CompileFunctionPointer<T> regarding; avoid wrapping in another open generic method, and interoperability with IL2CPP. Removed Removed the Enable Safety Checks option for player builds, since it didn't actually enable safety checks in containers, which are editor only in Unity. Changed Changed how we link object files for iOS and tvOS platforms such that Burst will now create the object file and hand it off to XCode for linking only. Assembly-level attributes (such as [assembly: RegisterGenericJobType]) are now scanned for generic job types to compile Fixed a regression that caused eager-compilation at Editor startup to be slower than it should have been math.f16tof32 now uses hardware intrinsics where available (AVX2 / NEON). half to float or double vector conversions now produce more optimal codegen. Burst Inspector now remembers scroll position between domain reloads Changed how we schedule Burst eager compilation threads. Previously we'd spawn at most 8 of the threads, and only allow 2 to make progress while in the Editor (to ensure the editor UX/UI was as responsive as possible). Instead we now spawn number_of_cores - 1 threads at a lower thread priority, ensuring that any computing power slack can be consumed to speed up Burst compilation. On a 24 core machine this resulted in 2.5x reduction in time taken for Burst to fully compile a large project. Fixed a potential error related to duplicate symbols when calling BurstCompiler.CompileFunctionPointer from inside Burst code Improved performance of checking the cache to see if methods have already been compiled For player builds : lib_burst_generated.txt, pdbs (in non development mode) and dysm folders are now placed into a xxx_BurstDebugInformation_DoNotShip folder alongside the data folder, this is to ensure it is easy to remove the files that you should not ship with your player. Known Issues Code that previously mixed managed or non-readonly static fields with Burst compiled code will now fail to compile. [1.6.0-pre.2] - 2021-04-15 Fixed Fixed obsolete API in package code. [1.6.0-pre.1] - 2021-04-14 Changed Start 1.6 release cycle Changed how we resolve function references in the compiler to improve resolving an existing function reference by 3x. Improve how we handle generic resolution in Cecil to cache the strictly resolved generic types and save a bunch of time in the compiler. Exception strings no longer contain the entry-point name of the job/function-pointer that caused the throw. This change was required because the Burst compiler has to produce deterministic results from any given compile, which is fundamentally opposed to per-entry-point function derivations. Changed how SLEEF global variables for trig functions are pulled into Burst to reduce duplications. Changed how exceptions throw types and messages are stored in our Burst binaries to reduce binary size. Constant array data is now named after the static field it belongs to in assembly Upgraded Burst to use LLVM Version 11.0.1 by default, bringing the latest optimization improvements from the LLVM project. The Unity.Burst.Intrinsics.Common.Pause intrinsic is no longer experimental. DOTS Runtime shares the logging code path with the general case Armv8.2 Neon intrinsics are now fully supported Disable threading within the lld linker instances we use for in-editor and desktop cross compilation, because we're already threading seperate process instances of lld and it results in lot of OS context switching. Tweaked how the IL Post Processed 'direct call' Burst function pointers are compiled so that the compilation is deferred until they are needed (previously we'd enqueue them all for compilation on a domain reload). Changed Burst minimum editor version to 2019.4 Use rpmalloc as our native allocator on Windows to speed up concurrently executing LLVM work. When Burst has previously compiled a method, and neither the assembly containing that method nor any of that assembly's dependencies have changed, it was possible after a domain reload for the Mono version of the method to be used for a short time before being replaced by the Burst version. This has now been improved such that the Burst version will be used immediately. Improved iteration speed by reducing the time it takes for Burst to check if any Burst-compilable code has changed Change our link step to not use response files if the command line was smaller enough, saving the cost of the round-trip to the disk. Made half <-> float / double conversions use native hardware where possible (Arm or AVX2 targets). In order to prevent conflicts with the main Unity process, Burst is now inactive in secondary Unity processes, including the asset import worker and out-of-process profiler. This means that in those secondary processes, code that would normally be Burst-compiled will now run under Mono. In a future release of Burst, we hope to lift this restriction and allow Burst-compiled code to run in secondary Unity processes. Fixed Fixed a bug in LLVM that it would incorrectly convert some memset -> memcpy if both pointers derived from the same memory address, and where one indexed into the 0th element of the pointer. Fixed namespace issue triggering a warning in the editor. Made math.shuffle compile correctly when non-constant ShuffleComponent's are used. Fixed alignment issues associated with xxHash3 on ArmV7 (case 1288992) Fixed managed implementation of sub_ss intrinsic Fixed a bug that occurred when an explicitly laid out struct was used by a dup instruction, which caused an internal compiler error. Fixes DOTS Runtime JobProducer Bursting code to support JobProducers with multiple generic arguments, complex job wrapper and generic jobs. Fixed a bug where if a user had defined multiple implicit or explicit casts, the compiler could resolve to the wrong cast. Fixed a bug where explicitly casting from an int to IntPtr would not sign extend the value. String interpolation issues when using Dots / Tiny runtime. Fixed managed implementations of blend_epi32 and mm256_blend_epi32 intrinsics on Mono Fixed a bug where loading from a vector within a struct, that was got from a NativeArray using an indexer, would cause the compiler to crash. Fixed an issue where Burst would erroneously error on BurstCompile.CompileFunctionPointer calls when building for the DOTS Runtime. clang segmentation fault on iOS when member function debug information was emitted, it is disabled for this platform now. Intrinsics: Neon - fixed vget_low and vget_high producing suboptimal code Private [BurstCompile] methods no longer throw MethodAccessException Fixed a bug where the Burst post-processing for direct call would cause duplicate function pointers to be compiled, wasting compile time in the editor and caused an Editor launch stall. Corrected 'Enable safety checks tooltip`. Fixed a minor debug information bug where built-in types with methods (like System.Int32) would generate incorrect debug information. Fixed a very obscure bug where if you had a function-pointer that was called from another function-pointer of job, and that function-pointer happened to be compiled in a player build in the same bucket as the caller, and the no-alias cloning analysis identified that it could clone the original function-pointer to enable more aliasing optimizations, it could create a duplicate symbol error. Revert to internal linkage for Android X86 (32bit) to ensure ABI compliance. Fixed compilation errors when targeting Arm CPUs and using some of the Intel intrinsics Added PreserveAttribute to prevent the internal log from being stripped in il2cpp builds. IL Function Pointer Invoke Transformation updated to handle transforms that affect instructions that are the destination of a branch. IL Function Pointer Invoke Transformation now uses correct runtime library for dots runtime. Fixed compilation errors when targeting Intel CPUs and using some of the Arm Neon intrinsics Fixed a bug where eager-compilation could pick up out-of-date global Burst menu options for compiling. Fixed a bug where the progress bar would report double the amount of pending compile jobs if a user changed the Burst options while background compilation was going on. Fixed some intrinsics not checking target CPU against required CPU, so it was possible to use some intrinsics without an IsXXXSupported check Fixed a bug where having any [DllImport] in a class that used the Direct Call mechanism could result in an illegal CompileFunctionPointer call being produced by our post processor. Fixed an issue where if a user used a math function (like cos, sin, etc) then LLVM would preserve both the scalar and vector implementations even if they were trivially dead, causing us to inject otherwise dead functions into the resulting binary. PDB debug information for instance methods that also used struct return were incorrect. When generating Line Table only debug information, an unreachable could occur due to a missing check. Fixed the 1.5 restriction that Direct Call methods can only be called from the main thread, now they work when called from any thread. Internal Compiler Error if a call was discarded (via BurstDiscard for example), but the callsites required an ABI transform e.g. struct return. Fixed a bug with using multiple IsXXXSupported intrinsics in the same boolean condition would fail. Broken link restored for known issues with debugging and profiling. The Direct Call injected delegate now has a unique suffix to avoid type-name clashes. Dots runtime function pointer transform has been simplified, making it less brittle and fixing some bad IL generation. Fixed crashes on 32 bit windows when calling function pointers from managed code and using IL2CPP. Fixed a possible DivideByZeroException due to race condition in TermInfoDriver initialization code. Fixed a bug where the multi-CPU dispatcher (used for player builds targetting multiple CPU architectures) could end up generating invalid instructions. Gracefully handle failing to find a particular assembly in the ILPP to prevent an ICE. function calls using in modifiers on blittable structs where being treated as non blittable. crash when extracting sequence point information for error reporting/debug information generation. Direct Call extension methods that only differ on argument types are now supported (previously Burst's AssemblyLoader would complain about multiple matches). Fixed a regression where managed static fields, in static constructors that would also be compiled with Burst, could cause a compile time failure for mixing managed and unmanaged state. Added Added links to blog posts from the burst team to the Burst documentation. Intrinsics: Neon - Added support for basic vld1 APIs Can now call BurstCompiler.CompileFunctionPointer() in Burst code Add support for the C# 8.0 construct default(T) is null to Burst by transforming the generated Box + 'is the box non-null?' at compile time. Make it possible to get a pointer to UTF-8 encoded string literal data in HPC# code via StringLiteral.UTF8() Add an OptimizeFor option to [BurstCompile], allowing users to say they want fast code, small code, or fastly compiled code. Known issue with Windows Native Debuggers and Dll numbers + workarounds. Assemblies are now allowed to have an [assembly: BurstCompile()] attribute to let users specify compile options that should apply assembly wide (for instance [assembly: BurstCompile(OptimizeFor = OptimizeFor.FastCompilation)]). Automatically add [UnmanagedFunctionPointer(CallingConvention.Cdecl)] to any delegates that are used for BurstCompiler.CompileFunctionPointer<>() or error if the delegate has the attribute and it is not Cdecl. Source location metadata into hash cache. Added support for having [return: MarshalAs(UnmanagedType.U1)] or [return: MarshalAs(UnmanagedType.I1)] on a bool return external function. An additional warning about delegates being used by BurstCompiler.CompileFunctionPointer that are not decorated as expected. In most cases, Burst will automatically add the C-declaration attribute in IL Post Processing, but if the usage of CompileFunctionPointer is abstracted away behind an open generic implementation, then Burst will not be able to automatically correct the delegate declaration, and thus this warning will fire. new burst_TargetPlatform_EmbeddedLinux new AotNativeLinkEmbeddedLinux for EmbeddedLinux Added a new OptimizeFor mode Balanced. This becomes the default optimization mode, and trades off slightly lower maximum performance for much faster compile times. Added experimental half precision floating point type f16 Added experimental support for half precision floating point Arm Neon intrinsics Removed Known Issues Direct Call methods only execute using Burst after an initial execution of them on the main-thread. Notes BurstAotCompiler integration done using reflection and raw values, since the platform will only be officially available for 2021.2+ and we special customer versions (shadow branches) for 2019.4 & 2020.3. AotNativeLinkEmbeddedLinux implementation gets the toolchain from environment vars. [1.5.0-pre.2] - 2020-12-01 Added Removed Changed Fixed Fixed a failure on linux builds where libdl.so cannot be found. Known Issues [1.5.0-pre.1] - 2020-11-26 Added New intrinsics Hint.Likely, Hint.Unlikely, and Hint.Assume to let our users tell the compiler some additional information which could aid optimization. New Bmi1 and Bmi2 x86 intrinsics. These are gated on AVX2 being supported to keep the feature sets that Burst has to support small. You can now select explicit x86/x64 architecture SIMD target for Universal Windows Platform. Added Apple silicon and macOS universal binaries support to Burst. An extra alloca hoisting step to ensure that allocas that occur deep within functions are correctly allocated in the function entry block (which LLVM requires for optimization purposes). Added the missing clflush intrinsic to the SSE2 intrinsics. An optimize-for-size option to bcl to let select users focus the optimization passes to create smaller executables. Added a Unity.Burst.CompilerServices.SkipLocalsInitAttribute attribute that lets developers tell the compiler that stack-allocations do not need to be zero initialized for a given function. Added a new attribute [IgnoreWarnings] that can be specified per method, for users that really want the compiler to be quiet. Support for RDMA, crypto, dotprod Armv8.2-A Neon intrinsics An error message if attempting to BurstCompiler.CompileFunctionPointer() on a multicast delegate, since this is not supported in Burst. Burst detects removal of the burst package in 2020.2 editors and beyond, and displays a dialog asking the user to restart the editor. Added a pass that will classify and remove dead loops for improved code generation. Add support for using ValueTuple types like (int, float) from within Burst code, as long as the types do not enter or escape the Burst function boundaries. Added a new intrinsic Unity.Burst.CompilerServices.Constant.IsConstantExpression that will return true if an expression is known to be a compile-time constant in Bursted code. Added support for PlayMode / Desktop Standalone Players to load additional burst compiled libraries for use in Modding. Add support for calling Burst code directly from C# without using function pointers. In Unity 2020.2 and above, you can now call new ProfilerMarker(\"MarkerName\") from Burst code Add a compiler error if a ldobj tries to source its address to load from a non-pointer/non-reference. C# frontends should never generate this pattern, but we did see it with code generation. Fixed Fixed an issue where a function with a [return: AssumeRange(13, 42)] could lose this information during inlining. Storing into Lo64 or Hi64 would cause a compiler exception. Hitting a ldobj of a pointer-to-vector would incorrectly load the vector rather than the pointer.Burst only generates unaligned stores. Fix that the parameter to mm256_set1_epi8 should be a byte instead of a char. Fix sqrt_ss would fail because LLVM version later than 6 changed the encoding. Fixed the comi*_ss intrinsics which would generate invalid code. Pdb location for player builds is now linked relative to the final lib_burst_generated.dll, this allows the crashdump utility to access the symbols and provide better callstacks. Support negative intrinsics features checks to enable usage like if (!IsSse41Supported) return;. Clean up linker temp response files on successful build Wasm ABI issue with pointers Pause intrinsic in wasm (ignored) fmod expansion to sleef for wasm The AOT option for disabling optimizations now actually disables optimizations in player builds. Fix a bug where a static readonly variable that was a System.Guid would result in an internal compiler error. bitmask intrinsic was broken on non intel platforms When \"Enable Compilation\" was unchecked in the Burst menu, Burst was incorrectly enabled after an Editor restart. This is now fixed. Fixed a bug where a cloned function (say through no-aliasing propagation cloning) would re-create any global variables used rather than use the original variable. If the only reference to an external function was discarded, don't attempt to add it to the burst initialisation block (which caused on ICE on prior versions). Fixed a case where extracting a FixedString4096 from a parent struct could cause very slow compile times. Fixed a poor error message when a generic unsupported type (like a class or an auto-layout struct) combined with an unsupported managed array (like (int, float)[]) wouldn't give the user any context on where the code went wrong. Fixed a bug where if you used an enum argument to a function to index into a fixed array, a codegen error would occur. If targeting multiple iOS architectures, produce a combined burst library containing all architectures, this fixes \"New Build System\" on xcode version 12. Static method parameters are now validated correctly during eager-compilation Fixed permissions error when running lipo tool to combine libraries. Fixed compiler error that could occur when calling a [BurstDiscard] method with an argument that is also used elsewhere in the method Fixed an issue that could prevent the Editor from shutting down Fixed an internal compiler error when nested managed static readonly arrays were used (produces a proper Burst error instead now). Fixed a bug whereby for platforms that require us to write intermediate LLVM bitcode files, UTF paths would be incorrectly handled. Correctly marked Neon intrinsics vmovn_high_* as ArmV7 and not ArmV8 On windows, the pdb location for burst cached dll's now points to the correct path. Native debuggers attached to the Editor should now locate the symbols without requiring adding the Library/Burst/JitCache folder to the symbol search. Re-enabled BC1370 exception warnings but only for player builds. Fixed a bug whereby if you had an assembly that was guarded by UNITY_SERVER, Burst would be unable to find the assembly when Server Build was ticked. When \"Enable Compilation\" was unchecked in the Burst menu, Burst was incorrectly enabled after an Editor restart. This is now actually fixed. static readonly array with enum elements would cause the compiler to crash. Fixed managed (reference) implementation of mm256_cvttps_epi32 (case 1288563) Debug information for instance methods is now correctly scoped. This means instance variables can now be inspected correctly. Removed Removed support for XCode SDKs less than version 11.0.0. Removed support for platform SDKs that used the older LLVM 6 and 7 in the codebase to significantly simply our code and reduce the package size. Changed Minimum SDK version for iOS/tvOS increased to 13. See https://developer.apple.com/news/?id=03042020b for details. When using \"Executable Only\" build type on Universal Windows Platform, Burst will now only generate code for a single CPU architecture that you're building for. The inliner heuristics have been modified to inline less functions, but improve compile times and reduce executable size. The minimum XCode SDK required to compile for iOS/iPadOS/tvOS is now 11.0.0. We now copy the lib_burst_generated.pdb into the root of the player build (in addition to being alongside the lib_burst_generated.dll), this allows the unity crash handler to resolve the callstacks from burst code. Made Arm Neon intrinsics fully supported (removed the guarding define) Improved eager-compilation performance Improved Burst Inspector loading time Improved Burst initialization time If an argument to a BurstDiscard method is discarded, and that argument is a method call, then a warning is now generated to indicate the function call no longer happens. Changed how struct-return and indirect arguments use stack allocations to significantly reduce stack usage and improve performance in these cases. Improved the compilers ability to deduce dead memory operations (memcpy, memset, etc) to improve performance. Improved error message seen when scheduling Burst compilation during domain reload Open-generic static methods are not supported by Burst, but they were previously visible in Burst Inspector - they are now hidden In Burst Inspector, the \"Safety Checks\" checkbox now defaults to unchecked Burst Inspector no longer loses the search filter and \"Safety Checks\" option after domain reload Changed exception throws to allow more vectorization chances surrounding them. Upgraded Burst to use LLVM Version 11.0.0 by default, bringing the latest optimization improvements from the LLVM project. Eager-compilation is now cancelled when script compilation starts, to prevent spurious errors related to recompiled assemblies Strings can now be passed between methods within Burst code. Previously, string literals used for e.g. Debug.Log calls could only appear in the same method where they were used; now the string literal can be in one method, and passed to another method via a string parameter. Transitioning from burst disabled to burst enabled in editor, will perform a re-initialise of some internal state in use by Direct Call methods. Improved the performance of in-compiler hashing by 1.2x. Improved our hashing performance some more by re-using fixed-sized buffers in the compiler to improve eager-compilation / warm-cache costs by 1.25x. Improved compile time by ~37% on big projects by reworking some core compiler infrastructure. Known Issues In player builds, exceptions can report the wrong job that they were thrown from. [1.4.0-preview.4] - 2020-08-17 Fixed Fixed a bug introduced in 1.4.0-preview.3 that prevented some UnityEngine.Debug methods (such as DrawLine) from being called Fixed compiler error when explicit-layout struct contains a field which is itself an empty struct Fixed a bug that if you used more than four arguments in a function declared within another function, and then implicitly captured a few variables, Burst would map the variables wrongly. Changed Bump com.unity.mathematics to 1.2.1 version [1.4.0-preview.3] - 2020-08-06 Added VS 2017 support for platform that needs it. Added first batch of Arm Neon intrinsics. Currently, only ArmV8 (AArch64) targets are supported. The supported intrinsics include all ArmV7 and ArmV8 ones. Removed Changed In versions of Unity older than 2019.3, changing the following options in the Burst menu now requires the Editor to be restarted: Enable Compilation, Safety Checks, and Native Debug Mode Compilation. In versions of Unity older than 2019.3, previously-compiled methods will not be recompiled after changing those options, which could lead to undefined behavior where methods may or may not be compiled with the correct options. This change removes that possibility. Improved performance of \"eager-compilation\" (scheduling compilation immediately after assemblies are changed) by cancelling queued eager-compilation when entering play mode with Synchronous Compilation unchecked Improved performance of eager-compilation by not eager-compiling test assemblies Asserts that are currently discarded no longer discard arguments with potential side effects. Fixed We no longer attempt to replace the debug metadata multiple times for a given export. Fixed a subtle codegen bug that could occur when the target is an Arm or AArch64 CPU with vectors of 3 elements. Inspector slow down when scrolling/moving the window on large listings. Fixed a bug where a stfld into an element of a vector could deduce the wrong type for the underlying vector. Fixed a potential error when running the linker with a failure on lld command. If path to the package contained spaces, then native command execution could fail. This would manifiest as weird errors with 'lld' or 'vswhere' or other native tools. Fixed Debug.Log by re-enabling it when used in function pointers or jobs. Fixed errors when opening Inspector with a non-public Execute method on a job producer type Known Issues [1.4.0-preview.2] - 2020-07-01 Added Removed Changed The Burst Inspector no longer uses JIT compilation. The code it shows is now compiled the same way as for editor / player usage. Warnings are hidden in the inspector view Fixed Fixed potential error that could occur when unloading cached libraries Known Issues [1.4.0-preview.1] - 2020-06-26 Added Experimental support for tvOS Add intrinsics support for AtomicSafetyHandle.NewStaticSafetyId<T> A new option [BurstCompile(DisableSafetyChecks = true)] that allows per job or function-pointer disabling of safety checks. This allows users to have blessed code run fast always. Improve Editor experience by scheduling compilation immediately after assemblies are changed, instead of waiting until Play Mode is entered. Improved our aliasing detection to allow DynamicBuffer structs to be easily vectorizable. Added a compiler warning for any use of throwing an exception from a method not guarded by [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")]. Since exceptions in Burst are only supported in the editor, this provides a useful warning to users who may be relying on try/catch behaviors for control-flow which is not supported in final game builds. Burst compilation status is now displayed in the Background Tasks window in Unity 2020.1 and above (click the spinner in the bottom-right of the Editor to open this window). Upgraded Burst to use LLVM Version 10.0.0 by default, bringing the latest optimization improvements from the LLVM project. Add support for try/finally and using/foreach for IDisposable patterns. Add BurstCompiler.IsEnabled API. Add syntax colouring for LLVM IR and Optimized IR panels in the inspector Removed Changed Made the compiler better at constant-folding complex static readonly constructors. Bursted DOTS Runtime Jobs are now decorated with [NativePInvokeCallback] instead of [MonoPInvokeCallback] which could generate callback wrappers which could cause native code to inadvertently interop with the managed VM. The Burst menu-item Safety Checks has been changed to a modal choice of Off, On, and Force On. Force On will overwrite any user job or function-pointer with DisableSafetyChecks = true. To avoid users falling into the consistent trap of having Safety Checks set to Off, any reload of the Editor will issue a warning telling the user that Safety Checks have been reset to On. Use platform provided memory intrinsics for iOS, tvOS, WASM, and console platforms. Updated Cross Compilation Tooling To LLVM 10 The command line option --burst-disable-compilation is now disabling entirely Burst, including the AppDomain. Fixed Fixed incorrect struct layout for certain configurations of explicit-layout structs with overlapping fields Fixes a caching issue where stale cached libraries may have been used if a project was copied to a different folder, or Unity was upgraded to a newer version Burst will now error if a cpblk was used to copy into a [ReadOnly] parameter or field. Fixed a bug where the mm256_cvtepi32_ps intrinsic would crash the compiler. Fixed a bug with constant expressions that could cause a compile-time hang. Debug symbols are now output when using the native toolchain on mac. Sleef fallback to scalar float for WASM. ABI struct ret/by val for trivial aggregates for WASM is now respected. Fixed a bug with float/double vector constructors of Unity.Mathematics that take half or half vector parameters. Debug information for anonymous structs could be created partially multiple times for the same type. Filter symbol warnings to prevent them reaching logs. Fixed an issue where UNITY_DOTSPLAYER builds not building for NET_DOTS would be unable to compile do to references to UnityEngine. Fixed handling of conversion from signed integer to pointer which caused issues as discovered by Zuntatos on the forums. Allow to call [BurstCompile] functions from other [BurstCompile] functions IntPtr.Size now correctly returns int32 size (rather than UInt64) - fixes an assert. Burst package has been upgraded popup could fire erroneously under shutdown conditions. Fixed an issue preventing player builds to succeed when burst compilation is disabled. Debug symbols for function names on some platforms are no longer hashes. Job Entry point symbols should now reflect the job name and type rather than a hash in callstacks/native profilers Job entry points without symbols now use the Execute location rather than pointing to unknown/unknown Dwarf symbols from multiple modules (e.g. multithreaded AOT compilation) now have correct compilation unit information. Known Issues Output of Debug.Log is temporarily disabled in Burst Function Pointers/Jobs to avoid a deadlock on a domain reload. A fix for the Unity editor is being developed. [1.3.0-preview.12] - 2020-05-05 Fixed Fix an issue when changing the base type of an enum that would not trigger a new compilation and would keep code previously compiled, leading to potential memory corruptions or crashes. Fixed a subtle AArch64 ABI bug with struct-return's (structs that are returned via a pointer argument) that was found by our partners at Arm. Fix an issue that was preventing Debug.Log to be used from a Job in Unity 2020.1 Changed JIT cache is now cleared when changing Burst version [1.3.0-preview.11] - 2020-04-30 Fixed Fix potentially different hashes returned from BurstRuntime.GetHashCode32/64 if called from different assemblies. Fixed an issue where Burst was misidentifying F16C supporting CPUs as AVX2. SDK level bumped for MacOS to ensure notarization requests are compatable. Fixed a typo m256_cvtsi256_si32 -> mm256_cvtsi256_si32 and m256_cvtsi256_si64 -> mm256_cvtsi256_si64. The compiler is now generating a proper compiler error if a managed type used directly or indirectly with SharedStatic . Fixed a bug where implicitly stack allocated variables (var foo = new Foo();) in Burst were not being zero initialized, so any field of the variable that was not initialized during construction would have undefined values. Fix potential race condition when accessing on-disk library cache Fixed a bug where Burst was sometimes producing invalid code for iOS 11.0.3+. Added Added support for System.Threading.Volatile methods Read and Write, and for the System.Threading.Thread.MemoryBarrier method. New FMA X86 intrinsics. These are gated on AVX2 support, as our AVX2 detection requires the AVX2, FMA, and F16C features. UnsafeUtility.MemCmp now maps to a Burst optimal memory comparison path that uses vectorization. Removed Changed Known Issues [1.3.0-preview.10] - 2020-04-21 Fixed Fix negation of integer types smaller than 32 bits. Fixed a bug where optimizer generated calls to ldexp would be incorrectly deduced when deterministic floating-point was enabled. Swapped private linkage for internal linkage on functions, this fixes duplicate symbol issues on some targets. variable scopes should now encompass the whole scope. variables in parent scopes should now be present in locals windows. Native plugin location for windows has changed in 2019.3.9f1. If you are on an older version of 2019.3 you will need to upgrade for burst to work in windows standalone players. Added an error if Assert.AreEqual or Assert.AreNotEqual were called with different typed arguments. Fixed a bug where doing an explicit cast to a Unity.Mathematics vector type where the source was a scalar would fail to compile. Fix issue when converting large unsigned integer values to double or float. Fix an invalid value returned from a conditional where one type is an int32 and the other type would be a byte extended to an int32. Button layout of disassembly toolbar tweaked. Copy to clipboard now copies exactly what is shown in the inspector window (including enhancements and colours if shown) AVX2 now generates the correct AVX2 256-bit wide SLEEF functions instead of the FMA-optimized 128-bit variants. Added Anonymous types are now named in debug information. XCode/LLDB debugging of burst compiled code is now possible on macOS. Added some extra documentation about how to enable AVX/AVX2 in AOT builds, and how we gate some functionality on multiple instruction sets to reduce the combinations exposed underneath. Optimized external functions (like UnsafeUtility.Malloc) such that if they are called multiple times the function-pointer address is cached. Add support for string interpolation (e.g $\"This is a string with an {arg1} and {arg2}\"). Add support for Debug.Log(object) (e.g Debug.Log(\"Hello Log!\");). Add support for string assignment to Unity.Collections.FixedString (e.g \"FixedString128 test = \"Hello FixedString!\"). If burst detects a package update, it now prompts a restart of Unity (via dialog). The restart was always required, but could be missed/forgotten. Better error message for unsupported static readonly arrays. Link to native debugging video to Presentations section of docs. Fixes a bug where in parameters of interfaces could sometimes confuse the Burst inspector. Removed Changed iOS builds for latest xcode versions will now use LLVM version 9. Burst AOT Settings now lets you specify the exact targets you want to compile for - so you could create a player with SSE2, AVX, and AVX2 (EG. without SSE4 support if you choose to). Improve speed of opening Burst Inspector by up to 2x. Provided a better error message when structs with static readonly fields were a mix of managed/unmanaged which Burst doesn't support. Tidied up the known issues section in the docs a little. Enhanced disassembly option has been expanded to allow better control of what is shown, and allow a reduction in the amount of debug metadata shown. Load Burst Inspector asynchronously to avoid locking-up Editor. Documented restrictions on argument and return types for DllImport, internal calls, and function pointers. Known Issues [1.3.0-preview.9] - 2020-04-01 Changed Improved the compile time performance when doing UnsafeUtility.ReadArrayElement or UnsafeUtility.WriteArrayElement with large structs. Made some compile-time improvements when indirect arguments (those whose types are too big that they have to be passed by reference) that reduced our compile time by 3.61% on average. Fixed Fixed a bug where storing a default to a pointer that was generic would cause an LLVM verifier error. Fixed an obscure bug in how struct layouts that had dependencies on each other were resolved. Fixed a bug as found by @iamarugin where LLVM would introduce ldexp/ldexpf during optimizations that LLD would not be able to resolve. Fixed a bug where the compiler would not promote sub-integer types to integers when doing scalar-by-vector math (like multiplies). Added Variable scopes are now constructed for debug information. A new setting to Burst AOT Settings that allows debug symbols to be generated even in a non development standalone build. Removed Known Issues [1.3.0-preview.8] - 2020-03-24 Added Double math builtins in Unity.Mathematics now use double vector implementations from SLEEF. Fixed a bug with lzcnt, tzcnt, and countbits which when called with long types could produce invalid codegen. New F16C X86 intrinsics. These are gated on AVX2 support, as our AVX2 detection requires the AVX2, FMA, and F16C features. Add user documentation about generic jobs and restrictions. Add new experimental compiler intrinsics Loop.ExpectVectorized() and Loop.ExpectNotVectorized() that let users express assumptions about loop vectorization, and have those assumptions validated at compile-time.Enabled with UNITY_BURST_EXPERIMENTAL_LOOP_INTRINSICS. Changed Changed how Unity.Mathematics functions behave during loop vectorization and constant folding to substantially improve code generation. Our SSE4.2 support was implicitly dependent on the POPCNT extended instruction set, but this was not reflected in our CPU identification code. This is now fixed so that SSE4.2 is gated on SSE4.2 and POPCNT support. The popcnt intrinsics now live in their own static class Unity.Burst.Intrinsics.Popcnt to match the new F16C intrinsics. Deferred when we load the SLEEF builtins to where they are actually used, decreasing compile time with Burst by 4.29% on average. Fixed Fix an issue where a generic job instance (e.g MyGenericJob<int>) when used through a generic argument of a method or type would not be detected by the Burst compiler when building a standalone player. [DlIimport(\"__Internal\")] for iOS now handled correctly. Fixes crashes when using native plugins on iOS. Removed Known Issues [1.3.0-preview.7] - 2020-03-16 Added Added additional diagnostic for tracking Visual Studio location failures. Added an override to bypass link.exe discovery under certain conditions. Added a ldloc -> stloc optimization which improves compile times. More documentation on function pointers, specifically some performance considerations to be aware of when using them. Removed Changed Updated tools used for determining Visual Studio locations. Fixed Embedded Portable PDB handling improved. Fixed a case where our load/store optimizer would inadvertently combine a load/store into a cpblk where there were intermediate memory operations that should have been considered. Fixed a bug where the no-alias analysis would, through chains of complicated pointer math, deduce that a no-alias return (like from UnsafeUtility.Malloc) would not alias with itself. No longer log missing MonoPInvokeCallbackAttribute when running tests. Known Issues [1.3.0-preview.6] - 2020-03-12 Added Experimental support for Prefetch, allowing users to request from the memory subsystem pointer addresses they intend to hit next. This functionality is guarded by the UNITY_BURST_EXPERIMENTAL_PREFETCH_INTRINSIC preprocessor define. Fixed Fix SSE maxps intrinsic would emit maxss [1.3.0-preview.5] - 2020-03-11 Fixed MemCpy and MemSet performance regression in Burst 1.3.0.preview.4 (as was spotted by @tertle) has been fixed. Fix a crash when loading assembly with PublicKeyToken starting with a digit. Better handling of MonoPInvokeCallbackAttribute: no check for the namespace, don't print message on Mono builds. Changed Improved error message for typeof usage. [1.3.0-preview.4] - 2020-03-02 Added Debug information for types. Debug information for local variables. Debug information for function parameters. Support for fixed statements. These are useful when interacting with fixed buffers in structs, to get at the pointer data underneath. A fast-math optimization for comparisons that benefits the BurstBenchmarks that nxrightthere has put together. DOTS Runtime Jobs will now generate both MarshalToBurst and MarshalFromBurst functions when job structs in .Net builds are not blittable. DOTS Runtime Job Marshalling generation is now controllable via the commandline switch --generate-job-marshalling-methods. Removed Changed Made it clear that the Burst aliasing intrinsics are tied to optimizations being enabled for a compilation. Restore unwind information for all builds. Print a info message if compiling a function pointer with missing MonoPInvokeCallback attribute (this can lead to runtime issues on IL2CPP with Burst disabled). The message will be converted to a warning in future releases. Fixed Fixed an issue where DOTS Runtime generated job marshalling functiosn may throw a FieldAccessException when scheduling private and internal job structs. Fix a bug that prevented entry point method names (and their declaring type names) from having a leading underscore. vector/array/pointer debug data now utilizes the correct size information. DOTS Runtime will now only generate job marshaling functions on Windows, as all other platforms rely on Mono which does not require job marshalling. ldobj / stobj of large structs being copied to stack-allocated variables could cause compile-time explosions that appeared to the user like the compiler had hung. Worked around these by turning them into memcpy's underneath in LLVM. Don't always use latest tool chain on certain platforms. Fix a crash when compiling job or function pointer that was previously cached, then unloaded, then reloaded. Fixed compiler error in array element access when index type is not Int32. Fix set1_xxx style x86 intrinsics generated compile time errors. Known Issues Native debugger feature is only available on windows host platform at the moment. [1.3.0-preview.3] - 2020-02-12 Changed Changed how the inliner chooses to inline functions to give the compiler much more say over inlining decisions based on heuristics. Updated AOT requirements to be clearer about cross platform support. Added 1.3.0-preview.1 added support for desktop cross compilation, but the changelog forgot to mention it. Removed Fixed Documentation for the command line options to unity contained extra - Burst now exclusively uses the <project>/Temp/Burst folder for any temporary files it requires during compilation. Fix a regression that could break usage of native plugins. Known Issues [1.3.0-preview.2] - 2020-02-10 Fixed Fix the error Burst failed to compile the function pointer Int32 DoGetCSRTrampoline() that could happen when loading a project using Burst with Burst disabled. [1.3.0-preview.1] - 2020-02-04 Added Enabled lower precision variants for pow, sin, cos, log, log2, log10, exp, exp2, and exp10 when BurstPrecision.Low is specified. Add CPU minimum and maximum target for desktop platforms Standalone Player builds. Append a newline between IRPassDiagnostic messages, fixes pass diagnostics readability in the inspector. Add a new attribute [AssumeRange] that lets users tag function parameters and returns of an integer type with a constrained range that the value is allowed to inhabit. NativeArray.Length and NativeSlice.Length have automatic detection that the property is always positive. This assumption feeds into the optimizer and can produce better codegen. Enabled support for DOTS Runtime SharedStatics. Due to the nature of DOTS Runtime, only the generic versions of SharedStatic.GetOrCreate<TContext> are supported. Add a new intrinsic Unity.Burst.Intrinsics.Common.Pause() which causes a thread pause to occur for the current thread. This is useful for spin-locks to stop over contention on the lock. Add some new Burst aliasing deductions to substantially improve the aliasing detection in the compiler, resulting in better codegen. Add syntax colouring to WASM. Add IsCreated to the FunctionPointer class to allow checks on whether a given function pointer has a valid (non null) pointer within it. Add AVX2 intrinsics Add some missing intrinsics from SSE, SSE2 and AVX Added explicit X86 intrinsics from SSE-AVX2. AVX and AVX2 CPU targets are now available for x64 AOT builds. Allow handle structs (structs with a single pointer/integer in them) to be inside another struct as long as they are the single member, as these require no ABI pain. Added support for Interlocked.Read. Added a new intrinsic Common.umul128 which lets you get the low and high components of a 64-bit multiplication. This is especially useful for things like large hash creation. Menu option to allow all burst jobs to be more easily debugged in a native debugger. Removed Changed Upgraded Burst to use LLVM Version 9.0.1 by default, bringing the latest optimization improvements from the LLVM project. Upgraded Burst to use SLEEF 3.4.1, bringing the latest performance improvements to mathematics functions as used in Burst. Improved Burst performance in the Editor by caching compiled libraries on-disk, meaning that in subsequent runs of the Editor, assemblies that haven't changed won't be recompiled. Update the documentation of CompileSynchronously to advise against any general use of setting CompileSynchronously = true. Take the Unity.Burst.CompilerServices.Aliasing intrinsics out of experimental. These intrinsics form part of our strategy to give users more insight into how the compiler understands their code, by producing compiler errors when user expectations are not met. Questions like 'Does A alias with B?' can now be definitively answered for developers. See the Aliasing Checks section of the Burst documentation for information. Align disassembly instruction output in Inspector (x86/x64 only). Renamed m128 to v128. Renamed m256 to v256. BurstCompile(Debug=true), now modifies the burst code generator (reducing some optimisations) in order to allow a better experience in debugging in a native debugger. Fixed Fix a bug where floating-point != comparisons were using a stricter NaN-aware comparison than was required. Fix inspector for ARMV7_NEON target. Fix some issues with Burst AOT Settings, including changing the settings to be Enable rather than Disable. Fix an issue where WASM was being incorrectly shown in the disassembly view. Fixed an issue where if the Unity.Entities.StaticTypeRegistry assembly wasn't present in a build, Burst would throw a NullReferenceException. Fix issue with type conversion in m128/m256 table initializers. Fix inspector source line information (and source debug information) from being lost depending on inlining. Fix occasional poor code generation for on stack AVX2 variables. Fix xor_ps was incorrectly downcoded. Fix reference version of AVX2 64-bit variable shifts intrinsics. Fix reference version of SSE4.2 cmpestrz. Fix bitwise correctness issue with SSE4.2/AVX explicit rounding in CEIL mode for negative numbers that round to zero (was not correctly computing negative zero like the h/w). Fix calls to SHUFFLE, SHUFFLE_PS and similar macro-like functions would not work in non-entrypoint functions. Source location information was offset by one on occasions. Debug metadata is now tracked on branch/switch instructions. Fix poor error reporting when intrinsic immediates were not specified as literals. Fix basic loads and stores (using explicit calls) were not unaligned and sometimes non-temporal when they shouldn't be. Removed the <>c__DisplayClass_ infix that was inserted into every Entities.ForEach in the Burst inspector to clean up the user experience when searching for Entities.ForEach jobs. Fix background compile errors accessing X86 MXCSR from job threads. Fix possible ExecutionEngineException when resolving external functions. Fix linker output not being propagated through to the Editor console. Known Issues [1.2.0-preview.9] - 2019-11-06 Fix compilation requests being lost when using asynchronous compilation. Prevent Burst compilation being toggled on while in play mode, either via \"Enable Compilation\" menu item or programmatically - was previously technically possible but produced unpredictable results. [1.2.0-preview.8] - 2019-11-01 Fix a NullReferenceException happening in a call stack involving CecilExtensions.IsDelegate(...). [1.2.0-preview.7] - 2019-10-30 Many improvements to the Inspector: New assembly syntax colorization! Fix issue with menu settings being modified when opening the Inspector. Make compile targets left pane resizable. Fix vertical scrollbar size. Add automatic refresh when selecting a target to compile. Fix an issue where ref readonly of a struct type, returned from a function, would cause a compiler crash. Add support for Interlocked.Exchange and Interlocked.CompareExchange for float and double arguments. Fix bug preventing iOS builds from working, if burst is disabled in AOT Settings. [1.2.0-preview.6] - 2019-10-16 New multi-threaded compilation support when building a standalone player. Improve BurstCompiler.CompileFunctionPointer to compile asynchronously function pointers in the Editor. Improve of error codes and messages infrastructure. Upgraded Burst to use LLVM Version 8.0.1 by default, bringing the latest optimization improvements from the LLVM project. Fix issue with libtinfo5 missing on Linux. Fix possible NullReferenceException when an entry point function is calling another empty function. Fix an exception occurring while calculating the size of a struct with indirect dependencies to itself. Fix potential failure when loading MDB debugging file. Fix linker issue with folder containing spaces. Fix issue with package validation by removing ifdef around namespaces. Fix issue with an internal compiler exception related to an empty stack. [1.2.0-preview.5] - 2019-09-23 Fix crashing issue during the shutdown of the editor. [1.2.0-preview.4] - 2019-09-20 Fix a logging issue on shutdown. [1.2.0-preview.3] - 2019-09-20 Fix potential logging of an error while shutting down the editor. [1.2.0-preview.2] - 2019-09-20 New multi-threaded compilation of jobs/function pointers in the editor. Improve caching of compiled jobs/function pointers. Fix a caching issue where some jobs/function pointers would not be updated in the editor when updating their code. Fix an issue where type initializers with interdependencies were not executed in the correct order. Fix an issue with Failed to resolve assembly Windows, Version=255.255.255.255... when building for Xbox One. Fix compilation error on ARM32 when calling an external function. Fix an issue with function pointers that would generate invalid code if a non-blittable type is used in a struct passed by ref. Fix an issue with function pointers that would generate invalid code in case containers/pointers passed to the function are memory aliased. Report a compiler error if a function pointer is trying to be compiled without having the [BurstCompile] attribute on the method and owning type. [1.2.0-preview.1] - 2019-09-09 Fix assembly caching issue, cache usage now conservative (Deals with methods that require resolving multiple assemblies prior to starting the compilation - generics). Fix Mac OS compatibility of Burst (10.10 and up) - fixes undefined symbol futimens. [1.1.3-preview.3] - 2019-09-02 Query android API target level from player settings when building android standalone players. Add calli opcode support to support bindings to native code. [1.1.3-preview.2] - 2019-08-29 Fix to allow calling [BurstDiscard] functions from static constructors. Correctly error if a DLLImport function uses a struct passed by value, but allow handle structs (structs with a single pointer/integer in them) as these require no ABI pain. Upgraded Burst to use LLVM Version 8 by default, bringing the latest optimisation improvements from the LLVM project. Added support for multiple LLVM versions, this does increase the package size, however it allows us to retain compatability with platforms that still require older versions of LLVM. Fix bug in assembly caching, subsequent runs should now correctly use cached jit code as appropriate. Add support for Lumin platform [1.1.3-preview.1] - 2019-08-26 Add support for use of the MethodImpl(MethodImplOptions.NoOptimization) on functions. Fix an issue whereby static readonly vector variables could not be constructed unless using the constructor whose number of elements matched the width of the vector. Fix an issue whereby static readonly vector variables could not be struct initialized. Improve codegen for structs with explicit layout and overlapping fields. Fix a bug causing SSE4 instructions to be run on unsupported processors. Fix an issue where storing a pointer would fail as our type normalizer would cast the pointer to an i8. Begin to add Burst-specific aliasing information by instructing LLVM on our stack-allocation and global variables rules. [1.1.2] - 2019-07-26 Fix an issue where non-readonly static variable would not fail in Burst while they are not supported. Fix issue with char comparison against an integer. Add partial support for C# char type. Improve codegen for struct layout with simple explicit layout. Fix NullReferenceException when using a static variable with a generic declaring type. Fix issue with stackalloc not clearing the allocated stack memory as it is done in .NET CLR. [1.1.1] - 2019-07-11 Fix a compiler error when using a vector type as a generic argument of a NativeHashMap container. Disable temporarily SharedStatic/Execution mode for current 2019.3 alpha8 and before. Fix detection of Android NDK for Unity 2019.3. Update documentation for known issues. [1.1.0] - 2019-07-09 Fix detection of Android NDK for Unity 2019.3. Update documentation for known issues. [1.1.0-preview.4] - 2019-07-05 Burst will now report a compilation error when writing to a [ReadOnly] container/variable. Fix regression with nested generics resolution for interface calls. Fix issue for UWP with Burst generating non appcert compliant binaries. Fix issue when reading/writing vector types to a field of an explicit layout. Fix build issue on iOS, use only hash names for platforms with clang toolchain to mitigate issues with long names in LLVM IR. Allow calls to intrinsic functions (e.g System.Math.Log) inside static constructors. Improve performance when detecting if a method needs to be recompiled at JIT time. Fix an issue with explicit struct layout and vector types. [1.1.0-preview.3] - 2019-06-28 Fix issue with generic resolution that could fail. Add support for readonly static data through generic instances. Add internal support for SharedStatic<T> for TypeManager. Add intrinsic support for math.bitmask. [1.1.0-preview.2] - 2019-06-20 Fix issue where uninitialized values would be loaded instead for native containers containing big structs. Fix issue where noalias analysis would fail for native containers containing big structs. Fix issue when calling \"internal\" methods that take bool parameters. Add support for MethodImplOptions.AggressiveInlining to force inlining. Fix issue in ABITransform that would cause compilation errors with certain explicit struct layouts. Disable debug information generation for PS4 due to IR compatability issue with latest SDK. Implemented an assembly level cache for JIT compilation to improve iteration times in the Editor. Implement a hard cap on the length of symbols to avoid problems for platforms that ingest IR for AOT. Add support for FunctionPointer<T> usable from Burst Jobs via BurstCompiler.CompileFunctionPointer<T>. Add BurstCompiler.Options to allow to control/enable/disable Burst jobs compilation/run at runtime. Add BurstRuntime.GetHashCode32<T> and GetHashCode64<T> to allow to generate a hash code for a specified time from a Burst job. [1.0.0] - 2019-04-16 Release stable version. [1.0.0-preview.14] - 2019-04-15 Bump to mathematics 1.0.1 Fix android ndk check on windows when using the builtin toolchain. Fix crash when accessing a field of a struct with an explicit layout through an embedded struct. Fix null pointer exception on building for android if editor version is less than 2019.1. Workaround IR compatibility issue with AOT builds on IOS. [1.0.0-preview.13] - 2019-04-12 Fix linker error on symbol $___check_bounds already defined. Fix StructLayout Explicit size calculation and backing storage. [1.0.0-preview.12] - 2019-04-09 Fix crash when accessing a NativeArray and performing in-place operations (e.g nativeArray[i] += 121;). [1.0.0-preview.11] - 2019-04-08 Improve error logging for builder player with Burst. Fix NullReferenceException when storing to a field which is a generic type. [1.0.0-preview.10] - 2019-04-05 Update known issues in the user manual. Improve user manual documentation about debugging, [BurstDiscard] attribute, CPU architectures supported... Fix an issue where Burst callbacks could be sent to the editor during shutdowns, causing an editor crash. Improve error messages for external tool chains when building for AOT. [1.0.0-preview.9] - 2019-04-03 Fix an auto-vectorizer issue not correctly detecting the safe usage of NativeArray access when performing in-place operations (e.g nativeArray[i] += 121;). Add support for dynamic dispatch of functions based on CPU features available at runtime. Fix issue when running SSE4 instructions on a pre-SSE4 CPU. Fix write access to NativeArray<bool>. Remove dependencies to C runtime for Windows/Linux build players (for lib_burst_generated.so/.dll). Updated API documentation. Update User manual. Static link some libraries into the Burst llvm wrapper to allow better support for some linux distros. [1.0.0-preview.8] - 2019-03-28 Fix for iOS symbol names growing too long, reduced footprint of function names via pretty printer and a hash. [1.0.0-preview.7] - 2019-03-28 Burst will now only generate debug information for AOT when targeting a Development Build. Added support for locating the build tools (standalone) for generating AOT builds on windows, without having to install Visual Studio complete. Fix Log Timings was incorrectly being passed along to AOT builds, causing them to fail. Fix editor crash if Burst aborted compilation half way through (because editor was being closed). Fix issue with job compilation that could be disabled when using the Burst inspector. Fix issue with spaces in certain paths (e.g. ANDROID_NDK_ROOT) when building for AOT. Restore behavior of compiling ios projects from windows with Burst, (Burst does not support cross compiling for ios) - we still generate a valid output project, but with no Burst code. Add support for Android embedded NDK. Fix issue where certain control flow involving object construction would crash the compiler in release mode. [1.0.0-preview.6] - 2019-03-17 Fix invalid codegen with deep nested conditionals. Fix issue with Burst menu \"Enable Compilation\" to also disable cache jobs. Improve handling of PS4 toolchain detection. [1.0.0-preview.5] - 2019-03-16 Fix regression with JIT caching that was not properly recompiling changed methods. Remove NativeDumpFlags from public API. Remove usage of PropertyChangingEventHandler to avoid conflicts with custom Newtonsoft.Json. Fix issue when a job could implement multiple job interfaces (IJob, IJobParallelFor...) but only the first one would be compiled. [1.0.0-preview.4] - 2019-03-15 Fix \"Error while verifying module: Invalid bitcast\" that could happen with return value in the context of deep nested conditionals. Fix support for AOT compilation with float precision/mode. Fix fast math for iOS/PS4. Fix issue with double not using optimized intrinsics for scalars. Fix issue when loading a MDB file was failing when building a standalone player. Fix no-alias analysis that would be disabled in a standalone player if only one of the method was failing. Fix bug with explicit layout struct returned as a pointer by a property but creating an invalid store. Change FloatPrecision.Standard defaulting from FloatPrecision.High (ULP1) to FloatPrecision.Medium (ULP3.5). [1.0.0-preview.3] - 2019-03-14 Fix compilation issue with uTiny builds. [1.0.0-preview.2] - 2019-03-13 Fix no-alias warning spamming when building a standalone player. Improve the layout of the options/buttons for the inspector so that they at least attempt to layout better when the width is too small for all the buttons. Fix formatting of error messages so the Unity Console can correctly parse the location as a clickable item (Note however it does not appear to allow double clicking on absolute paths). Change Burst menu to Jobs/Burst. Improve order of menu items. Fix for AOTSettings bug related to StandaloneWindows vs StandaloneWindows64. [1.0.0-preview.1] - 2019-03-11 Fix regression when resolving the type of generic used in a field. Fix linker for XboxOne, UWP. Fix performance codegen when using large structs. Fix codegen when a recursive function is involved with platform dependent ABI transformations. [0.2.4-preview.50] - 2019-02-27 Fix meta file conflict. Fix changelog format. [0.2.4-preview.49] - 2019-02-27 Move back com.unity.burst.experimental for function pointers support, but use internal modifier for this API. Restructure package for validation. [0.2.4-preview.48] - 2019-02-26 Move back com.unity.burst.experimental for function pointers support, but use internal modifier for this API. [0.2.4-preview.47] - 2019-02-26 Fix an issue during publish stage which was preventing to release the binaries. [0.2.4-preview.46] - 2019-02-26 iOS player builds now use static linkage (to support TestFlight) - Minimum supported Unity versions are 2018.3.6f1 or 2019.1.0b4. Fix a warning in Burst AOT settings. Enable forcing synchronous job compilation from menu. [0.2.4-preview.45] - 2019-02-07 Disable Burst AOT settings support for unity versions before 2019.1. [0.2.4-preview.44] - 2019-02-06 Fix incorrect conversions when performing subtraction with enums and floats. Fix compatability issue with future unity versions. Fix bug with ldfld bitcast on structs with explicit layouts. Guard against an issue resolving debug locations if the scope is global. [0.2.4-preview.43] - 2019-02-01 Add preliminary support for Burst AOT settings in the player settings. Move BurstCompile (delegate/function pointers support) from com.unity.burst package to com.unity.burst.experimental package. Fix issue with stackalloc allocating a pointer size for the element type resulting in possible StackOverflowException. Add support for disabling Burst compilation from Unity editor with the command line argument --burst-disable-compilation . Add support for forcing synchronous compilation from Unity editor with the command line argument --burst-force-sync-compilation. Fix a compiler crash when generating debugging information. Fix invalid codegen involving ternary operator [0.2.4-preview.42] - 2019-01-22 Fix a compilation error when implicit/explicit operators are used returning different type for the same input type. [0.2.4-preview.41] - 2019-01-17 Fix codegen issue with Interlocked.Decrement that was instead performing an increment. Fix codegen issue for an invalid layout of struct with nested recursive pointer references. Fix for Fogbugz case : https://fogbugz.unity3d.com/f/cases/1109514/. Fix codegen issue with ref bool on a method argument creating a compiler exception. [0.2.4-preview.40] - 2018-12-19 Fix bug when a write to a pointer type of an argument of a generic function. Breaking change of API: Accuracy -> FloatPrecision, and Support => FloatMode. Add FloatMode.Deterministic mode with early preview of deterministic mathematical functions. Fix bug with fonts in inspector being incorrectly reloaded. [0.2.4-preview.39] - 2018-12-06 Add preview support for readonly static arrays typically used for LUT. Fix an issue with generics incorrectly being resolved in certain situations. Fix ARM32/ARM64 compilation issues for some instructions. Fix ARM compilation issues on UWP. Fix issue with math.compress. Add support for ldnull for storing a managed null reference to a ref field (e.g for DisposeSentinel). [0.2.4-preview.38] - 2018-11-17 Fix issue when converting an unsigned integer constant to a larger unsigned integer (e.g (ulong)uint.MaxValue). Fix crash in editor when IRAnalysis can return an empty string . Fix potential crash of Cecil when reading symbols from assembly definition. [0.2.4-preview.37] - 2018-11-08 Fix a crash on Linux and MacOS in the editor with dlopen crashing when trying to load burst-llvm (linux). [0.2.4-preview.36] - 2018-11-08 Fix a crash on Linux and MacOS in the editor with dlopen crashing when trying to load burst-llvm (mac). [0.2.4-preview.35] - 2018-10-31 Try to fix a crash on macosx in the editor when a job is being compiled by Burst at startup time. Fix Burst accidentally resolving reference assemblies. Add support for Burst for ARM64 when building UWP player. [0.2.4-preview.34] - 2018-10-12 Fix compiler exception with an invalid cast that could occur when using pinned variables (e.g int32& resolved to int32** instead of int32*). [0.2.4-preview.33] - 2018-10-10 Fix a compiler crash with methods incorrectly being marked as external and throwing an exception related to ABI. [0.2.4-preview.32] - 2018-10-04 Fix codegen and linking errors for ARM when using mathematical functions on plain floats. Add support for vector types GetHashCode. Add support for DllImport (only compatible with Unity 2018.2.12f1+ and 2018.3.0b5+). Fix codegen when converting uint to int when used in a binary operation. [0.2.4-preview.31] - 2018-09-24 Fix codegen for fmodf to use inline functions instead. Add extended disassembly output to the Burst inspector. Fix generic resolution through de-virtualize methods. Fix bug when accessing float3.zero. Prevents static constructors being considered intrinsics. Fix NoAlias attribute checking when generics are used. [0.2.4-preview.30] - 2018-09-11 Fix IsValueType throwing a NullReferenceException in case of using generics. Fix discovery for Burst inspector/AOT methods inheriting from IJobProcessComponentData or interfaces with generics. Add [NoAlias] attribute. Improved codegen for csum. Improved codegen for abs(int). Improved codegen for abs on floatN/doubleN. [0.2.4-preview.29] - 2018-09-07 Fix issue when calling an explicit interface method not being matched through a generic constraint. Fix issue with or/and binary operation on a bool returned by a function. [0.2.4-preview.28] - 2018-09-05 Fix a compilation issue when storing a bool returned from a function to a component of a bool vector. Fix AOT compilation issue with a duplicated dictionary key. Fix settings of ANDROID_NDK_ROOT if it is not setup in Unity Editor. [0.2.4-preview.27] - 2018-09-03 Improve detection of jobs within nested generics for AOT/Burst inspector. Fix compiler bug of comparison of a pointer to null pointer. Fix crash compilation of sincos on ARM (neon/AARCH64). Fix issue when using a pointer to a VectorType resulting in an incorrect access of a vector type. Add support for doubles (preview). Improve AOT compiler error message/details if the compiler is failing before the linker. [0.2.4-preview.26] - 2018-08-21 Added support for cosh, sinh and tanh. [0.2.4-preview.25] - 2018-08-16 Fix warning in unity editor. [0.2.4-preview.24] - 2018-08-15 Improve codegen of math.compress. Improve codegen of math.asfloat/asint/asuint. Improve codegen of math.csum for int4. Improve codegen of math.count_bits. Support for lzcnt and tzcnt intrinsics. Fix AOT compilation errors for PS4 and XboxOne. Fix an issue that could cause wrong code generation for some unsafe ptr operations. [0.2.4-preview.23] - 2018-07-31 Fix bug with switch case to support not only int32. [0.2.4-preview.22] - 2018-07-31 Fix issue with pointers comparison not supported. Fix a StackOverflow exception when calling an interface method through a generic constraint on a nested type where the declaring type is a generic. Fix an issue with EntityCommandBuffer.CreateEntity/AddComponent that could lead to ArgumentException/IndexOutOfRangeException. [0.2.4-preview.21] - 2018-07-25 Correct issue with Android AOT compilation being unable to find the NDK. [0.2.4-preview.20] - 2018-07-05 Prepare the user documentation for a public release. [0.2.4-preview.19] - 2018-07-02 Fix compilation error with generics when types are coming from different assemblies. [0.2.4-preview.18] - 2018-06-26 Add support for subtracting pointers. [0.2.4-preview.17] - 2018-06-25 Bump only to force a new version pushed. [0.2.4-preview.16] - 2018-06-25 Fix AOT compilation errors. [0.2.4-preview.15] - 2018-06-25 Fix crash for certain access to readonly static variable. Fix StackOverflowException when using a generic parameter type into an interface method. [0.2.4-preview.14] - 2018-06-23 Fix an issue with package structure that was preventing Burst to work in Unity. [0.2.4-preview.13] - 2018-06-22 Add support for Burst timings menu. Improve codegen for sin/cos. Improve codegen when using swizzles on vector types. Add support for sincos intrinsic. Fix AOT deployment. [0.2.4-preview.12] - 2018-06-13 Fix a bug in codegen that was collapsing methods overload of System.Threading.Interlocked to the same method. [0.2.4-preview.11] - 2018-06-05 Fix exception in codegen when accessing readonly static fields from different control flow paths. [0.2.4-preview.10] - 2018-06-04 Fix a potential stack overflow issue when a generic parameter constraint on a type is also referencing another generic parameter through a generic interface constraint Update to latest Unity.Mathematics: Fix order of parameters and codegen for step functions. [0.2.4-preview.9] - 2018-05-29 Fix bug when casting an IntPtr to an enum pointer that was causing an invalid codegen exception. [0.2.4-preview.8] - 2018-05-24 Breaking change: Move Unity.Jobs.Accuracy/Support to Unity.Burst. Deprecate ComputeJobOptimizationAttribute in favor of BurstCompileAttribute. Fix bug when using enum with a different type than int. Fix bug with IL stind that could lead to a memory corruption. [0.2.4-preview.7] - 2018-05-22 Add support for nested structs in SOA native arrays. Add support for arbitrary sized elements in full SOA native arrays. Fix bug with conversion from signed/unsigned integers to signed numbers (integers & floats). Add support for substracting pointers at IL level. Improve codegen with pointers arithmetic to avoid checking for overflows. [0.2.4-preview.6] - 2018-05-11 Remove bool1 from mathematics and add proper support in Burst. Add support for ARM platforms in the Burst inspector UI. [0.2.4-preview.5] - 2018-05-09 Add support for readonly static fields. Add support for stackalloc. Fix potential crash on MacOSX when using memset is used indirectly. Fix crash when trying to write to a bool1*. Fix bug with EnableBurstCompilation checkbox not working in Unity Editor. [0.2.4-preview.4] - 2018-05-03 Fix an issue on Windows with DllNotFoundException occurring when trying to load burst-llvm.dll from a user profile containing unicode characters in the folder path. Fix an internal compiler error occurring with IL dup instruction. [0.2.4-preview.3] - 2018-05-03 Add support for struct with an explicit layout. Fix noalias regression (that was preventing the auto-vectorizer to work correctly on basic loops). [0.2.3] - 2018-03-21 Improve error messages for static field access. Improve collecting of compilable job by trying to collect concrete job type instances (issue #23). [0.2.2] - 2018-03-19 Improve error messages in case using is or as cast in C#. Improve error messages if a static delegate instance is used. Fix codegen error when converting a byte/ushort to a float."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "About Burst Getting started C# language support HPC# overview Static read-only fields and static constructor support String support Calling Burst compiled code Function pointers C#/.NET type support C#/.NET System namespace support DllImport and internal calls SharedStatic struct Burst instrinsics Burst intrinsics Common class Processor specific SIMD extensions Arm Neon intrinsics reference Editor reference Burst menu Burst Inspector Burst compilation Compilation overview Synchronous compilation BurstCompile attribute Assembly level BurstCompile BurstDiscard attribute Generic jobs Compilation warnings Building your project Burst AOT Player Settings reference Optimization Debugging and profiling tools Loop vectorization optimization Memory aliasing NoAlias attribute Aliasing and the job system AssumeRange attribute Hint intrinsic Constant intrinsic SkipLocalsInit attribute Modding support"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/aliasing-job-system.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/aliasing-job-system.html",
    "title": "Aliasing and the job system | ModularUIPack",
    "summary": "Aliasing and the job system Unity's job system infrastructure has some limitations on what can alias within a job struct: Structs attributed with [NativeContainer] (for example, NativeArray and NativeSlice) that are members of a job struct don't alias. Job struct members with the [NativeDisableContainerSafetyRestriction] attribute can alias with other members. This is because this attribute explicitly opts in to this kind of aliasing. Pointers to structs attributed with [NativeContainer] can't appear in other structs attributed with [NativeContainer]. For example, you can't have a NativeArray<NativeSlice<T>>. The following example job shows how these limitations work in practice: [BurstCompile] private struct MyJob : IJob { public NativeArray<float> a; public NativeArray<float> b; public NativeSlice<int> c; [NativeDisableContainerSafetyRestriction] public NativeArray<byte> d; public void Execute() { ... } } a, b, and c don't alias with each other. d can alias with a, b, or c. Tip If you're used to working with C/C++'s Type Based Alias Analysis (TBAA), then you might assume that because d has a different type from a, b, or c, it shouldn't alias. However, in C#, pointers don't have any assumptions that pointing to a different type results in no aliasing. This is why d is assumed to alias with a, b, or c."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/aliasing-noalias.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/aliasing-noalias.html",
    "title": "NoAlias attribute | ModularUIPack",
    "summary": "NoAlias attribute Use the [NoAlias] attribute to give Burst additional information on the aliasing of pointers and structs. In most use cases, you won't need to use the [NoAlias] attribute. You don't need to use it with [NativeContainer] attributed structs, or with fields in job structs. This is because the Burst compiler infers the no-alias information. The [NoAlias] attribute is exposed so that you can construct complex data structures where Burst can't infer the aliasing. If you use the [NoAlias] attribute on a pointer that could alias with another, it might result in undefined behavior and make it hard to track down bugs. You can use this attribute in the following ways: On a function parameter it signifies that the parameter doesn't alias with any other parameter to the function. On a struct field it signifies that the field doesn't alias with any other [NoAlias] field of the struct. On a struct it signifies that the address of the struct can't appear within the struct itself. On a function return value it signifies that the returned pointer doesn't alias with any other pointer returned from the same function. NoAlias function parameter The following is an example of aliasing: int Foo(ref int a, ref int b) { b = 13; a = 42; return b; } For this, Burst produces the following assembly: mov dword ptr [rdx], 13 mov dword ptr [rcx], 42 mov eax, dword ptr [rdx] ret This means that Burst does the following: Stores 13 into b. Stores 42 into a. Reloads the value from b to return it. Burst has to reload b because it doesn't know whether a and b are backed by the same memory or not. Add the [NoAlias] attribute to the code to change this: int Foo([NoAlias] ref int a, ref int b) { b = 13; a = 42; return b; } For this, Burst produces the following assembly: mov dword ptr [rdx], 13 mov dword ptr [rcx], 42 mov eax, 13 ret In this case, the load from b has been replaced with moving the constant 13 into the return register. NoAlias struct field The following example is the same as the previous, but applied to a struct: struct Bar { public NativeArray<int> a; public NativeArray<float> b; } int Foo(ref Bar bar) { bar.b[0] = 42.0f; bar.a[0] = 13; return (int)bar.b[0]; } For this, Burst produces the following assembly: mov rax, qword ptr [rcx + 16] mov dword ptr [rax], 1109917696 mov rcx, qword ptr [rcx] mov dword ptr [rcx], 13 cvttss2si eax, dword ptr [rax] ret In this case, Burst does the following: Loads the address of the data in b into rax. Stores 42 into it (1109917696 is 0x42280000, which is 42.0f). Loads the address of the data in a into rcx. Stores 13 into it. Reloads the data in b and converts it to an integer for returning. If you know that the two NativeArrays aren't backed by the same memory, you can change the code to the following: struct Bar { [NoAlias] public NativeArray<int> a; [NoAlias] public NativeArray<float> b; } int Foo(ref Bar bar) { bar.b[0] = 42.0f; bar.a[0] = 13; return (int)bar.b[0]; } If you attribute both a and b with [NoAlias] it tells Burst that they don't alias with each other within the struct, which produces the following assembly: mov rax, qword ptr [rcx + 16] mov dword ptr [rax], 1109917696 mov rax, qword ptr [rcx] mov dword ptr [rax], 13 mov eax, 42 ret This means that Burst can return the integer constant 42. NoAlias struct Burst assumes that the pointer to a struct doesn't appear within the struct itself. However, there are cases where this isn't true: unsafe struct CircularList { public CircularList* next; public CircularList() { // The 'empty' list just points to itself. next = this; } } Lists are one of the few structures where it's normal to have the pointer to the struct accessible from somewhere within the struct itself. The following example indicates where [NoAlias] on a struct can help: unsafe struct Bar { public int i; public void* p; } float Foo(ref Bar bar) { *(int*)bar.p = 42; return ((float*)bar.p)[bar.i]; } This produces the following assembly: mov rax, qword ptr [rcx + 8] mov dword ptr [rax], 42 mov rax, qword ptr [rcx + 8] mov ecx, dword ptr [rcx] movss xmm0, dword ptr [rax + 4*rcx] ret In this case, Burst: Loads p into rax. Stores 42 into p. Loads p into rax again. Loads i into ecx. Returns the index into p by i. In this situation, Burst loads p twice. This is because it doesn't know if p points to the address of the struct bar. Once it stores 42 into p it has to reload the address of p from bar, which is a costly operation. Add [NoAlias] to prevent this: [NoAlias] unsafe struct Bar { public int i; public void* p; } float Foo(ref Bar bar) { *(int*)bar.p = 42; return ((float*)bar.p)[bar.i]; } This produces the following assembly: mov rax, qword ptr [rcx + 8] mov dword ptr [rax], 42 mov ecx, dword ptr [rcx] movss xmm0, dword ptr [rax + 4*rcx] ret In this situation, Burst only loads the address of p once, because [NoAlias] tells it that p can't be the pointer to bar. NoAlias function return Some functions can only return a unique pointer. For instance, malloc only returns a unique pointer. In this case, [return:NoAlias] gives some useful information to Burst. Important Only use [return: NoAlias] on functions that are guaranteed to produce a unique pointer. For example, with bump-allocations, or with things like malloc. Burst aggressively inlines functions for performance considerations, so with small functions, Burst inlines them into their parents to produce the same result without the attribute. The following example uses a bump allocator backed with a stack allocation: // Only ever returns a unique address into the stackalloc'ed memory. // We've made this no-inline because Burst will always try and inline // small functions like these, which would defeat the purpose of this // example [MethodImpl(MethodImplOptions.NoInlining)] unsafe int* BumpAlloc(int* alloca) { int location = alloca[0]++; return alloca + location; } unsafe int Func() { int* alloca = stackalloc int[128]; // Store our size at the start of the alloca. alloca[0] = 1; int* ptr1 = BumpAlloc(alloca); int* ptr2 = BumpAlloc(alloca); *ptr1 = 42; *ptr2 = 13; return *ptr1; } This produces the following assembly: push rsi push rdi push rbx sub rsp, 544 lea rcx, [rsp + 36] movabs rax, offset memset mov r8d, 508 xor edx, edx call rax mov dword ptr [rsp + 32], 1 movabs rbx, offset \"BumpAlloc(int* alloca)\" lea rsi, [rsp + 32] mov rcx, rsi call rbx mov rdi, rax mov rcx, rsi call rbx mov dword ptr [rdi], 42 mov dword ptr [rax], 13 mov eax, dword ptr [rdi] add rsp, 544 pop rbx pop rdi pop rsi ret The key things that Burst does: Has ptr1 in rdi. Has ptr2 in rax. Stores 42 into ptr1. Stores 13 into ptr2. Loads ptr1 again to return it. If you add the [return: NoAlias] attribute: [MethodImpl(MethodImplOptions.NoInlining)] [return: NoAlias] unsafe int* BumpAlloc(int* alloca) { int location = alloca[0]++; return alloca + location; } unsafe int Func() { int* alloca = stackalloc int[128]; // Store our size at the start of the alloca. alloca[0] = 1; int* ptr1 = BumpAlloc(alloca); int* ptr2 = BumpAlloc(alloca); *ptr1 = 42; *ptr2 = 13; return *ptr1; } It produces the following assembly: push rsi push rdi push rbx sub rsp, 544 lea rcx, [rsp + 36] movabs rax, offset memset mov r8d, 508 xor edx, edx call rax mov dword ptr [rsp + 32], 1 movabs rbx, offset \"BumpAlloc(int* alloca)\" lea rsi, [rsp + 32] mov rcx, rsi call rbx mov rdi, rax mov rcx, rsi call rbx mov dword ptr [rdi], 42 mov dword ptr [rax], 13 mov eax, 42 add rsp, 544 pop rbx pop rdi pop rsi ret In this case, Burst doesn't reload ptr2, and moves 42 into the return register."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/aliasing.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/aliasing.html",
    "title": "Memory aliasing | ModularUIPack",
    "summary": "Memory aliasing Memory aliasing is a way to tell Burst how your code uses data. This can improve and optimize the performance of your application. Memory aliasing happens when locations in the memory overlap each other. The following documentation outlines the difference between memory aliasing, and no memory aliasing. The following example shows a job that copies data from an input array to an output array: [BurstCompile] private struct CopyJob : IJob { [ReadOnly] public NativeArray<float> Input; [WriteOnly] public NativeArray<float> Output; public void Execute() { for (int i = 0; i < Input.Length; i++) { Output[i] = Input[i]; } } } No memory aliasing If the arrays Input and Output don't overlap, which means that their respective memory location doesn't overlap, the code returns the following result after running this job on a sample input/output: Memory with no aliasing If Burst is noalias aware, it can work at the scalar level to optimize the previous scalar loop. It does this through a process called vectorizing, where it rewrites the loop to process elements in a small batch. For example, Burst could work at vector level in 4 by 4 elements: Memory with no aliasing vectorized Memory aliasing If the Output array overlaps the Input array by one element (for example Output[0] points to Input[1]), then this means that the memory is aliasing. This gives the following result when you run CopyJob without the auto vectorizer: Memory with aliasing If Burst isn't aware of the memory aliasing, it tries to auto vectorize the loop, which results in the following: Memory with aliasing and invalid vectorized code The result of this code is invalid and might lead to bugs if Burst can't identify them. Generated code In the CopyJob example, there is an x64 assembly targeted at AVX2 in its loop. The instruction vmovups moves 8 floats, so a single auto vectorized loop moves 4 × 8 floats, which equals 32 floats copied per loop iteration, instead of just one: .LBB0_4: vmovups ymm0, ymmword ptr [rcx - 96] vmovups ymm1, ymmword ptr [rcx - 64] vmovups ymm2, ymmword ptr [rcx - 32] vmovups ymm3, ymmword ptr [rcx] vmovups ymmword ptr [rdx - 96], ymm0 vmovups ymmword ptr [rdx - 64], ymm1 vmovups ymmword ptr [rdx - 32], ymm2 vmovups ymmword ptr [rdx], ymm3 sub rdx, -128 sub rcx, -128 add rsi, -32 jne .LBB0_4 test r10d, r10d je .LBB0_8 The following example shows the same Burst compiled loop, but Burst's aliasing is artificially disabled: .LBB0_2: mov r8, qword ptr [rcx] mov rdx, qword ptr [rcx + 16] cdqe mov edx, dword ptr [rdx + 4*rax] mov dword ptr [r8 + 4*rax], edx inc eax cmp eax, dword ptr [rcx + 8] jl .LBB0_2 The result is entirely scalar and runs approximately 32 times slower than the highly optimized, vectorized variant that the original alias analysis produces. Function cloning For function calls where Burst knows about the aliasing between parameters to the function, Burst can infer the aliasing. It can then propagate this onto the called function to improve optimization: [MethodImpl(MethodImplOptions.NoInlining)] int Bar(ref int a, ref int b) { a = 42; b = 13; return a; } int Foo() { var a = 53; var b = -2; return Bar(ref a, ref b); } The assembly for Bar would be: mov dword ptr [rcx], 42 mov dword ptr [rdx], 13 mov eax, dword ptr [rcx] ret This is because Burst doesn't know the aliasing of a and b within the Bar function. This is in line with what other compiler technologies do with this code snippet. Burst is smarter than this though. Through a process of function cloning, Burst creates a copy of Bar where it knows that the aliasing properties of a and b don't alias. It then replaces the original call to Bar with a call to the copy. This results in the following assembly: mov dword ptr [rcx], 42 mov dword ptr [rdx], 13 mov eax, 42 ret In this scenario, Burst doesn't perform the second load from a. Aliasing checks Because aliasing is key to Burst's ability to optimize for performance, there are some aliasing intrinsics: Unity.Burst.CompilerServices.Aliasing.ExpectAliased expects that the two pointers do alias, and generates a compiler error if not. Unity.Burst.CompilerServices.Aliasing.ExpectNotAliased expects that the two pointers don't alias, and generates a compiler error if not. An example: using static Unity.Burst.CompilerServices.Aliasing; [BurstCompile] private struct CopyJob : IJob { [ReadOnly] public NativeArray<float> Input; [WriteOnly] public NativeArray<float> Output; public unsafe void Execute() { // NativeContainer attributed structs (like NativeArray) cannot alias with each other in a job struct! ExpectNotAliased(Input.getUnsafePtr(), Output.getUnsafePtr()); // NativeContainer structs cannot appear in other NativeContainer structs. ExpectNotAliased(in Input, in Output); ExpectNotAliased(in Input, Input.getUnsafePtr()); ExpectNotAliased(in Input, Output.getUnsafePtr()); ExpectNotAliased(in Output, Input.getUnsafePtr()); ExpectNotAliased(in Output, Output.getUnsafePtr()); // But things definitely alias with themselves! ExpectAliased(in Input, in Input); ExpectAliased(Input.getUnsafePtr(), Input.getUnsafePtr()); ExpectAliased(in Output, in Output); ExpectAliased(Output.getUnsafePtr(), Output.getUnsafePtr()); } } These checks only run when optimizations are enabled, because proper aliasing deduction is intrinsically linked to the optimizer's ability to see through functions via inlining."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/building-aot-settings.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/building-aot-settings.html",
    "title": "Burst AOT Player Settings reference | ModularUIPack",
    "summary": "Burst AOT Player Settings reference To control Burst's AOT compilation, use the Player Settings window (Edit > Player Settings > Burst AOT Settings). These settings override the Burst settings in the Jobs menu when you make a build of your project. Setting Function Target Platform Displays the current platform. To change the platform, go to File > Build Settings. You can set these Player Settings per platform. Enable Burst Compilation Enable this setting to turn Burst compilation on. Disable this setting to deactivate Burst compilation for the selected platform. Enable Optimizations Enable this setting to activate Burst optimizations. Force Debug Information Enable this setting to make Burst generate debug information. This adds debug symbols to your project, even in release builds of your project, so that when you load it in a debugger you can see file and line information. Use Platform SDK Linker (Windows, macOS, and Linux builds only) Disables cross compilation support. When you enable this setting, you must use platform-specific tools for your target platform. Only enable this setting for debugging purposes. For more information, see Platforms with cross compilation disabled. Target 32Bit CPU Architectures (Displayed if the architecture is supported) Select the CPU architectures that you want to use for 32 bit builds. By default, SSE2 and SSE4 are selected. Target 64Bit CPU Architectures (Displayed if the architecture is supported) Select the CPU architectures that you want to use for 64-bit builds. By default, SSE2 and SSE4 are selected. Target Arm 64Bit CPU Architectures (Displayed if the architecture is supported) Select the CPU architectures that you want to use for Arm 64-bit builds. By default, ARMV8A is selected. Optimize For Select which optimization settings to compile Burst code for. For more information see OptimizeFor. Performance Optimizes the job to run as fast as possible. Size Optimizes to make the code generation as small as possible. Fast Compilation Compiles code as fast as possible, with minimal optimization. Burst doesn't perform any vectorization, inlining, or loop optimizations. Balanced (Default) Optimizes for code that runs fast but keeps compile time as low as possible. Disabled Warnings Specify a semi-colon separated list of Burst warning numbers to disable the warnings for a player build. Unity shares this setting across all platforms. This can be useful if you want to ignore specific compilation warnings while testing your application. The CPU Architecture setting is only supported for Windows, macOS, Linux and Android. Unity builds a Player that supports the CPU architectures you've selected. Burst generates a special dispatch into the module, so that the code generated detects the CPU the target platform uses and selects the appropriate CPU architecture at runtime. Optimize For setting Note Any OptimizeFor setting is the global default optimization setting for any Burst job or function-pointer. If any assembly level BurstCompile, or a specific Burst job or function-pointer has an OptimizeFor setting, it overrides the global optimization setting for those jobs. To control how Burst optimizes your code, use the Optimize For setting in the Editor, or use the OptimizeFor field: [BurstCompile(OptimizeFor = OptimizeFor.FastCompilation)] public struct MyJob : IJob { // ... }"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/building-projects.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/building-projects.html",
    "title": "Building your project | ModularUIPack",
    "summary": "Building your project When you build your project, Burst compiles your code, then creates a single dynamic library, and puts it into the Plugins folder for the platform you're targeting. For example, on Windows, the path is Data/Plugins/lib_burst_generated.dll. Note This is different if your target platform is iOS. Instead, Unity generates a static library because of Apple's submission requirements for TestFlight. The job system runtime loads the generated library the first time a Burst compiled method is invoked. To control Burst's AOT compilation, use the settings in the Burst AOT Settings section of the Player Settings window (Edit > Player Settings > Burst AOT Settings). For more information, see Burst AOT Settings reference. Platforms without cross compilation If you're compiling for a non-desktop platform, then Burst compilation requires specific platform compilation tools (similar to IL2CPP). By default, desktop platforms (macOS, Linux, Windows) don't need external toolchain support, unless you enable the Use Platform SDK Linker setting in the Burst AOT Settings. The table below lists the level of support for AOT compilation on each platform. If you select an invalid target (one with missing tools, or unsupported), Unity doesn't use Burst compilation, which might lead it to fail, but Unity still builds the target without Burst optimizations. Note Burst supports cross-compilation between desktop platforms (macOS/Linux/Windows) by default. Host Editor platform Target Player platform Supported CPU architectures External toolchain requirements Windows Windows x86 (SSE2, SSE4) x64 (SSE2, SSE4, AVX, AVX2) None Windows Universal Windows Platform x86 (SSE2, SSE4) x64 (SSE2, SSE4, AVX, AVX2) ARM32 (Thumb2, Neon32) ARMV8 AARCH64 Note: A UWP build always compiles all four targets. Visual Studio 2017 Universal Windows Platform Development Workflow C++ Universal Platform Tools Windows Android x86 SSE2 ARMV7 (Thumb2, Neon32) ARMV8 AARCH64 (ARMV8A, ARMV8A_HALFFP, ARMV9A) Android NDK Important: Use the Android NDK that you install through Unity Hub (via Add Component). Burst falls back to the one that the ANDROID_NDK_ROOT environment variable specifies if the Unity external tools settings aren't configured. Windows Magic Leap ARMV8 AARCH64 You must install the Lumin SDK via the Magic Leap Package Manager and configured in the Unity Editor's External Tools Preferences. Windows Xbox One x64 SSE4 Microsoft GDK Windows Xbox Series x64 AVX2 Microsoft GDK Windows PlayStation 4 x64 SSE4 Minimum PS4 SDK version 8.00 Windows PlayStation 5 x64 AVX2 Minimum PS5 SDK version 2.00 Windows Nintendo Switch ARMV8 AARCH64 None macOS macOS x64 (SSE2, SSE4, AVX, AVX2), Apple Silicon None macOS iOS ARM32 Thumb2/Neon32, ARMV8 AARCH64 Xcode with command line tools installed (xcode-select --install) macOS Android x86 SSE2 ARMV7 (Thumb2, Neon32) ARMV8 AARCH64 (ARMV8A, ARMV8A_HALFFP, ARMV9A) Android NDK Important: Use the Android NDK that you install through Unity Hub (via Add Component). Burst falls back to the one that the ANDROID_NDK_ROOT environment variable specifies if the Unity external tools settings aren't configured. macOS Magic Leap ARMV8 AARCH64 You must install the Lumin SDK via the Magic Leap Package Manager and configured in the Unity Editor's External Tools Preferences. Linux Linux x64 (SSE2, SSE4, AVX, AVX2) None The maximum target CPU is hardcoded per platform. For standalone builds that target desktop platforms (Windows/Linux/macOS) you can choose the supported targets via the Burst AOT Settings Projects that don't use Burst Some projects can't use Burst as the compiler: iOS projects from the Windows Editor Android projects from the Linux Editor Xcode projects generated from the Create Xcode Project option Multiple Burst targets When Burst compiles multiple target platforms during a build, it has to perform separate compilations. For example, if you want to compile X64_SSE2 and X64_SSE4, the Burst has to do two separate compilations to generate code for each of the targets you choose. To keep the combinations of targets to a minimum, Burst target platforms require multiple processor instruction sets underneath: SSE4.2 is gated on having SSE4.2 and POPCNT instruction sets. AVX2 is gated on having AVX2, FMA, F16C, BMI1, and BMI2 instruction sets. ARMV8A is a basic Armv8-A CPU target ARMV8A_HALFFP is ARMV8A plus the following extensions: fullfp16, dotprod, crypto, crc, rdm, lse. In practice, this means Cortex A75/A55 and later cores. ARMV9A is ARMV8A_HALFFP plus SVE2 support. In practice, this means Cortex X2/A710/A510 and later cores. Important: this target is currently experimental. Dynamic dispatch based on runtime CPU features For all x86/x64 CPU desktop platforms, as well as for 64-bit Arm on Android, Burst takes into account the CPU features available at runtime to dispatch jobs to different versions it compiles. For x86 and x64 CPUs, Burst supports SSE2 and SSE4 instruction sets at runtime only. For example, with dynamic CPU dispatch, if your CPU supports SSE3 and below, Burst selects SSE2 automatically."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-burstcompile-assembly.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-burstcompile-assembly.html",
    "title": "Assembly level BurstCompile | ModularUIPack",
    "summary": "Assembly level BurstCompile Use the BurstCompile attribute on an assembly to set options for all Burst jobs and function-pointers within the assembly: [assembly: BurstCompile(CompileSynchronously = true)] For example, if an assembly just contains game code which needs to run quickly, you can use: [assembly: BurstCompile(OptimizeFor = OptimizeFor.FastCompilation)] This means that Burst compiles the code as fast as it possibly can, which means that you can iterate on the game code much more quickly. It also means that other assemblies compile as they did before, which gives you more control on how Burst works with your code. Assembly-level BurstCompile attributes iterate with any job or function-pointer attribute, and also with any globally set options from the Burst Editor menu. Burst prioritizes assembly level attributes in the following order: Editor menu settings take precedence. For example, if you enable Native Debug Compilation from the Burst menu, Burst always compiles your code ready for debugging. Burst checks any BurstCompile attribute on a job or function-pointer. If you have CompileSynchronously = true in BurstCompile, then Burst compiles synchronously Otherwise, Burst sources any remaining settings from any assembly level attribute. For example: [assembly: BurstCompile(OptimizeFor = OptimizeFor.FastCompilation)] // This job will be optimized for fast-compilation, because the per-assembly BurstCompile asked for it [BurstCompile] struct AJob : IJob { // ... } // This job will be optimized for size, because the per-job BurstCompile asked for it [BurstCompile(OptimizeFor = OptimizeFor.Size)] struct BJob : IJob { // ... }"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-burstcompile.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-burstcompile.html",
    "title": "BurstCompile attribute | ModularUIPack",
    "summary": "BurstCompile attribute To improve the performance of Burst, you can change how it behaves when it compiles a job with the [BurstCompile] attribute. Use it do the following: Use a different accuracy for math functions (for example, sin, cos). Relax the order of math computations so that Burst can rearrange the floating point calculations. Force a synchronous compilation of a job (only for just-in-time compilation). For example, you can use the [BurstCompile] attribute to change the floating precision and float mode of Burst like so: [BurstCompile(FloatPrecision.Med, FloatMode.Fast)] FloatPrecision Use the FloatPrecision enumeration to define Burst's floating precision accuracy. Float precision is measured in ulp (unit in the last place or unit of least precision). This is the space between floating-point numbers: the value the least significant digit represents if it's 1. Unity.Burst.FloatPrecision provides the following accuracy: FloatPrecision.Standard: Default value, which is the same as FloatPrecision.Medium. This provides an accuracy of 3.5 ulp. FloatPrecision.High: Provides an accuracy of 1.0 ulp. FloatPrecision.Medium: Provides an accuracy of 3.5 ulp. FloatPrecision.Low: Has an accuracy defined per function, and functions might specify a restricted range of valid inputs. Note: In previous versions of the Burst API, the FloatPrecision enum was named Accuracy. FloatPrecision.Low If you use the FloatPrecision.Low mode, the following functions have a precision of 350.0 ulp. All other functions inherit the ulp from FloatPrecision.Medium. Unity.Mathematics.math.sin(x) Unity.Mathematics.math.cos(x) Unity.Mathematics.math.exp(x) Unity.Mathematics.math.exp2(x) Unity.Mathematics.math.exp10(x) Unity.Mathematics.math.log(x) Unity.Mathematics.math.log2(x) Unity.Mathematics.math.log10(x) Unity.Mathematics.math.pow(x, y) Negative x to the power of a fractional y aren't supported. Unity.Mathematics.math.fmod(x, y) FloatMode Use the FloatMode enumeration to define Burst's floating point math mode. It provides the following modes: FloatMode.Default: Defaults to FloatMode.Strict mode. FloatMode.Strict: Burst doesn't perform any re-arrangement of the calculation and respects special floating point values (such as denormals, NaN). This is the default value. FloatMode.Fast: Burst can perform instruction re-arrangement and use dedicated or less precise hardware SIMD instructions. FloatMode.Deterministic: Unsupported. Deterministic mode is reserved for a future iteration of Burst. For hardware that can support Multiply and Add (e.g mad a * b + c) into a single instruction, you can use FloatMode.Fast to enable this optimization. However, the reordering of these instructions might lead to a lower accuracy. Use FloatMode.Fast for scenarios where the exact order of the calculation and the uniform handling of NaN values aren't required."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-burstdiscard.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-burstdiscard.html",
    "title": "BurstDiscard attribute | ModularUIPack",
    "summary": "BurstDiscard attribute If you're running C# code not inside Burst-compiled code, you might want to use managed objects, but not compile these portions of code within Burst. To do this, use the [BurstDiscard] attribute on a method: [BurstCompile] public struct MyJob : IJob { public void Execute() { // Only executed when running from a full .NET runtime // this method call will be discard when compiling this job with // [BurstCompile] attribute MethodToDiscard(); } [BurstDiscard] private static void MethodToDiscard(int arg) { Debug.Log($\"This is a test: {arg}\"); } } Note A method with [BurstDiscard] can't have a return value. You can use a ref or out parameter, which indicates whether the code is running on Burst or managed: [BurstDiscard] private static void SetIfManaged(ref bool b) => b = false; private static bool IsBurst() { var b = true; SetIfManaged(ref b); return b; }"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-generic-jobs.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-generic-jobs.html",
    "title": "Generic jobs | ModularUIPack",
    "summary": "Generic jobs Burst compiles a job in two ways: In the Editor, it compiles the job when it's scheduled, known as just-in-time (JIT) compilation. In a player build, it compiles the job as part of the built player, known as ahead-of-time (AOT) compilation. For more information, see the documentation on Compilation. If the job is a concrete type (doesn't use generics), Burst compiles it in both modes (AOT and JIT). However, a generic job might behave in an unexpected way. While Burst supports generics, it has limited support for generic jobs or function pointers. If you notice that a job scheduled in the Editor is running at full speed, but not in a built player, it's might be a problem related to generic jobs. The following example defines a generic job: // Direct generic job [BurstCompile] struct MyGenericJob<TData> : IJob where TData : struct { public void Execute() { ... } } You can also nest generic jobs: // Nested generic job public class MyGenericSystem<TData> where TData : struct { [BurstCompile] struct MyGenericJob : IJob { public void Execute() { ... } } public void Run() { var myJob = new MyGenericJob(); // implicitly MyGenericSystem<TData>.MyGenericJob myJob.Schedule(); } } Jobs that aren't Burst compiled look like this: // Direct Generic Job var myJob = new MyGenericJob<int>(); myJob.Schedule(); // Nested Generic Job var myJobSystem = new MyGenericSystem<float>(); myJobSystem.Run(); In both cases, in a player build, the Burst compiler detects that it has to compile MyGenericJob<int> and MyGenericJob<float>. This is because the generic jobs (or the type surrounding it for the nested job) are used with fully resolved generic arguments (int and float). However, if these jobs are used indirectly through a generic parameter, the Burst compiler can't detect the jobs it has to compile at player build time: public static void GenericJobSchedule<TData>() where TData: struct { // Generic argument: Generic Parameter TData // This Job won't be detected by the Burst Compiler at standalone-player build time. var job = new MyGenericJob<TData>(); job.Schedule(); } // The implicit MyGenericJob<int> will run at Editor time in full Burst speed // but won't be detected at standalone-player build time. GenericJobSchedule<int>(); The same restriction applies if you declare the job in the context of generic parameter that comes from a type: // Generic Parameter TData public class SuperJobSystem<TData> { // Generic argument: Generic Parameter TData // This Job won't be detected by the Burst Compiler at standalone-player build time. public MyGenericJob<TData> MyJob; } If you want to use generic jobs, you must use them directly with fully resolved generic arguments (for example, int, MyOtherStruct). You can't use them with a generic parameter indirection (for example, MyGenericJob<TContext>). Important Burst doesn't support scheduling generic Jobs through generic methods. Function pointers Function pointers are restricted because you can't use a generic delegate through a function pointer with Burst: public delegate void MyGenericDelegate<T>(ref TData data) where TData: struct; var myGenericDelegate = new MyGenericDelegate<int>(MyIntDelegateImpl); // Will fail to compile this function pointer. var myGenericFunctionPointer = BurstCompiler.CompileFunctionPointer<MyGenericDelegate<int>>(myGenericDelegate); This limitation is because of a limitation of the .NET runtime to interop with such delegates. For more information, see the documentation on Function pointers."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-overview.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-overview.html",
    "title": "Compilation overview | ModularUIPack",
    "summary": "Compilation overview Burst compiles your code in different ways depending on its context. In Play mode, Burst compiles your code just-in-time (JIT). When you build and run your application to a player, Burst compiles ahead-of-time (AOT). Just-in-time compilation While your application is in Play mode in the Editor, Burst compiles your code asynchronously at the point that Unity uses it. This means that your code runs under the default Mono compiler until Burst completes its work in the background. To force Unity to compile your code synchronously while in the Editor, see Synchronous compilation Ahead-of-time compilation When you build your project, Burst compiles all the supported code ahead-of-time (AOT) into a native library which Unity ships with your application. To control how Burst compiles AOT, use the Player Settings window. Depending on the platform you want to build for, AOT compilation might require access to linker tools. For more information, see Building your project. Further resources Synchronous compilation BurstCompile attribute"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-synchronous.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-synchronous.html",
    "title": "Synchronous compilation | ModularUIPack",
    "summary": "Synchronous compilation By default, when in Play mode, the Burst compiler compiles jobs asynchronously. To force synchronous compilation, set the CompileSynchronously property to true, which compiles your method on the first schedule. [BurstCompile(CompileSynchronously = true)] public struct MyJob : IJob { // ... } If you don't set this property, on the first call of a job, Burst compiles it asynchronously in the background, and runs a managed C# job in the mean time. This minimizes any frame hitching and keeps the experience responsive. However, when you set CompileSynchronously = true, no asynchronous compilation can happen. This means that it might take longer for Burst to compile. This pause for compilation affects the current running frame, which means that hitches can happen and it might provide an unresponsive experience for users. In general, only use CompileSynchronously = true in the following situations: If you have a long running job that only runs once. The performance of the compiled code might outweigh the downsides doing the compilation synchronously. If you're profiling a Burst job and want to test the code from the Burst compiler. When you do this, perform a warmup to discard any timing measurements from the first call to the job. This is because the profiling data includes the compilation time and skews the result. To aid with debugging the difference between managed and Burst compiled code."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-warnings.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation-warnings.html",
    "title": "Compilation warnings | ModularUIPack",
    "summary": "Compilation warnings This page describes common compilation warnings, and how to fix them. IgnoreWarning attribute The Unity.Burst.CompilerServices.IgnoreWarningAttribute attribute lets you suppress warnings for a specific function that is being compiled from Burst. However, the warnings that the Burst compiler generates are very important to pay attention to, so this attribute should be used sparingly and only when necessary. The sections below describe the specific situations in which you might want to suppress warnings. BC1370 Warning BC1370 produces the message: An exception was thrown from a function without the correct [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] guard... This warning happens if Unity encounters a throw in code that [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] doesn't guard. In the Editor, thrown exceptions will be caught and logged to the Console, but in a Player build, a throw becomes an abort, which crashes your application. Burst warns you about these exceptions, and advises you to place them in functions guarded with [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")], because functions guarded with that attribute will not be included in Player builds. However, if you want to purposely throw an exception to crash your application, use the IgnoreWarningAttribute to suppress the warnings that Burst provides on the throw: [IgnoreWarning(1370)] int DoSomethingMaybe(int x) { if (x < 0) throw new Exception(\"Dang - sorry I crashed your game!\"); return x * x; } Note This warning is only produced for exceptions that persist into Player builds. Editor-only or debug-only exception throws that aren't compiled into Player builds will not trigger this warning. BC1371 Warning BC1371 produces the message: A call to the method 'xxx' has been discarded, due to its use as an argument to a discarded method... To understand this warning, consider the following example: [BurstDiscard] static void DoSomeManagedStuff(int x) { ///.. only run when Burst compilation is disabled } // A function that computes some result which we need to pass to managed code int BurstCompiledCode(int x,int y) { return y+2*x; } [BurstCompile] void BurstMethod() { var myValue = BurstCompiledCode(1,3); DoSomeManagedStuff(myValue); } When Unity compiles your C# code in release mode, it optimizes and removes the local variable myValue. This means that Burst receives something like the following code : [BurstCompile] void BurstedMethod() { DoSomeManagedStuff(BurstCompiledCode(1,3)); } This makes Burst generate the warning, because Burst discards DoSomeManagedStuff, along with the BurstCompiledCode argument. This means that the BurstCompiledCode function is no longer executed, which generates the warning. If this isn't what you intended then ensure the variable has multiple uses. For example: void IsUsed(ref int x) { // Dummy function to prevent removal } [BurstCompile] void BurstedMethod() { var myValue = BurstCompiledCode(1,3); DoSomeManagedStuff(myValue); IsUsed(ref myValue); } Alternatively, if you're happy that the code is being discarded correctly, ignore the warning on the BurstedMethod like so: [IgnoreWarning(1371)] [BurstCompile] void BurstMethod() { var myValue = BurstCompiledCode(1,3); DoSomeManagedStuff(myValue); }"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/compilation.html",
    "title": "Compilation | ModularUIPack",
    "summary": "Compilation Burst compiles your code in different ways, depending on its context. You can also change the way that the compiler behaves when compiling code. Topic Description Compilation overview Understand the different compilation types. Synchronous compilation Understand synchronous compilation. BurstCompile attribute Customize the BurstCompile attribute to improve performance. BurstDiscard attribute Use the BurstDiscard attribute to select which portions of code to compile. Generic jobs Understand how Burst compiles jobs. Compilation warnings Fix common compilation warnings. Additional resources C# language support"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-burst-intrinsics-common.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-burst-intrinsics-common.html",
    "title": "Burst Intrinsics Common class | ModularUIPack",
    "summary": "Burst Intrinsics Common class The Unity.Burst.Intrinsics.Common intrinsics are for functionality shared across the hardware targets that Burst supports. Pause Unity.Burst.Intrinsics.Common.Pause is an intrinsic that requests that the CPU pause the current thread. It maps to pause on x86, and yield on ARM. Use it to stop spin locks over contending on an atomic access, which reduces contention and power on that section of code. Prefetch The Unity.Burst.Intrinsics.Common.Prefetch is an experimental intrinsic that provides a hint that Burst should prefetch the memory location into the cache. Because the intrinsic is experimental, you must use the UNITY_BURST_EXPERIMENTAL_PREFETCH_INTRINSIC preprocessor define to get access to it. umul128 Use the Unity.Burst.Intrinsics.Common.umul128 intrinsic to access 128-bit unsigned multiplication. These multiplies are useful for hashing functions. It maps 1:1 with hardware instructions on x86 and ARM targets. InterlockedAnd & InterlockedOr The Unity.Burst.Intrinsics.Common.InterlockedAnd and Unity.Burst.Intrinsics.Common.InterlockedOr are experimental intrinsics that provides atomic and/or operations on int, uint, long, and ulong types. Because these intrinsics are experimental, you must use the UNITY_BURST_EXPERIMENTAL_ATOMIC_INTRINSICS preprocessor define to get access to them."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-burst-intrinsics-dllimport.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-burst-intrinsics-dllimport.html",
    "title": "| ModularUIPack",
    "summary": "DllImport and internal calls To call native functions, use [DllImport]: [DllImport(\"MyNativeLibrary\")] public static extern int Foo(int arg); Burst also supports internal calls implemented inside Unity: // In UnityEngine.Mathf [MethodImpl(MethodImplOptions.InternalCall)] public static extern int ClosestPowerOfTwo(int value); DllImport is only supported for native plug-ins, not platform-dependent libraries like kernel32.dll. For all DllImport and internal calls, you can only use the following types as parameter or return types: Type Supported type Built-in and intrinsic types byte / sbyte short / ushort int / uint long / ulong float double System.IntPtr / System.UIntPtr Unity.Burst.Intrinsics.v64 / Unity.Burst.Intrinsics.v128 / Unity.Burst.Intrinsics.v256 Pointers and references sometype* : Pointer to any of the other types in this list ref sometype : Reference to any of the other types in this list Handle structs unsafe struct MyStruct { void* Ptr; } : Struct containing a single pointer field unsafe struct MyStruct { int Value; } : Struct containing a single integer field Note Passing structs by value isn't supported; you need to pass them through a pointer or reference. The only exception is that handle structs are supported. These are structs that contain a single field of pointer or integer type."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-burst-intrinsics-neon.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-burst-intrinsics-neon.html",
    "title": "Burst Arm Neon intrinsics reference | ModularUIPack",
    "summary": "Burst Arm Neon intrinsics reference This page contains an ordered reference for the APIs in Unity.Burst.Intrinsics.Arm.Neon. For information on how to use these, see the documentation on Processor specific SIMD extensions. Intrinsics type creation and conversion Operation Description APIs vcreate Create vector Click here to expand the API list vcreate_f16 vcreate_f32 vcreate_f64 vcreate_s16 vcreate_s32 vcreate_s64 vcreate_s8 vcreate_u16 vcreate_u32 vcreate_u64 vcreate_u8 vdup_n Duplicate (splat) value Click here to expand the API list vdup_n_f32 vdup_n_f64 vdup_n_s16 vdup_n_s32 vdup_n_s64 vdup_n_s8 vdup_n_u16 vdup_n_u32 vdup_n_u64 vdup_n_u8 vdupq_n_f32 vdupq_n_f64 vdupq_n_s16 vdupq_n_s32 vdupq_n_s64 vdupq_n_s8 vdupq_n_u16 vdupq_n_u32 vdupq_n_u64 vdupq_n_u8 vdup_lane Duplicate (splat) vector element Click here to expand the API list vdup_lane_f32 vdup_lane_f64 vdup_lane_s16 vdup_lane_s32 vdup_lane_s64 vdup_lane_s8 vdup_lane_u16 vdup_lane_u32 vdup_lane_u64 vdup_lane_u8 vdup_laneq_f32 vdup_laneq_f64 vdup_laneq_s16 vdup_laneq_s32 vdup_laneq_s64 vdup_laneq_s8 vdup_laneq_u16 vdup_laneq_u32 vdup_laneq_u64 vdup_laneq_u8 vdupq_lane_f32 vdupq_lane_f64 vdupq_lane_s16 vdupq_lane_s32 vdupq_lane_s64 vdupq_lane_s8 vdupq_lane_u16 vdupq_lane_u32 vdupq_lane_u64 vdupq_lane_u8 vdupq_laneq_f32 vdupq_laneq_f64 vdupq_laneq_s16 vdupq_laneq_s32 vdupq_laneq_s64 vdupq_laneq_s8 vdupq_laneq_u16 vdupq_laneq_u32 vdupq_laneq_u64 vdupq_laneq_u8 vdups_lane_f32 vdups_lane_s32 vdups_lane_u32 vdups_laneq_f32 vdups_laneq_s32 vdups_laneq_u32 vdupb_lane_s8 vdupb_lane_u8 vdupb_laneq_s8 vdupb_laneq_u8 vdupd_lane_f64 vdupd_lane_s64 vdupd_lane_u64 vdupd_laneq_f64 vdupd_laneq_s64 vdupd_laneq_u64 vduph_lane_s16 vduph_lane_u16 vduph_laneq_s16 vduph_laneq_u16 vmov_n Duplicate (splat) value Click here to expand the API list vmov_n_f32 vmov_n_f64 vmov_n_s16 vmov_n_s32 vmov_n_s64 vmov_n_s8 vmov_n_u16 vmov_n_u32 vmov_n_u64 vmov_n_u8 vmovq_n_f32 vmovq_n_f64 vmovq_n_s16 vmovq_n_s32 vmovq_n_s64 vmovq_n_s8 vmovq_n_u16 vmovq_n_u32 vmovq_n_u64 vmovq_n_u8 vcopy_lane Insert vector element from another vector element Click here to expand the API list vcopy_lane_f32 vcopy_lane_f64 vcopy_lane_s16 vcopy_lane_s32 vcopy_lane_s64 vcopy_lane_s8 vcopy_lane_u16 vcopy_lane_u32 vcopy_lane_u64 vcopy_lane_u8 vcopy_laneq_f32 vcopy_laneq_f64 vcopy_laneq_s16 vcopy_laneq_s32 vcopy_laneq_s64 vcopy_laneq_s8 vcopy_laneq_u16 vcopy_laneq_u32 vcopy_laneq_u64 vcopy_laneq_u8 vcopyq_lane_f32 vcopyq_lane_f64 vcopyq_lane_s16 vcopyq_lane_s32 vcopyq_lane_s64 vcopyq_lane_s8 vcopyq_lane_u16 vcopyq_lane_u32 vcopyq_lane_u64 vcopyq_lane_u8 vcopyq_laneq_f32 vcopyq_laneq_f64 vcopyq_laneq_s16 vcopyq_laneq_s32 vcopyq_laneq_s64 vcopyq_laneq_s8 vcopyq_laneq_u16 vcopyq_laneq_u32 vcopyq_laneq_u64 vcopyq_laneq_u8 vcombine Join two vectors into a larger vector Click here to expand the API list vcombine_f16 vcombine_f32 vcombine_f64 vcombine_s16 vcombine_s32 vcombine_s64 vcombine_s8 vcombine_u16 vcombine_u32 vcombine_u64 vcombine_u8 vget_high Get the higher half of the vector Click here to expand the API list vget_high_f32 vget_high_f64 vget_high_s16 vget_high_s32 vget_high_s64 vget_high_s8 vget_high_u16 vget_high_u32 vget_high_u64 vget_high_u8 vget_low Get the lower half of the vector Click here to expand the API list vget_low_f32 vget_low_f64 vget_low_s16 vget_low_s32 vget_low_s64 vget_low_s8 vget_low_u16 vget_low_u32 vget_low_u64 vget_low_u8 Arithmetic Operation Description APIs vadd Add Click here to expand the API list vadd_f32 vadd_f64 vadd_s16 vadd_s32 vadd_s64 vadd_s8 vadd_u16 vadd_u32 vadd_u64 vadd_u8 vaddq_f32 vaddq_f64 vaddq_s16 vaddq_s32 vaddq_s64 vaddq_s8 vaddq_u16 vaddq_u32 vaddq_u64 vaddq_u8 vaddd_s64 vaddd_u64 vaddv Add across vector Click here to expand the API list vaddv_f32 vaddv_s16 vaddv_s32 vaddv_s8 vaddv_u16 vaddv_u32 vaddv_u8 vaddvq_f32 vaddvq_f64 vaddvq_s16 vaddvq_s32 vaddvq_s64 vaddvq_s8 vaddvq_u16 vaddvq_u32 vaddvq_u64 vaddvq_u8 vaddl Add long Click here to expand the API list vaddl_s16 vaddl_s32 vaddl_s8 vaddl_u16 vaddl_u32 vaddl_u8 vaddl_high_s16 vaddl_high_s32 vaddl_high_s8 vaddl_high_u16 vaddl_high_u32 vaddl_high_u8 vaddlv Add long across Vector Click here to expand the API list vaddlv_s16 vaddlv_s32 vaddlv_s8 vaddlv_u16 vaddlv_u32 vaddlv_u8 vaddlvq_s16 vaddlvq_s32 vaddlvq_s8 vaddlvq_u16 vaddlvq_u32 vaddlvq_u8 vaddw Add wide Click here to expand the API list vaddw_s16 vaddw_s32 vaddw_s8 vaddw_u16 vaddw_u32 vaddw_u8 vaddw_high_s16 vaddw_high_s32 vaddw_high_s8 vaddw_high_u16 vaddw_high_u32 vaddw_high_u8 vhadd Halving add Click here to expand the API list vhadd_s16 vhadd_s32 vhadd_s8 vhadd_u16 vhadd_u32 vhadd_u8 vhaddq_s16 vhaddq_s32 vhaddq_s8 vhaddq_u16 vhaddq_u32 vhaddq_u8 vrhadd Rounding halving add Click here to expand the API list vrhadd_s16 vrhadd_s32 vrhadd_s8 vrhadd_u16 vrhadd_u32 vrhadd_u8 vrhaddq_s16 vrhaddq_s32 vrhaddq_s8 vrhaddq_u16 vrhaddq_u32 vrhaddq_u8 vqadd Saturating add Click here to expand the API list vqadd_s16 vqadd_s32 vqadd_s64 vqadd_s8 vqadd_u16 vqadd_u32 vqadd_u64 vqadd_u8 vqaddq_s16 vqaddq_s32 vqaddq_s64 vqaddq_s8 vqaddq_u16 vqaddq_u32 vqaddq_u64 vqaddq_u8 vqaddb_s8 vqaddb_u8 vqaddh_s16 vqaddh_u16 vqadds_s32 vqadds_u32 vqaddd_s64 vqaddd_u64 vsqadd Unsigned saturating Accumulate of signed value Click here to expand the API list vsqadd_u16 vsqadd_u32 vsqadd_u64 vsqadd_u8 vsqaddq_u16 vsqaddq_u32 vsqaddq_u64 vsqaddq_u8 vsqaddb_u8 vsqaddh_u16 vsqadds_u32 vsqaddd_u64 vuqadd Signed saturating Accumulate of unsigned value Click here to expand the API list vuqadd_s16 vuqadd_s32 vuqadd_s64 vuqadd_s8 vuqaddq_s16 vuqaddq_s32 vuqaddq_s64 vuqaddq_s8 vuqaddb_s8 vuqaddh_s16 vuqadds_s32 vuqaddd_s64 vaddhn Add returning high narrow Click here to expand the API list vaddhn_s16 vaddhn_s32 vaddhn_s64 vaddhn_u16 vaddhn_u32 vaddhn_u64 vaddhn_high_s16 vaddhn_high_s32 vaddhn_high_s64 vaddhn_high_u16 vaddhn_high_u32 vaddhn_high_u64 vraddhn Rounding add returning high narrow Click here to expand the API list vraddhn_s16 vraddhn_s32 vraddhn_s64 vraddhn_u16 vraddhn_u32 vraddhn_u64 vraddhn_high_s16 vraddhn_high_s32 vraddhn_high_s64 vraddhn_high_u16 vraddhn_high_u32 vraddhn_high_u64 vpadd Add pairwise (vector) Click here to expand the API list vpadd_f32 vpadd_s16 vpadd_s32 vpadd_s8 vpadd_u16 vpadd_u32 vpadd_u8 vpaddq_f32 vpaddq_f64 vpaddq_s16 vpaddq_s32 vpaddq_s64 vpaddq_s8 vpaddq_u16 vpaddq_u32 vpaddq_u64 vpaddq_u8 vpadds_f32 vpaddd_f64 vpaddd_s64 vpaddd_u64 vpaddl Signed add long pairwise Click here to expand the API list vpaddl_s16 vpaddl_s32 vpaddl_s8 vpaddl_u16 vpaddl_u32 vpaddl_u8 vpaddlq_s16 vpaddlq_s32 vpaddlq_s8 vpaddlq_u16 vpaddlq_u32 vpaddlq_u8 vpadal Signed add and accumulate long pairwise Click here to expand the API list vpadal_s16 vpadal_s32 vpadal_s8 vpadal_u16 vpadal_u32 vpadal_u8 vpadalq_s16 vpadalq_s32 vpadalq_s8 vpadalq_u16 vpadalq_u32 vpadalq_u8 vsub Subtract Click here to expand the API list vsub_f32 vsub_f64 vsub_s16 vsub_s32 vsub_s64 vsub_s8 vsub_u16 vsub_u32 vsub_u64 vsub_u8 vsubq_f32 vsubq_f64 vsubq_s16 vsubq_s32 vsubq_s64 vsubq_s8 vsubq_u16 vsubq_u32 vsubq_u64 vsubq_u8 vsubd_s64 vsubd_u64 vsubl Subtract long Click here to expand the API list vsubl_s16 vsubl_s32 vsubl_s8 vsubl_u16 vsubl_u32 vsubl_u8 vsubl_high_s16 vsubl_high_s32 vsubl_high_s8 vsubl_high_u16 vsubl_high_u32 vsubl_high_u8 vsubw Subtract wide Click here to expand the API list vsubw_s16 vsubw_s32 vsubw_s8 vsubw_u16 vsubw_u32 vsubw_u8 vsubw_high_s16 vsubw_high_s32 vsubw_high_s8 vsubw_high_u16 vsubw_high_u32 vsubw_high_u8 vhsub Halving subtract Click here to expand the API list vhsub_s16 vhsub_s32 vhsub_s8 vhsub_u16 vhsub_u32 vhsub_u8 vhsubq_s16 vhsubq_s32 vhsubq_s8 vhsubq_u16 vhsubq_u32 vhsubq_u8 vqsub Saturating subtract Click here to expand the API list vqsub_s16 vqsub_s32 vqsub_s64 vqsub_s8 vqsub_u16 vqsub_u32 vqsub_u64 vqsub_u8 vqsubq_s16 vqsubq_s32 vqsubq_s64 vqsubq_s8 vqsubq_u16 vqsubq_u32 vqsubq_u64 vqsubq_u8 vqsubb_s8 vqsubb_u8 vqsubh_s16 vqsubh_u16 vqsubs_s32 vqsubs_u32 vqsubd_s64 vqsubd_u64 vsubhn Subtract returning high narrow Click here to expand the API list vsubhn_s16 vsubhn_s32 vsubhn_s64 vsubhn_u16 vsubhn_u32 vsubhn_u64 vsubhn_high_s16 vsubhn_high_s32 vsubhn_high_s64 vsubhn_high_u16 vsubhn_high_u32 vsubhn_high_u64 vrsubhn Rounding subtract returning high narrow Click here to expand the API list vrsubhn_s16 vrsubhn_s32 vrsubhn_s64 vrsubhn_u16 vrsubhn_u32 vrsubhn_u64 vrsubhn_high_s16 vrsubhn_high_s32 vrsubhn_high_s64 vrsubhn_high_u16 vrsubhn_high_u32 vrsubhn_high_u64 Multiply Operation Description APIs vmul Multiply (vector) Click here to expand the API list vmul_f32 vmul_f64 vmul_s16 vmul_s32 vmul_s8 vmul_u16 vmul_u32 vmul_u8 vmulq_f32 vmulq_f64 vmulq_s16 vmulq_s32 vmulq_s8 vmulq_u16 vmulq_u32 vmulq_u8 vmul_n Vector multiply by scalar Click here to expand the API list vmul_n_f32 vmul_n_f64 vmul_n_s16 vmul_n_s32 vmul_n_u16 vmul_n_u32 vmulq_n_f32 vmulq_n_f64 vmulq_n_s16 vmulq_n_s32 vmulq_n_u16 vmulq_n_u32 vmul_lane Multiply (vector) Click here to expand the API list vmul_lane_f32 vmul_lane_f64 vmul_lane_s16 vmul_lane_s32 vmul_lane_u16 vmul_lane_u32 vmul_laneq_f32 vmul_laneq_f64 vmul_laneq_s16 vmul_laneq_s32 vmul_laneq_u16 vmul_laneq_u32 vmulq_lane_f32 vmulq_lane_f64 vmulq_lane_s16 vmulq_lane_s32 vmulq_lane_u16 vmulq_lane_u32 vmulq_laneq_f32 vmulq_laneq_f64 vmulq_laneq_s16 vmulq_laneq_s32 vmulq_laneq_u16 vmulq_laneq_u32 vmuls_lane_f32 vmuls_laneq_f32 vmuld_lane_f64 vmuld_laneq_f64 vmull Multiply long (vector) Click here to expand the API list vmull_s16 vmull_s32 vmull_s8 vmull_u16 vmull_u32 vmull_u8 vmull_high_s16 vmull_high_s32 vmull_high_s8 vmull_high_u16 vmull_high_u32 vmull_high_u8 vmull_n Vector long multiply by scalar Click here to expand the API list vmull_n_s16 vmull_n_s32 vmull_n_u16 vmull_n_u32 vmull_high_n_s16 vmull_high_n_s32 vmull_high_n_u16 vmull_high_n_u32 vmull_lane Multiply long (vector) Click here to expand the API list vmull_lane_s16 vmull_lane_s32 vmull_lane_u16 vmull_lane_u32 vmull_laneq_s16 vmull_laneq_s32 vmull_laneq_u16 vmull_laneq_u32 vmull_high_lane_s16 vmull_high_lane_s32 vmull_high_lane_u16 vmull_high_lane_u32 vmull_high_laneq_s16 vmull_high_laneq_s32 vmull_high_laneq_u16 vmull_high_laneq_u32 vmulx Floating-point multiply extended Click here to expand the API list vmulx_f32 vmulx_f64 vmulx_lane_f32 vmulx_lane_f64 vmulx_laneq_f32 vmulx_laneq_f64 vmulxq_f32 vmulxq_f64 vmulxq_lane_f32 vmulxq_lane_f64 vmulxq_laneq_f32 vmulxq_laneq_f64 vmulxs_f32 vmulxs_lane_f32 vmulxs_laneq_f32 vmulxd_f64 vmulxd_lane_f64 vmulxd_laneq_f64 vmla Multiply-add to accumulator (vector) Click here to expand the API list vmla_f32 vmla_f64 vmla_s16 vmla_s32 vmla_s8 vmla_u16 vmla_u32 vmla_u8 vmlaq_f32 vmlaq_f64 vmlaq_s16 vmlaq_s32 vmlaq_s8 vmlaq_u16 vmlaq_u32 vmlaq_u8 vmla_lane Vector multiply accumulate with scalar Click here to expand the API list vmla_lane_f32 vmla_lane_s16 vmla_lane_s32 vmla_lane_u16 vmla_lane_u32 vmla_laneq_f32 vmla_laneq_s16 vmla_laneq_s32 vmla_laneq_u16 vmla_laneq_u32 vmlaq_lane_f32 vmlaq_lane_s16 vmlaq_lane_s32 vmlaq_lane_u16 vmlaq_lane_u32 vmlaq_laneq_f32 vmlaq_laneq_s16 vmlaq_laneq_s32 vmlaq_laneq_u16 vmlaq_laneq_u32 vmla_n Vector multiply accumulate with scalar Click here to expand the API list vmla_n_f32 vmla_n_s16 vmla_n_s32 vmla_n_u16 vmla_n_u32 vmlaq_n_f32 vmlaq_n_s16 vmlaq_n_s32 vmlaq_n_u16 vmlaq_n_u32 vmlal Multiply-accumulate long (vector) Click here to expand the API list vmlal_s16 vmlal_s32 vmlal_s8 vmlal_u16 vmlal_u32 vmlal_u8 vmlal_high_s16 vmlal_high_s32 vmlal_high_s8 vmlal_high_u16 vmlal_high_u32 vmlal_high_u8 vmlal_lane Multiply-accumulate long with scalar Click here to expand the API list vmlal_lane_s16 vmlal_lane_s32 vmlal_lane_u16 vmlal_lane_u32 vmlal_laneq_s16 vmlal_laneq_s32 vmlal_laneq_u16 vmlal_laneq_u32 vmlal_high_lane_s16 vmlal_high_lane_s32 vmlal_high_lane_u16 vmlal_high_lane_u32 vmlal_high_laneq_s16 vmlal_high_laneq_s32 vmlal_high_laneq_u16 vmlal_high_laneq_u32 vmlal_n Multiply-accumulate long with scalar Click here to expand the API list vmlal_n_s16 vmlal_n_s32 vmlal_n_u16 vmlal_n_u32 vmlal_high_n_s16 vmlal_high_n_s32 vmlal_high_n_u16 vmlal_high_n_u32 vmls Multiply-subtract from accumulator (vector) Click here to expand the API list vmls_f32 vmls_f64 vmls_s16 vmls_s32 vmls_s8 vmls_u16 vmls_u32 vmls_u8 vmlsq_f32 vmlsq_f64 vmlsq_s16 vmlsq_s32 vmlsq_s8 vmlsq_u16 vmlsq_u32 vmlsq_u8 vmls_lane Vector multiply subtract with scalar Click here to expand the API list vmls_lane_f32 vmls_lane_s16 vmls_lane_s32 vmls_lane_u16 vmls_lane_u32 vmls_laneq_f32 vmls_laneq_s16 vmls_laneq_s32 vmls_laneq_u16 vmls_laneq_u32 vmlsq_lane_f32 vmlsq_lane_s16 vmlsq_lane_s32 vmlsq_lane_u16 vmlsq_lane_u32 vmlsq_laneq_f32 vmlsq_laneq_s16 vmlsq_laneq_s32 vmlsq_laneq_u16 vmlsq_laneq_u32 vmls_n Vector multiply subtract with scalar Click here to expand the API list vmls_n_f32 vmls_n_s16 vmls_n_s32 vmls_n_u16 vmls_n_u32 vmlsq_n_f32 vmlsq_n_s16 vmlsq_n_s32 vmlsq_n_u16 vmlsq_n_u32 vmlsl Multiply-subtract long (vector) Click here to expand the API list vmlsl_s16 vmlsl_s32 vmlsl_s8 vmlsl_u16 vmlsl_u32 vmlsl_u8 vmlsl_high_s16 vmlsl_high_s32 vmlsl_high_s8 vmlsl_high_u16 vmlsl_high_u32 vmlsl_high_u8 vmlsl_lane Vector multiply-subtract long with scalar Click here to expand the API list vmlsl_lane_s16 vmlsl_lane_s32 vmlsl_lane_u16 vmlsl_lane_u32 vmlsl_laneq_s16 vmlsl_laneq_s32 vmlsl_laneq_u16 vmlsl_laneq_u32 vmlsl_high_lane_s16 vmlsl_high_lane_s32 vmlsl_high_lane_u16 vmlsl_high_lane_u32 vmlsl_high_laneq_s16 vmlsl_high_laneq_s32 vmlsl_high_laneq_u16 vmlsl_high_laneq_u32 vmlsl_n Vector multiply-subtract long with scalar Click here to expand the API list vmlsl_n_s16 vmlsl_n_s32 vmlsl_n_u16 vmlsl_n_u32 vmlsl_high_n_s16 vmlsl_high_n_s32 vmlsl_high_n_u16 vmlsl_high_n_u32 vqdmull Signed saturating doubling multiply long Click here to expand the API list vqdmull_s16 vqdmull_s32 vqdmullh_s16 vqdmulls_s32 vqdmull_high_s16 vqdmull_high_s32 vqdmull_lane Vector saturating doubling multiply long with scalar Click here to expand the API list vqdmull_lane_s16 vqdmull_lane_s32 vqdmull_laneq_s16 vqdmull_laneq_s32 vqdmullh_lane_s16 vqdmullh_laneq_s16 vqdmulls_lane_s32 vqdmulls_laneq_s32 vqdmull_high_lane_s16 vqdmull_high_lane_s32 vqdmull_high_laneq_s16 vqdmull_high_laneq_s32 vqdmull_n Vector saturating doubling multiply long with scalar Click here to expand the API list vqdmull_n_s16 vqdmull_n_s32 vqdmull_high_n_s16 vqdmull_high_n_s32 vqdmulh Saturating doubling multiply returning high half Click here to expand the API list vqdmulh_s16 vqdmulh_s32 vqdmulhq_s16 vqdmulhq_s32 vqdmulhh_s16 vqdmulhs_s32 vqdmulh_lane Vector saturating doubling multiply high by scalar Click here to expand the API list vqdmulh_lane_s16 vqdmulh_lane_s32 vqdmulh_laneq_s16 vqdmulh_laneq_s32 vqdmulhq_lane_s16 vqdmulhq_lane_s32 vqdmulhq_laneq_s16 vqdmulhq_laneq_s32 vqdmulhh_lane_s16 vqdmulhh_laneq_s16 vqdmulhs_lane_s32 vqdmulhs_laneq_s32 vqdmulh_n Vector saturating doubling multiply high by scalar Click here to expand the API list vqdmulh_n_s16 vqdmulh_n_s32 vqdmulhq_n_s16 vqdmulhq_n_s32 vqrdmulh Saturating rounding doubling multiply returning high half Click here to expand the API list vqrdmulh_s16 vqrdmulh_s32 vqrdmulhq_s16 vqrdmulhq_s32 vqrdmulhh_s16 vqrdmulhs_s32 vqrdmulh_lane Vector saturating rounding doubling multiply high with scalar Click here to expand the API list vqrdmulh_lane_s16 vqrdmulh_lane_s32 vqrdmulh_laneq_s16 vqrdmulh_laneq_s32 vqrdmulhq_lane_s16 vqrdmulhq_lane_s32 vqrdmulhq_laneq_s16 vqrdmulhq_laneq_s32 vqrdmulhh_lane_s16 vqrdmulhh_laneq_s16 vqrdmulhs_lane_s32 vqrdmulhs_laneq_s32 vqrdmulh_n Vector saturating rounding doubling multiply high with scalar Click here to expand the API list vqrdmulh_n_s16 vqrdmulh_n_s32 vqrdmulhq_n_s16 vqrdmulhq_n_s32 vqdmlal Saturating doubling multiply-add long Click here to expand the API list vqdmlal_s16 vqdmlal_s32 vqdmlalh_s16 vqdmlals_s32 vqdmlal_high_s16 vqdmlal_high_s32 vqdmlal_lane Vector saturating doubling multiply-accumulate long with scalar Click here to expand the API list vqdmlal_lane_s16 vqdmlal_lane_s32 vqdmlal_laneq_s16 vqdmlal_laneq_s32 vqdmlalh_lane_s16 vqdmlalh_laneq_s16 vqdmlals_lane_s32 vqdmlals_laneq_s32 vqdmlal_high_lane_s16 vqdmlal_high_lane_s32 vqdmlal_high_laneq_s16 vqdmlal_high_laneq_s32 vqdmlal_n Vector saturating doubling multiply-accumulate long with scalar Click here to expand the API list vqdmlal_n_s16 vqdmlal_n_s32 vqdmlal_high_n_s16 vqdmlal_high_n_s32 vqdmlsl Signed saturating doubling multiply-subtract long Click here to expand the API list vqdmlsl_s16 vqdmlsl_s32 vqdmlslh_s16 vqdmlsls_s32 vqdmlsl_high_s16 vqdmlsl_high_s32 vqdmlsl_lane Vector saturating doubling multiply-subtract long with scalar Click here to expand the API list vqdmlsl_lane_s16 vqdmlsl_lane_s32 vqdmlsl_laneq_s16 vqdmlsl_laneq_s32 vqdmlslh_lane_s16 vqdmlslh_laneq_s16 vqdmlsls_lane_s32 vqdmlsls_laneq_s32 vqdmlsl_high_lane_s16 vqdmlsl_high_lane_s32 vqdmlsl_high_laneq_s16 vqdmlsl_high_laneq_s32 vqdmlsl_n Vector saturating doubling multiply-subtract long with scalar Click here to expand the API list vqdmlsl_n_s16 vqdmlsl_n_s32 vqdmlsl_high_n_s16 vqdmlsl_high_n_s32 vqrdmlah Saturating rounding doubling multiply accumulate returning high half (vector) Click here to expand the API list vqrdmlah_s16 vqrdmlah_s32 vqrdmlahq_s16 vqrdmlahq_s32 vqrdmlahh_s16 vqrdmlahs_s32 vqrdmlah_lane Saturating rounding doubling multiply accumulate returning high half (vector) Click here to expand the API list vqrdmlah_lane_s16 vqrdmlah_lane_s32 vqrdmlah_laneq_s16 vqrdmlah_laneq_s32 vqrdmlahq_lane_s16 vqrdmlahq_lane_s32 vqrdmlahq_laneq_s16 vqrdmlahq_laneq_s32 vqrdmlahh_lane_s16 vqrdmlahh_laneq_s16 vqrdmlahs_lane_s32 vqrdmlsh Saturating rounding doubling multiply subtract returning high half (vector) Click here to expand the API list vqrdmlsh_s16 vqrdmlsh_s32 vqrdmlshq_s16 vqrdmlshq_s32 vqrdmlshh_s16 vqrdmlshs_s32 vqrdmlsh_lane Saturating rounding doubling multiply subtract returning high half (vector) Click here to expand the API list vqrdmlsh_lane_s16 vqrdmlsh_lane_s32 vqrdmlsh_laneq_s16 vqrdmlsh_laneq_s32 vqrdmlshq_lane_s16 vqrdmlshq_lane_s32 vqrdmlshq_laneq_s16 vqrdmlshq_laneq_s32 vqrdmlshh_lane_s16 vqrdmlshh_laneq_s16 vqrdmlshs_lane_s32 vfma Floating-point fused multiply-add to accumulator (vector) Click here to expand the API list vfma_f32 vfma_f64 vfmaq_f32 vfmaq_f64 vfma_n Floating-point fused multiply-add to accumulator (vector) Click here to expand the API list vfma_n_f32 vfma_n_f64 vfmaq_n_f32 vfmaq_n_f64 vfma_lane Floating-point fused multiply-add to accumulator (vector) Click here to expand the API list vfma_lane_f32 vfma_lane_f64 vfma_laneq_f32 vfma_laneq_f64 vfmaq_lane_f32 vfmaq_lane_f64 vfmaq_laneq_f32 vfmaq_laneq_f64 vfmas_lane_f32 vfmas_laneq_f32 vfmad_lane_f64 vfmad_laneq_f64 vfms Floating-point fused multiply-subtract from accumulator (vector) Click here to expand the API list vfms_f32 vfms_f64 vfmsq_f32 vfmsq_f64 vfms_n Floating-point fused multiply-subtract from accumulator (vector) Click here to expand the API list vfms_n_f32 vfms_n_f64 vfmsq_n_f32 vfmsq_n_f64 vfms_lane Floating-point fused multiply-subtract from accumulator (vector) Click here to expand the API list vfms_lane_f32 vfms_lane_f64 vfms_laneq_f32 vfms_laneq_f64 vfmsd_lane_f64 vfmsd_laneq_f64 vfmsq_lane_f32 vfmsq_lane_f64 vfmsq_laneq_f32 vfmsq_laneq_f64 vfmss_lane_f32 vfmss_laneq_f32 vdiv Floating-point divide (vector) Click here to expand the API list vdiv_f32 vdiv_f64 vdivq_f32 vdivq_f64 Data processing Operation Description APIs vpmax Maximum pairwise Click here to expand the API list vpmax_f32 vpmax_s16 vpmax_s32 vpmax_s8 vpmax_u16 vpmax_u32 vpmax_u8 vpmaxq_f32 vpmaxq_f64 vpmaxq_s16 vpmaxq_s32 vpmaxq_s8 vpmaxq_u16 vpmaxq_u32 vpmaxq_u8 vpmaxs_f32 vpmaxqd_f64 vpmaxnm Floating-point maximum number pairwise (vector) Click here to expand the API list vpmaxnm_f32 vpmaxnmq_f32 vpmaxnmq_f64 vpmaxnms_f32 vpmaxnmqd_f64 vpmin Minimum pairwise Click here to expand the API list vpmin_f32 vpmin_s16 vpmin_s32 vpmin_s8 vpmin_u16 vpmin_u32 vpmin_u8 vpminq_f32 vpminq_f64 vpminq_s16 vpminq_s32 vpminq_s8 vpminq_u16 vpminq_u32 vpminq_u8 vpmins_f32 vpminqd_f64 vpminnm Floating-point minimum number pairwise (vector) Click here to expand the API list vpminnm_f32 vpminnmq_f32 vpminnmq_f64 vpminnms_f32 vpminnmqd_f64 vabd Absolute difference Click here to expand the API list vabd_f32 vabd_f64 vabd_s16 vabd_s32 vabd_s8 vabd_u16 vabd_u32 vabd_u8 vabdq_f32 vabdq_f64 vabdq_s16 vabdq_s32 vabdq_s8 vabdq_u16 vabdq_u32 vabdq_u8 vabds_f32 vabdd_f64 vabdl Absolute difference long Click here to expand the API list vabdl_s16 vabdl_s32 vabdl_s8 vabdl_u16 vabdl_u32 vabdl_u8 vabdl_high_s16 vabdl_high_s32 vabdl_high_s8 vabdl_high_u16 vabdl_high_u32 vabdl_high_u8 vaba Absolute difference and accumulate Click here to expand the API list vaba_s16 vaba_s32 vaba_s8 vaba_u16 vaba_u32 vaba_u8 vabaq_s16 vabaq_s32 vabaq_s8 vabaq_u16 vabaq_u32 vabaq_u8 vabal Absolute difference and accumulate long Click here to expand the API list vabal_s16 vabal_s32 vabal_s8 vabal_u16 vabal_u32 vabal_u8 vabal_high_s16 vabal_high_s32 vabal_high_s8 vabal_high_u16 vabal_high_u32 vabal_high_u8 vmax Maximum Click here to expand the API list vmax_f32 vmax_f64 vmax_s16 vmax_s32 vmax_s8 vmax_u16 vmax_u32 vmax_u8 vmaxq_f32 vmaxq_f64 vmaxq_s16 vmaxq_s32 vmaxq_s8 vmaxq_u16 vmaxq_u32 vmaxq_u8 vmaxnm Floating-point maximum number Click here to expand the API list vmaxnm_f32 vmaxnm_f64 vmaxnmq_f32 vmaxnmq_f64 vmaxnmv_f32 vmaxnmvq_f32 vmaxnmvq_f64 vmaxv Maximum across vector Click here to expand the API list vmaxv_f32 vmaxv_s16 vmaxv_s32 vmaxv_s8 vmaxv_u16 vmaxv_u32 vmaxv_u8 vmaxvq_f32 vmaxvq_f64 vmaxvq_s16 vmaxvq_s32 vmaxvq_s8 vmaxvq_u16 vmaxvq_u32 vmaxvq_u8 vmin Minimum Click here to expand the API list vmin_f32 vmin_f64 vmin_s16 vmin_s32 vmin_s8 vmin_u16 vmin_u32 vmin_u8 vminq_f32 vminq_f64 vminq_s16 vminq_s32 vminq_s8 vminq_u16 vminq_u32 vminq_u8 vminnm Floating-point minimum number Click here to expand the API list vminnm_f32 vminnm_f64 vminnmq_f32 vminnmq_f64 vminnmv_f32 vminnmvq_f32 vminnmvq_f64 vminv Minimum across vector Click here to expand the API list vminv_f32 vminv_s16 vminv_s32 vminv_s8 vminv_u16 vminv_u32 vminv_u8 vminvq_f32 vminvq_f64 vminvq_s16 vminvq_s32 vminvq_s8 vminvq_u16 vminvq_u32 vminvq_u8 vabs Absolute value Click here to expand the API list vabs_f32 vabs_f64 vabs_s16 vabs_s32 vabs_s64 vabs_s8 vabsq_f32 vabsq_f64 vabsq_s16 vabsq_s32 vabsq_s64 vabsq_s8 vabsd_s64 vqabs Saturating absolute value Click here to expand the API list vqabs_s16 vqabs_s32 vqabs_s64 vqabs_s8 vqabsq_s16 vqabsq_s32 vqabsq_s64 vqabsq_s8 vqabsb_s8 vqabsh_s16 vqabss_s32 vqabsd_s64 vneg Negate Click here to expand the API list vneg_f32 vneg_f64 vneg_s16 vneg_s32 vneg_s64 vneg_s8 vnegd_s64 vnegq_f32 vnegq_f64 vnegq_s16 vnegq_s32 vnegq_s64 vnegq_s8 vqneg Saturating negate Click here to expand the API list vqneg_s16 vqneg_s32 vqneg_s64 vqneg_s8 vqnegq_s16 vqnegq_s32 vqnegq_s64 vqnegq_s8 vqnegb_s8 vqnegh_s16 vqnegs_s32 vqnegd_s64 vcls Count leading sign bits Click here to expand the API list vcls_s16 vcls_s32 vcls_s8 vclsq_s16 vclsq_s32 vclsq_s8 vclz Count leading zero bits Click here to expand the API list vclz_s16 vclz_s32 vclz_s8 vclz_u16 vclz_u32 vclz_u8 vclzq_s16 vclzq_s32 vclzq_s8 vclzq_u16 vclzq_u32 vclzq_u8 vcnt Population count per byte Click here to expand the API list vcnt_s8 vcnt_u8 vcntq_s8 vcntq_u8 vrecpe Reciprocal estimate Click here to expand the API list vrecpe_f32 vrecpe_f64 vrecpe_u32 vrecpeq_f32 vrecpeq_f64 vrecpeq_u32 vrecpes_f32 vrecped_f64 vrecps Reciprocal step Click here to expand the API list vrecps_f32 vrecps_f64 vrecpsq_f32 vrecpsq_f64 vrecpss_f32 vrecpsd_f64 vrecpx Floating-point reciprocal exponent Click here to expand the API list vrecpxd_f64 vrecpxs_f32 vrsqrte Reciprocal square root estimate Click here to expand the API list vrsqrte_f32 vrsqrte_f64 vrsqrte_u32 vrsqrteq_f32 vrsqrteq_f64 vrsqrteq_u32 vrsqrtes_f32 vrsqrted_f64 vrsqrts Reciprocal square root step Click here to expand the API list vrsqrts_f32 vrsqrts_f64 vrsqrtsq_f32 vrsqrtsq_f64 vrsqrtss_f32 vrsqrtsd_f64 vmovn Extract narrow Click here to expand the API list vmovn_s16 vmovn_s32 vmovn_s64 vmovn_u16 vmovn_u32 vmovn_u64 vmovn_high_s16 vmovn_high_s32 vmovn_high_s64 vmovn_high_u16 vmovn_high_u32 vmovn_high_u64 vmovl Extract long Click here to expand the API list vmovl_s16 vmovl_s32 vmovl_s8 vmovl_u16 vmovl_u32 vmovl_u8 vmovl_high_s16 vmovl_high_s32 vmovl_high_s8 vmovl_high_u16 vmovl_high_u32 vmovl_high_u8 vqmovn Saturating extract narrow Click here to expand the API list vqmovn_s16 vqmovn_s32 vqmovn_s64 vqmovn_u16 vqmovn_u32 vqmovn_u64 vqmovn_high_s16 vqmovn_high_s32 vqmovn_high_s64 vqmovn_high_u16 vqmovn_high_u32 vqmovn_high_u64 vqmovnh_s16 vqmovnh_u16 vqmovns_s32 vqmovns_u32 vqmovnd_s64 vqmovnd_u64 vqmovun Signed saturating extract unsigned narrow Click here to expand the API list vqmovun_s16 vqmovun_s32 vqmovun_s64 vqmovun_high_s16 vqmovun_high_s32 vqmovun_high_s64 vqmovunh_s16 vqmovuns_s32 vqmovund_s64 Comparison Operation Description APIs vceq Compare bitwise equal Click here to expand the API list vceq_f32 vceq_f64 vceq_s16 vceq_s32 vceq_s64 vceq_s8 vceq_u16 vceq_u32 vceq_u64 vceq_u8 vceqq_f32 vceqq_f64 vceqq_s16 vceqq_s32 vceqq_s64 vceqq_s8 vceqq_u16 vceqq_u32 vceqq_u64 vceqq_u8 vceqs_f32 vceqd_f64 vceqd_s64 vceqd_u64 vceqz Compare bitwise equal to zero Click here to expand the API list vceqz_f32 vceqz_f64 vceqz_s16 vceqz_s32 vceqz_s64 vceqz_s8 vceqz_u16 vceqz_u32 vceqz_u64 vceqz_u8 vceqzq_f32 vceqzq_f64 vceqzq_s16 vceqzq_s32 vceqzq_s64 vceqzq_s8 vceqzq_u16 vceqzq_u32 vceqzq_u64 vceqzq_u8 vceqzs_f32 vceqzd_f64 vceqzd_s64 vceqzd_u64 vcge Compare greater than or equal Click here to expand the API list vcge_f32 vcge_f64 vcge_s16 vcge_s32 vcge_s64 vcge_s8 vcge_u16 vcge_u32 vcge_u64 vcge_u8 vcgeq_f32 vcgeq_f64 vcgeq_s16 vcgeq_s32 vcgeq_s64 vcgeq_s8 vcgeq_u16 vcgeq_u32 vcgeq_u64 vcgeq_u8 vcges_f32 vcged_f64 vcged_s64 vcged_u64 vcgez Compare greater than or equal to zero Click here to expand the API list vcgez_f32 vcgez_f64 vcgez_s16 vcgez_s32 vcgez_s64 vcgez_s8 vcgezq_f32 vcgezq_f64 vcgezq_s16 vcgezq_s32 vcgezq_s64 vcgezq_s8 vcgezs_f32 vcgezd_f64 vcgezd_s64 vcle Compare less than or equal Click here to expand the API list vcle_f32 vcle_f64 vcle_s16 vcle_s32 vcle_s64 vcle_s8 vcle_u16 vcle_u32 vcle_u64 vcle_u8 vcleq_f32 vcleq_f64 vcleq_s16 vcleq_s32 vcleq_s64 vcleq_s8 vcleq_u16 vcleq_u32 vcleq_u64 vcleq_u8 vcles_f32 vcled_f64 vcled_s64 vcled_u64 vclez Compare less than or equal to zero Click here to expand the API list vclez_f32 vclez_f64 vclez_s16 vclez_s32 vclez_s64 vclez_s8 vclezq_f32 vclezq_f64 vclezq_s16 vclezq_s32 vclezq_s64 vclezq_s8 vclezs_f32 vclezd_f64 vclezd_s64 vcgt Compare greater than Click here to expand the API list vcgt_f32 vcgt_f64 vcgt_s16 vcgt_s32 vcgt_s64 vcgt_s8 vcgt_u16 vcgt_u32 vcgt_u64 vcgt_u8 vcgtq_f32 vcgtq_f64 vcgtq_s16 vcgtq_s32 vcgtq_s64 vcgtq_s8 vcgtq_u16 vcgtq_u32 vcgtq_u64 vcgtq_u8 vcgts_f32 vcgtd_f64 vcgtd_s64 vcgtd_u64 vcgtz Compare greater than zero Click here to expand the API list vcgtz_f32 vcgtz_f64 vcgtz_s16 vcgtz_s32 vcgtz_s64 vcgtz_s8 vcgtzq_f32 vcgtzq_f64 vcgtzq_s16 vcgtzq_s32 vcgtzq_s64 vcgtzq_s8 vcgtzs_f32 vcgtzd_f64 vcgtzd_s64 vclt Compare less than Click here to expand the API list vclt_f32 vclt_f64 vclt_s16 vclt_s32 vclt_s64 vclt_s8 vclt_u16 vclt_u32 vclt_u64 vclt_u8 vcltq_f32 vcltq_f64 vcltq_s16 vcltq_s32 vcltq_s64 vcltq_s8 vcltq_u16 vcltq_u32 vcltq_u64 vcltq_u8 vclts_f32 vcltd_f64 vcltd_s64 vcltd_u64 vcltz Compare less than zero Click here to expand the API list vcltz_f32 vcltz_f64 vcltz_s16 vcltz_s32 vcltz_s64 vcltz_s8 vcltzq_f32 vcltzq_f64 vcltzq_s16 vcltzq_s32 vcltzq_s64 vcltzq_s8 vcltzs_f32 vcltzd_f64 vcltzd_s64 vcage Floating-point absolute compare greater than or equal Click here to expand the API list vcage_f32 vcage_f64 vcageq_f32 vcageq_f64 vcages_f32 vcaged_f64 vcagt Floating-point absolute compare greater than Click here to expand the API list vcagt_f32 vcagt_f64 vcagtq_f32 vcagtq_f64 vcagts_f32 vcagtd_f64 vcale Floating-point absolute compare less than or equal Click here to expand the API list vcale_f32 vcale_f64 vcaleq_f32 vcaleq_f64 vcales_f32 vcaled_f64 vcalt Floating-point absolute compare less than Click here to expand the API list vcalt_f32 vcalt_f64 vcaltq_f32 vcaltq_f64 vcalts_f32 vcaltd_f64 Bitwise Operation Description APIs vtst Test bits nonzero Click here to expand the API list vtst_s16 vtst_s32 vtst_s64 vtst_s8 vtst_u16 vtst_u32 vtst_u64 vtst_u8 vtstd_s64 vtstd_u64 vtstq_s16 vtstq_s32 vtstq_s64 vtstq_s8 vtstq_u16 vtstq_u32 vtstq_u64 vtstq_u8 vmvn Bitwise NOT Click here to expand the API list vmvn_s16 vmvn_s32 vmvn_s8 vmvn_u16 vmvn_u32 vmvn_u8 vmvnq_s16 vmvnq_s32 vmvnq_s8 vmvnq_u16 vmvnq_u32 vmvnq_u8 vand Bitwise AND Click here to expand the API list vand_s16 vand_s32 vand_s64 vand_s8 vand_u16 vand_u32 vand_u64 vand_u8 vandq_s16 vandq_s32 vandq_s64 vandq_s8 vandq_u16 vandq_u32 vandq_u64 vandq_u8 vorr Bitwise OR Click here to expand the API list vorr_s16 vorr_s32 vorr_s64 vorr_s8 vorr_u16 vorr_u32 vorr_u64 vorr_u8 vorrq_s16 vorrq_s32 vorrq_s64 vorrq_s8 vorrq_u16 vorrq_u32 vorrq_u64 vorrq_u8 vorn Bitwise OR NOT Click here to expand the API list vorn_s16 vorn_s32 vorn_s64 vorn_s8 vorn_u16 vorn_u32 vorn_u64 vorn_u8 vornq_s16 vornq_s32 vornq_s64 vornq_s8 vornq_u16 vornq_u32 vornq_u64 vornq_u8 veor Bitwise exclusive OR Click here to expand the API list veor_s16 veor_s32 veor_s64 veor_s8 veor_u16 veor_u32 veor_u64 veor_u8 veorq_s16 veorq_s32 veorq_s64 veorq_s8 veorq_u16 veorq_u32 veorq_u64 veorq_u8 vbic Bitwise bit clear Click here to expand the API list vbic_s16 vbic_s32 vbic_s64 vbic_s8 vbic_u16 vbic_u32 vbic_u64 vbic_u8 vbicq_s16 vbicq_s32 vbicq_s64 vbicq_s8 vbicq_u16 vbicq_u32 vbicq_u64 vbicq_u8 vbsl Bitwise select Click here to expand the API list vbsl_f32 vbsl_f64 vbsl_s16 vbsl_s32 vbsl_s64 vbsl_s8 vbsl_u16 vbsl_u32 vbsl_u64 vbsl_u8 vbslq_f32 vbslq_f64 vbslq_s16 vbslq_s32 vbslq_s64 vbslq_s8 vbslq_u16 vbslq_u32 vbslq_u64 vbslq_u8 Shift Operation Description APIs vshl Shift left (register) Click here to expand the API list vshl_s16 vshl_s32 vshl_s64 vshl_s8 vshl_u16 vshl_u32 vshl_u64 vshl_u8 vshlq_s16 vshlq_s32 vshlq_s64 vshlq_s8 vshlq_u16 vshlq_u32 vshlq_u64 vshlq_u8 vshld_s64 vshld_u64 vqshl Saturating shift left (register) Click here to expand the API list vqshl_s16 vqshl_s32 vqshl_s64 vqshl_s8 vqshl_u16 vqshl_u32 vqshl_u64 vqshl_u8 vqshlq_s16 vqshlq_s32 vqshlq_s64 vqshlq_s8 vqshlq_u16 vqshlq_u32 vqshlq_u64 vqshlq_u8 vqshlb_s8 vqshlb_u8 vqshlh_s16 vqshlh_u16 vqshls_s32 vqshls_u32 vqshld_s64 vqshld_u64 vqshl_n Saturating shift left (immediate) Click here to expand the API list vqshl_n_s16 vqshl_n_s32 vqshl_n_s64 vqshl_n_s8 vqshl_n_u16 vqshl_n_u32 vqshl_n_u64 vqshl_n_u8 vqshlq_n_s16 vqshlq_n_s32 vqshlq_n_s64 vqshlq_n_s8 vqshlq_n_u16 vqshlq_n_u32 vqshlq_n_u64 vqshlq_n_u8 vqshlb_n_s8 vqshlb_n_u8 vqshlh_n_s16 vqshlh_n_u16 vqshls_n_s32 vqshls_n_u32 vqshld_n_s64 vqshld_n_u64 vqshlu_n Saturating shift left unsigned (immediate) Click here to expand the API list vqshlu_n_s16 vqshlu_n_s32 vqshlu_n_s64 vqshlu_n_s8 vqshlub_n_s8 vqshlud_n_s64 vqshluh_n_s16 vqshluq_n_s16 vqshluq_n_s32 vqshluq_n_s64 vqshluq_n_s8 vqshlus_n_s32 vrshl Rounding shift left (register) Click here to expand the API list vrshl_s16 vrshl_s32 vrshl_s64 vrshl_s8 vrshl_u16 vrshl_u32 vrshl_u64 vrshl_u8 vrshlq_s16 vrshlq_s32 vrshlq_s64 vrshlq_s8 vrshlq_u16 vrshlq_u32 vrshlq_u64 vrshlq_u8 vrshld_s64 vrshld_u64 vqrshl Saturating rounding shift left (register) Click here to expand the API list vqrshl_s16 vqrshl_s32 vqrshl_s64 vqrshl_s8 vqrshl_u16 vqrshl_u32 vqrshl_u64 vqrshl_u8 vqrshlq_s16 vqrshlq_s32 vqrshlq_s64 vqrshlq_s8 vqrshlq_u16 vqrshlq_u32 vqrshlq_u64 vqrshlq_u8 vqrshlb_s8 vqrshlb_u8 vqrshlh_s16 vqrshlh_u16 vqrshls_s32 vqrshls_u32 vqrshld_s64 vqrshld_u64 vshl_n Shift left (immediate) Click here to expand the API list vshl_n_s16 vshl_n_s32 vshl_n_s64 vshl_n_s8 vshl_n_u16 vshl_n_u32 vshl_n_u64 vshl_n_u8 vshlq_n_s16 vshlq_n_s32 vshlq_n_s64 vshlq_n_s8 vshlq_n_u16 vshlq_n_u32 vshlq_n_u64 vshlq_n_u8 vshld_n_s64 vshld_n_u64 vshll_n Shift left long (immediate) Click here to expand the API list vshll_n_s16 vshll_n_s32 vshll_n_s8 vshll_n_u16 vshll_n_u32 vshll_n_u8 vshll_high_n_s16 vshll_high_n_s32 vshll_high_n_s8 vshll_high_n_u16 vshll_high_n_u32 vshll_high_n_u8 vshr_n Shift right (immediate) Click here to expand the API list vshr_n_s16 vshr_n_s32 vshr_n_s64 vshr_n_s8 vshr_n_u16 vshr_n_u32 vshr_n_u64 vshr_n_u8 vshrq_n_s16 vshrq_n_s32 vshrq_n_s64 vshrq_n_s8 vshrq_n_u16 vshrq_n_u32 vshrq_n_u64 vshrq_n_u8 vshrd_n_s64 vshrd_n_u64 vrshr_n Rounding right left (register) Click here to expand the API list vrshr_n_s16 vrshr_n_s32 vrshr_n_s64 vrshr_n_s8 vrshr_n_u16 vrshr_n_u32 vrshr_n_u64 vrshr_n_u8 vrshrq_n_s16 vrshrq_n_s32 vrshrq_n_s64 vrshrq_n_s8 vrshrq_n_u16 vrshrq_n_u32 vrshrq_n_u64 vrshrq_n_u8 vrshrd_n_s64 vrshrd_n_u64 vshrn_n Shift right narrow (immediate) Click here to expand the API list vshrn_n_s16 vshrn_n_s32 vshrn_n_s64 vshrn_n_u16 vshrn_n_u32 vshrn_n_u64 vshrn_high_n_s16 vshrn_high_n_s32 vshrn_high_n_s64 vshrn_high_n_u16 vshrn_high_n_u32 vshrn_high_n_u64 vqshrun_n Signed saturating shift right unsigned narrow (immediate) Click here to expand the API list vqshrun_n_s16 vqshrun_n_s32 vqshrun_n_s64 vqshrunh_n_s16 vqshruns_n_s32 vqshrund_n_s64 vqshrun_high_n_s16 vqshrun_high_n_s32 vqshrun_high_n_s64 vqrshrun_n Signed saturating rounded shift right unsigned narrow (immediate) Click here to expand the API list vqrshrun_n_s16 vqrshrun_n_s32 vqrshrun_n_s64 vqrshrunh_n_s16 vqrshruns_n_s32 vqrshrund_n_s64 vqrshrun_high_n_s16 vqrshrun_high_n_s32 vqrshrun_high_n_s64 vqshrn_n Signed saturating shift right narrow (immediate) Click here to expand the API list vqshrn_n_s16 vqshrn_n_s32 vqshrn_n_s64 vqshrn_n_u16 vqshrn_n_u32 vqshrn_n_u64 vqshrnh_n_s16 vqshrnh_n_u16 vqshrns_n_s32 vqshrns_n_u32 vqshrnd_n_s64 vqshrnd_n_u64 vqshrn_high_n_s16 vqshrn_high_n_s32 vqshrn_high_n_s64 vqshrn_high_n_u16 vqshrn_high_n_u32 vqshrn_high_n_u64 vrshrn_n Rounding shift right narrow (immediate) Click here to expand the API list vrshrn_n_s16 vrshrn_n_s32 vrshrn_n_s64 vrshrn_n_u16 vrshrn_n_u32 vrshrn_n_u64 vrshrn_high_n_s16 vrshrn_high_n_s32 vrshrn_high_n_s64 vrshrn_high_n_u16 vrshrn_high_n_u32 vrshrn_high_n_u64 vqrshrn_n Signed saturating rounded shift right narrow (immediate) Click here to expand the API list vqrshrn_n_s16 vqrshrn_n_s32 vqrshrn_n_s64 vqrshrn_n_u16 vqrshrn_n_u32 vqrshrn_n_u64 vqrshrnh_n_s16 vqrshrnh_n_u16 vqrshrns_n_s32 vqrshrns_n_u32 vqrshrnd_n_s64 vqrshrnd_n_u64 vqrshrn_high_n_s16 vqrshrn_high_n_s32 vqrshrn_high_n_s64 vqrshrn_high_n_u16 vqrshrn_high_n_u32 vqrshrn_high_n_u64 vsra_n Signed shift right and accumulate (immediate) Click here to expand the API list vsra_n_s16 vsra_n_s32 vsra_n_s64 vsra_n_s8 vsra_n_u16 vsra_n_u32 vsra_n_u64 vsra_n_u8 vsraq_n_s16 vsraq_n_s32 vsraq_n_s64 vsraq_n_s8 vsraq_n_u16 vsraq_n_u32 vsraq_n_u64 vsraq_n_u8 vsrad_n_s64 vsrad_n_u64 vrsra_n Signed rounding shift right and accumulate (immediate) Click here to expand the API list vrsra_n_s16 vrsra_n_s32 vrsra_n_s64 vrsra_n_s8 vrsra_n_u16 vrsra_n_u32 vrsra_n_u64 vrsra_n_u8 vrsraq_n_s16 vrsraq_n_s32 vrsraq_n_s64 vrsraq_n_s8 vrsraq_n_u16 vrsraq_n_u32 vrsraq_n_u64 vrsraq_n_u8 vrsrad_n_s64 vrsrad_n_u64 vsri_n Shift right and insert (immediate) Click here to expand the API list vsri_n_s16 vsri_n_s32 vsri_n_s64 vsri_n_s8 vsri_n_u16 vsri_n_u32 vsri_n_u64 vsri_n_u8 vsriq_n_s16 vsriq_n_s32 vsriq_n_s64 vsriq_n_s8 vsriq_n_u16 vsriq_n_u32 vsriq_n_u64 vsriq_n_u8 vsrid_n_s64 vsrid_n_u64 vsli_n Shift left and insert (immediate) Click here to expand the API list vsli_n_s16 vsli_n_s32 vsli_n_s64 vsli_n_s8 vsli_n_u16 vsli_n_u32 vsli_n_u64 vsli_n_u8 vsliq_n_s16 vsliq_n_s32 vsliq_n_s64 vsliq_n_s8 vsliq_n_u16 vsliq_n_u32 vsliq_n_u64 vsliq_n_u8 vslid_n_s64 vslid_n_u64 Floating-point Operation Description APIs vcvt Convert to/from another precision or fixed point, rounding towards zero Click here to expand the API list vcvt_f32_f64 vcvt_f32_s32 vcvt_f32_u32 vcvt_f64_f32 vcvt_f64_s64 vcvt_f64_u64 vcvt_s32_f32 vcvt_s64_f64 vcvt_u32_f32 vcvt_u64_f64 vcvtq_f32_s32 vcvtq_f32_u32 vcvtq_f64_s64 vcvtq_f64_u64 vcvtq_s32_f32 vcvtq_s64_f64 vcvtq_u32_f32 vcvtq_u64_f64 vcvts_f32_s32 vcvts_f32_u32 vcvts_s32_f32 vcvts_u32_f32 vcvtd_f64_s64 vcvtd_f64_u64 vcvtd_s64_f64 vcvtd_u64_f64 vcvt_high_f32_f64 vcvt_high_f64_f32 vcvta Convert to integer, rounding to nearest with ties to away Click here to expand the API list vcvta_s32_f32 vcvta_s64_f64 vcvta_u32_f32 vcvta_u64_f64 vcvtad_s64_f64 vcvtad_u64_f64 vcvtaq_s32_f32 vcvtaq_s64_f64 vcvtaq_u32_f32 vcvtaq_u64_f64 vcvtas_s32_f32 vcvtas_u32_f32 vcvtm Convert to integer, rounding towards minus infinity Click here to expand the API list vcvtm_s32_f32 vcvtm_s64_f64 vcvtm_u32_f32 vcvtm_u64_f64 vcvtmq_s32_f32 vcvtmq_s64_f64 vcvtmq_u32_f32 vcvtmq_u64_f64 vcvtms_s32_f32 vcvtms_u32_f32 vcvtmd_s64_f64 vcvtmd_u64_f64 vcvtn Convert to integer, rounding to nearest with ties to even Click here to expand the API list vcvtn_s32_f32 vcvtn_s64_f64 vcvtn_u32_f32 vcvtn_u64_f64 vcvtnq_s32_f32 vcvtnq_s64_f64 vcvtnq_u32_f32 vcvtnq_u64_f64 vcvtns_s32_f32 vcvtns_u32_f32 vcvtnd_s64_f64 vcvtnd_u64_f64 vcvtp Convert to integer, rounding towards plus infinity Click here to expand the API list vcvtp_s32_f32 vcvtp_s64_f64 vcvtp_u32_f32 vcvtp_u64_f64 vcvtpq_s32_f32 vcvtpq_s64_f64 vcvtpq_u32_f32 vcvtpq_u64_f64 vcvtps_s32_f32 vcvtps_u32_f32 vcvtpd_s64_f64 vcvtpd_u64_f64 vcvtx Convert to lower precision, rounding to nearest with ties to odd Click here to expand the API list vcvtx_f32_f64 vcvtx_high_f32_f64 vcvtxd_f32_f64 vcvt_n Convert to/from fixed point, rounding towards zero Click here to expand the API list vcvt_n_f32_s32 vcvt_n_f32_u32 vcvt_n_f64_s64 vcvt_n_f64_u64 vcvt_n_s32_f32 vcvt_n_s64_f64 vcvt_n_u32_f32 vcvt_n_u64_f64 vcvtq_n_f32_s32 vcvtq_n_f32_u32 vcvtq_n_f64_s64 vcvtq_n_f64_u64 vcvtq_n_s32_f32 vcvtq_n_s64_f64 vcvtq_n_u32_f32 vcvtq_n_u64_f64 vcvts_n_f32_s32 vcvts_n_f32_u32 vcvts_n_s32_f32 vcvts_n_u32_f32 vcvtd_n_f64_s64 vcvtd_n_f64_u64 vcvtd_n_s64_f64 vcvtd_n_u64_f64 vrnd Round to Integral, toward zero Click here to expand the API list vrnd_f32 vrnd_f64 vrndq_f32 vrndq_f64 vrnda Round to Integral, with ties to away Click here to expand the API list vrnda_f32 vrnda_f64 vrndaq_f32 vrndaq_f64 vrndi Round to Integral, using current rounding mode Click here to expand the API list vrndi_f32 vrndi_f64 vrndiq_f32 vrndiq_f64 vrndm Round to Integral, towards minus infinity Click here to expand the API list vrndm_f32 vrndm_f64 vrndmq_f32 vrndmq_f64 vrndn Round to Integral, with ties to even Click here to expand the API list vrndn_f32 vrndn_f64 vrndnq_f32 vrndnq_f64 vrndns_f32 vrndp Round to Integral, towards plus infinity Click here to expand the API list vrndp_f32 vrndp_f64 vrndpq_f32 vrndpq_f64 vrndx Round to Integral exact Click here to expand the API list vrndx_f32 vrndx_f64 vrndxq_f32 vrndxq_f64 Load and store Operation Description APIs vld1 Load vector from memory Click here to expand the API list vld1_f32 vld1_f64 vld1_s16 vld1_s32 vld1_s64 vld1_s8 vld1_u16 vld1_u32 vld1_u64 vld1_u8 vld1q_f32 vld1q_f64 vld1q_s16 vld1q_s32 vld1q_s64 vld1q_s8 vld1q_u16 vld1q_u32 vld1q_u64 vld1q_u8 vst1 Store vector to memory Click here to expand the API list vst1_f32 vst1_f64 vst1_s16 vst1_s32 vst1_s64 vst1_s8 vst1_u16 vst1_u32 vst1_u64 vst1_u8 vst1q_f32 vst1q_f64 vst1q_s16 vst1q_s32 vst1q_s64 vst1q_s8 vst1q_u16 vst1q_u32 vst1q_u64 vst1q_u8 vget_lane Get vector element Click here to expand the API list vget_lane_f32 vget_lane_f64 vget_lane_s16 vget_lane_s32 vget_lane_s64 vget_lane_s8 vget_lane_u16 vget_lane_u32 vget_lane_u64 vget_lane_u8 vgetq_lane_f32 vgetq_lane_f64 vgetq_lane_s16 vgetq_lane_s32 vgetq_lane_s64 vgetq_lane_s8 vgetq_lane_u16 vgetq_lane_u32 vgetq_lane_u64 vgetq_lane_u8 vset_lane Set vector element Click here to expand the API list vset_lane_f32 vset_lane_f64 vset_lane_s16 vset_lane_s32 vset_lane_s64 vset_lane_s8 vset_lane_u16 vset_lane_u32 vset_lane_u64 vset_lane_u8 vsetq_lane_f32 vsetq_lane_f64 vsetq_lane_s16 vsetq_lane_s32 vsetq_lane_s64 vsetq_lane_s8 vsetq_lane_u16 vsetq_lane_u32 vsetq_lane_u64 vsetq_lane_u8 Permutation Operation Description APIs vext Extract vector from pair of vectors Click here to expand the API list vext_f32 vext_f64 vext_s16 vext_s32 vext_s64 vext_s8 vext_u16 vext_u32 vext_u64 vext_u8 vextq_f32 vextq_f64 vextq_s16 vextq_s32 vextq_s64 vextq_s8 vextq_u16 vextq_u32 vextq_u64 vextq_u8 vtbl1 Table vector Lookup Click here to expand the API list vtbl1_s8 vtbl1_u8 vtbx1 Table vector lookup extension Click here to expand the API list vtbx1_s8 vtbx1_u8 vqtbl1 Table vector Lookup Click here to expand the API list vqtbl1_s8 vqtbl1_u8 vqtbl1q_s8 vqtbl1q_u8 vqtbx1 Table vector lookup extension Click here to expand the API list vqtbx1_s8 vqtbx1_u8 vqtbx1q_s8 vqtbx1q_u8 vrbit Reverse bit order Click here to expand the API list vrbit_s8 vrbit_u8 vrbitq_s8 vrbitq_u8 vrev16 Reverse elements in 16-bit halfwords Click here to expand the API list vrev16_s8 vrev16_u8 vrev16q_s8 vrev16q_u8 vrev32 Reverse elements in 32-bit words Click here to expand the API list vrev32_s16 vrev32_s8 vrev32_u16 vrev32_u8 vrev32q_s16 vrev32q_s8 vrev32q_u16 vrev32q_u8 vrev64 Reverse elements in 64-bit doublewords Click here to expand the API list vrev64_f32 vrev64_s16 vrev64_s32 vrev64_s8 vrev64_u16 vrev64_u32 vrev64_u8 vrev64q_f32 vrev64q_s16 vrev64q_s32 vrev64q_s8 vrev64q_u16 vrev64q_u32 vrev64q_u8 vtrn1 Transpose vectors (primary) Click here to expand the API list vtrn1_f32 vtrn1_s16 vtrn1_s32 vtrn1_s8 vtrn1_u16 vtrn1_u32 vtrn1_u8 vtrn1q_f32 vtrn1q_f64 vtrn1q_s16 vtrn1q_s32 vtrn1q_s64 vtrn1q_s8 vtrn1q_u16 vtrn1q_u32 vtrn1q_u64 vtrn1q_u8 vtrn2 Transpose vectors (secondary) Click here to expand the API list vtrn2_f32 vtrn2_s16 vtrn2_s32 vtrn2_s8 vtrn2_u16 vtrn2_u32 vtrn2_u8 vtrn2q_f32 vtrn2q_f64 vtrn2q_s16 vtrn2q_s32 vtrn2q_s64 vtrn2q_s8 vtrn2q_u16 vtrn2q_u32 vtrn2q_u64 vtrn2q_u8 vzip1 Zip vectors (primary) Click here to expand the API list vzip1_f32 vzip1_s16 vzip1_s32 vzip1_s8 vzip1_u16 vzip1_u32 vzip1_u8 vzip1q_f32 vzip1q_f64 vzip1q_s16 vzip1q_s32 vzip1q_s64 vzip1q_s8 vzip1q_u16 vzip1q_u32 vzip1q_u64 vzip1q_u8 vzip2 Zip vectors (secondary) Click here to expand the API list vzip2_f32 vzip2_s16 vzip2_s32 vzip2_s8 vzip2_u16 vzip2_u32 vzip2_u8<br/vzip2q_f32 vzip2q_f64 vzip2q_s16 vzip2q_s32 vzip2q_s64 vzip2q_s8 vzip2q_u16 vzip2q_u32 vzip2q_u64 vzip2q_u8 vuzp1 Unzip vectors (primary) Click here to expand the API list vuzp1_f32 vuzp1_s16 vuzp1_s32 vuzp1_s8 vuzp1_u16 vuzp1_u32 vuzp1_u8 vuzp1q_f32 vuzp1q_f64 vuzp1q_s16 vuzp1q_s32 vuzp1q_s64 vuzp1q_s8 vuzp1q_u16 vuzp1q_u32 vuzp1q_u64 vuzp1q_u8 vuzp2 Unzip vectors (secondary) Click here to expand the API list vuzp2_f32 vuzp2_s16 vuzp2_s32 vuzp2_s8 vuzp2_u16 vuzp2_u32 vuzp2_u8 vuzp2q_f32 vuzp2q_f64 vuzp2q_s16 vuzp2q_s32 vuzp2q_s64 vuzp2q_s8 vuzp2q_u16 vuzp2q_u32 vuzp2q_u64 vuzp2q_u8 Cryptographic Operation APIs CRC32 Click here to expand the API list __crc32b __crc32cb __crc32cd __crc32ch __crc32cw __crc32d __crc32h __crc32w SHA1 Click here to expand the API list vsha1cq_u32 vsha1h_u32 vsha1mq_u32 vsha1pq_u32 vsha1su0q_u32 vsha1su1q_u32 SHA256 Click here to expand the API list vsha256h2q_u32 vsha256hq_u32 vsha256su0q_u32 vsha256su1q_u32 AES Click here to expand the API list vaesdq_u8 vaeseq_u8 vaesimcq_u8 vaesmcq_u8 Miscellaneous Operation Description APIs vsqrt Square root Click here to expand the API list vsqrt_f32 vsqrt_f64 vsqrtq_f32 vsqrtq_f64 vdot Dot product Click here to expand the API list vdot_s32 vdot_u32 vdotq_s32 vdotq_u32 vdot_lane Dot product Click here to expand the API list vdot_lane_s32 vdot_lane_u32 vdot_laneq_s32 vdot_laneq_u32 vdotq_lane_s32 vdotq_lane_u32 vdotq_laneq_s32 vdotq_laneq_u32"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-burst-intrinsics-processors.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-burst-intrinsics-processors.html",
    "title": "Processor specific SIMD extensions | ModularUIPack",
    "summary": "Processor specific SIMD extensions Burst exposes all Intel SIMD intrinsics from SSE up to and including AVX2 in the Unity.Burst.Intrinsics.X86 family of nested classes. The Unity.Burst.Intrinsics.Arm.Neon class provides intrinsics for Arm Neon's Armv7, Armv8, and Armv8.2 (RDMA, crypto, dotprod). Organizing your code You should statically import these intrinsics because they contain plain static functions: using static Unity.Burst.Intrinsics.X86; using static Unity.Burst.Intrinsics.X86.Sse; using static Unity.Burst.Intrinsics.X86.Sse2; using static Unity.Burst.Intrinsics.X86.Sse3; using static Unity.Burst.Intrinsics.X86.Ssse3; using static Unity.Burst.Intrinsics.X86.Sse4_1; using static Unity.Burst.Intrinsics.X86.Sse4_2; using static Unity.Burst.Intrinsics.X86.Popcnt; using static Unity.Burst.Intrinsics.X86.Avx; using static Unity.Burst.Intrinsics.X86.Avx2; using static Unity.Burst.Intrinsics.X86.Fma; using static Unity.Burst.Intrinsics.X86.F16C; using static Unity.Burst.Intrinsics.X86.Bmi1; using static Unity.Burst.Intrinsics.X86.Bmi2; using static Unity.Burst.Intrinsics.Arm.Neon; Burst CPU intrinsics are translated into specific CPU instructions. However, Burst has a special compiler pass which makes sure that your CPU target set in Burst AOT Settings is compatible with the intrinsics used in your code. This ensures you don't try to call unsupported instructions (for example, AArch64 Neon on an Intel CPU or AVX2 instructions on an SSE4 CPU), which causes the process to abort with an \"Invalid instruction\" exception. A compiler error is generated if the check fails. However, if you want to provide several code paths with different CPU targets, or to make sure your intrinsics code is compatible with any target CPU, you can wrap your intrinsics code with the followinf property checks: IsNeonSupported IsNeonArmv82FeaturesSupported IsNeonCryptoSupported IsNeonDotProdSupported IsNeonRDMASupported For example: if (IsAvx2Supported) { // Code path for AVX2 instructions } else if (IsSse42Supported) { // Code path for SSE4.2 instructions } else if (IsNeonArmv82FeaturesSupported) { // Code path for Armv8.2 Neon instructions } else if (IsNeonSupported) { // Code path for Arm Neon instructions } else { // Fallback path for everything else } These branches don't affect performance. Burst evaluates the IsXXXSupported properties at compile-time and eliminates unsupported branches as dead code, while the active branch stays there without the if check. Later feature levels implicitly include the previous ones, so you should organize tests from most recent to oldest. Burst emits compile-time errors if you've used intrinsics that aren't part of the current compilation target. Burst doesn't bracket these with a feature level test, which helps you to narrow in on what to put inside a feature test. If you run your application in .NET, Mono or IL2CPP without Burst enabled, all the IsXXXSupported properties return false. However, if you skip the test you can still run a reference version of most intrinsics in Mono (exceptions listed below), which is helpful if you need to use the managed debugger. Reference implementations are slow and only intended for managed debugging. Important There isn't a reference managed implementation of Arm Neon intrinsics. This means that you can't use the technique mentioned in the previous paragraph to step through the intrinsics in Mono. FMA intrinsics that operate on doubles don't have a software fallback because of the inherit complexity in emulating fused 64-bit floating point math. Intrinsics use the types v64 (Arm only), v128 and v256, which represent a 64-bit, 128-bit or 256-bit vector respectively. For example, given a NativeArray<float> and a Lut lookup table of v128 shuffle masks, a code fragment like this performs lane left packing, demonstrating the use of vector load/store reinterpretation and direct intrinsic calls: v128 a = Input.ReinterpretLoad<v128>(i); v128 mask = cmplt_ps(a, Limit); int m = movemask_ps(a); v128 packed = shuffle_epi8(a, Lut[m]); Output.ReinterpretStore(outputIndex, packed); outputIndex += popcnt_u32((uint)m); Intel intrinsics The Intel intrinsics API mirrors the C/C++ Intel instrinsics API, with a the following differences: All 128-bit vector types (__m128, __m128i and __m128d) are collapsed into v128 All 256-bit vector types (__m256, __m256i and __m256d) are collapsed into v256 All _mm prefixes on instructions and macros are dropped, because C# has namespaces All bitfield constants (for example, rounding mode selection) are replaced with C# bitflag enum values Arm Neon intrinsics The Arm Neon intrinsics API mirrors the Arm C Language Extensions, with the following differences: All vector types are collapsed into v64 and v128, becoming typeless. This means that the vector type must contain expected element types and count when calling an API. The *x2, *x3, *x4 vector types aren't supported. poly* types aren't supported. reinterpret* functions aren't supported (they aren't needed because of the usage of v64 and v128 vector types). Intrinsic usage is only supported on Armv8 (64-bit) hardware. Burst's CPU intrinsics use typeless vectors. Because of this, Burst doesn't perform any type checks. For example, if you call an intrinsic which processes 4 ints on a vector that was initialized with 4 floats, then there's no compiler error. The vector types have fields that represent every element type, in a union-like struct, which gives you flexibility to use these intrinsics in a way that best fits your code. Arm Neon C intrinsics (ACLE) use typed vectors, for example int32x4_t, and has special APIs (for example, reinterpret_\\*) to convert to a vector of another element type. Burst CPU intrinsics vectors are typeless, so these APIs are not needed. The following APIs provide the equivalent functionality: v64 (Arm Neon only) v128 v256 For a categorized index of Arm Neon intrinsics supported in Burst, see the Arm Neon intrinsics reference."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-burst-intrinsics.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-burst-intrinsics.html",
    "title": "Burst intrinsics overview | ModularUIPack",
    "summary": "Burst intrinsics overview Burst provides low level intrinsics in the Unity.Burst.Intrinsics namespace. This is useful if you know how to write single instruction, multiple data (SIMD) assembly code, and you want to get extra performance from Burst code. For most use cases, you won't need to use these. This section contains the following information Page Description Burst intrinsics Common class Overview of the Burst.Intrinsics.Common class, which provides functionality shared across the hardware targets that Burst supports. DllImport and internal calls Overview of [DllImport], which is for calling native functions. Processor specific SIMD extensions Overview of the Intel and Arm Neon intrinsics. Arm Neon intrinsics reference Reference of the methods in the Burst.Intrinsics.Arm.Neon class."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-calling-burst-code.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-calling-burst-code.html",
    "title": "Calling Burst-compiled code | ModularUIPack",
    "summary": "Calling Burst-compiled code You can call Burst-compiled methods direct from managed code. Calling generic methods or methods whose declaring type is generic isn't supported, otherwise the rules as for function pointers apply. However, you don't need to worry about the extra boiler plate needed for function pointers. The following example shows a Burst-compiled utility class. Because it uses structs, it passes by reference per the function pointer rules. [BurstCompile] public static class MyBurstUtilityClass { [BurstCompile] public static void BurstCompiled_MultiplyAdd(in float4 mula, in float4 mulb, in float4 add, out float4 result) { result = mula * mulb + add; } } Use this method from managed code like so: public class MyMonoBehaviour : MonoBehaviour { void Start() { var mula = new float4(1, 2, 3, 4); var mulb = new float4(-1,1,-1,1); var add = new float4(99,0,0,0); MyBurstUtilityClass.BurstCompiled_MultiplyAdd(mula, mulb, add, out var result); Debug.Log(result); } } If you attach this script to an object and run it, float4(98f, 2f, -3f, 4f) is printed to the log. Code transformation Burst uses IL Post Processing to automatically transform the code into a function pointer and call. For more information, see the documentation on Function pointers. To disable the direct call transformation, addDisableDirectCall = true to the BurstCompile options. This prevents the Post Processor from running on the code: [BurstCompile] public static class MyBurstUtilityClass { [BurstCompile(DisableDirectCall = true)] public static void BurstCompiled_MultiplyAdd(in float4 mula, in float4 mulb, in float4 add, out float4 result) { result = mula * mulb + add; } }"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-function-pointers.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-function-pointers.html",
    "title": "Function pointers | ModularUIPack",
    "summary": "Function pointers To work with dynamic functions that process data based on other data states, use FunctionPointer<T>. Because Burst treats delegates as managed objects, you can't use C# delegates to work with dynamic functions. Support details Function pointers don't support generic delegates. Also, avoid wrapping BurstCompiler.CompileFunctionPointer<T> within another open generic method. If you do this, Burst can't apply required attributes to the delegate, perform additional safety analysis, or perform potential optimizations. Argument and return types are subject to the same restrictions as DllImport and internal calls. For more information, see the documentation on DllImport and internal calls. Interoperability with IL2CPP Interoperability of function pointers with IL2CPP requires System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute on the delegate. Set the calling convention to CallingConvention.Cdecl. Burst automatically adds this attribute to delegates that are used with BurstCompiler.CompileFunctionPointer<T>. Using function pointers To use function pointers, identify the static functions that you want Burst to compile and do the following: Add a [BurstCompile] attribute to these functions Add a [BurstCompile] attribute to the containing type. This helps the Burst compiler find the static methods that have [BurstCompile] attribute Declare a delegate to create the \"interface\" of these functions Add a [MonoPInvokeCallbackAttribute] attribute to the functions. You need to add this so that IL2CPP works with these functions. For example: // Instruct Burst to look for static methods with [BurstCompile] attribute [BurstCompile] class EnclosingType { [BurstCompile] [MonoPInvokeCallback(typeof(Process2FloatsDelegate))] public static float MultiplyFloat(float a, float b) => a * b; [BurstCompile] [MonoPInvokeCallback(typeof(Process2FloatsDelegate))] public static float AddFloat(float a, float b) => a + b; // A common interface for both MultiplyFloat and AddFloat methods public delegate float Process2FloatsDelegate(float a, float b); } Compile these function pointers from regular C# code: // Contains a compiled version of MultiplyFloat with Burst FunctionPointer<Process2FloatsDelegate> mulFunctionPointer = BurstCompiler.CompileFunctionPointer<Process2FloatsDelegate>(MultiplyFloat); // Contains a compiled version of AddFloat with Burst FunctionPointer<Process2FloatsDelegate> addFunctionPointer = BurstCompiler. CompileFunctionPointer<Process2FloatsDelegate>(AddFloat); Using function pointers in a job To use the function pointers directly from a job, pass them to the job struct: // Invoke the function pointers from HPC# jobs var resultMul = mulFunctionPointer.Invoke(1.0f, 2.0f); var resultAdd = addFunctionPointer.Invoke(1.0f, 2.0f); Burst compiles function pointers asynchronously for jobs by default. To force a synchronous compilation of function pointers use [BurstCompile(SynchronousCompilation = true)]. Using function pointers in C# code To use these function pointers from regular C# code, cache the FunctionPointer<T>.Invoke property (which is the delegate instance) to a static field to get the best performance: private readonly static Process2FloatsDelegate mulFunctionPointerInvoke = BurstCompiler.CompileFunctionPointer<Process2FloatsDelegate>(MultiplyFloat).Invoke; // Invoke the delegate from C# var resultMul = mulFunctionPointerInvoke(1.0f, 2.0f); Using Burst-compiled function pointers from C# might be slower than their pure C# version counterparts if the function is too small compared to the overhead of P/Invoke interop. Performance considerations Where possible, you use a job over a function pointer to run Burst compiled code, because jobs are more optimal. Burst provides better aliasing calculations for jobs because the job safety system has more optimizations by default. You also can't pass most of the [NativeContainer] structs like NativeArray directly to function pointers and must use a job struct to do so. Native container structs contain managed objects for safety checks that the Burst compiler can work around when compiling jobs, but not for function pointers. The following example shows a bad example of how to use function pointers in Burst. The function pointer computes math.sqrt from an input pointer and stores it to an output pointer. MyJob feeds this function pointer sources from two NativeArrays which isn't optimal: ///Bad function pointer example [BurstCompile] public class MyFunctionPointers { public unsafe delegate void MyFunctionPointerDelegate(float* input, float* output); [BurstCompile] public static unsafe void MyFunctionPointer(float* input, float* output) { *output = math.sqrt(*input); } } [BurstCompile] struct MyJob : IJobParallelFor { public FunctionPointer<MyFunctionPointers.MyFunctionPointerDelegate> FunctionPointer; [ReadOnly] public NativeArray<float> Input; [WriteOnly] public NativeArray<float> Output; public unsafe void Execute(int index) { var inputPtr = (float*)Input.GetUnsafeReadOnlyPtr(); var outputPtr = (float*)Output.GetUnsafePtr(); FunctionPointer.Invoke(inputPtr + index, outputPtr + index); } } This example isn't optimal for the following reasons: Burst can't vectorize the function pointer because it's being fed a single scalar element. This means that 4-8x performance is lost from a lack of vectorization. The MyJob knows that the Input and Output native arrays can't alias, but this information isn't communicated to the function pointer. There is a non-zero overhead to constantly branching to a function pointer somewhere else in memory. To use a function pointer in an optimal way, always process batches of data in the function pointer, like so: [BurstCompile] public class MyFunctionPointers { public unsafe delegate void MyFunctionPointerDelegate(int count, float* input, float* output); [BurstCompile] public static unsafe void MyFunctionPointer(int count, float* input, float* output) { for (int i = 0; i < count; i++) { output[i] = math.sqrt(input[i]); } } } [BurstCompile] struct MyJob : IJobParallelForBatch { public FunctionPointer<MyFunctionPointers.MyFunctionPointerDelegate> FunctionPointer; [ReadOnly] public NativeArray<float> Input; [WriteOnly] public NativeArray<float> Output; public unsafe void Execute(int index, int count) { var inputPtr = (float*)Input.GetUnsafeReadOnlyPtr() + index; var outputPtr = (float*)Output.GetUnsafePtr() + index; FunctionPointer.Invoke(count, inputPtr, outputPtr); } } Thee modified MyFunctionPointer takes a count of elements to process, and loops over the input and output pointers to do a lot of calculations. The MyJob becomes an IJobParallelForBatch, and the count is passed directly into the function pointer. This is better for performance because of the following reasons: Burst vectorizes the MyFunctionPointer call. Because Burst processes count items per function pointer, any overhead of calling the function pointer is reduced by count times. For example, if you run a batch of 128, the function pointer overhead is 1/128th per index of what it was previously. Batching results in a 1.53x performance gain over not batching. However, to get the best possible performance, use a job. This gives Burst the most visibility over what you want it to do, and the most opportunities to optimize: [BurstCompile] struct MyJob : IJobParallelFor { [ReadOnly] public NativeArray<float> Input; [WriteOnly] public NativeArray<float> Output; public unsafe void Execute(int index) { Output[i] = math.sqrt(Input[i]); } } This runs 1.26x faster than the batched function pointer example, and 1.93x faster than the non-batched function pointer examples. Burst has perfect aliasing knowledge and can make the broadest modifications to the above. This code is also a lot simpler than either of the function pointer cases."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-hpc-overview.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-hpc-overview.html",
    "title": "| ModularUIPack",
    "summary": "HPC# overview Burst uses a high performance subset of C# called High Performance C# (HPC#). Supported C# features in HPC# HPC# supports most expressions and statements in C#. It supports the following: Supported feature Notes Extension methods. Instance methods of structs. Unsafe code and pointer manipulation. Loading from static read-only fields. For more information, see the documentation on Static read-only fields and static constructors. Regular C# control flows. if else switch case for while break continue ref and out parameters fixed statements Some IL opcodes. cpblk initblk sizeof DLLImport and internal calls. For more information, see the documentation on DLLImport and internal calls. try and finally keywords. Burst also supports the associated IDisposable patterns, using and foreach. If an exception happens in Burst, the behavior is different from .NET. In .NET, if an exception occurs inside a try block, control flow goes to the finally block. However, in Burst, if an exception happens inside or outside a try block, the exception throws as if any finally blocks do not exist. Invoking foreach calls is supported by Burst, but there is a foreach edge case that burst currently does not support (see \"Foreach and While\" section for more details). Strings and ProfilerMarker. For more information, see the documentation on Support for Unity Profiler markers. throw expressions. Burst only supports simple throw patterns, for example, throw new ArgumentException(\"Invalid argument\"). When you use simple patterns like this, Burst extracts the static string exception message and includes it in the generated code. Strings and Debug.Log. Only partially supported. For more information, see the documentation on String support and Debug.Log. Burst also provides alternatives for some C# constructions not directly accessible to HPC#: Function pointers as an alternative to using delegates within HPC# Shared static to access static mutable data from both C# and HPC# Exception expressions Burst supports throw expressions for exceptions. Exceptions thrown in the editor can be caught by managed code, and are reported in the console window. Exceptions thrown in player builds will always cause the application to abort. Thus with Burst you should only use exceptions for exceptional behavior. To ensure that code doesn't end up relying on exceptions for things like general control flow, Burst produces the following warning on code that tries to throw within a method not attributed with [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")]: Burst warning BC1370: An exception was thrown from a function without the correct [Conditional(\"ENABLE_UNITY_COLLECTIONS_CHECKS\")] guard. Exceptions only work in the editor and so should be protected by this guard Foreach and While Burst supports invoking foreach and while. However, there is an edge case which is currently unsupported - methods that take one or more generic collection parameters T: IEnumerable<U> and invoke foreach or while on at least one of the collections in the method body. To illustrate, the following example methods exemplify this limitation: public static void IterateThroughConcreteCollection(NativeArray<int> list) { foreach (var element in list) { // This works } } public static void IterateThroughGenericCollection<S>(S list) where S : struct, IEnumerable<int> { foreach (var element in list) { // This doesn't work } } Note that the uppermost method IterateThroughConcreteCollection()'s parameter is specified to be a concrete collection type, in this case NativeArray<int>. Because it's concrete iterating through it inside the method will compile in Burst. In the method IterateThroughGenericCollection() below it, however, the parameter is specified to be a generic collection type S. Iterating through S inside the method will therefore not compile in Burst. It will instead throw the following error: Can't call the method (method name) on the generic interface object type (object name). This may be because you are trying to do a foreach over a generic collection of type IEnumerable. Unsupported C# features in HPC# HPC# doesn't support the following C# features: Catching exceptions catch in a try/catch. Storing to static fields except via Shared Static Any methods related to managed objects, for example, string methods."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-language-support.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-language-support.html",
    "title": "C# language support | ModularUIPack",
    "summary": "C# language support Burst uses a high performance subset of C# called High Performance C# (HPC#) which has a number of limitations and differences between C#. Topic Description HPC# overview Understand how HPC# works with Burst. C#/.NET type support Understand the supported C# features. C#/.NET System namespace support Understand what's supported in the System namespace. Static read-only fields and static constructor support Use static read-only fields and static constructors in Burst code. String support Use strings in Burst code. Calling Burst compiled code Call Burst compiled code from managed code. Function pointers Use function pointers to work with dynamic functions. SharedStatic struct Use SharedStatic to share static mutable data. Additional resources Burst instrinsics overview"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-shared-static.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-shared-static.html",
    "title": "SharedStatic struct | ModularUIPack",
    "summary": "SharedStatic struct Burst has basic support for accessing static readonly data. However, if you want to share static mutable data between C# and HPC#, use the SharedStatic<T> struct. The following example shows accessing an int static field that both C# and HPC# can change: public abstract class MutableStaticTest { public static readonly SharedStatic<int> IntField = SharedStatic<int>.GetOrCreate<MutableStaticTest, IntFieldKey>(); // Define a Key type to identify IntField private class IntFieldKey {} } C# and HPC# can then access this: // Write to a shared static MutableStaticTest.IntField.Data = 5; // Read from a shared static var value = 1 + MutableStaticTest.IntField.Data; When you use SharedStatic<T>, be aware of the following: The T in SharedStatic<T> defines the data type. To identify a static field, provide a context for it. To do this, create a key for both the containing type (for example, MutableStaticTest in the example above), identify the field (for example, IntFieldKey class in the example above) and pass these classes as generic arguments of SharedStatic<int>.GetOrCreate<MutableStaticTest, IntFieldKey>(). Always initialize the shared static field in C# from a static constructor before accessing it from HPC#. If you don't initialize the data before accessing it, it might lead to an undefined initialization state."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-static-read-only-support.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-static-read-only-support.html",
    "title": "Static read-only fields and static constructor support | ModularUIPack",
    "summary": "Static read-only fields and static constructor support Burst evaluates all static fields and all static constructors at compile time. It evaluates all the static fields and the static constructors for a given struct together. When there is a static field that isn't read-only in a Burst-compiled struct, a compilation error happens. This is because Burst only supports read-only static fields. When Burst fails to evaluate any static field or static constructor, all fields and constructors fail for that struct. When compile-time evaluation fails, Burst falls back to compiling all static initialization code into an initialization function that it calls once at runtime. This means that your code needs to be Burst compatible, or it will fail compilation if it fails compile-time evaluation. An exception to this is that there's limited support for initializing static read-only array fields as long as they're initialized from either an array constructor or from static data: static readonly int[] MyArray0 = { 1, 2, 3, .. }; static readonly int[] MyArray1 = new int[10]; Language support Burst doesn't support calling external functions and function pointers. It supports using the following base language with static read-only fields and constructors: Managed arrays Strings Limited intrinsic support: Unity.Burst.BurstCompiler.IsEnabled Unity.Burst.BurstRuntime.GetHashCode32 Unity.Burst.BurstRuntime.GetHashCode64 Vector type construction Limited intrinsic assertion support: UnityEngine.Debug.Assert NUnit.Framework.Assert.AreEqual NUnit.Framework.Assert.AreNotEqual Simple throw patterns. Any exceptions thrown during evaluation become compiler errors."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-string-support.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-string-support.html",
    "title": "String support | ModularUIPack",
    "summary": "String support Burst supports string usage in the following scenarios: Debug.Log Assigning a string to the FixedString structs that Unity.Collections provides, for example FixedString128Bytes. The System.Runtime.CompilerServices attributes [CallerLineNumber], [CallerMemberName], and [CallerFilePath] on arguments to Burst functions. However, you can only pass the strings directly to calls to Debug.Log. A string can be either: A string literal. For example: \"This is a string literal\". An interpolated string using $\"This is an integer {value} or using string.Format, where the string to format is also a string literal. For example, Burst supports the following constructions: Logging with a string literal: Debug.Log(\"This a string literal\"); Logging using string interpolation: int value = 256; Debug.Log($\"This is an integer value {value}\"); This is the same as using string.Format directly: int value = 256; Debug.Log(string.Format(\"This is an integer value {0}\", value)); Supported Debug.Log methods Burst supports the following Debug.Log methods: Debug.Log(object) Debug.LogWarning(object) Debug.LogError(object) String interpolation support String interpolation has the following restrictions: The string must be a string literal Burst supports the following string.Format methods: string.Format(string, object) string.Format(string, object, object) string.Format(string, object, object, object) string.Format(string, object[]). Use this for a string interpolation that contains more than three arguments, for example $\"{arg1} {arg2} {arg3} {arg4} {arg5}\". In this case, the object[] array needs to be a constant size and no arguments should involve control flows (for example, $\"This is a {(cond ? arg1 : arg2)}\"). The string must only use value types The string must take only built-in type arguments: char boolean byte / sbyte double float short / ushort int / uint long / ulong Burst supports sll vector types (for example int2, float3), except half vector types. For example: var value = new float3(1.0f, 2.0f, 3.0f); // Logs \"This value float3(1f, 2f, 3f)\" Debug.Log($\"This value `{value}`\"); Burst doesn't support ToString() of structs. It displays the full name of the struct instead. For more information, see the .NET documentation on String interpolation and Standard numeric format strings. Managed strings You can pass a managed string literal or an interpolated string directly to Debug.Log, but you can't pass a string to a user method or to use them as fields in a struct. To pass around or store strings, use one of the FixedString structs in the Unity.Collections package: int value = 256; FixedString128 text = $\"This is an integer value {value} used with FixedString128\"; MyCustomLog(text); // ... // String can be passed as an argument to a method using a FixedString, // but not using directly a managed `string`: public static void MyCustomLog(in FixedString128 log) { Debug.Log(text); } Arguments and specifiers Burst has limited support for string format arguments and specifiers: int value = 256; // Padding left: \"This value ` 256` Debug.Log($\"This value `{value,5}`\"); // Padding right: \"This value `256 ` Debug.Log($\"This value `{value,-5}`\"); // Hexadecimal uppercase: \"This value `00FF` Debug.Log($\"This value `{value:X4}`\"); // Hexadecimal lowercase: \"This value `00ff` Debug.Log($\"This value `{value:x4}`\"); // Decimal with leading-zero: \"This value `0256` Debug.Log($\"This value `{value:D4}`\");"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-system-support.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-system-support.html",
    "title": "C#/.NET System namespace support | ModularUIPack",
    "summary": "C#/.NET System namespace support Burst provides support for some of the System namespace, transforming these into Burst compatible variants in the Burst compiler. System.Math Burst supports all methods that System.Math declares, with the following exceptions: double IEEERemainder(double x, double y) is only supported when Api Compatibility Level is set to .NET Standard 2.1 in project settings System.IntPtr Burst supports all methods of System.IntPtr/System.UIntPtr, including the static fields IntPtr.Zero and IntPtr.Size System.Threading.Interlocked Burst supports atomic memory intrinsics for all methods provided by System.Threading.Interlocked (for example, Interlocked.Increment). Make sure that the source location of the interlocked methods are naturally aligned. For example, the alignment of the pointer is a multiple of the pointed-to-type: [StructLayout(LayoutKind.Explicit)] struct Foo { [FieldOffset(0)] public long a; [FieldOffset(5)] public long b; public long AtomicReadAndAdd() { return Interlocked.Read(ref a) + Interlocked.Read(ref b); } } If the pointer to the struct Foo has an alignment of 8, which is the natural alignment of a long value, the Interlocked.Read of a would be successful because it lies on a naturally aligned address. However, b would not be successful and undefined behavior happens at the load of b as a result. System.Threading.Thread Burst supports the MemoryBarrier method of System.Threading.Thread. System.Threading.Volatile Burst supports the non-generic variants of Read and Write provided by System.Threading.Volatile. System.HashCode Burst supports all methods of HashCode except for HashCode.Add<T>(T, IEqualityComparer<T>). Do note that Burst does not follow .NET's implementation in sense of only being deterministic within a specific operating system process."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-type-support.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/csharp-type-support.html",
    "title": "C#/.NET type support | ModularUIPack",
    "summary": "C#/.NET type support Burst works on a subset of .NET that doesn't let you use any managed objects or reference types in your code (classes in C#). The following sections gives more details about the constructs that Burst supports, and any limitations they have. Built-in types Array types Struct types Generic types Vector types Enum types Pointer types Span types Tuple types Built-in types Supported built-in types Burst supports the following built-in types: bool byte/sbyte double float int/uint long/ulong short/ushort Unsupported built-in types Burst doesn't support the following built-in types: char decimal string because this is a managed type Array types Supported array types Burst supports read-only managed arrays loaded from static read-only fields: [BurstCompile] public struct MyJob : IJob { private static readonly int[] _preComputeTable = new int[] { 1, 2, 3, 4 }; public int Index { get; set; } public void Execute() { int x = _preComputeTable[0]; int z = _preComputeTable[Index]; } } However, accessing a static read-only managed array has the following restrictions: You can only use the read-only static managed array directly and can't pass it around, for example as a method argument. C# code that doesn't use jobs shouldn't modify the read-only static array's elements. This is because the Burst compiler makes a read-only copy of the data at compilation time. Multi-dimensional arrays aren't supported. If you've used an unsupported static constructor, Burst produces the error BC1361. For more information on how Burst initializes arrays, see Static readonly fields and static constructors. Unsupported array types Burst doesn't support managed arrays. Instead, use a native container such as NativeArray . Struct types Supported structs Burst supports the following structs: Regular structs with any field with supported types Structs with fixed array fields Note Structs with an explicit layout might generate non-optimal native code. Supported struct layout Burst supports the following struct layouts: LayoutKind.Sequential LayoutKind.Explicit StructLayoutAttribute.Pack StructLayoutAttribute.Size Burst supports System.IntPtr and System.UIntPtr natively as intrinsic structs that directly represent pointers. Generic types Burst supports generic types used with structs. It supports full instantiation of generic calls for generic types that have interface constraints, for example when a struct with a generic parameter needs to implement an interface. Note There are restrictions if you use generic jobs. Vector types Burst can translate vector types from Unity.Mathematics to native SIMD vector types with the following first class support for optimizations: bool2/bool3/bool4 uint2/uint3/uint4 int2/int3/int4 float2/float3/float4 Tip For performance reasons, use the 4 wide types (bool4, uint4, float4, int4, ) over the other types. Enum types Supported enum types Burst supports all enums including enums that have a specific storage type, for example, public enum MyEnum : short. Unsupported enums Burst doesn't support Enum methods, for example Enum.HasFlag. Pointer types Burst supports any pointer types to any Burst supported types Span types Burst supports Span<T> and ReadOnlySpan<T> types in the Unity Editors that support them. You can only use span types in Burst jobs or function-pointers, but not across the interface to them. This is because in C#'s implementation of the span types it supports taking spans into managed data types (like a managed array). For example, the following code is invalid: [BurstCompile] public static void SomeFunctionPointer(Span<int> span) {} This is because Span is used across the managed and Burst boundary. In Burst, span types respect any safety check setting, and only perform performance-intensive checks when safety checks are enabled. Tuple types Burst supports value tuples ValueTuple<T1,T2> in Burst-compiled jobs or static methods, but not across the interface to them. This is because value tuples are of struct layout LayoutKind.Auto. Burst does not support LayoutKind.Auto (to see a list of struct layouts Burst supports see the section Struct types). However, one can use a regular struct to emulate a tuple like so: [BurstCompile] private struct MyTuple { public int item1; public float item2; }"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/debugging-profiling-tools.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/debugging-profiling-tools.html",
    "title": "Debugging and profiling tools | ModularUIPack",
    "summary": "Debugging and profiling tools The following sections describe how to debug and profile your Burst-compiled code in the Editor and in player builds. Tip Before attempting to debug Burst-compiled code, enable script debugging for the Editor, or a player build by following the steps in Debug C# code in Unity. Although you can theoretically debug Burst-compiled code even when the script compilation mode is set to Release, in practice it doesn't work reliably. Breakpoints might be skipped, and variables might not appear in the Locals window, for example. Debugging Burst-compiled code in the Editor To debug Burst-compiled code in the Editor, you can either use a managed debugger, or a native debugger. This section explains both options. Attach a managed debugger You can attach a managed debugger such as Visual Studio, Visual Studio for Mac, or JetBrains Rider. This is the same type of debugger you can use to debug regular managed C# code in your Unity project. The ways of attaching a debugger differ depending on the version of Unity you're using: Unity 2022.2+: When you place a breakpoint inside Burst-compiled code, and you have a managed debugger attached, Unity disables Burst automatically for that code path. This allows you to use a managed debugger to debug the managed version of your code. When you remove all breakpoints from that code path, Unity re-enables Burst for that code path. Unity 2022.1 and older: Disable Burst, either with the global option in the Editor Burst menu (Jobs > Burst > Enable Compilation), or comment out the [BurstCompile] attribute from the specific entry-point that you want to debug. Attach a native debugger You can attach a native debugger such as Visual Studio or Xcode. Before doing so, you need to disable Burst optimizations. You can do this in the following ways: Use the Native Debug Mode Compilation setting in the Editor Burst menu (Jobs > Burst > Native Debug Mode Compilation). Important: This setting disables optimizations across all jobs, which impacts the performance of Burst code. If you want to disable optimizations only for a specific job, use the other option in this list. Add the Debug = true flag to your job, which disables optimizations and enables debugging on that specific job: [BurstCompile(Debug = true)] public struct MyJob : IJob { // ... } Tip Player builds pick up the Debug flag, so you can also use this to debug a player build. To attach a native debugger to the Unity Editor process, see the native debugging section below. Debugging Burst-compiled code in a player build Because of the way that Unity builds the code for a player, you need to tell the debugging tool where to find the symbols. To do this, point the tool to the folder that contains the lib_burst_generated files, which is usually in the Plugins folder. To debug Burst-compiled code in a player build, you need to attach a native debugger (such as Visual Studio or Xcode) to the player process. Before doing so, you need to: Enable symbol generation. You can do this in either of two ways: Enable the Development Build option before you build the player, or Enable the Force Debug Information option in Burst AOT Player Settings Disable Burst optimizations. You can do this in either of two ways: Disable the Enable Optimizations option in Burst AOT Player Settings. Important: This setting disables optimizations across all jobs, which impacts the performance of Burst code. If you want to disable optimizations only for a specific job, use the other option in this list. Add the Debug = true flag to your job, which disables optimizations and enables debugging on that specific job: [BurstCompile(Debug = true)] public struct MyJob : IJob { // ... } To attach a native debugger to the player process, see the native debugging section below. Native debugging Follow the instructions above to setup native debugging correctly for the Editor or a player build. Then, attach a native debugger such as Visual Studio or Xcode. Native debugging limitations Native debuggers can't discover lambda captures on Entity.ForEach, so you can't inspect variables originating from these. Structs that use [StructLayout(LayoutKind=Explicit)] and have overlapping fields are represented by a struct that hides one of the overlaps. Types that are nested, are namespaced in C/C++ style. e.g. namespace Pillow { public struct Spot { public struct SubSpot { public int a; public int b; } public int a; public int b; public SubSpot sub; } You would refer to SubSpot as Pillow::Spot::SubSpot in this case (for instance if you were trying to cast a pointer in a debugger watch window). Code-based breakpoints Burst supports code-based breakpoints through the System.Diagnostics.Debugger.Break method. This method generates a debug trap in your code. You must attach a debugger to your code so that it can intercept the break. Breakpoints trigger whether you've attached a debugger or not. Burst adds information to track local variables, function parameters and breakpoints. If your debugger supports conditional breakpoints, use these over adding breakpoints in your code, because they only fire when you've attached a debugger. Profiling Burst-compiled code Profiling using standalone profiling tools You can use profiling tools (such as Instruments or Superluminal) to profile Burst-compiled code in a player build. Because of the way that Unity builds the code for a player, you need to tell the profiling tool where to find the symbols. To do this, point the tool to the folder that contains the lib_burst_generated files, which is usually in the Plugins folder. Unity Profiler markers To improve the data you get from Unity Profiler (either for Burst-compiled code running in the Editor or in an attached player), you can create Unity Profiler markers from Burst code by calling new ProfilerMarker(\"MarkerName\"): [BurstCompile] private static class ProfilerMarkerWrapper { private static readonly ProfilerMarker StaticMarker = new ProfilerMarker(\"TestStaticBurst\"); [BurstCompile(CompileSynchronously = true)] public static int CreateAndUseProfilerMarker(int start) { using (StaticMarker.Auto()) { var p = new ProfilerMarker(\"TestBurst\"); p.Begin(); var result = 0; for (var i = start; i < start + 100000; i++) { result += i; } p.End(); return result; } } }"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/editor-burst-inspector.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/editor-burst-inspector.html",
    "title": "Burst Inspector window reference | ModularUIPack",
    "summary": "Burst Inspector window reference The Burst Inspector window displays all the jobs and other Burst compile targets in the project. To open the Burst Inspector window, go to Jobs > Burst > Open Inspector. The Burst Inspector displays all the Jobs that it can compile. It also displays the generated intermediate and native assembly code. When opening a new target job in the Burst Inspector, it will try to focus the assembly directly related to the chosen bursted job. Furthermore, if branch flow arrows are shown, and they fill more than half of the assembly view, the inspector will scroll horizontally rightwards to focus the code instead of the branches. Burst Inspector with Branch Flow enabled Burst Inspector panes The Compile Targets pane on the left of the window displays an alphabetical list of the jobs in the project that Burst can compile. By default jobs either in the Unity namespace or with \".Generated\" in the name are excluded. This can be changed via the toggles Show Unity Namespace and Show \".Generated\" respectively. Disabled jobs in the list don't have the [BurstCompile] attribute. The right output pane of the Burst Inspector window displays options to view the assembly and intermediate code for the job you've selected in the Compile Targets list. To expand or collapse elements of the code, select the colored boxes (some with ellipses) . By default. the Burst Inspector automatically collapses blocks that it considers non-essential, such as most directives and data. It is possible to select lines of assembly. This will highlight the selected line, by underlining it. If this line contains any registers, the usage of these registers will be highlighted throughout the code; note that implicit registers are ignored for this feature. To select and copy the text in this pane, either click and drag with your mouse, or use Shift + arrow keys to select the text. To copy the text, either right-click and select Copy Selection, or press Ctrl + C (Command + C on macOS). Default behavior for the Burst Inspector's copy is to include underlying color tags. To change this, right-click with the mouse on the right pane, to open up the context menu, and untick Copy Color Tags. At the top of the window, the following display options are available: Display option Function Output dropdown Use the dropdown to select how to output the information in the Burst Inspector window Plain Without Debug Information Displays the raw output. Plain With Debug Information Displays the raw output with debug information. Enhanced with Minimal Debug Information (Only available in Assembly view) Displays the line information interweaved with the assembly to guide you to what line in your code matches what assembly output. If you've enabled Show Branch Flow, the branch flow indicates where jump instruction might branch off to. Enhanced With Full Debug Information (Only available in Assembly view) Displays the same information as Enhanced with Minimal Debug Information but with debug information included. Coloured With Minimal Debug Information (Only available in Assembly view) Displays the same information as Enhanced with Minimal Debug Information, but displays the output in color. Coloured With Full Debug Information (Only available in Assembly view) Displays the same information as Enhanced with Full Debug Information, but displays the output in color. Safety Checks Enable this option to generate code that includes container access safety checks, for example, to check if a job is attempting to write to a read-only native container. Font Size Select the size of the text in the output pane. Architecture dropdown Select the target architecture for your build. Focus on Code (Only available in Enhanced or Coloured output) Collapses the least important blocks of the disassembly. When you select this, Unity hides most of the assembly language directives and non code segments, allowing you to focus on the code itself. Expand all (Only available in Enhanced or Coloured output) Expands all collapsed blocks of disassembly and displays all the hidden assembly language directives and data elements. Show Branch Flow (Only available in Enhanced or Coloured output) Enable this option to display arrows that show branch flow in the code. When enabled, the code moves to the right, to make space to display the arrows. Highlight SIMD Scalar vs Packed (Only available in Enhanced or Coloured output) Enable this option to display SIMD instruction differently depending on their nature (Whether they work on packed or scalar inputs). This can be used to quickly assess the quality of the generated vectorized code (see SIMD smell test by Andreas Fredriksson). Assembly Displays the final optimized native code that Burst generated. .NET IL Displays the original .NET IL extracted from the job method. LLVM IR (Unoptimized) Displays the internal LLVM IR before optimizations. LLVM IR (Optimized) Displays the internal LLVM IR after optimizations. LLVM IR Optimization Diagnostics Displays LLVM diagnostics of the optimizations, such as if they succeeded or failed."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/editor-burst-menu.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/editor-burst-menu.html",
    "title": "Burst menu reference | ModularUIPack",
    "summary": "Burst menu reference In the Editor, use the settings in the Burst menu to control how Burst works. To access this menu, go to Jobs > Burst. The following settings are available: Setting Function Enable Compilation Enable this setting to activate Burst compilation. When you enable this setting, Burst compiles jobs and Burst custom delegates that you tag with the attribute [BurstCompile]. Enable Safety Checks Choose what safety checks Burst should use. For more information see the Enable Safety Checks setting section of this documentation. Off Disable safety checks across all Burst jobs and function-pointers. Only use this setting if you want more realistic profiling results from in-Editor captures. When you reload the Editor, this setting always resets to On. On Enable safety checks on code that uses collection containers (e.g NativeArray<T>). Checks include job data dependency and container indexes out of bounds. This is the default setting. Force On Force safety checks on even for jobs and function-pointers that have DisableSafetyChecks = true. Use this setting to rule out any problems that safety checks might have caught. Synchronous Compilation Enable this setting to compile Burst synchronously. For more information, see Synchronous compilation. Native Debug Mode Compilation Enable this setting to deactivate optimizations on all code that Burst compiles. This makes it easier to debug via a native debugger. For more information, see Native Debugging tools. Show Timings Enable this setting to log the time it takes to JIT compile a job in the Editor and display it in the Console. For more information see the Show Timings setting section of this documentation. Open Inspector Opens the Burst Inspector window. Enable Safety Checks setting To disable Burst's safety check code, use DisableSafetyChecks. This results in faster code generation, however make sure that you use containers in a safe fashion. To disable safety checks on a job or function-pointer set DisableSafetyChecks to true: [BurstCompile(DisableSafetyChecks = true)] public struct MyJob : IJob { // ... } Burst ignores code marked explicitly with DisableSafetyChecks = true when it safety checks your code if you set Enable Safety Checks to On in the Editor. Select Force On to make Burst to safety check all code, including code marked with DisableSafetyChecks = true. Show Timings setting When you enable the Show Timings setting, Unity logs an output in the Console window for each library of entry points that Burst compiles. Burst batches the compilation into units of methods-per-assembly, and groups multiple entry-points together in a single compilation task. This output is useful if you want to report outliers in compilation to the Burst compiler team (via the Burst forum). Unity splits Burst's output into the following major sections: Method discovery (where Burst works out what it needs to compile) Front end (where Burst turns C# IL into an LLVM IR module) Middle end (where Burst specializes, optimizes, and cleans up the module) Back-end (where Burst turns the LLVM IR module into a native DLL) The compile time in the front end and optimizer is linear to the amount operations that it needs to compile. More functions and more instructions means a longer compile time. The more generic functions you have, the higher the front end performance timings, because generic resolutions have non-zero costs. The compile time in the back-end scales with the number of entry-points in the module. This is because each entry point is in its own native object file. If the optimizer takes a significant amount of time, use [BurstCompile(OptimizeFor = OptimizeFor.FastCompilation)] which reduces the optimizations that Burst does, but compiles things much faster. Profile the job before and after to make sure that this tradeoff is right for that entry-point."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/editor-reference-overview.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/editor-reference-overview.html",
    "title": "Editor reference | ModularUIPack",
    "summary": "Editor reference Explore the specific Burst Editor features. Topic Description Burst menu Use the Burst menu to control the Burst settings in your project. Burst Inspector Use the Burst Inspector to see the jobs and Burst compiled targets in your project. Additional resources Building your project"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/getting-started.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/getting-started.html",
    "title": "Getting started | ModularUIPack",
    "summary": "Getting started Burst is primarily designed to work with Unity's job system. To start using the Burst compiler in your code, decorate a Job struct with the [BurstCompile] attribute. Add the [BurstCompile] attribute to the type and the static method you want Burst to compile. using Unity.Burst; using Unity.Collections; using Unity.Jobs; using UnityEngine; public class MyBurst2Behavior : MonoBehaviour { void Start() { var input = new NativeArray<float>(10, Allocator.Persistent); var output = new NativeArray<float>(1, Allocator.Persistent); for (int i = 0; i < input.Length; i++) input[i] = 1.0f * i; var job = new MyJob { Input = input, Output = output }; job.Schedule().Complete(); Debug.Log(\"The result of the sum is: \" + output[0]); input.Dispose(); output.Dispose(); } // Using BurstCompile to compile a Job with Burst [BurstCompile] private struct MyJob : IJob { [ReadOnly] public NativeArray<float> Input; [WriteOnly] public NativeArray<float> Output; public void Execute() { float result = 0.0f; for (int i = 0; i < Input.Length; i++) { result += Input[i]; } Output[0] = result; } } } Limitations Burst supports most C# expressions and statements, with a few exceptions. For more information, see C# language support. Compilation Burst compiles your code just-in-time (JIT) while in Play mode in the Editor, and ahead-of-time (AOT) when your application runs in a Player. For more information on compilation, see Burst compilation Command line options You can pass the following options to the Unity Editor on the command line to control Burst: --burst-disable-compilation disables Burst. --burst-force-sync-compilation force Burst to compile synchronously. For more information, see Burst compilation."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/index.html",
    "title": "About Burst | ModularUIPack",
    "summary": "About Burst Burst is a compiler that you can use with Unity's job system to create code that enhances and improves your application's performance. It translates your code from IL/.NET bytecode to optimized native CPU code that uses the LLVM compiler. Installation To install this package, follow the instructions in the Package Manager documentation. If you change the Burst package version (for example, via Update), you need to close and restart the Editor. Further resources Videos Conference presentations given by the Burst team: Getting started with Burst - Unite Copenhagen 2019 (slides) Supercharging mobile performance with ARM Neon and Unity Burst Compiler Using Burst Compiler to optimize for Android - Unite Now 2020 Intrinsics: Low-level engine development with Burst - Unite Copenhagen 2019 (slides) Behind the Burst compiler: Converting .NET IL to highly optimized native code - DotNext 2018 Deep dive into the Burst compiler - Unite LA 2018 C# to machine code: GDC 2018 Using the native debugger for Burst compiled code Blogs Blog posts written by members of the Burst team : Raising your game with Burst 1.7 Enhancing mobile performance with the Burst compiler Enhanced aliasing with Burst In parameters in Burst"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/modding-support.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/modding-support.html",
    "title": "Modding support | ModularUIPack",
    "summary": "Modding support From Unity 2021.1, you can load additional Burst compiled libraries, which provide a way to create modifications that use Burst compiled code. Burst only provides a method to load additional libraries, and doesn't provide any tooling to create mods. You need a copy of the Unity Editor to compile the additional libraries. This section gives an example approach to modding with Burst and is a proof of concept. Supported uses You can use this function in Play mode (or Standalone Players) only. Make sure you load the libraries as soon as possible, and before the first Burst compiled use of a C# method. Unity unloads any Burst libraries that BurstRuntime.LoadAdditionalLibraries loads when you exit Play mode in the Editor, quit a Standalone Player. Example modding system Note This example is limited in scope. You should have knowledge of assemblies and asmdefs to follow this example. This example declares an interface that the mods abide by: using UnityEngine; public interface PluginModule { void Startup(GameObject gameObject); void Update(GameObject gameObject); } You can use this interface to create new classes which follow these specifications and ship it separate to your application. Passing a single GameObject along limits the state that the plug-ins can affect. Modding manager The following is an example of a modding manager: using System; using System.Collections.Generic; using System.IO; using System.Reflection; using UnityEngine; using Unity.Burst; public class PluginManager : MonoBehaviour { public bool modsEnabled; public GameObject objectForPlugins; List<PluginModule> plugins; void Start() { plugins = new List<PluginModule>(); // If mods are disabled, early out - this allows us to disable mods, enter Play Mode, exit Play Mode //and be sure that the managed assemblies have been unloaded (assuming DomainReload occurs) if (!modsEnabled) return; var folder = Path.GetFullPath(Path.Combine(Application.dataPath, \"..\", \"Mods\")); if (Directory.Exists(folder)) { var mods = Directory.GetDirectories(folder); foreach (var mod in mods) { var modName = Path.GetFileName(mod); var monoAssembly = Path.Combine(mod, $\"{modName}_managed.dll\"); if (File.Exists(monoAssembly)) { var managedPlugin = Assembly.LoadFile(monoAssembly); var pluginModule = managedPlugin.GetType(\"MyPluginModule\"); var plugin = Activator.CreateInstance(pluginModule) as PluginModule; plugins.Add(plugin); } var burstedAssembly = Path.Combine(mod, $\"{modName}_win_x86_64.dll\"); // Burst dll (assuming windows 64bit) if (File.Exists(burstedAssembly)) { BurstRuntime.LoadAdditionalLibrary(burstedAssembly); } } } foreach (var plugin in plugins) { plugin.Startup(objectForPlugins); } } // Update is called once per frame void Update() { foreach (var plugin in plugins) { plugin.Update(objectForPlugins); } } } This code scans the \"Mods\" folder, and for each folder it finds within, it attempts to load both a managed dll and a Burst compiled dll. It does this by adding them to an internal list that it can then iterate on and call the respective interface functions. The names of the files are arbitrary: see Simple Create Mod Menu Button, which is the code that generated those files. Because this code loads the managed assemblies into the current domain, you need a domain reload to unload those before you can overwrite them. Unity automatically unloads the Burst dll files automatically unloaded when you exit Play mode. This is why a Boolean to disable the modding system is included, for testing in the Editor. A mod that uses Burst Create a separate Unity project for this to use the project to produce the mod. The following script attaches to a UI Canvas that contains a text component called Main UI Label, and changes the text when the mod is used. The text is either Plugin Updated : Bursted or Plugin Updated : Not Bursted. You will see the Plugin Updated : Bursted by default, but if you comment out the lines that load the Burst library in the PluginManager above, then the Burst compiled code doesn't load and the message changes appropriately. using Unity.Burst; using Unity.Collections; using Unity.Jobs; using UnityEngine; using UnityEngine.UI; public class MyPluginModule : PluginModule { Text textComponent; public void Startup(GameObject gameObject) { var childTextComponents = gameObject.GetComponentsInChildren<Text>(); textComponent = null; foreach (var child in childTextComponents) { if (child.name == \"Main UI Label\") { textComponent = child; } } if (textComponent==null) { Debug.LogError(\"something went wrong and i couldn't find the UI component i wanted to modify\"); } } public void Update(GameObject gameObject) { if (textComponent != null) { var t = new CheckBurstedJob { flag = new NativeArray<int>(1, Allocator.TempJob, NativeArrayOptions.UninitializedMemory) }; t.Run(); if (t.flag[0] == 0) textComponent.text = \"Plugin Updated : Not Bursted\"; else textComponent.text = \"Plugin Updated : Bursted\"; t.flag.Dispose(); } } [BurstCompile] struct CheckBurstedJob : IJob { public NativeArray<int> flag; [BurstDiscard] void CheckBurst() { flag[0] = 0; } public void Execute() { flag[0] = 1; CheckBurst(); } } } Put the above script in a folder along with an assembly definition file with an assembly name of TestMod_Managed, so that the next script can locate the managed part. Simple Create Mod Menu button The below script adds a menu button. When you use the menu button, it builds a Standalone Player, then copies the C# managed dll and the lib_burst_generated.dll into a chosen Mod folder. This example assumes you are using Windows. using UnityEditor; using System.IO; using UnityEngine; public class ScriptBatch { [MenuItem(\"Modding/Build X64 Mod (Example)\")] public static void BuildGame() { string modName = \"TestMod\"; string projectFolder = Path.Combine(Application.dataPath, \"..\"); string buildFolder = Path.Combine(projectFolder, \"PluginTemp\"); // Get filename. string path = EditorUtility.SaveFolderPanel(\"Choose Final Mod Location\", \"\", \"\"); FileUtil.DeleteFileOrDirectory(buildFolder); Directory.CreateDirectory(buildFolder); // Build player. var report = BuildPipeline.BuildPlayer(new[] { \"Assets/Scenes/SampleScene.unity\" }, Path.Combine(buildFolder, $\"{modName}.exe\"), BuildTarget.StandaloneWindows64, BuildOptions.Development); if (report.summary.result == UnityEditor.Build.Reporting.BuildResult.Succeeded) { // Copy Managed library var managedDest = Path.Combine(path, $\"{modName}_Managed.dll\"); var managedSrc = Path.Combine(buildFolder, $\"{modName}_Data/Managed/{modName}_Managed.dll\"); FileUtil.DeleteFileOrDirectory(managedDest); if (!File.Exists(managedDest)) // Managed side not unloaded FileUtil.CopyFileOrDirectory(managedSrc, managedDest); else Debug.LogWarning($\"Couldn't update manged dll, {managedDest} is it currently in use?\"); // Copy Burst library var burstedDest = Path.Combine(path, $\"{modName}_win_x86_64.dll\"); var burstedSrc = Path.Combine(buildFolder, $\"{modName}_Data/Plugins/x86_64/lib_burst_generated.dll\"); FileUtil.DeleteFileOrDirectory(burstedDest); if (!File.Exists(burstedDest)) FileUtil.CopyFileOrDirectory(burstedSrc, burstedDest); else Debug.LogWarning($\"Couldn't update bursted dll, {burstedDest} is it currently in use?\"); } } }"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-assumerange.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-assumerange.html",
    "title": "AssumeRange attribute | ModularUIPack",
    "summary": "AssumeRange attribute Use the AssumeRange attribute to tell Burst that a given scalar-integer lies within a certain constrained range. If Burst has this information, it can improve the performance of your application. The following code is an example of this: [return:AssumeRange(0u, 13u)] static uint WithConstrainedRange([AssumeRange(0, 26)] int x) { return (uint)x / 2u; } This example tells Burst the following: The variable x is in the closed-interval range [0..26], or more plainly that x >= 0 && x <= 26. The return value from WithConstrainedRange is in the closed-interval range [0..13], or more plainly that x >= 0 && x <= 13. Burst uses these assumptions to create better code generation. However, there are some restrictions: You can only place these on scalar-integer (signed or unsigned) types. The type of the range arguments must match the type being attributed. Burst has deductions for the .Length property of NativeArray and NativeSlice which indicates that these always return non-negative integers: static bool IsLengthNegative(NativeArray<float> na) { // Burst always replaces this with the constant false return na.Length < 0; } For example, if you have a container like the following: struct MyContainer { public int Length; // Some other data... } The following example shows how to tell Burst that Length is always a positive integer: struct MyContainer { private int _length; [return: AssumeRange(0, int.MaxValue)] private int LengthGetter() { return _length; } public int Length { get => LengthGetter(); set => _length = value; } // Some other data... }"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-constant.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-constant.html",
    "title": "Constant intrinsic | ModularUIPack",
    "summary": "Constant intrinsic Use the IsConstantExpression intrinsic to check if a given expression is constant at compile-time: using static Unity.Burst.CompilerServices.Constant; var somethingWhichWillBeConstantFolded = math.pow(42.0f, 42.0f); if (IsConstantExpression(somethingWhichWillBeConstantFolded)) { // Burst knows that somethingWhichWillBeConstantFolded is a compile-time constant } This is useful to check if a complex expression is always constant folded. You can use it for optimizations for a known constant value. For example, if you want to implement a pow-like function for integer powers: using static Unity.Burst.CompilerServices.Constant; public static float MyAwesomePow(float f, int i) { if (IsConstantExpression(i) && (2 == i)) { return f * f; } else { return math.pow(f, (float)i); } } The IsConstantExpression check means that Burst always removes the branch if i isn't constant, because the if condition is false. This means that if i is constant and is equal to 2, you can use a more optimal simple multiply instead. The result of IsConstantExpression intentionally depends on the result of the optimizations being run. Therefore the result can change based on whether a function gets inlined or not. For example in the case above: IsConstantExpression(i) is false on its own, because i is a function argument which is obivously not constant. However, if MyAwesomePow gets inlined with a constant value for i, then it will evaluate to true. But if MyAwesomePow ends up not being inlined for whatever reason, then IsConstantExpression(i) will remain false. Note Constant folding only takes place during optimizations. If you've disabled optimizations, the intrinsic returns false."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-hint.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-hint.html",
    "title": "Hint intrinsics | ModularUIPack",
    "summary": "Hint intrinsics Use the Hint intrinsics to add information to your code which helps with Burst optimization. It has the following methods: Unity.Burst.CompilerServices.Hint.Likely: Tells Burst that a Boolean condition is likely to be true. Unity.Burst.CompilerServices.Hint.Unlikely: Tells Burst that a Boolean condition is unlikely to be true. Unity.Burst.CompilerServices.Hint.Assume: Tells Burst that it can assume a Boolean condition is true. Likely intrinsic The Likely intrinsic is most useful to tell Burst which branch condition has a high probability of being true. This means that Burst can focus on the branch in question for optimization purposes: if (Unity.Burst.CompilerServices.Hint.Likely(b)) { // Any code in here will be optimized by Burst with the assumption that we'll probably get here! } else { // Whereas the code in here will be kept out of the way of the optimizer. } Unlikely intrinsic The Unlikely intrinsic tells Burst the opposite of the Likely intrinsic: the condition is unlikely to be true, and it should optimize against it: if (Unity.Burst.CompilerServices.Hint.Unlikely(b)) { // Whereas the code in here will be kept out of the way of the optimizer. } else { // Any code in here will be optimized by Burst with the assumption that we'll probably get here! } The Likely and Unlikely intrinsics make sure that Burst places the code most likely to be hit after the branching condition in the binary. This means that the code has a high probability of being in the instruction cache. Burst can also hoist the code out of the likely branch and spend extra time optimizing it, and not spend as much time looking at the unlikely code. An example of an unlikely branch is to check if result of an allocation is valid. The allocation is valid most of all the time, so you want the code to be fast with that assumption, but you want an error case to fall back to. Assume intrinsic The Assume intrinsic is powerful. Use it with caution because it tells Burst that a condition is always true. Warning When you use Assume, Burst assumes the value is true without checking whether it's true. Unity.Burst.CompilerServices.Hint.Assume(b); if (b) { // Burst has been told that b is always true, so this branch will always be taken. } else { // Any code in here will be removed from the program because b is always true! } Use the Assume intrinsic to arbitrarily tell Burst that something is true. For example, you can use Assume to tell Burst to assume that a loop end is always a multiple of 16, which means that it can provide perfect vectorization without any scalar spilling for that loop. You could also use it to tell Burst that a value isn't NaN, or it's negative."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-loop-vectorization.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-loop-vectorization.html",
    "title": "Loop vectorization | ModularUIPack",
    "summary": "Loop vectorization Burst uses loop vectorization to improve the performance of your code. It uses this technique to loop over multiple values at the same time, rather than looping over single values at a time, which speeds up the performance of your code. For example: [MethodImpl(MethodImplOptions.NoInlining)] private static unsafe void Bar([NoAlias] int* a, [NoAlias] int* b, int count) { for (var i = 0; i < count; i++) { a[i] += b[i]; } } public static unsafe void Foo(int count) { var a = stackalloc int[count]; var b = stackalloc int[count]; Bar(a, b, count); } Burst converts the scalar loop in Bar into a vectorized loop. Then, instead of looping over a single value at a time, it generates code that loops over multiple values at the same time, which produces faster code. This is the x64 assembly Burst generates for AVX2 for the loop in Bar above: .LBB1_4: vmovdqu ymm0, ymmword ptr [rdx + 4*rax] vmovdqu ymm1, ymmword ptr [rdx + 4*rax + 32] vmovdqu ymm2, ymmword ptr [rdx + 4*rax + 64] vmovdqu ymm3, ymmword ptr [rdx + 4*rax + 96] vpaddd ymm0, ymm0, ymmword ptr [rcx + 4*rax] vpaddd ymm1, ymm1, ymmword ptr [rcx + 4*rax + 32] vpaddd ymm2, ymm2, ymmword ptr [rcx + 4*rax + 64] vpaddd ymm3, ymm3, ymmword ptr [rcx + 4*rax + 96] vmovdqu ymmword ptr [rcx + 4*rax], ymm0 vmovdqu ymmword ptr [rcx + 4*rax + 32], ymm1 vmovdqu ymmword ptr [rcx + 4*rax + 64], ymm2 vmovdqu ymmword ptr [rcx + 4*rax + 96], ymm3 add rax, 32 cmp r8, rax jne .LBB1_4 Burst has unrolled and vectorized the loop into four vpaddd instructions, which calculate eight integer additions each, for a total of 32 integer additions per loop iteration. Loop vectorization intrinsics Burst includes experimental intrinsics to express loop vectorization assumptions: Loop.ExpectVectorized and Loop.ExpectNotVectorized. Burst then validates the loop vectorization at compile-time. This is useful in a situation where you might break the auto vectorization. For example, if you introduce a branch to the code: [MethodImpl(MethodImplOptions.NoInlining)] private static unsafe void Bar([NoAlias] int* a, [NoAlias] int* b, int count) { for (var i = 0; i < count; i++) { if (a[i] > b[i]) { break; } a[i] += b[i]; } } This changes the assembly to the following: .LBB1_3: mov r9d, dword ptr [rcx + 4*r10] mov eax, dword ptr [rdx + 4*r10] cmp r9d, eax jg .LBB1_4 add eax, r9d mov dword ptr [rcx + 4*r10], eax inc r10 cmp r8, r10 jne .LBB1_3 This isn't ideal because the loop is scalar and only has 1 integer addition per loop iteration. It can be difficult to spot this happening in your code, so use the experimental intrinsics Loop.ExpectVectorized and Loop.ExpectNotVectorized to express loop vectorization assumptions. Burst then validates the loop vectorization at compile-time. Because the intrinsics are experimental, you need to use the UNITY_BURST_EXPERIMENTAL_LOOP_INTRINSICS preprocessor define to enable them. The following example shows the original Bar example with the Loop.ExpectVectorized intrinsic: [MethodImpl(MethodImplOptions.NoInlining)] private static unsafe void Bar([NoAlias] int* a, [NoAlias] int* b, int count) { for (var i = 0; i < count; i++) { Unity.Burst.CompilerServices.Loop.ExpectVectorized(); a[i] += b[i]; } } Burst then validates at compile-time whether the loop is vectorized. If the loop isn't vectorized, Burst emits a compiler error. The following example produces an error: [MethodImpl(MethodImplOptions.NoInlining)] private static unsafe void Bar([NoAlias] int* a, [NoAlias] int* b, int count) { for (var i = 0; i < count; i++) { Unity.Burst.CompilerServices.Loop.ExpectVectorized(); if (a[i] > b[i]) { break; } a[i] += b[i]; } } Burst emits the following error at compile-time: LoopIntrinsics.cs(6,9): Burst error BC1321: The loop is not vectorized where it was expected that it is vectorized. Important These intrinsics don't work inside if statements. Burst doesn't prevent this from happening, so you won't see a compile-time error for this."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-overview.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-overview.html",
    "title": "Optimization | ModularUIPack",
    "summary": "Optimization Best practices around optimizing Burst-compiled code. Topic Description Debugging and profiling tools Debug and profile your Burst-compiled code in the Editor and in player builds. Loop vectorization optimization Understand how Burst uses loop vectorization to optimize your code. Memory aliasing Use memory aliasing to tell Burst how your code uses data. AssumeRange attribute Use AssumeRange to tell Burst a given scalar-integer lies within a certain constrained range. Hint intrinsic Use the Hint intrinsic to give Burst more information about your data. Constant intrinsic Use IsConstantExpression top check if an expression is constant at run time. SkipLocalsInit attribute Use SkipLocalsInitAttribute to tell Burst that any stack allocations within a method don't have to be initialized to zero. Additional resources Burst intrinsics"
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-skiplocalsinit.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Documentation~/optimization-skiplocalsinit.html",
    "title": "SkipLocalsInit attribute | ModularUIPack",
    "summary": "SkipLocalsInit attribute Use SkipLocalsInitAttribute, to tell Burst that any stack allocations within a method don't have to be initialized to zero. In C# all local variables are initialized to zero by default. This is useful because it means an entire class of bugs surrounding undefined data disappears. But this can impact runtime performance, because initializing this data to zero takes work: static unsafe int DoSomethingWithLUT(int* data); static unsafe int DoSomething(int size) { int* data = stackalloc int[size]; // Initialize every field of data to be an incrementing set of values. for (int i = 0; i < size; i++) { data[i] = i; } // Use the data elsewhere. return DoSomethingWithLUT(data); } The X86 assembly for this is: push rbp .seh_pushreg rbp push rsi .seh_pushreg rsi push rdi .seh_pushreg rdi mov rbp, rsp .seh_setframe rbp, 0 .seh_endprologue mov edi, ecx lea r8d, [4*rdi] lea rax, [r8 + 15] and rax, -16 movabs r11, offset __chkstk call r11 sub rsp, rax mov rsi, rsp sub rsp, 32 movabs rax, offset burst.memset.inline.X64_SSE4.i32@@32 mov rcx, rsi xor edx, edx xor r9d, r9d call rax add rsp, 32 test edi, edi jle .LBB0_7 mov eax, edi cmp edi, 8 jae .LBB0_3 xor ecx, ecx jmp .LBB0_6 .LBB0_3: mov ecx, eax and ecx, -8 movabs rdx, offset __xmm@00000003000000020000000100000000 movdqa xmm0, xmmword ptr [rdx] mov rdx, rsi add rdx, 16 movabs rdi, offset __xmm@00000004000000040000000400000004 movdqa xmm1, xmmword ptr [rdi] movabs rdi, offset __xmm@00000008000000080000000800000008 movdqa xmm2, xmmword ptr [rdi] mov rdi, rcx .p2align 4, 0x90 .LBB0_4: movdqa xmm3, xmm0 paddd xmm3, xmm1 movdqu xmmword ptr [rdx - 16], xmm0 movdqu xmmword ptr [rdx], xmm3 paddd xmm0, xmm2 add rdx, 32 add rdi, -8 jne .LBB0_4 cmp rcx, rax je .LBB0_7 .p2align 4, 0x90 .LBB0_6: mov dword ptr [rsi + 4*rcx], ecx inc rcx cmp rax, rcx jne .LBB0_6 .LBB0_7: sub rsp, 32 movabs rax, offset \"DoSomethingWithLUT\" mov rcx, rsi call rax nop mov rsp, rbp pop rdi pop rsi pop rbp ret In this example, the movabs rax, offset burst.memset.inline.X64_SSE4.i32@@32 line means that you've had to inject a memset to zero out the data. In the above example, you know that the array is entirely initialized in the following loop, but Burst doesn't know that. To fix this problem, use Unity.Burst.CompilerServices.SkipLocalsInitAttribute, which tells Burst that any stack allocations within a method don't have to be initialized to zero. Note Only use this attribute if you're certain that you won't run into undefined behavior bugs. For example: using Unity.Burst.CompilerServices; static unsafe int DoSomethingWithLUT(int* data); [SkipLocalsInit] static unsafe int DoSomething(int size) { int* data = stackalloc int[size]; // Initialize every field of data to be an incrementing set of values. for (int i = 0; i < size; i++) { data[i] = i; } // Use the data elsewhere. return DoSomethingWithLUT(data); } The assembly after adding the [SkipLocalsInit] on the method is: push rbp .seh_pushreg rbp mov rbp, rsp .seh_setframe rbp, 0 .seh_endprologue mov edx, ecx lea eax, [4*rdx] add rax, 15 and rax, -16 movabs r11, offset __chkstk call r11 sub rsp, rax mov rcx, rsp test edx, edx jle .LBB0_7 mov r8d, edx cmp edx, 8 jae .LBB0_3 xor r10d, r10d jmp .LBB0_6 .LBB0_3: mov r10d, r8d and r10d, -8 movabs rax, offset __xmm@00000003000000020000000100000000 movdqa xmm0, xmmword ptr [rax] mov rax, rcx add rax, 16 movabs rdx, offset __xmm@00000004000000040000000400000004 movdqa xmm1, xmmword ptr [rdx] movabs rdx, offset __xmm@00000008000000080000000800000008 movdqa xmm2, xmmword ptr [rdx] mov r9, r10 .p2align 4, 0x90 .LBB0_4: movdqa xmm3, xmm0 paddd xmm3, xmm1 movdqu xmmword ptr [rax - 16], xmm0 movdqu xmmword ptr [rax], xmm3 paddd xmm0, xmm2 add rax, 32 add r9, -8 jne .LBB0_4 cmp r10, r8 je .LBB0_7 .p2align 4, 0x90 .LBB0_6: mov dword ptr [rcx + 4*r10], r10d inc r10 cmp r8, r10 jne .LBB0_6 .LBB0_7: sub rsp, 32 movabs rax, offset \"DoSomethingWithLUT\" call rax nop mov rsp, rbp pop rbp ret The call to memset is now gone, because you've told Burst that any stack allocations within a method don't have to be initialized to zero."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "Burst copyright © 2022 Unity Technologies Source code of the package is licensed under the Unity Companion License (see https://unity3d.com/legal/licenses/unity_companion_license); otherwise licensed under the Unity Package Distribution License (see https://unity3d.com/legal/licenses/Unity_Package_Distribution_License ). Unless expressly provided otherwise, the software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.burst@1.8.19/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.burst@1.8.19/Third Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: LLVM License Type: Apache 2.0 with LLVM Exceptions Copyright: The LLVM project does not collect copyright assignments, which means that the copyright for the code in the project is held by the respective contributors. Because you (or your company) retain ownership of the code you contribute, you know it may only be used under the terms of the open source license you contributed it under: the license for your contributions cannot be changed in the future without your approval. https://github.com/llvm/llvm-project/tree/main/llvm Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --- LLVM Exceptions to the Apache 2.0 License --- As an exception, if, as a result of your compiling your source code, portions of this Software are embedded into an Object form of such source code, you may redistribute such embedded portions in such Object form without complying with the conditions of Sections 4(a), 4(b) and 4(d) of the License. In addition, if you combine or link compiled forms of this Software with software that is licensed under the GPLv2 (\"Combined Software\") and if a court of competent jurisdiction determines that the patent provision (Section 3), the indemnity provision (Section 9) or other Section of the License conflicts with the conditions of the GPLv2, you may retroactively and prospectively choose to deem waived or otherwise exclude such Section(s) of the License, but only in their entirety and only with respect to the Combined Software. Component Name: Legacy LLVM License License Type: The University of Illinois/NCSA Open Source License (NCSA) Copyright (c) 2007-2019 University of Illinois at Urbana-Champaign. All rights reserved. https://llvm.org/docs/DeveloperPolicy.html#legacy Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal with the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution. LLVM Team, University of Illinois at Urbana-Champaign, nor the names of its contributors may be used to endorse or promote products derived from this Software without specific prior written permission. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE. Component Name: Mono.Cecil License Type: MIT Copyright (c) 2008 - 2015 Jb Evain All rights reserved. Copyright (c) 2008 - 2011 Novell, Inc. All rights reserved. https://github.com/jbevain/cecil Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Smash License Type: BSD 2-Clause Copyright (c) 2021, Alexandre Mutel All rights reserved. https://github.com/xoofx/smash Redistribution and use in source and binary forms, with or without modification , are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Component Name: xxHash Library License Type: BSD 2-Clause Copyright (c) 2012-2021, Yann Collet All rights reserved. https://github.com/Cyan4973/xxHash Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Component Name: musl musl as a whole is licensed under the following standard MIT license: Copyright © 2005-2019 Rich Felker, et al. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Authors/contributors include: A. Wilcox Alex Dowad Alex Suykov Alexander Monakov Andre McCurdy Andrew Kelley Anthony G. Basile Aric Belsito Arvid Picciani Bartosz Brachaczek Benjamin Peterson Bobby Bingham Boris Brezillon Brent Cook Chris Spiegel Clément Vasseur Daniel Micay Daniel Sabogal Daurnimator David Carlier David Edelsohn Denys Vlasenko Dmitry Ivanov Dmitry V. Levin Drew DeVault Emil Renner Berthing Fangrui Song Felix Fietkau Felix Janda Gianluca Anzolin Hauke Mehrtens He X Hiltjo Posthuma Isaac Dunham Jaydeep Patil Jens Gustedt Jeremy Huntwork Jo-Philipp Wich Joakim Sindholt John Spencer Josiah Worcester Julien Ramseier Justin Cormack Kaarle Ritvanen Khem Raj Kylie McClain Leah Neukirchen Luca Barbato Luka Perkov M Farkas-Dyck (Strake) Mahesh Bodapati Markus Wichmann Masanori Ogino Michael Clark Michael Forney Mikhail Kremnyov Natanael Copa Nicholas J. Kain orc Pascal Cuoq Patrick Oppenlander Petr Hosek Petr Skocik Pierre Carrier Reini Urban Rich Felker Richard Pennington Ryan Fairfax Samuel Holland Segev Finer Shiz sin Solar Designer Stefan Kristiansson Stefan O'Rear Szabolcs Nagy Timo Teräs Trutz Behn Valentin Ochs Will Dietz William Haddon William Pitcock Portions of this software are derived from third-party works licensed under terms compatible with the above MIT license: The TRE regular expression implementation (src/regex/reg* and src/regex/tre*) is Copyright © 2001-2008 Ville Laurikari and licensed under a 2-clause BSD license (license text in the source files). The included version has been heavily modified by Rich Felker in 2012, in the interests of size, simplicity, and namespace cleanliness. Much of the math library code (src/math/* and src/complex/*) is Copyright © 1993,2004 Sun Microsystems or Copyright © 2003-2011 David Schultz or Copyright © 2003-2009 Steven G. Kargl or Copyright © 2003-2009 Bruce D. Evans or Copyright © 2008 Stephen L. Moshier and labelled as such in comments in the individual source files. All have been licensed under extremely permissive terms. The ARM memcpy code (src/string/arm/memcpy_el.S) is Copyright © 2008 The Android Open Source Project and is licensed under a two-clause BSD license. It was taken from Bionic libc, used on Android. The implementation of DES for crypt (src/crypt/crypt_des.c) is Copyright © 1994 David Burren. It is licensed under a BSD license. The implementation of blowfish crypt (src/crypt/crypt_blowfish.c) was originally written by Solar Designer and placed into the public domain. The code also comes with a fallback permissive license for use in jurisdictions that may not recognize the public domain. The smoothsort implementation (src/stdlib/qsort.c) is Copyright © 2011 Valentin Ochs and is licensed under an MIT-style license. The x86_64 port was written by Nicholas J. Kain and is licensed under the standard MIT terms. The mips and microblaze ports were originally written by Richard Pennington for use in the ellcc project. The original code was adapted by Rich Felker for build system and code conventions during upstream integration. It is licensed under the standard MIT terms. The mips64 port was contributed by Imagination Technologies and is licensed under the standard MIT terms. The powerpc port was also originally written by Richard Pennington, and later supplemented and integrated by John Spencer. It is licensed under the standard MIT terms. All other files which have no copyright comments are original works produced specifically for use as part of this library, written either by Rich Felker, the main author of the library, or by one or more contibutors listed above. Details on authorship of individual files can be found in the git version control history of the project. The omission of copyright and license comments in each file is in the interest of source tree size. In addition, permission is hereby granted for all public header files (include/* and arch//bits/) and crt files intended to be linked into applications (crt/, ldso/dlstart.c, and arch//crt_arch.h) to omit the copyright notice and permission notice otherwise required by the license, and to use these files without any requirement of attribution. These files include substantial contributions from: Bobby Bingham John Spencer Nicholas J. Kain Rich Felker Richard Pennington Stefan Kristiansson Szabolcs Nagy all of whom have explicitly granted such permission. This file previously contained text expressing a belief that most of the files covered by the above exception were sufficiently trivial not to be subject to copyright, resulting in confusion over whether it negated the permissions granted in the license. In the spirit of permissive licensing, and of not having licensing issues being an obstacle to adoption, that text has been removed. Component Name: SLEEF Boost Software License - Version 1.0 - August 17th, 2003 Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this license (the \"Software\") to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software is furnished to do so, all subject to the following: The copyright notices in the Software and this entire statement, including the above license grant, this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: gRPC for .NET Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Component Name: Google.Protobuf Copyright 2008 Google Inc. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of Google Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Code generated by the Protocol Buffer compiler is owned by the owner of the input file used when generating it. This code is not standalone and requires a support library to be linked with it. This support library is itself covered by the above license. Component Name: mimalloc MIT License Copyright (c) 2018-2021 Microsoft Corporation, Daan Leijen Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog All notable changes to this package will be documented in this file. [2.7.1] - 2025-02-13 Added You can now Shelve your selected Pending Changes, inspect the shelves content, and apply them to your workspace. You can now Shelve your Pending Changes when switching to another branch (or changeset) and decide if you want to apply them automatically after the switch. You can now create a code review from the list of branches (or changesets) opening either the Desktop App or the Unity Cloud website. Changed Serialize the Checkin comment and tick selection so they are kept on any domain reload and play mode. Optimized incoming changes & merge to only reload the Package Manager when needed. Added dedicated toolbar buttons to open the list of branches and the Branch Explorer of the Desktop App. Reworded the changeset context menu \"Undo this change\" to \"Revert this file to the previous revision\" so it’s more explicit. Moved the 'Unity Version Control' menu item under 'Window'/'Version Control' submenu starting from Unity 6.1. Improve the Create workspace window to suggest the matching Unity Cloud project if it exists. Fixed Ensured ignore.conf is not being reformatted when adding or removing an ignore rule, so it keeps empty lines and comments. Fixed missing checked-out for renamed assets. Fixed rename asset leaves 'Added' + 'Remove locally' status instead of 'Moved'. Fixed console error GUI Error: Invalid GUILayout state in PlasticWindow view which is caused under some circumstances. Fixed null exception on entering in Play Mode before creating the workspace. Fixed lock statuses to correctly refresh in Project View and Inspector after merging. Fixed a performance issue by preventing the ConfigureLogging call on every domain reload when Unity Version Control is not used, reducing the load time by ~200ms. . Fixed the create branch operation to work in Gluon mode which uses partial workspaces. [2.6.0] - 2024-11-28 Added Added the ability to merge a branch or a changeset, using a new context menu actions Added file conflict & dir conflict context menu actions to the merge view Added diff and merge settings in Project Settings -> Version Control -> Unity Version Control Settings Added merge options dialog to the merge view Added copy path & history context menu actions in all menus where they apply Added an menu entry to 'Open in Unity Cloud' showing the repository in the Unity Dashboard Changed Updated the minimum supported version to Unity 2021.3.0f1 Removed support for migrating old Collaborate workspaces to Unity Version Control Hide from the public documentation all internal APIs that were previously visible by mistake Optimized switching operations to only triggers the Package Manager to reinstall packages when needed Optimized incoming changes to only reload the Package Manager when needed (Gluon/partial workspace only for now) Automatically add UnityDirMonSyncFile rule for existing ignore.conf to avoid triggering unnecessary finding changes operation Improved the “search” edit box so it can resize when there is not enough space in the toolbar Replaced the \"D\" DevOps icon by the branching icon used in the Hub Replaced the logo of Unity in the Sign in to Unity VCS window Fixed Fixed files getting checked out even though they are in hidden_changes.conf Fixed manual login to Cloud that didn't work with an Enterprise installation Fixed resolve conflicts not informing about lack of UVCS installation Fixed the Invite users to cloud organization when using an Enterprise installation Fixed new child branch not created from HEAD after update Fixed the learn more (here) link that showed the hex color value in Unity 6 Fixed link to invite members in Unity Cloud. Fixed a crash in the create workspace window when unable to resolve a @unity organization Fixed incoming changes view that was not kept as selected after resolving some conflicts Fixed workspace name that was not refreshed after repository manual creation or selection Added a warning message to inform users about mismatching cloud project. Removed from the Create Workspace window the Local server that was present with no installation of UVCS Replaced hardcoded urls pointing to plasticscm.com [2.5.2] - 2024-09-25 Fixed Fixed token renewal issue: Can't obtain a new token (Message: Invalid Refresh Token., Code: 132.104) Reworded labels in the Create Repository window and added a link to Create a new organization project. [2.5.1] - 2024-09-04 Added Added support for the new @unity organizations Allow deletion of non-empty branches that have not been merged anywhere New setting to control if new files must be automatically added to source control Changed Improve the dialog to install Unity Version Control from the Editor Fixed Fixed 'an existing xxx operation has locked the workspace' error on finding changes operation Fixed a case of a hang happening on Editor quit Fixed the login that could fail for Enterprise installation Fixed undo operation that didn't capture changes in packages Fixed history that was not shown when there was no desktop client installed Fixed unity 6 Editor going into the background after a dialog was closed Fixed wrong font size when changing to changesets view Fixed the \"Upgrade plan\" button in Unity plugin that used a obsolete redirection link Fixed Logs that were configured too late in the initialization Fixed the minimum supported version (2020.3.48f1 LTS) in the README [2.4.4] - 2024-07-19 Fixed Fixed the Unity Editor stuck on \"Creating workspace\" when \"Use Unity Version Control\" was selected from the Hub [2.4.3] - 2024-06-20 Added Changed the default ignore.conf to not ignore itself Added \"Undo unchanged\" and \"Undo checkouts keeping changes\" options to pending changes view Removed focus redirection after Check-in Fixed Moving folders in the Editor now correctly use the UVCS \"Move\" operation Fixed hang on domain reload Fixed \"item with the same key has already been added\" error Fixed failure to delete a .meta file when deleting a private folder from the pending changes Supported workspace name with non-latin characters in Pending Changes Fixed text cut-off in filter rules dialog Fixed unexpected error while switching between branches Fixed error after renaming a parent branch of the working branch Fixed variables's value becoming clear after resolving conflict in inspector Removed misleading indication about shelves Fixed column sorting in pending changes view Fixed missing incoming changes after removing a branch Fixed \"Collection was modified\" error when doing multiple renames in a row Fixed undo & check-in operations not working when the current scene was never saved Fixed check in error if nothing is selected in the pending changes tree [2.3.1] - 2024-02-27 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added New view to list and manage locks. Fixed Fixed DropdownField not working properly on a ModalUtility window on MacOS. Fixed issue with existing checkout operations locking the workspace. Reviewed initialization and application lifecycle. Fixed layout error when switching checkout status in the inspector. Fixed Diff option unavailable for .prefab. Fixed UI error when opening and closing multiple closable tabs. Ensured branch creations start from the latest changeset. Unable to expand added item list after collapsing. Pending Changes context menu had the view file history greyed out for asset+meta. Preconfigured date format was not recognized as a valid DateTime. Fixed finding changes operation being firing constantly. Removed obsolete content in package documentation. Fixed typo in locks tooltip. Replaced the text \"plasticscm.com\" by a https://unity.com/solutions/version-control in the package.json [2.2.0] - 2023-10-06 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added button for organization owner/admins to upgrade to DevOps subscription. Included new decorators for retained & locked files. Changed Updated description in the package.json, including an updated link to get started. Fixed Fixed failed operations when the workspace is already locked. [2.1.0] - 2023-09-01 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added command to support Hub creating a new project, and connecting a project to Unity Version Control. Show a message with a link to invite users to the organization after the first checkin. Changed Moved the button to invite users to the organization from the submenu to the toolbar. Removed Don't write cloudProjectId in ProjectSettings.asset anymore since it should only be managed by Services. Fixed Fixed Add to ignored/hidden changes list from the Project window creating a negative rule. Fixed Switch to changeset not working on Gluon partial workspace. [2.0.7] - 2023-07-25 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Fixed Fixed the Unity Version Control icon disappearing from the Editor Toolbar on domain reload. Fixed the popup stating \"An existing checkout operation has locked the workspace\" when trying to check in a scene with unsaved changes. [2.0.5] - 2023-05-31 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Fixed Fixed remaining references to 'Plastic SCM' in localized labels. [2.0.4] - 2023-04-14 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Fixed Fixed 'Texture2D' does not contain a definition for 'ignoreMipmapLimit' error when installing Unity Version Control on previous Unity Editor Versions Fixed broken sign in dialog style when waiting for user to complete sign in Fixed NullReferenceException when opening a new project and the user doesn't have a Unity Version Control organization linked to a Unity ID [2.0.3] - 2023-03-29 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Changed Changed the icons for Unity Version Control rebranding Changed onboarding workflow Fixed Fixed blurry icons in the Unity Version Control window and toolbar button Fixed Pending Changes tab not always opening its selected item's location in Project window Fixed \"Checked-out (changed)\" status icon not showing up on Pending Changes tab Fixed issue that prevented new packages from being installed unless user enters play mode [2.0.1] - 2023-02-17 Unity Version Control is now available as part of the Version Control Package! You can enable Unity Version Control via Window > Unity Version Control to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Changed Updated branding from \"Plastic SCM\" to \"Unity Version Control\" Improved offline experience by disabling the plugin when there is no internet connection [2.0.0] - 2023-01-11 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Changed Removed Collab from the package [1.17.7] - 2022-10-28 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added offline mode toggle for smoother offline experience Fixed Fixed performance issue with FindWorkspaceForPath method called multiple times every frame Fixed performance issue with UI.CooldownWindowDelayer.OnUpdate running on project without Plastic SCM workspace [1.17.6] - 2022-10-06 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Changed Changed the \"Go back to changeset\" option in Changesets tab to \"Revert to changeset\" Improved notification banner appearance Fixed Fixed editor refresh triggering when a workspace update is in progress Fixed pending changes show global ignored as private Removed encryption checkbox from create organization dialog [1.17.2] - 2022-07-06 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added notification banner on the status bar for live updates Changed Renamed \"Invite members to workspace\" option to \"Invite members to organization\" Fixed Fixed not being able to view changesets in a Gluon workspace Fixed not being able to insert carriage return in checkin dialog [1.17.1] - 2022-06-21 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Fixed Fixed missing references in synced prefabs [1.17.0] - 2022-06-13 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added option to enable changelists and display them in pending changes tab Added changelist related options to pending changes context menu Fixed Fixed editor hangs when there is no network available Fixed existing checkout has locked the workspace error Fixed checkin fails over unstable connection [1.15.18] - 2022-05-18 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Fixed Fixed editor hang when entering Play Mode [1.15.17] - 2022-04-27 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added checkin comment column to Incoming Changes view Changed Updated Go Back confirmation message to be consistent with feature Updated Create Child Branch dialog to focus on branch name field when opened Improved messaging of Subtractive Merge after using Go Back feature Fixed Fixed assets not added correctly when Plastic SCM window is not open Fixed wrong position of overlay icons on Pending Changes view Disallowed Go Back feature to a changeset from another branch [1.15.16] - 2022-03-28 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added \"Switch to changeset\" menu option in changesets view Added \"Go back to changeset\" menu option in changesets view Changed Removed category icons from views Removed \"com.unity.services.core\" package dependency Fixed Fixed light theme icons used in dark theme after pulling incoming changes Fixed \"Input string was not in a correct format\" error [1.15.15] - 2022-03-09 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added checkout option in scene prefab view Changed Updated file overlay icon size to adapt to project window zoom level Updated the styling of number of items in a category in Gluon incoming changes view Fixed Fixed Plastic X not opening from plugin menu Fixed error when trying to invite members to proect Fixed editor unhandled errors being hijacked by the plugin Fixed toolbar icon not displaying incoming changes notification when Plastic window is closed Fixed VCCache::instance != NULL error when opening a project with Plastic window opened [1.15.13] - 2022-02-14 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added branch name column in changeset view Changed Updated checkin comment box to keep the last comment after checkin error Fixed Fixed performance regression in large projects due to FindObjectsOfTypeAll calls [1.15.12] - 2022-01-27 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added option to \"Save Revision as\" to the context menu in the changesets view Added incoming changes overview bar for Gluon workspace Changed Updated the styling for number of items in category for pending changes view Updated the styling for number of items in category for changesets view Updated the styling for tabs close button Updated the color in different sections of the plugin Reduced dialog padding for the \"Create Branch\" dialog Updated the display overlay icons to show even if PlasticSCM window is closed Updated styling of number of items in incoming changes category Improved plugin initialization process and let the plugin functions without needing the Plastic window opened Disabled the invite button when user does not have invite permission or not on a cloud repo Fixed Fixed size info in incoming changes view does not match actual changes size Fixed checkin and checkout options not respecting inspector locked status Fixed buttons in inspector view displayed even when Plastic window is closed Fixed icon incorrect sizes Fixed errors on create branch dialog Fixed Newtonsoft.Json.dll conflicts with other external packages Fixed editor objects count increasing when hovering over Plastic window or toolbar button Fixed ArgumentOutOfRange exception when creating a branch Fixed scene reloading not happening after creating a new branch [1.15.7] - 2021-12-02 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added option to \"Save Revision as\" to the context menu in the changesets view Added incoming changes overview bar for Gluon workspace Changed Moved Plastic Package settings to the Unity Project Settings window Refined styling for Updating Workplace success state Updated texts for empty state and overview bar Removed Incoming Changes notification from empty state Updated the text for Forced Checkout option Refined the status overlay icons Updated the refresh icon on the toolbar Updated the texts for empty checkin message dialog Fixed Fixed capitalization of Pending Changes and File History tab names Fixed the amount of spacing after the Item column title in the Pending Changes tab Removed pin striping from line items in File History tab Fixed project view context menu and icons missing after Collaborate project migration Fixed migrated projects not downloading correctly from Unity Hub [1.15.4] - 2021-11-10 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Add option to \"Add to ignore file\" in context menu in the project view Added empty state message for Pending Changes tab Added success state message for Pending Changes tab Added metrics for Branches tab functionalities Changed Removed pinstriping in the Gluon Incoming Changes window Removed the “Nothing to download” bar from the Incoming Changes window when there are no items to download Changed the default metadata columns shown in the Incoming Changes screen Updated the alignment of sorting arrows to the right of the column Fixed Fixed UI overlays in Project view missing on changed assets when force checkout is disabled Fixed console error when selecting object in Scene view hierarchy or creating a new asset Fixed NullReferenceException after closing the Plastic SCM window [1.15.1] - 2021-10-21 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added visual overview bar to the incoming changes tab Added progress dialog for the migration process Added Branches tab that shows a list of all branches in the repository Added option and dialog to create a child branch from selected branch. Added option to switch to another branch Added option and dialog to rename a branch Added option to delete a branch Added a preference to save if the window should open the Branches tab by default Added metrics for Plastic SCM installation window usage Changed Updated texts for workspace modes selection and checkin comment box Updated status bar notification icons Fixed Fixed inverted text for the force checkout option Fixed typing capital O in checkin comment would open the selected item Fixed loading indicator not centered on Plastic SCM installation window Fixed installing Plastic SCM would sign out user from the plugin Removed extra refresh button on Gluon's Incoming Changes tab Fixed loading indicator not centered on Plastic SCM installation window Fixed missing Plastic SCM window option when user is not signed in on Unity Hub Removed meta file warning message for the deleted Beta folder Fixed Plastic SCM menu missing from Project view context menu [1.13.5] - 2021-09-27 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added workspace migration from Collab to Plastic which can be done with or without Plastic installed Added notification status icons Added light and dark mode versions of avatar icon Changed Updated texts for migration Improved usage analytics around Editor and Plugin version Workspace Migration Adjustments Fixed Renamed the CoreServices namespace so it doesn't conflict with other packages Devex integration to properly depend on Core Fixed some situations where the history window would be blank Fixed missing Enterprise login link Fixed low resolution icons in light theme [1.11.2] - 2021-08-27 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added horizontal scroll bar to Changesets list for easier viewing Added auto-login for SSO credentials handler Added metrics for changeset tab usage Added metrics for checkin actions Added new Undo icon Added missing API documentation Added ability to modify assets without checkout Added ability to allow empty checkin messages Added empty checking message localization Added Plastic toolbar button to Unity editor Added notification icon for incoming changes to Plastic toolbar button Changed Removed the unneeded refresh button from History Tab Moved search bar to the top right global icon section in all tabs Updated capitalization of options in the Settings context menu Updated tab button styling to be consistent with Unity Editor conventions Status bar visible across all tabs Moved refresh button to the toolbar at the top right corner of the window Moved changesets time period selector to the right corner of the window Removed \"Changes of changeset\" header on the Changesets tab Moved number of selected items next to \"Item\" metadata title on the Pending Changes tab Improved refresh icon resolution Changed changesets detail to appear in vertical column Reduced default number of columns in changesets tab The number of changesets is no longer displayed in changesets tab Changed Launch branch explorer into an icon with tooltip Removed the hide changes button in changesets tab Moved incoming change prompt and button into a status bar Changed \"Launch Plastic\" to \"Launch Plastic SCM\" in options menu Wording change for plastic installation Updated file status icons Fixed Fixed a bug where the Texture2D error would pop up after downloading a project Fixed a bug when context menu would sometimes disappear Fixed small textbox on checkin dialog when launched from context menu Fixed a workspace NullReferenceException bug Fixed notification icon not showing on Plastic window Fixed auto login errors not showing up for users Fixed unexpected error message after user switched workspace to a label [1.9.0] - 2021-07-13 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added Checkin and Update confirmation notification Added auto sign in when logged into Unity account Changed Simplified UI: decluttered UI Improved load time performance Fixed Fixed view not switching to workspace after creating an Enterprise Gluon workspace Fixed contextual menu not showing up in project view Fixed SSO renew token after password change Fixed some namespace collisions with Antlr3 [1.7.1] - 2021-06-25 Plastic SCM for Unity is now available as part of the Version Control Package! You can enable Plastic SCM via Window > Plastic SCM to get started! If you have previously used the Unity Asset Store Plastic SCM plug-in, you can now simply use this package. Make sure you delete the plug-in from your project. Removing a previously added Plastic SCM Asset Store Plug-In: Select the PlasticSCM folder in the Assets\\Plugins folder on the Project tab, then click Edit > Delete Close the Unity Editor and open your project again. You will find the Plastic SCM menu item in the Window menu. Added Added support for inviting other members. This option is available from the gear / settings icon. Added support for signing in with Cloud Edition. This is available during the onboarding screen if you have never signed in. Added support for turning off Plastic in their project. This option removes the Plastic metadata from your directory. This option is available under Assets > Plastic SCM > Turn off Plastic SCM Added notification on the Plastic SCM tab title to indicate incoming changes. Users will no longer need to have the Plastic SCM window visible to know there are incoming changes. Auto configuration of SSO Added date column in incoming changes Changed Updating license to better conform with expected customer usage. Updated documentation file to meet standards. Updated third-party usage. No longer requires downloading of the full Plastic client. Basic features will work without additional installation. Features that require the full Plastic client will allow download and install as needed. Usability improvements around checking in code Improved update workspace tab UX Plastic SCM context menu is now available even if the Plastic SCM window is closed Fixed Stability and performance improvements [1.5.7] - 2021-04-07 Unreleased The Version Control package will be expanding to include both Collaborate and Plastic SCM version control interfaces. This release is preparing for that move and contains no new functionality or bug fixes for Collaborate. Changed Collaborate Package renamed to Version Control with changes to package display name and description. Fixed Fixed NPE when updating the version of the Collab package. [1.3.9] - 2020-07-13 Fixed Unnecessary use of texture compression in icons that slowed down platform switching Update publish button state when selected changes update Use colorized icons when changes are available. [1.3.8] - 2020-06-08 Fixed Fix incorrect priority of error messages Fix Collab button being stuck in inprogress state Fix error when partially publishing without the window open [1.3.7] - 2020-01-30 Changed Bulk revert is now supported. Collab is blocked in play mode. Fixed Fixed services window's links to open Collab. [1.3.6] - 2020-01-21 Fixed Fixed compile errors when removing the NUnit package by removing unnecessary references. [1.3.5] - 2020-01-08 Fixed Fix \"accept mine\" / \"accept remote\" icon swap in conflicts view. [1.3.4] - 2019-12-16 Changed Window state is no longer restored after the window is closed and opened. Fixed History tab failing to load on startup if it is left open in the previous session. Progress bar percentage not matching the bar. History list correctly updates after a new revision is published. UI instabilities when restoring or going back to a revision with a different package manifest. Improve handling of changes to the project id. [1.3.3] - 2019-12-10 Changed Disable UI test cases that can be unstable. [1.3.2] - 2019-12-05 Changed Update UX to UIElements. Increased minimum supported version to 2020.1. Update Documentation to required standards. [1.2.16] - 2019-02-11 Fixed Update stylesheet to pass USS validation [1.2.15] - 2018-11-16 Changed Added support for non-experimental UIElements. [1.2.11] - 2018-09-04 Fixed Made some performance improvements to reduce impact on ReloadAssemblies. [1.2.9] - 2018-08-13 Fixed Test issues for the Collab History Window are now fixed. [1.2.7] - 2018-08-07 Fixed Toolbar drop-down will no longer show up when package is uninstalled. [1.2.6] - 2018-06-15 Fixed Fixed an issue where Collab's History window wouldn't load properly. [1.2.5] - 2018-05-21 This is the first release of Unity Package CollabProxy. Added Collab history and toolbar windows Collab view and presenter classes Collab Editor tests for view and presenter"
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/AccessRemoteProjects.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/AccessRemoteProjects.html",
    "title": "Access remote projects | ModularUIPack",
    "summary": "Access remote projects In the Unity Hub v3, click Open > Open Remote Project to see the list of your version control repositories that contain a Unity project. Select the project and click Next. Select the Editor version and platform and click the change version button. Your local version control workspace will be created for you. The latest version of the project will be downloaded and the Editor will open with the latest version of your Unity project."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/AddMembers.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/AddMembers.html",
    "title": "Add team members | ModularUIPack",
    "summary": "Add team members To invite team members to contribute to your project: From the toolbar, click Invite Members to Workspace. In your DevOps version control dashboard, click Add new user. You can also send invitations and add different permission types for each user."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/CreateProjects.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/CreateProjects.html",
    "title": "Create projects | ModularUIPack",
    "summary": "Create projects To create projects: In the Unity Editor, open the Unity Version Control window and click on Create Workspace. It will suggest names for your repository (shared files and history on the server) and workspace (your local copy on your computer). If you wish to use an existing version control repository, click the three dots next to the repository name, and select a repository from the list. Select the type of workspace that fits your needs. Developer workspace With this workspace, you can work with branching and merging. Gluon workspace This workspace tailored for artists allows you to pick the files you want to work on and check them back in without updating your whole workspace. Add asset files associated with your project. version control will display the project files from the asset folder in the Pending changes tab. You can choose specific files to include or add all to the repository by selecting the files and clicking Checkin changes. version control will automatically perform a check in for appropriate folders and files – such as package files and project settings – when it’s set up from the Unity Editor. You can view these in the Changesets tab. Once your initial asset check in is complete, you’re set up with version control for Unity and ready to create. See also See also the get started detailed guides: Get started with a new repository. Get started with an existing repository."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/GetStarted.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/GetStarted.html",
    "title": "Get started with Unity Version Control | ModularUIPack",
    "summary": "Get started with Unity Version Control The Version Control package provides an integration of Unity Version Control (Unity VCS, formerly Plastic SCM) in the Unity Editor. Unity Version Control enables you to work collaboratively by providing advanced features such as branching, locking, merging, and a standalone Desktop GUI. Learn more about Unity Version Control. To start with a new version control repository for your project, see Get started with a new repository. To start from an existing Unity Version Control repository, see Get started with an existing repository. For more information on how to get started, refer to the Unity Version Control documentation."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/GetStartedExistingRepository.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/GetStartedExistingRepository.html",
    "title": "Get started with an existing Unity Version Control repository | ModularUIPack",
    "summary": "Get started with an existing Unity Version Control repository Suppose you want to start working on a Unity project in an existing Unity Version Control repository and already have a Unity Version Control account linked to your Unity ID. In that case, you will be able to open the project straight from the Unity Hub. A workspace will automatically be created for your project on your machine. In the Unity Hub v3 Beta, click Open > Open remote project to see the list of your Unity Version Control repositories that contain a Unity project. Click the project and click Next. Click the Editor version and platform and click the change version button. In the Editor pop-up, click the Migrate button to migrate your local workspace to a Unity Version Control workspace Once the migration is completed, click the Open Unity Version Control button. Accessing the Unity Version Control Window You can access the Unity Version Control window in the Unity Editor by clicking Window > Unity Version Control."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/GetStartedNewRepository.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/GetStartedNewRepository.html",
    "title": "Get started with a new version control repository | ModularUIPack",
    "summary": "Get started with a new version control repository Note: To start from an existing version control repository, see Get started with an existing version control repository. You can walk through a straightforward onboarding wizard when creating a repository for your Unity project. This new wizard will help you: Set up your account and configure your repository for your Unity project, enabling you to sync to a version control Cloud Edition repository. Generate a standard ignore file that prevents unnecessary components of your Unity project from being checked in. Automatically do the first check-in so that your repository is in sync with your local changes. Open your Unity project. To access the version control window in the Unity Editor, click Window > version control: In the version control onboarding window, complete the steps to continue: Unity connects your project to your version control Cloud repository; version control automatically creates an ignore file in the workspace for Unity projects so it doesn't track files that shouldn't be part of the repository. It also creates a standard automatic checkin during the initial setup. So now you're all set to start using version control! Note: Basic version control actions, such as viewing pending changes, checking in changes, and viewing changesets, don’t require a version control Client install. However, if you want to use more advanced features, such as branching and diffing changeset, you will be prompted to download the version control client (if you have not already done so):"
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/GitUsers.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/GitUsers.html",
    "title": "Unity version control for Git users | ModularUIPack",
    "summary": "Unity version control for Git users GIT Unity VCS Explanation To Commit To Check in To Check in is to submit changes to the repo. Commit Changeset Each new change on the history of the repo, grouping several individual file and directory changes. Master Main When you create a repo in Unity VCS, there's always an \"empty\" branch. Unity VCS calls it Main. To checkout To update Downloading content to the workspace (working copy). This is called \"update\" because in Unity VCS, \"checkout\" has a different meaning. Checkout When you checkout a file in Unity VCS, you're saying you are going to modify the file. Exclusive checkout or lock This is locking a file so nobody can touch it. It’s only useful for non-mergeable files, like binaries, images, or art in a video game. Rebase Unity VCS handles branching differently than Git. In Unity VCS, a rebase is just a merge operation. Repository Repository Where the entire history of the project is stored. Working copy Workspace In Git, you have the working copy and the repository in the exact location. You have a working copy and a .git hidden dir with the repository. In Unity VCS, this is slightly different since repositories and workspaces are separated. You can have several workspaces working with the same local repository."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/Glossary.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/Glossary.html",
    "title": "Glossary | ModularUIPack",
    "summary": "Glossary General terms Project In Unity, you use a project to design and develop a game. A project stores all of the files related to a game, such as the asset and Scene files. See 2D or 3D projects. Version Control A system for managing changes to a set of files. You can use Unity in conjunction with most version control tools, including Unity Version Control and Perforce. See Version Control. Ignore file A special file used in many Version Control Systems which specifies files to be excluded from version control. In Unity projects, several folders should be excluded from version control. Repository A shared history of changes made to the project's files, saved on a server. Workspace Your local copy of the repository, interacting with the version control system. It's where you download the project's files, make the required changes and perform checkins. Check-in Check-in is the act of submitting changes from your workspace to the shared repository. You can enter a comment before checking in your changes. Unity Version Control terms Developer Workflow Developers have access to the branch explorer directly from inside Unity and easily switch branches. Gluon Workflow Artists can take advantage of the Gluon visualized interface and workflow from inside Unity. Organization The organization handles different sets of repositories in the Cloud. Inside the organization, you can create as many repositories as you need."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/MainFeatures.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/MainFeatures.html",
    "title": "Overview of features | ModularUIPack",
    "summary": "Overview of features Pending Changes The Pending Changes tab allows you to view all pending changes in your workspace. These changes are not checked into the repository. In this tab, you can select which files you want to check in, add a comment, and check in the changes. Note : You can check in a specific file using the version control contextual menu in the project view or the Checkin button in the Inspector window. In the example below, the user adds a GameScene. They can check in the scene using the Pending Changes tab or the Checkin option in the contextual menu. Incoming Changes The Incoming Changes tab allows you to view all incoming changes and conflicts and update your local project. Any changes made to your project prompts an \"Incoming changes\" notification at the top right of the version control window. Tip : Check the Incoming Changes tab frequently to avoid facing future change conflicts in your team. Project History Use the Changesets tab to view all changes made to your project as they occur chronologically, along with who made the changes and when. You can sort by columns and alter the chronological view of the story. Double-click any file in a changeset to go to the File History tab, and display every changeset. In the File History view, right-click on a change and click Save the revision as… to restore the file's former state. This is useful if you had previously deleted some logic that you now need. You can also view the changes made to a specific file in the Project view through a contextual menu, then revert to an earlier revision of the file. Locks The File locks tab allows you to list and filter all locks in your repository, and gives you the ability to release or remove them selectively. To open the view, you can use the \"Show Locks\" button available in the toolbar."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/MoreHelp.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/MoreHelp.html",
    "title": "More help | ModularUIPack",
    "summary": "More help To find more information on working with the Unity version control plug-in, see Getting started with Unity Version control. You can also post and find questions related to Unity version control in the Unity forum."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/QuickStartGuide.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/QuickStartGuide.html",
    "title": "Quick start guide | ModularUIPack",
    "summary": "Quick start guide The Version Control package provides an integration of Unity Version Control (Unity VCS, formerly Plastic SCM) in the Unity Editor. Get started with Unity Version Control"
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/ReconnectCB.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/ReconnectCB.html",
    "title": "Connect Unity Cloud Build | ModularUIPack",
    "summary": "Connect Unity Cloud Build Unity Cloud Build is a continuous integration that automatically creates multiplatform builds in the Cloud in minutes. You can point Cloud Build toward your version control system to: Automate new builds Build faster Catch problems earlier Iterate on your builds more efficiently with agility. To get started, see Pay as you go with Cloud Build."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "About the Version Control package Quick start guide Create projects Access remote projects Add team members Connect Cloud Build Get started with Unity Version Control Get started with a new version control repository Get started with an existing version control repository Main features Pending Changes Incoming Changes Project History Locks Unity Version Control for Git users Glossary General terms Unity Version Control terms More help"
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Documentation~/index.html",
    "title": "About the Version Control package | ModularUIPack",
    "summary": "About the Version Control package The Version Control package provides an integration of Unity Version Control (Unity VCS, formerly Plastic SCM) in the Unity Editor. It is installed by default with the Editor, and follows the Unity support schedule. The minimum supported version of the Unity Editor is 2021.3.0f1 LTS. Quick start guide Get started with Unity Version Control"
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Editor/_Deprecated/README.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Editor/_Deprecated/README.html",
    "title": "| ModularUIPack",
    "summary": "Deprecated public classes that we need to keep until we change the major version to 3.x, since removing any public API in a minor version is forbiden."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "Version Control copyright © 2025 Unity Technologies Licensed under the Unity Package Distribution License (see https://unity.com/legal/licenses/unity-package-distribution-license). Unless expressly provided otherwise, the software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/README.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/README.html",
    "title": "Unity Version Control Package | ModularUIPack",
    "summary": "Unity Version Control Package This package provides an in-editor interface for teams to work with Unity Version Control (Unity VCS), our leading version control solution, directly in Unity. Note that this project is the natural evolution of the old Collaborate package, hence its technical name \"collab-proxy\". Documentation - Changelog Compatibility The minimum supported version of the Unity Editor is 2021.3.0f1 LTS. Windows and macOS are officially supported, not Linux. The solution is exclusively targeting .NetStandard 2.0, and will not work with the legacy Mono runtime."
  },
  "Library/PackageCache/com.unity.collab-proxy@2.7.1/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.collab-proxy@2.7.1/Third Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: File System Watcher https://docs.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=net-5.0 License Type: MIT Copyright (c) Microsoft Corporation Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Zlib64 https://zlib.net/ License Type: zlib/libpng License (Zlib) version 1.2.11, January 15th, 2017 Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. This notice may not be removed or altered from any source distribution. Jean-loup Gailly Mark Adler jloup@gzip.org madler@alumni.caltech.edu Component Name: LZ4 Library/LZ4x64 https://github.com/lz4 License Type: BSD [The BSD License] Copyright (c) 2011-2020, Yann Collet All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Component Name: Antlr3/Antlr https://www.antlr3.org/ License Type: BSD [The BSD License] Copyright (c) 2010 Terence Parr All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the author nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Component Name: Log4Net https://logging.apache.org/log4net/ License Type: Apache 2.0 Copyright (c) 2004-2017 The Apache Software Foundation Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  },
  "Library/PackageCache/com.unity.collections@1.2.4/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.collections@1.2.4/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [1.2.4] - 2022-05-31 Changed Reverted some NativeArray test changes that were introduced in 1.0.0-pre.4 Fixed Added an assembly definition file for sample code in the package to avoid spurious warnings when adding the package [1.2.3] - 2022-03-18 Changed Minor fixes to changelog [1.2.3-pre.1] - 2022-03-04 Changed Updated package dependencies [1.2.2] - 2022-03-03 Changed Updated package com.unity.test-framework to version 1.1.31. Updated package com.unity.burst to version 1.6.4. [1.2.1] - 2022-02-17 Fixed Shutdown the WordStorage with application exit to ensure memory is freed. NativeList.AsDeferredJobArray allocator label is changed to Allocator.Invalid to infer that the array is in list mode. Added Added FixedStringMethods.CopyFromTruncated to copy a string to a FixedString explicitly allowing truncation Added NativeText.ReadOnly type which provides a readonly, lightweight copy of a NativeText or UnsafeText type. New public API AllocatorHandle.UnmanagedUnregister, which unregisters an allocator without using managed code. Changed Native/UnsafeMultiHashMap.GetUniqueKeyArrayNBC extension methods from Unity.Collections.NotBurstCompatible are not necessary anymore. Burst supports tuple. Original methods Native/UnsafeMultiHashMap.GetUniqueKeyArray are now available again. Reverted some NativeArray test changes that were introduced in 1.0.0-pre.4 Static safety ID created for all types containing a uniquely represented AtomicSafetyHandle [1.1.0] - 2021-10-27 Added REMOVE_DISPOSE_SENTINEL ifdefs in all containers for future removal of DisposeSentinel. Bounds check to Fixed/Native/UnsafeList. SetCapacity and TrimExcess to NativeList. A custom allocator wrapper AllocatorHelper to facilitate custom allocator creation and destruction. NativeList<>.ArraysEqual & UnsafeList<>.ArraysEqual UnsafeList.CopyFrom Changed Only lower 15 bits of an allocator handle version are valid. Fixed Error in leak detection for NativeList created by RewindableAllocator. Removed pointer caching from Native/UnsafeList.ParallelWriter. AtomicSafetyHandle issue preventing use of foreach iterator in jobs for NativeHashSet, NativeHashMap, and NativeMultiHashMap containers. [1.0.0-pre.6] - 2021-08-31 Removed VirtualMemoryUtility BaselibErrorState BaselibSourceLocation VMRange DisposeSentinel (managed object) from all Native* containers. Changed Native container memory allocations align to multiple cacheline size. UnsafeText is marshalable now (doesn't contain generic field UnsafeList ). Fixed AllocatorManager.AllocateBlock no longer ignores alignment when allocating. Redundant and wrong computation of memory allocation alignment. [1.0.0-pre.5] - 2021-08-20 Changed Renamed FixedListN to FixedListNBytes, for all N, and same for FixedString Fixed NativeBitArray, NativeQueue, NativeStream, and NativeText will no longer throw an exception when using a custom allocator inside of a job. [1.0.0-pre.4] - 2021-08-11 Added FixedList* overflow checks when UNITY_DOTS_DEBUG is enabled. Disposed NativeArray related tests and updated some invalidated native array from native list tests to confirm that exceptions are thrown when accessing an object's Length and indexer following its disposal Changed Updated internal dependencies InvalidArrayAccessFromListJob check in the InvalidatedArrayAccessFromListThrowsInsideJob unit test to expect an ObjectDisposedException due to a change in the type thrown for AtomicSafetyHandle.CheckAndThrow Fixed Setting UnsafeList.Length will now resize the storage properly. [1.0.0-pre.3] - 2021-06-29 Added Native/UnsafeList*.RemoveRange* with index/count arguments. Upgraded to burst 1.5.2 UnsafeText added. Changed Burst compatibility tests now treat any explicit uses of [BurstCompatible] on private methods as an error (as opposed to silently ignoring) to avoid giving the impression that private methods are being tested. NativeList<T> generic constraint T is changed from struct to unmanaged to match UnsafeList<T>. User code can be simply fixed by changing struct to unmanaged when using NativeList<T> inside generic container. NativeHashMap.GetBucketData renamed to NativeHashMap.GetUnsafeBucketData Update the package to 1.0.0 HeapString renamed to NativeText. NativeText is based on UnsafeText. Deprecated Generated FixedList[Byte/Int/Float][32/64/128/256/512] are deprecated, and replaced with generics FixedList[32/64/128/256/512]<T>. UnsafeMultiHashMap<TKey, TValue>.GetUniqueKeyArray replaced with extension method UnsafeMultiHashMap<TKey, TValue>.GetUniqueKeyValueNBC from Unity.Collections.NotBurstCompatible namespace. NativeMultiHashMap<TKey, TValue>.GetUniqueKeyArray replaced with extension method NativeMultiHashMap<TKey, TValue>.GetUniqueKeyValueNBC from Unity.Collections.NotBurstCompatible namespace. NativeList<T>.ToArray replaced with extension method NativeList<T>.ToArrayNBC from Unity.Collections.NotBurstCompatible NativeList<T>.CopyFrom replaced with extension method NativeList<T>.CopyFromNBC from Unity.Collections.NotBurstCompatible namespace. UnsafeAppendBuffer.Add replaced with extension methodUnsafeAppendBuffer.AddNBC from Unity.Collections.LowLevel.Unsafe.NotBurstCompatible namespace. UnsafeAppendBuffer.ToBytes replaced with extension method UnsafeAppendBuffer.ToBytesNBC from Unity.Collections.LowLevel.Unsafe.NotBurstCompatible namespace. UnsafeAppendBuffer.Reader.ReadNext replaced with extension method UnsafeAppendBuffer.Reader.ReadNextNBC from Unity.Collections.LowLevel.Unsafe.NotBurstCompatible namespace. Native/UnsafeList*.RemoveRange*WithBeginEnd methods with begin/end arguments in favor of Native/UnsafeList*.RemoveRange* with index/count arguments. UnsafeList and replaced it with UnsafeList<T>. VirtualMemoryUtility. Removed NativeQueue.PersistentMemoryBlockCount and NativeQueue.MemoryBlockSize are now internal APIs. Fixed Burst compatibility tests will now ignore any method containing a '$' in the name, which can be generated by the Burst direct call IL post processor. xxHash3 is initialized after assembly load to avoid an exception that could be thrown if xxHash3 is accessed for the first time on a thread other than the main thread. Security [0.17.0] - 2021-03-15 Added [NotBurstCompatible] attribute to FixedStringN constructors that use a String argument. [NotBurstCompatible] attribute to NativeQueue constructor. UnsafeList<T>.Create and UnsafeList<T>.Destroy API. BurstCompatibilityTests now has a constructor that accepts multiple assembly names to verify Burst compatibility. This allows one test to verify multiple assemblies and can dramatically reduce CI times by avoiding costly setup overhead. UnsafePtrList<T> to replace deprecated untyped UnsafePtrList. Burst compatibility tests now also write the generated code to the Temp directory in order to make it easier to inspect. FixedList*.RemoveRange* with index/count arguments. FixedString parsing to type uint Deprecated untyped UnsafePtrList, and added UnsafePtrList<T> as replacement. FixedList*.RemoveRange*WithBeginEnd methods with begin/end arguments in favor of FixedList*.RemoveRange* with index/count arguments. Removed Removed single arg FixedString*.Format extension methods, use Clear() followed by Append(). CollectionsBurstTests has been removed and placed into the Entities test project. com.unity.test-framework.performance preview package dependency, and moved performance unit tests depending on it into different location. Fixed *BitArray.Clear when clearing with very short bit arrays. NativeQueue.AsParallelWriter doesn't need to be cached when chaining jobs. Removed unnecessary safety handle that was preventing calling NativeQueue.AsParallelWriter() multiple times when scheduling jobs. [0.16.0] - 2021-01-26 Deprecated Sort methods that return a JobHandle deprecated in favor of new SortJob methods that return a job struct. Less conveniently, the user is responsible for calling Schedule on the struct, but this pattern better accommodates scheduling generic jobs from Bursted code (See https://docs.unity3d.com/Packages/com.unity.entities@latest/index.html?subfolder=/manual/ecs_generic_jobs.html). Removed Removed deprecated FixedListN.IndexOf and SortJob variants Fixed An ENABLE_UNITY_COLLECTIONS_CHECKS define was misspelled. Now Memory is checked for reasonable byte length when enabled. Many methods that use IJob were marked as [NotBurstCompatible] to reflect their true Burst compatibility. Changed Updated com.unity.burst to 1.4.4 [0.15.0] - 2020-11-13 Added NativeReference constructor to initialize it with existing value. T[] *HashSet.ToArray() returns an array of all elements in the set. xxHash3 now also has a utility method to hash a struct directly (Previously it was only pointer + size) [BurstCompatible] attribute to FixedList and extensions. [BurstCompatible] attribute to CollectionHelper. [BurstCompatible] attribute to FixedBytesN. [BurstCompatible] attribute to HeapString. [BurstCompatible] attribute to NativeArrayExtensions. [BurstCompatible] attribute to NativeBitArray. [BurstCompatible] attribute to NativeBitArrayUnsafeUtility. [BurstCompatible] attribute to NativeHashMap. [BurstCompatible] attribute to NativeHashMapExtensions. [BurstCompatible] attribute to NativeHashSet. [BurstCompatible] attribute to NativeList. [BurstCompatible] attribute to NativeListUnsafeUtility. [BurstCompatible] attribute to NativeMultiHashMap. [BurstCompatible] attribute to NativeQueue. [BurstCompatible] attribute to NativeReference. [BurstCompatible] attribute to NativeStream. [BurstCompatible] attribute to NativeString. [BurstCompatible] attribute to UTF8ArrayUnsafeUtility. [BurstCompatible] attribute to Unicode and Rune. [BurstCompatible] attribute to NativeStringView. [BurstCompatible] attribute to UnsafeAppendBuffer. [BurstCompatible] attribute to UnsafeAtomicCounter32 and UnsafeAtomicCounter64. [BurstCompatible] attribute to UnsafeHashMap. [BurstCompatible] attribute to UnsafeHashSet. [BurstCompatible] attribute to UnsafeList, UnsafeListExtensions, UnsafePtrList, UnsafePtrListExtensions. [BurstCompatible] attribute to UnsafeRingQueue. [BurstCompatible] attribute to UnsafeScratchAllocator. [BurstCompatible] attribute to UnsafeUtilityExtensions. [BurstCompatible] attribute to VMRange, Baselib_ErrorState, and VirtualMemoryUtility. [BurstCompatible] attribute to xxHash3. Changed Update burst to 1.4.1. *BitArray Length would previously report backing capacity which is always 64-bit aligned, changed it to report number of bits user requested on allocation. For example, allocating 3 bits will now report Length 3 instead capacity which is always aligned to 64-bits. Update minimum editor version to 2020.1.2f1 Fixed Code generation for indexers in structs with [BurstCompatible] attribute. *BitArray search for empty bits when number of bits is less than 7 and backing storage is fragmented with 0x81 bit pattern. Namespace for *HashSet.ExceptWith/IntersectWith/UnionWith extension methods, so that use of Unity.Collections.LowLevel.Unsafe namespace is not necessary. using FixedList.ToNativeArray with collection checks enabled used to throw a null reference exception. [0.14.0] - 2020-09-24 Added *UnsafeBitArray.Find with pos/count search range arguments. Changed UnsafeStream block allocation performance has been improved by ~16% by appending to the start of the per-thread block lists rather than the end. Removed FixedList*.InsertRange, FixedList*.RemoveRangeSwapBack, FixedList*.RemoveRange, NativeString*, NativeList.RemoveRangeSwapBack, NativeList.RemoveRange, UnsafeList.RemoveRangeSwapBack, UnsafeList.RemoveRange, FixedString*.Format, FixedString*.AppendFrom, NativeHashSet.TryAdd, UnsafeHashSet.TryAdd. [NativeContainerSupportsDeallocateOnJobCompletion] attribute from NativeReference container. It didn't work properly. Users can use Dispose(JobHandle) method instead. Fixed FixedList<T> Remove and RemoveSwapBack extension methods were modifying copy, fixed by passing this by reference to modify actual container. [0.13.0] - 2020-08-26 Added Added *BitArray.Find linear search for 0-bit range. Added SortJob extension methods for NativeList, UnsafeList, UnsafeList<T>, and NativeSlice. Added Sort method that accepts custom comparator, and job dependency, to all supported containers. Added BinarySearch extension methods for NativeArray, NativeList, UnsafeList, UnsafeList<T>, and NativeSlice. Added foreach support to UnsafeList<T>. Changed Sort functions that take an IComparer no longer require the sorted elements to be IComparable Bumped Burst to 1.3.5. Deprecated Deprecated SortJob with default job dependency argument. Use Sort that require an explicit JobHandle argument. If no dependency is needed, pass a default valued JobHandle. Removed Removed: UnsafeUtilityEx, Unity.Collections.Experimental*,FixedString*.UTF8LengthInBytes, and *Stream.ComputeItemCount() Fixed Fixed performance regression of *HashMap.Count() introduced in Collections 0.10.0. [0.12.0] - 2020-08-04 Added Added Sort method with custom comparer to FixedList* and UnsafeList<T>. Added IsEmpty property and Clear method to INativeList intefrace. Added INativeDisposable interface which provides a mechanism for scheduling release of unmanaged resources. Added InsertRangeWithBeginEnd to NativeList, UnsafeList, UnsafeList<T>, and UnsafePtrList. Added AddRange and AddRangeNoResize to FixedList*. Added properties to BaselibErrorState to check if an operation resulted in success, out of memory, or accessing an invalid address range. Added HeapString type, for arbitrary-length (up to 2GB) heap-allocated strings compatible with the FixedString* methods. Allocating a HeapString requires specifying an allocator and disposing appropriately. Deprecated Deprecated FixedList* method IndexOf with index and index/count arguments. Removed Removed: IJobNativeMultiHashMapMergedSharedKeyIndices JobNativeMultiHashMapUniqueHashExtensions IJobNativeMultiHashMapVisitKeyValue JobNativeMultiHashMapVisitKeyValue IJobNativeMultiHashMapVisitKeyMutableValue JobNativeMultiHashMapVisitKeyMutableValue IJobUnsafeMultiHashMapMergedSharedKeyIndices JobUnsafeMultiHashMapUniqueHashExtensions IJobUnsafeMultiHashMapVisitKeyValue JobUnsafeMultiHashMapVisitKeyValue IJobUnsafeMultiHashMapVisitKeyMutableValue JobUnsafeMultiHashMapVisitKeyMutableValue Fixed Fixed *HashMap.IsEmpty when items are added and removed from *HashMap. IsEmpty previously used allocated count only to report emptiness, but returning not-empty didn't actually meant that *HashMap is not empty. Fixed bug where *HashSet.Enumerator.Current would always return the default value instead of the actual value from the set. Fixed bug with *HashMap/Set.Enumerator returning wrong index and dereferencing out of bounds memory. [0.11.0] - 2020-07-10 Added Added VirtualMemoryUtility providing low-level virtual memory utility functions backed by baselib. *HashMap and *HashSet now implement IEnumerable<>. ReadArrayElementBoundsChecked and WriteArrayElementBoundsChecked for ease of debugging ReadArrayElement and WriteArrayElement without sacrificing performance by adding bounds checking directly to those functions. Added InsertRangeWithBeginEnd, RemoveRangeSwapBackWithBeginEnd, and RemoveRangeWithBeginEnd to list containers. *WithBeginEnd in name signifies that arguments are begin/end instead of more standard index/count. Once InsertRange, RemoveRangeSwapBack, and RemoveRange are completely deprecated and removed, those methods will be added with correct index/count arguments. Added xxHash3 type to expose 64/128bits hashing API using xxHash3 algorithm (corresponding to the C++ version https://github.com/Cyan4973/xxHash/releases/tag/v0.8.0) Changed Updated minimum Unity Editor version to 2020.1.0b15 (40d9420e7de8) Bumped burst to 1.3.2 version. Changed *HashSet.Add API to return bool when adding element to set. UnsafeUtilityExtensions is now public. NativeReference methods Equals and GetHashCode will now operate on the value instead of the data pointer. FixedString{32,64,128,512,4096} have been reworked. Functionality is shared via generics as much as possible. The API attempts to follow StringBuilder semantics. Append methods now consistently append. Append variant to append a char was added (appends the char, does not resolve to int overload). Format methods that replaced the contents of the target have been deprecated. Use Clear() followed by Append(). Because FixedStrings start out cleared, in most cases just an Append is sufficient. Format that takes a format string has been renamed to AppendFormat. The static FixedString.Format methods still exist for convenience, and return a FixedString128. It is possible for users to extend the Append family of methods to support appending their own types. See FixedStringAppendMethods.cs for examples of how to declare your own extension methods. Deprecated Deprecated *HashSet.TryAdd. *HashSet.Add is equivalent. Deprecated NativeString*. The functionality is replaced by FixedString*. Deprecated InsertRange, RemoveRangeSwap, and RemoveRange from list containers, and added InsertRangeWithBeginEnd, RemoveRangeSwapBackWithBeginEnd, and RemoveRangeWithBeginEnd. *WithBeginEnd in name signifies that arguments are begin/end instead of more standard index/count. Once InsertRange, RemoveRangeSwapBack, and RemoveRange are completely deprecated and removed, those methods will be added with correct index/count arguments. Removed Removed System.Runtime.CompilerServices.Unsafe.dll from package. Known Issues This version is not compatible with 2020.2.0a17. Please update to the forthcoming alpha. All containers allocated with Allocator.Temp on the same thread use a shared AtomicSafetyHandle instance. This is problematic when using NativeHashMap, NativeMultiHashMap, NativeHashSet and NativeList together in situations where their secondary safety handle is used. This means that operations that invalidate an enumerator for either of these collections (or the NativeArray returned by NativeList.AsArray) will also invalidate all other previously acquired enumerators. For example, this will throw when safety checks are enabled: var list = new NativeList<int>(Allocator.Temp); list.Add(1); // This array uses the secondary safety handle of the list, which is // shared between all Allocator.Temp allocations. var array = list.AsArray(); var list2 = new NativeHashSet<int>(Allocator.Temp); // This invalidates the secondary safety handle, which is also used // by the list above. list2.TryAdd(1); // This throws an InvalidOperationException because the shared safety // handle was invalidated. var x = array[0]; This defect will be addressed in a future release. [0.10.0] - 2020-05-27 Added Added Native/UnsafeHashSet containers. Added IsEmpty method to *Queue, *HashMap, *MultiHashMap, *List, FixedString. This method should be prefered to Count() > 0 due to simpler checks for empty container. Added a new container NativeReference to hold unmanaged allocation. Added CollectionsTestFixture to enable jobs debugger and verify safety checks are enabled. Added NativeList.CopyFrom(NativeArray<> array) Changed Updated minimum Unity Editor version to 2020.1.0b9 (9c0aec301c8d) Updated package com.unity.burst to version 1.3.0-preview.12. Made several tests inherit CollectionsTestFixture to prevent crashing when running tests without jobs debugger or safety checks enabled. Added NativeBitArray.AsNativeArray<T> method to reinterpret NativeBitArray as NativeArray of desired type. Deprecated Deprecated NativeArrayChunked8 and NativeArrayFullSOA from Unity.Collections.Experimental. Deprecated UnsafeUtilityEx.As/AsRef/ArrayElementAsRef. The functionality is available in UnsafeUtility. Fixed FixedString and FixedList types now display their contents in the Entity Inspector. Fixed NativeHashMap.ParallelWriter.TryAdd race condition. [0.9.0] - 2020-05-04 Added Added RemoveAt and RemoveRange to List containers in collections. These methods remove elements in list container while preserving order of the list. These methods are slower than Remove*SwapBack methods and users should prefer Remove*SwapBack if they don't care about preserving order inside *List container. Added *BitArray.Copy between two different bit arrays. Added NativeBitArrayUnsafeUtility.ConvertExistingDataToNativeBitArray for assigning view into data as bit array. Changed Updated package com.unity.burst to version 1.3.0-preview.11 Fixed Moved NativeMultiHashMap.Remove<TValueEQ>(TKey key, TValueEq value) into an extension method and made it Burst compatible Fixed bug in *HashMap.Remove to not throw when removing from empty hash map. [0.8.0] - 2020-04-24 Added Added Native/UnsafeBitArray.Copy for copying or shifting bits inside array. Added UnsafeAtomicCounter32/64 providing helper interface for atomic counter functionality. Added NativeBitArray providing arbitrary sized bit array functionality with safety mechanism. Changed Bumped Burst version to improve compile time and fix multiple bugs. Deprecated Deprecated IJobNativeMultiHashMapMergedSharedKeyIndices, JobNativeMultiHashMapUniqueHashExtensions, IJobNativeMultiHashMapVisitKeyValue, JobNativeMultiHashMapVisitKeyValue, IJobNativeMultiHashMapVisitKeyMutableValue, JobNativeMultiHashMapVisitKeyMutableValue, and introduced NativeHashMap.GetUnsafeBucketData and NativeMultiHashMap.GetUnsafeBucketData to obtain internals to implement deprecated functionality inside user code. If this functionality is used, the best is to copy deprecated code into user code. Removed Removed expired API class TerminatesProgramAttribute [0.7.1] - 2020-04-08 Deprecated Deprecated Length property from NativeHashMap, UnsafeHashMap, NativeMultiHashMap, UnsafeMultiHashMap, NativeQueue, and replaced it with Count() to reflect that there is computation being done. Fixed Fixed an issue where FixedListDebugView<T> only existed for IComparable types, which lead to a crash while debugging other types. Removed code that made NativeStream incompatible with Burst. [0.7.0] - 2020-03-13 Added Added ability to dispose NativeKeyValueArrays from job (DisposeJob). Added NativeQueue<T>.ToArray to copy a native queue to an array efficiently Changed Upgraded Burst to fix multiple issues and introduced a native debugging feature. Deprecated Deprecated Length property from NativeHashMap, UnsafeHashMap, NativeMultiHashMap, UnsafeMultiHashMap, NativeQueue, and replaced it with Count() to reflect that there is computation being done. Removed Removed expired API CollectionHelper.CeilPow2() Removed expired API CollectionHelper.lzcnt() Removed expired API struct ResizableArray64Byte<T> Fixed Removed code that made NativeStream incompatible with Burst. [0.6.0] - 2020-03-03 Added Added ability to dispose UnsafeAppendBuffer from a DisposeJob. Added NativeHashSetExtensions and UnsafeHashSetExtensions for HashSetExtensions in different namespaces. Changed UnsafeAppendBuffer field Size renamed to Length. Removed [BurstDiscard] from all validation check functions. Validation is present in code compiled with Burst. Removed Removed expired overloads for NativeStream.ScheduleConstruct without explicit allocators. Removed HashSetExtensions, replaced with NativeHashSetExtensions and UnsafeHashSetExtensions. Fixed Fixed UnsafeBitArray out-of-bounds access. [0.5.2] - 2020-02-17 Changed Changed NativeList<T> parallel reader/writer to match functionality of UnsafeList parallel reader/writer. Updated dependencies of this package. Removed Removed expired API UnsafeUtilityEx.RestrictNoAlias Fixed Fixed bug in NativeList.CopyFrom. [0.5.1] - 2020-01-28 Changed Updated dependencies of this package. [0.5.0] - 2020-01-16 Added Added UnsafeRingQueue<T> providing fixed-size circular buffer functionality. Added missing IDisposable constraint to UnsafeList and UnsafeBitArray. Added ReadNextArray<T> to access a raw array (pointer and length) from an UnsafeAppendBuffer.Reader. Added FixedString types, guaranteed binary-layout identical to NativeString types, which they are intended to replace. Added FixedList<T> generic self-contained List struct Added BitArray.SetBits with arbitrary ulong value. Added BitArray.GetBits to retrieve bits as ulong value. Changed Changed UnsafeBitArray memory initialization option default to NativeArrayOptions.ClearMemory. Changed FixedList structs to pad to natural alignment of item held in list Deprecated BlobAssetComputationContext.AssociateBlobAssetWithGameObject(int, GameObject) replaced by its UnityEngine.Object counterpart BlobAssetComputationContext.AssociateBlobAssetWithUnityObject(int, UnityEngine.Object) to allow association of BlobAsset with any kind of UnityEngine.Object derived types. Adding removal dates to the API that have been deprecated but did not have the date set. Removed Removed IEquatable constraint from UnsafeList<T>. Fixed Fixed BitArray.SetBits. [0.4.0] - 2019-12-16 This version requires Unity 2019.3.0f1+ New Features Adding FixedListTN as a non-generic replacement for ResizableArrayN<T>. Added UnsafeBitArray providing arbitrary sized bit array functionality. Fixes Updated performance package dependency to 1.3.2 which fixes an obsoletion warning Adding [NativeDisableUnsafePtrRestriction] to UnsafeList to allow burst compilation. [0.3.0] - 2019-12-03 New Features Added fixed-size BitField32 and BitField64 bit array. Changes Removed the following deprecated API as announced in/before 0.1.1-preview: Removed struct Concurrent and ToConcurrent() for NativeHashMap, NativeMultiHashMap and NativeQueue (replaced by the ParallelWriter API). From NativeStream.cs: struct NativeStreamReader and struct NativeStreamWriter, replaced by struct NativeStream.Reader and struct NativeStream.Writer. From NativeList.cs: ToDeferredJobArray() (replaced by AsDeferredJobArray() API). [0.2.0] - 2019-11-22 This version requires Unity 2019.3 0b11+ New Features Added fixed-size UTF-8 NativeString in sizes of 32, 64, 128, 512, and 4096 bytes. Added HPC# functions for float-to-string and string-to-float. Added HPC# functions for int-to-string and string-to-int. Added HPC# functions for UTF16-to-UTF8 and UTF8-to-UTF16. New Native(Multi)HashMap.GetKeyValueArrays that will query keys and values at the same time into parallel arrays. Added UnsafeStream, UnsafeHashMap, and UnsafeMultiHashMap, providing functionality of NativeStream container but without any safety mechanism (intended for advanced users only). Added AddNoResize methods to NativeList. When it's known ahead of time that list won't grow, these methods won't try to resize. Rather exception will be thrown if capacity is insufficient. Added ParallelWriter support for UnsafeList. Added UnsafeList.TrimExcess to set capacity to actual number of elements in the container. Added convenience blittable UnsafeList<T> managed container with unmanaged T constraint. Changes UnsafeList.Resize now doesn't resize to lower capacity. User must call UnsafeList.SetCapacity to lower capacity of the list. This applies to all other containers based on UnsafeList. Updated dependencies for this package. Fixes Fixed NativeQueue pool leak. [0.1.1] - 2019-08-06 Fixes NativeHashMap.Remove(TKey key, TValueEQ value) is now supported in bursted code. Adding deprecated NativeList.ToDeferredJobArray() back in - Use AsDeferredJobArray() instead. The deprecated function will be removed in 3 months. This can not be auto-upgraded prior to Unity 2019.3. Fixing bug where TryDequeue on an empty NativeQueue that previously had enqueued elements could leave it in an invalid state where Enqueue would fail silently afterwards. Changes Updated dependencies for this package. [0.1.0] - 2019-07-30 New Features NativeMultiHashMap.Remove(key, value) has been addded. It lets you remove all key & value pairs from the hashmap. Added ability to dispose containers from job (DisposeJob). Added UnsafeList.AddNoResize, and UnsafeList.AddRangeNoResize. BlobString for storing string data in a blob Upgrade guide Native*.Concurrent is renamed to Native*.ParallelWriter. Native*.ToConcurrent() function is renamed to Native*.AsParallelWriter(). NativeStreamReader/Writer structs are subclassed and renamed to NativeStream.Reader/Writer (note: changelot entry added retroactively). Changes Deprecated ToConcurrent, added AsParallelWriter instead. Allocator is not an optional argument anymore, user must always specify the allocator. Added Allocator to Unsafe*List container, and removed per method allocator argument. Introduced memory intialization (NativeArrayOptions) argument to Unsafe*List constructor and Resize. Fixes Fixed UnsafeList.RemoveRangeSwapBack when removing elements near the end of UnsafeList. Fixed safety handle use in NativeList.AddRange. [0.0.9-preview.20] - 2019-05-24 Changes Updated dependencies for Unity.Collections.Tests [0.0.9-preview.19] - 2019-05-16 New Features JobHandle NativeList.Dispose(JobHandle dependency) allows Disposing the container from a job. Exposed unsafe NativeSortExtension.Sort(T* array, int length) method for simpler sorting of unsafe arrays Imporoved documentation for NativeList Added CollectionHelper.WriteLayout debug utility Fixes Fixes a NativeQueue alignment issue. [0.0.9-preview.18] - 2019-05-01 Change tracking started with this version."
  },
  "Library/PackageCache/com.unity.collections@1.2.4/Documentation~/allocation.html": {
    "href": "Library/PackageCache/com.unity.collections@1.2.4/Documentation~/allocation.html",
    "title": "Using unmanaged memory | ModularUIPack",
    "summary": "Using unmanaged memory The Native- and Unsafe- collections in this package are allocated from unmanaged memory, meaning their existence is unknown to the garbage collector. You are responsible for deallocating any unmanaged memory that you no longer need. Failing to deallocate large or numerous allocations can lead to wasting more and more memory, which may eventually slow down or even crash your program. Allocators An allocator governs some unmanaged memory from which you can make allocations. Different allocators organize and track their memory in different ways. The three standard provided allocators are: Allocator.Temp The fastest allocator. For very short-lived allocations. Temp allocations cannot be passed into jobs. Each frame, the main thread creates a Temp allocator which is deallocated in its entirety at the end of the frame. Each job also creates one Temp allocator per thread, and these are deallocated in their entireties at the end of the job. Because a Temp allocator gets discarded as a whole, you actually don't need to manually deallocate your Temp allocations (in fact, doing so is a no-op). Temp allocations are only safe to use within the thread where they were allocated. So while Temp allocations can be made within a job, main thread Temp allocations cannot be passed into a job. For example, a NativeArray that's Temp allocated in the main thread cannot be passed into a job. Allocator.TempJob The next fastest allocator. For short-lived allocations. TempJob allocations can be passed into jobs. You are expected to deallocate your TempJob allocations within 4 frames of their creation. The number 4 was chosen because it's common to want allocations that last a couple frames: the limit of 4 accommodates this need with a comfortable extra margin. For the Native- collection types, the disposal safety checks will throw an exception if a TempJob allocation lives longer than 4 frames. For the Unsafe- collection types, you are still expected to deallocate them within 4 frames, but no safety checks are performed to ensure you do so. Allocator.Persistent The slowest allocator. For indefinite lifetime allocations. Persistent allocations can be passed into jobs. Because Persistent allocations are allowed to live indefinitely, no safety check can detect if a Persistent allocation has outlived its intended lifetime. Consequently, you should be extra careful to deallocate a Persistent allocation when you no longer need it. Disposal (deallocation) Each collection retains a reference to the allocator from which its memory was allocated because deallocation requires specifying the allocator. An Unsafe- collection's Dispose method deallocates its memory. A Native- collection's Dispose method deallocates its memory and frees the handles needed for safety checks. An enumerator's Dispose method is a no-op. The method is included only to fulfill the IEnumerator<T> interface. We often want to dispose a collection after the jobs which need it have run. The Dispose(JobHandle) method creates and schedules a job which will dispose the collection, and this new job takes the input handle as its dependency. Effectively, the method differs disposal until after the dependency runs: NativeArray<int> nums = new NativeArray<int>(10, Allocator.TempJob); // Create and schedule a job that uses the array. ExampleJob job = new ExampleJob { Nums = nums }; JobHandle handle = job.Schedule(); // Create and schedule a job that will dispose the array after the ExampleJob has run. // Returns the handle of the new job. handle = nums.Dispose(handle); The IsCreated property The IsCreated property of a collection is false only in two cases: Immediately after creating a collection with its default constructor. After Dispose has been called on the collection. Understand, however, that you're not intended to use a collections's default constructor. It's only made available because C# requires all structs to have a public default constructor. Also note that calling Dispose on a collection sets IsCreated to false only in that struct, not in any copies of the struct. Consequently, IsCreated may still be true even after the collection's underlying memory was deallocated if... Dispose was called on a different copy of the struct. Or the underlying memory was deallocated via an alias. Aliasing An alias is a collection which does not have its own allocation but instead shares the allocation of another collection, in whole or in part. For example, an UnsafeList can be created that doesn't allocate its own memory but instead uses a NativeList's allocation. Writing to this shared memory via the UnsafeList affects the content of the NativeList, and vice versa. You do not need to dispose aliases, and in fact, calling Dispose on an alias does nothing. Once an original is disposed, the aliases of that original can no longer be used: NativeList<int> nums = new NativeList<int>(10, Allocator.TempJob); nums.Length = 5; // Create an array of 5 ints that aliases the content of the list. NativeArray<int> aliasedNums = nums.AsArray(); // Modify the first element of both the array and the list. aliasedNums[0] = 99; // Only the original need be disposed. nums.Dispose(); // Throws an ObjectDisposedException because disposing // the original deallocates the aliased memory. aliasedNums[0] = 99; Aliasing can be useful in a few scenarios: Getting a collection's data in the form of another collection type without copying the data. For example, you can create an UnsafeList that aliases a NativeArray. Getting a subrange of a collection's data without copying the data. For example, you can create an UnsafeList that aliases a subrange of another list or array. Array reinterpretation. Perhaps surprisingly, it's allowed for an Unsafe- collection to alias a Native- collection even though such cases undermine the safety checks. For example, if an UnsafeList aliases a NativeList, it's not safe to schedule a job that accesses one while also another job is scheduled that accesses the other, but the safety checks do not catch these cases. It is your responsibility to avoid such mistakes. Array reinterpretation A reinterpretation of an array is an alias of the array that reads and writes the content as a different element type. For example, a NativeArray<int> which reinterprets a NativeArray<ushort> shares the same bytes, but it reads and writes the bytes as ints instead of ushorts; because each int is 4 bytes while each ushort is 2 bytes, each int corresponds to two ushorts, and the reinterpretation has half the length of the original. NativeArray<int> ints = new NativeArray<int>(10, Allocator.Temp); // Length of the reinterpreted array is 20 // (because it has two shorts per one int of the original). NativeArray<short> shorts = ints.Reinterpret<int, short>(); // Modifies the first 4 bytes of the array. shorts[0] = 1; shorts[1] = 1; int val = ints[0]; // val is 65537 (2^16 + 2^0) // Like with other aliased collections, only the original // needs to be disposed. ints.Dispose(); // Throws an ObjectDisposedException because disposing // the original deallocates the aliased memory. shorts[0] = 1;"
  },
  "Library/PackageCache/com.unity.collections@1.2.4/Documentation~/collection-types.html": {
    "href": "Library/PackageCache/com.unity.collections@1.2.4/Documentation~/collection-types.html",
    "title": "Collection types | ModularUIPack",
    "summary": "Collection types Array-like types A few key array-like types are provided by the core module, including Unity.Collections.NativeArray<T> and Unity.Collections.NativeSlice<T>. This package itself provides: Data structure Description @Unity.Collections.NativeList`1 A resizable list. Has thread- and disposal-safety checks. @Unity.Collections.LowLevel.Unsafe.UnsafeList`1 A resizable list. @Unity.Collections.LowLevel.Unsafe.UnsafePtrList`1 A resizable list of pointers. @Unity.Collections.NativeStream A set of append-only, untyped buffers. Has thread- and disposal-safety checks. @Unity.Collections.LowLevel.Unsafe.UnsafeStream A set of append-only, untyped buffers. @Unity.Collections.LowLevel.Unsafe.UnsafeAppendBuffer An append-only untyped buffer. @Unity.Collections.NativeQueue`1 A resizable queue. Has thread- and disposal-safety checks. @Unity.Collections.LowLevel.Unsafe.UnsafeRingQueue`1 A fixed-size circular buffer. @Unity.Collections.FixedList32Bytes`1 A 32-byte list, including 2 bytes of overhead, so 30 bytes are available for storage. Max capacity depends upon T. FixedList32Bytes<T> has variants of larger sizes: FixedList64Bytes<T>, FixedList128Bytes<T>, FixedList512Bytes<T>, FixedList4096Bytes<T>. There are no multi-dimensional array types, but you can simply pack all the data into a single-dimension. For example, for an int[4][5] array, use an int[20] array instead (because 4 * 5 is 20). When using the Entities package, a DynamicBuffer component is often the best choice for an array- or list-like collection. See also @Unity.Collections.NativeArrayExtensions, @Unity.Collections.ListExtensions, @Unity.Collections.NativeSortExtension. Map and set types Data structure Description @Unity.Collections.NativeHashMap`2 An unordered associative array of key-value pairs. Has thread- and disposal-safety checks. @Unity.Collections.LowLevel.Unsafe.UnsafeHashMap`2 An unordered associative array of key-value pairs. @Unity.Collections.NativeHashSet`1 A set of unique values. Has thread- and disposal-safety checks. @Unity.Collections.LowLevel.Unsafe.UnsafeHashSet`1 A set of unique values. @Unity.Collections.NativeMultiHashMap`2 An unordered associative array of key-value pairs. The keys do not have to be unique, i.e. two pairs can have equal keys. Has thread- and disposal-safety checks. @Unity.Collections.LowLevel.Unsafe.UnsafeMultiHashMap`2 An unordered associative array of key-value pairs. The keys do not have to be unique, i.e. two pairs can have equal keys. See also @Unity.Collections.HashSetExtensions, @Unity.Collections.NotBurstCompatible.Extensions, and @Unity.Collections.LowLevel.Unsafe.NotBurstCompatible.Extensions Bit arrays and bit fields Data structure Description @Unity.Collections.BitField32 A fixed-size array of 32 bits. @Unity.Collections.BitField64 A fixed-size array of 64 bits. @Unity.Collections.NativeBitArray An arbitrary-sized array of bits. Has thread- and disposal-safety checks. @Unity.Collections.LowLevel.Unsafe.UnsafeBitArray An arbitrary-sized array of bits. String types Data structure Description @Unity.Collections.NativeText A UTF-8 encoded string. Mutable and resizable. Has thread- and disposal-safety checks. @Unity.Collections.FixedString32Bytes A 32-byte UTF-8 encoded string, including 3 bytes of overhead, so 29 bytes available for storage. FixedString32Bytes has variants of larger sizes: FixedString64Bytes, FixedString128Bytes, FixedString512Bytes, FixedString4096Bytes. See also @Unity.Collections.FixedStringMethods Other types Data structure Description @Unity.Collections.NativeReference`1 A reference to a single value. Functionally equivalent to an array of length 1. Has thread- and disposal-safety checks. @Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter32 A 32-bit atomic counter. @Unity.Collections.LowLevel.Unsafe.UnsafeAtomicCounter64 A 64-bit atomic counter. Job safety checks The purpose of the job safety checks is to detect job conflicts. Two jobs conflict if: Both jobs access the same data. One job or both jobs have write access to the data. In other words, there's no conflict if both jobs just have read only access to the data. For example, you generally wouldn't want one job to read an array while meanwhile another job is writing the same array, so the safety checks consider that possibility to be a conflict. To resolve such conflicts, you must make one job a dependency of the other to ensure their execution does not overlap. Whichever of the two jobs you want to run first should be the dependency of the other. When the safety checks are enabled, each Native- collection has an AtomicSafetyHandle for performing thread-safety checks. Scheduling a job locks the AtomicSafetyHandle's of all Native- collections in the job. Completing a job releases the AtomicSafetyHandle's of all Native- collections in the job. While a Native- collection's AtomicSafetyHandle is locked: Jobs which use the collection can only be scheduled if they depend upon all the already scheduled job(s) which also use it. Accessing the collection from the main thread will throw an exception. Read only access in jobs As a special case, there's no conflict between two jobs if they both strictly just read the same data, .e.g. there's no conflict if one job reads from an array while meanwhile another also job reads from the same array. The @Unity.Collections.ReadOnlyAttribute marks a Native- collection in a job struct as being read only: public struct MyJob : IJob { // This array can only be read in the job. [ReadOnly] public NativeArray<int> nums; public void Execute() { // If safety checks are enabled, an exception is thrown here // because the array is read only. nums[0] = 100; } } Marking collections as read only has two benefits: The main thread can still read a collection if all scheduled jobs that use the collection have just read only access. The safety checks will not object if you schedule multiple jobs with read only access to the same collection, even without any dependencies between them. Therefore these jobs can run concurrently with each other. Enumerators Most of the collections have a GetEnumerator method, which returns an implementation of IEnumerator<T>. The enumerator's MoveNext method advances its Current property to the next element. NativeList<int> nums = new NativeList<int>(10, Allocator.Temp); // Calculate the sum of all elements in the list. int sum = 0; NativeArray<int>.Enumerator enumerator = nums.GetEnumerator(); // The first MoveNext call advances the enumerator to the first element. // MoveNext returns false when the enumerator has advanced past the last element. while (enumerator.MoveNext()) { sum += enumerator.Current; } // The enumerator is no longer valid to use after the array is disposed. nums.Dispose(); Parallel readers and writers Several of the collection types have nested types for reading and writing from parallel jobs. For example, to write safely to a NativeList<T> from a parallel job, you need a NativeList<T>.ParallelWriter: NativeList<int> nums = new NativeList<int>(1000, Allocator.TempJob); // The parallel writer shares the original list's AtomicSafetyHandle. var job = new MyParallelJob {NumsWriter = nums.AsParallelWriter()}; public struct MyParallelJob : IJobParallelFor { public NativeList<int>.ParallelWriter NumsWriter; public void Execute(int i) { // A NativeList<T>.ParallelWriter can append values // but not grow the capacity of the list. NumsWriter.AddNoResize(i); } } Note that these parallel readers and writers do not usually support the full functionality of the collection. For example, a NativeList cannot grow its capacity in a parallel job (because there is no way to safely allow this without incurring significantly more synchronization overhead). Deterministic reading and writing Although a ParallelWriter ensures the safety of concurrent writes, the order of the concurrent writes is inherently indeterminstic because it depends upon the happenstance of thread scheduling (which is controlled by the operating system and other factors outside of your program's control). Likewise, although a ParallelReader ensures the safety of concurrent reads, the order of the concurrent reads is inherently indeterminstic, so it can't be known which threads will read which values. One solution is to use either @Unity.Collections.NativeStream or @Unity.Collections.LowLevel.Unsafe.UnsafeStream, which splits reads and writes into a separate buffer for each thread and thereby avoids indeterminism. Alternatively, you can effectively get a deterministic order of parallel reads if you deterministically divide the reads into separate ranges and process each range in its own thread. You can also get a deterministic order if you deterministically sort the data after it has been written to the list."
  },
  "Library/PackageCache/com.unity.collections@1.2.4/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.collections@1.2.4/Documentation~/index.html",
    "title": "Unity Collections package | ModularUIPack",
    "summary": "Unity Collections package This package provides unmanaged data structures that can be used in jobs and Burst-compiled code. The collections provided by this package fall into three categories: The collection types in Unity.Collections whose names start with Native- have safety checks for ensuring that they're properly disposed and are used in a thread-safe manner. The collection types in Unity.Collections.LowLevel.Unsafe whose names start with Unsafe- do not have these safety checks. The remaining collection types are not allocated and contain no pointers, so effectively their disposal and thread safety are never a concern. These types hold only small amounts of data. The Native- types perform safety checks to ensure that indexes passed to their methods are in bounds, but the other types in most cases do not. Several Native- types have Unsafe- equivalents, for example, NativeList has UnsafeList, and NativeHashMap has UnsafeHashMap. While you should generally prefer using the Native- collections over their Unsafe- equivalents, Native- collections cannot contain other Native- collections (owing to the implementation of their safety checks). So if, say, you want a list of lists, you can have a NativeList<UnsafeList<T>> or an UnsafeList<UnsafeList<T>>, but you cannot have a NativeList<NativeList<T>>. When safety checks are disabled, there is generally no significant performance difference between a Native- type and its Unsafe- equivalent. In fact, most Native- collections are implemented simply as wrappers of their Unsafe- counterparts. For example, NativeList is comprised of an UnsafeList plus a few handles used by the safety checks. For more information on the specific collection types, see the documentation on Collection types"
  },
  "Library/PackageCache/com.unity.collections@1.2.4/Documentation~/issues.html": {
    "href": "Library/PackageCache/com.unity.collections@1.2.4/Documentation~/issues.html",
    "title": "Known issues | ModularUIPack",
    "summary": "Known issues All containers allocated with Allocator.Temp on the same thread use a shared AtomicSafetyHandle instance rather than each having their own. On the one hand, this is fine because Temp allocated collections cannot be passed into jobs. On the other hand, this is problematic when using NativeHashMap, NativeMultiHashMap, NativeHashSet, and NativeList together in situations where their secondary safety handle is used. (A secondary safety handle ensures that a NativeArray which aliases a NativeList gets invalidated when the NativeList is reallocated due to resizing.) Operations that invalidate an enumerator for these collection types (or invalidate the NativeArray returned by NativeList.AsArray) will also invalidate all other previously acquired enumerators. For example, this will throw when safety checks are enabled: var list = new NativeList<int>(Allocator.Temp); list.Add(1); // This array uses the secondary safety handle of the list, which is // shared between all Allocator.Temp allocations. var array = list.AsArray(); var list2 = new NativeHashSet<int>(Allocator.Temp); // This invalidates the secondary safety handle, which is also used // by the list above. list2.TryAdd(1); // This throws an InvalidOperationException because the shared safety // handle was invalidated. var x = array[0]; This defect will be addressed in a future release."
  },
  "Library/PackageCache/com.unity.collections@1.2.4/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.collections@1.2.4/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "Unity.Collections © 2017 Unity Technologies Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.collections@1.2.4/README.html": {
    "href": "Library/PackageCache/com.unity.collections@1.2.4/README.html",
    "title": "Unity.Collections | ModularUIPack",
    "summary": "Unity.Collections A C# collections library providing data structures that can be used in jobs, and optimized by Burst compiler. Package CI Summary Documentation https://docs.unity3d.com/Packages/com.unity.collections@0.14/manual/index.html Data structures The Unity.Collections package includes the following data structures: Data structure | Description | Documentation ----------------------- | ----------- | ------------- BitField32 | Fixed size 32-bit array of bits. | Documentation BitField64 | Fixed size 64-bit array of bits. | Documentation NativeBitArray | Arbitrary sized array of bits. | Documentation UnsafeBitArray | Arbitrary sized array of bits, without any thread safety check features. | Documentation NativeHashMap | Unordered associative array, a collection of keys and values. | Documentation UnsafeHashMap | Unordered associative array, a collection of keys and values, without any thread safety check features. | Documentation NativeHashSet | Set of values. | Documentation UnsafeHashSet | Set of values, without any thread safety check features. | Documentation NativeList | An unmanaged, resizable list. | Documentation UnsafeList | An unmanaged, resizable list, without any thread safety check features. | Documentation NativeMultiHashMap | Unordered associative array, a collection of keys and values. This container can store multiple values for every key. | Documentation UnsafeMultiHashMap | Unordered associative array, a collection of keys and values, without any thread safety check features. This container can store multiple values for every key. | Documentation NativeStream | A deterministic data streaming supporting parallel reading and parallel writing. Allows you to write different types or arrays into a single stream. | Documentation UnsafeStream | A deterministic data streaming supporting parallel reading and parallel writings, without any thread safety check features. Allows you to write different types or arrays into a single stream. | Documentation NativeReference | An unmanaged, reference container. | Documentation UnsafeAppendBuffer | An unmanaged, untyped, buffer, without any thread safety check features. | Documentation UnsafeRingQueue | Fixed-size circular buffer, without any thread safety check features. | Documentation UnsafeAtomicCounter32 | 32-bit atomic counter. | Documentation UnsafeAtomicCounter64 | 64-bit atomic counter. | Documentation ... The items in this package build upon the NativeArray , NativeSlice , and other members of the Unity.Collections namespace, which Unity includes in the core module. Notation Native* container prefix signifies that containers have debug safety mechanisms which will warn users when a container is used incorrectly in regard with thread-safety, or memory management. Unsafe* containers do not provide those safety warnings, and the user is fully responsible to guarantee that code will execute correctly. Almost all Native* containers are implemented by using Unsafe* container of the same kind internally. In the release build, since debug safety mechanism is disabled, there should not be any significant performance difference between Unsafe* and Native* containers. Unsafe* containers are in Unity.Collections.LowLevel.Unsafe namespace, while Native* containers are in Unity.Collections namespace. Determinism Populating containers from parallel jobs is never deterministic, except when using NativeStream or UnsafeStream. If determinism is required, consider sorting the container as a separate step or post-process it on a single thread. Known Issues All containers allocated with Allocator.Temp on the same thread use a shared AtomicSafetyHandle instance. This is problematic when using NativeHashMap, NativeMultiHashMap, NativeHashSet and NativeList together in situations where their secondary safety handle is used. This means that operations that invalidate an enumerator for either of these collections (or the NativeArray returned by NativeList.AsArray) will also invalidate all other previously acquired enumerators. For example, this will throw when safety checks are enabled: var list = new NativeList<int>(Allocator.Temp); list.Add(1); // This array uses the secondary safety handle of the list, which is // shared between all Allocator.Temp allocations. var array = list.AsArray(); var list2 = new NativeHashSet<int>(Allocator.Temp); // This invalidates the secondary safety handle, which is also used // by the list above. list2.TryAdd(1); // This throws an InvalidOperationException because the shared safety // handle was invalidated. var x = array[0]; This defect will be addressed in a future release. Licensing Unity Companion License (“License”) Software Copyright © 2017-2020 Unity Technologies ApS For licensing details see LICENSE.md"
  },
  "Library/PackageCache/com.unity.editorcoroutines@1.0.0/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.editorcoroutines@1.0.0/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [1.0.0] - 2020-04-01 Changed Package has been verified for 2020.2 [0.1.0-preview.2] - 2020-03-17 Changed Lowered data size for the EditorWaitForSeconds class by half. [0.1.0-preview.1] - 2020-01-08 Added Added support for AsyncOperation subclasses. Changed Fixed unstable test. [0.0.2-preview.1] - 2019-01-25 Changed Fixed a compilation issue caused by using the 'default' literal. [0.0.1-preview.5] - 2019-01-14 Changed Updated Readme.md. Added unified yield statement processor. Added stack based processing of nested yield statements. Updated tests. Lowered memory footprint of editor coroutine instances. Removed Removed recursive handling of nested yield statements. Removed specialized yield statement processors. [0.0.1-preview.4] - 2018-12-7 Added API documentation. Changed Fixed line endings for the EditorCourtineTests.cs source file. [0.0.1-preview.3] - 2018-10-11 Changed Updated LICENSE.md. Updated manifest to reflect correct minimum supported version. [0.0.1-preview.2] - 2018-10-11 Added Added stub documentation via com.unity.editorcoroutines.md. [0.0.1-preview.1] - 2018-10-10 Added Added nesting support for editor coroutines. Added abitrary enumerator support for editor coroutines. Created specialized EditorWaitForSeconds class with access to it's wait time ( same behavior as WaitForSeconds). This is the first release of Unity Package Editor Coroutines. Source code release of the Editor Coroutines package, with no added documentation or stripping of default Package Creation Kit files."
  },
  "Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/TableOfContents.html",
    "title": "Unity Editor Coroutines | ModularUIPack",
    "summary": "Unity Editor Coroutines Editor Coroutines overview"
  },
  "Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/index.html",
    "title": "About Editor Coroutines | ModularUIPack",
    "summary": "About Editor Coroutines The Editor Coroutines package allows the user to start the execution of iterator methods within the Editor similar to how we handle Coroutines inside MonoBehaviour scripts during runtime. Installing Editor Coroutines To install this package, follow the instructions in the Package Manager documentation. Note: While this package is in preview, the Package Manager needs to be configured to show Preview Packages. (Under the Advanced drop-down menu, enable Show preview packages.) Then search for the Editor Coroutines package. Using Editor Coroutines To learn how to use the Editor Coroutines package in your project, please refer to the Scripting API section of the documentation. Technical details Requirements This version of Editor Coroutines is compatible with the following versions of the Unity Editor: 2018.1 and later (recommended) Note: If you install the Memory Profiler package it will automatically install the Editor Coroutines package as a dependency. Known limitations Editor Coroutines version 0.0.1-preview.2 includes the following known limitation(s): The iterator functions passed to Editor Coroutines do not support yielding any of the instruction classes present inside the Unity Scripting API (e.g., WaitForSeconds, WaitForEndOfFrame), except for the CustomYieldInstruction derived classes with the MoveNext method implemented. Tip: yield return null is a way to skip a frame within the Editor. Package contents The following table indicates the root folders in the package where you can find useful resources: Location Description Documentation~ Contains the documentation for the package. Tests Contains the unit tests for the package. Document revision history Date Reason June 20, 2019 Removed deprecated manual link. Dec 7, 2018 Api documentation added. Matches package version 0.0.1-preview.4. Oct 11, 2018 Document created. Matches package version 0.0.1-preview.2."
  },
  "Library/PackageCache/com.unity.editorcoroutines@1.0.0/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.editorcoroutines@1.0.0/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.core.editorcoroutines copyright © 2018 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.editorcoroutines@1.0.0/README.html": {
    "href": "Library/PackageCache/com.unity.editorcoroutines@1.0.0/README.html",
    "title": "| ModularUIPack",
    "summary": "Editor Coroutines"
  },
  "Library/PackageCache/com.unity.ext.nunit@1.0.6/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ext.nunit@1.0.6/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [1.0.6] - 2020-11-30 isExplicitlyReferenced set to 0 (case 1296162) [1.0.5] - 2020-11-04 Removed pdb files [1.0.4] - 2020-11-03 Added the portable-pdb (DSTR-37) [1.0.3] - 2020-10-30 Fixed being able to load mdb or portable-pdb symbolsbug (DSTR-37) Minimum unity version updated (case 1279253) [1.0.2] - 2019-12-04 Added missed metafiles [0.0.1] - 2019-02-21 This is the first release of Unity Package com.unity.ext.nunit. Migrated the custom version of nunit from inside of unity."
  },
  "Library/PackageCache/com.unity.ext.nunit@1.0.6/Documentation~/ext.nunit.html": {
    "href": "Library/PackageCache/com.unity.ext.nunit@1.0.6/Documentation~/ext.nunit.html",
    "title": "Custom Nunit build to work with Unity | ModularUIPack",
    "summary": "Custom Nunit build to work with Unity This version of nunit works with all platforms, il2cpp and Mono AOT. For Nunit Documentation: https://github.com/nunit/docs/wiki/NUnit-Documentation"
  },
  "Library/PackageCache/com.unity.ext.nunit@1.0.6/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ext.nunit@1.0.6/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "Copyright (c) 2018 Charlie Poole, Rob Prouse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.ext.nunit@1.0.6/README.html": {
    "href": "Library/PackageCache/com.unity.ext.nunit@1.0.6/README.html",
    "title": "Custom Nunit build to work with Unity | ModularUIPack",
    "summary": "Custom Nunit build to work with Unity This version of nunit works with all platforms, il2cpp and Mono AOT. For Nunit Documentation: https://github.com/nunit/docs/wiki/NUnit-Documentation"
  },
  "Library/PackageCache/com.unity.feature.2d@2.0.1/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.feature.2d@2.0.1/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [2.0.1] - 2024-05-17 Fixed Fixed quickstart link to its appropriate editor version [2.0.0] - 2023-06-04 Added Added the Aseprite Importer to the feature set. [1.0.0] - 2021-04-23 Added This is the first release of 2D feature set."
  },
  "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/CHANGELOG.html",
    "title": "Code Editor Package for Visual Studio | ModularUIPack",
    "summary": "Code Editor Package for Visual Studio [2.0.22] - 2023-10-03 Integration: Add support for XDG_DATA_DIRS and .desktop files on Linux for VS Code discovery. Use compile-time platform-specifics instead of using runtime conditions. Project generation: Suppress USG0001 warnings. Mark referenced assemblies as private (to not copy extra files to output directory when building). Add Unity capability to SDK-Style projects. Prevent circular dependency errors with SDK-Style projects. [2.0.21] - 2023-09-05 Integration: Only disable the legacy com.unity.ide.vscode package going forward. Fix json parsing issues with specific non-UTF code pages. Project generation: Target netstandard2.1 instead of netstandard2.0. Set defaultSolution in settings.json. Remove files.exclude entries for root csproj and sln files in settings.json when needed. Add vstuc launch configuration to launch.json when needed. Add visualstudiotoolsforunity.vstuc entry to extensions.json when needed. You can prevent the package from patching those configuration files by creating a .vscode/.vstupatchdisable file. [2.0.20] - 2023-06-27 Integration: Internal API refactoring. Add support for Visual Studio Code. Project generation: Add support for Sdk Style project generation. Fix an issue related to missing properties with 2021.3. [2.0.18] - 2023-03-17 Integration: Performance improvements with EditorApplication.update callbacks. Project generation: Add extra compiler options for analyzers and source generators. [2.0.17] - 2022-12-06 Integration: Fix rare deadlocks while discovering or launching Visual Studio on Windows. Improve launching Visual Studio on macOs. Project generation: Include analyzers from response files. Update supported C# versions. Performance improvements. [2.0.16] - 2022-06-08 Integration: Prevent ADB Refresh while being in safe-mode with a URP project Fixed an issue keeping the progress bar visible even after opening a script with Visual Studio. [2.0.15] - 2022-03-21 Integration: Improved project generation performance. Added support for keeping file/folder structure when working with external packages. Fixed project generation not being refreshed when selecting Visual Studio as the preferred external editor. [2.0.14] - 2022-01-14 Integration: Remove package version checking. [2.0.13] - 2022-01-12 Integration: Fixed wrong path to analyzers in generated projects when using external packages. Fixed selective project generation not creating Analyzer/LangVersion nodes. Fixed asmdef references with Player projects. Documentation: Added new documentation including ToC, overview, how to use and images. [2.0.12] - 2021-10-20 Integration: Do not block asset opening when only a VS instance without a loaded solution is found. Only check package version once per Unity session. Improved support for Visual Studio For Mac 2022. [2.0.11] - 2021-07-01 Integration: Added support for Visual Studio and Visual Studio For Mac 2022. Fixed an issue when the package was enabled for background processes. Project generation: Use absolute paths for Analyzers and rulesets. [2.0.10] - 2021-06-10 Project generation: Improved project generation performance when a file is moved, deleted or modified. Integration: Improved Inner-loop performance by avoiding to call the package manager when looking up vswhere utility. Fixed a network issue preventing the communication between Visual Studio and Unity on Windows. [2.0.9] - 2021-05-04 Project generation: Added support for CLI. Integration: Improved performance when discovering Visual Studio installations. Warn when legacy assemblies are present in the project. Warn when the package version is not up-to-date. [2.0.8] - 2021-04-09 Project generation: Improved generation performance (especially with DOTS enabled projects). Improved stability. Updated Analyzers lookup strategy. Fixed .vsconfig file not generated when using \"regenerate all\". Integration: Improved automation plugins. Documentation: Open sourced automation plugins. [2.0.7] - 2021-02-02 Integration: Remove com.unity.nuget.newtonsoft-json dependency in favor of the built-in JsonUtility for the VS Test Runner. [2.0.6] - 2021-01-20 Project generation: Improved language version detection. Integration: Added support for the VS Test Runner. Added initial support for displaying asset usage. Fixed remaining issues with special characters in file/path. [2.0.5] - 2020-10-30 Integration: Disable legacy pdb symbol checking for Unity packages. [2.0.4] - 2020-10-15 Project generation: Added support for embedded Roslyn analyzer DLLs and ruleset files. Warn the user when the opened script is not part of the generation scope. Warn the user when the selected Visual Studio installation is not found. Generate a .vsconfig file to ensure Visual Studio installation is compatible. Integration: Fix automation issues on MacOS, where a new Visual Studio instance is opened every time. [2.0.3] - 2020-09-09 Project generation: Added C#8 language support. Added UnityProjectGeneratorVersion property. Local and Embedded packages are now selected by default for generation. Added support for asmdef root namespace. Integration: When the user disabled auto-refresh in Unity, do not try to force refresh the Asset database. Fix Visual Studio detection issues with languages using special characters. [2.0.2] - 2020-05-27 Added support for solution folders. Only bind the messenger when the VS editor is selected. Warn when unable to create the messenger. Fixed an initialization issue triggering legacy code generation. Allow package source in assembly to be generated when referenced from asmref. [2.0.1] - 2020-03-19 When Visual Studio installation is compatible with C# 8.0, setup the language version to not prompt the user with unsupported constructs. (So far Unity only supports C# 7.3). Use Unity's TypeCache to improve project generation speed. Properly check for a managed assembly before displaying a warning regarding legacy PDB usage. Add support for selective project generation (embedded, local, registry, git, builtin, player). [2.0.0] - 2019-11-06 Improved Visual Studio and Visual Studio for Mac automatic discovery. Added support for the VSTU messaging system (start/stop features from Visual Studio). Added support for solution roundtrip (preserves references to external projects and solution properties). Added support for VSTU Analyzers (requires Visual Studio 2019 16.3, Visual Studio for Mac 8.3). Added a warning when using legacy pdb symbol files. Fixed issues while Opening Visual Studio on Windows. Fixed issues while Opening Visual Studio on Mac. [1.1.1] - 2019-05-29 Fix Bridge assembly loading with non VS2017 editors. [1.1.0] - 2019-05-27 Move internal extension handling to package. [1.0.11] - 2019-05-21 Fix detection of visual studio for mac installation. [1.0.10] - 2019-05-04 Fix ignored comintegration executable. [1.0.9] - 2019-03-05 Updated MonoDevelop support, to pass correct arguments, and not import VSTU plugin. Use release build of COMIntegration for Visual Studio. [1.0.7] - 2019-04-30 Ensure asset database is refreshed when generating csproj and solution files. [1.0.6] - 2019-04-27 Add support for generating all csproj files. [1.0.5] - 2019-04-18 Fix relative package paths. Fix opening editor on mac. [1.0.4] - 2019-04-12 Fixing null reference issue for callbacks to AssetPostProcessor. Ensure Path.GetFullPath does not get an empty string. [1.0.3] - 2019-01-01 This is the first release of Unity Package visualstudio_editor. Using the newly created api to integrate Visual Studio with Unity."
  },
  "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/CONTRIBUTING.html": {
    "href": "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/CONTRIBUTING.html",
    "title": "Contributing | ModularUIPack",
    "summary": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) and Microsoft Contributor License Agreement (CLA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA and CLA, including that your contributions are your original creation and that you have complete right and authority to make your contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/Documentation~/README.html": {
    "href": "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/Documentation~/README.html",
    "title": "Code Editor Package for Visual Studio | ModularUIPack",
    "summary": "Code Editor Package for Visual Studio This package is not intended to be modified by users. Nor does it provide any api intended to be included in user projects."
  },
  "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "About Visual Studio Editor Using the Visual Studio Editor package"
  },
  "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/Documentation~/index.html",
    "title": "Code Editor Package for Visual Studio | ModularUIPack",
    "summary": "Code Editor Package for Visual Studio About Visual Studio Editor The Visual Studio Editor package provides the Unity Editor with support for Unity-specific features from the Visual Studio Tools for Unity extension in Visual Studio and Visual Studio for Mac. These include IntelliSense auto-complete suggestions, C# editing, and debugging. Installation This package is a built-in package and installed by default. Note: If you’re using a version of the Unity Editor before 2019.4, you’ll need to install this package through the package manager. Requirements This version of the Visual Studio Editor package is compatible with the following versions of the Unity Editor: 2019.4 and later To use this package, you must have the following third-party products installed: On Windows: Visual Studio 2019 version 16.9 or newer with Visual Studio Tools for Unity 4.0.9 or newer. On macOS: Visual Studio for Mac 2019 version 8.9 or newer with Visual Studio Tools for Unity 2.0.9 or newer. For more information about using Visual Studio with Unity, see Microsoft’s Visual Studio Tools for Unity documentation. Submitting issues This package is maintained by Microsoft and Unity. Submit issues directly from Visual Studio and Visual Studio for Mac from the Help > Submit Feedback > Report a Problem menu. Unity will make this package accessible to the public on GitHub in the future."
  },
  "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/Documentation~/using-visual-studio-editor.html": {
    "href": "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/Documentation~/using-visual-studio-editor.html",
    "title": "Using the Visual Studio Editor package | ModularUIPack",
    "summary": "Using the Visual Studio Editor package To use the package, go to Edit > Preferences > External Tools > External Script Editor and select the version of Visual Studio you have installed. When you select this option, the window reloads and displays settings that control production of .csproj files. Generate .csproj files Each setting in the table below enables or disables the production of .csproj files for a different type of package.When you click Regenerate project files, Unity updates the existing .csproj files and creates the necessary new ones based on the settings you choose. These settings control whether to generate .csproj files for any installed packages. For more information on how to install packages, see Adding and removing packages. Property Description Embedded packages Any package that appears under your project’s Packages folder is an embedded package. An embedded package is not necessarily built-in; you can create your own packages and embed them inside your project. This setting is enabled by default. For more information on embedded packages, see Embedded dependencies. Local packages Any package that you install from a local repository stored on your machine, but from outside of your Unity project. This setting is enabled by default. Registry packages Any package that you install from either the official Unity registry or a custom registry. Packages in the Unity registry are available to install directly from the Package Manager. For more information about the Unity package registry, see The Package Registry section of the Unity Package Manager documentation. For information on how to create and use custom registries in addition to the Unity registry, see Scoped package registries. Git packages Any package you install directly from a Git repository using a URL. Built-in packages Any package that is already installed as part of the default Unity installation. Tarball packages Any package you install from a GZip tarball archive on the local machine, outside of your Unity project. Unknown packages Any package which Unity cannot determine an origin for. This could be because the package doesn’t list its origin, or that Unity doesn’t recognize the origin listed. Player projects For each player project, generate an additional .csproj file named ‘originalProjectName.Player.csproj’. This allows different project types to have their code included in Visual Studio’s systems, such as assembly definitions or testing suites."
  },
  "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "MIT License Copyright (c) 2019 Unity Technologies Copyright (c) 2019 Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/README.html": {
    "href": "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/README.html",
    "title": "How to install | ModularUIPack",
    "summary": "How to install - Unity->Window->Package Manager - Click \"+\" left corner - Add package from git URL - Insert https://github.com/boxqkrtm/com.unity.ide.cursor.git - Add - Done"
  },
  "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/ThirdPartyNotices.html": {
    "href": "Library/PackageCache/com.unity.ide.cursor@2c0153a9ba/ThirdPartyNotices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: VSWhere License Type: \"MIT\" The MIT License (MIT) Copyright (C) Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: benbuck/EnvDTE License Type: Zero-Clause BSD Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.34/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.34/CHANGELOG.html",
    "title": "Code Editor Package for Rider | ModularUIPack",
    "summary": "Code Editor Package for Rider [3.0.34] - 2024-10-16 Bump Unity minimum supported version [3.0.33] - 2024-08-30 Improve UI performance [3.0.32] - 2024-08-30 Improved IL2CPP debugging by generating a custom link.xml during debug builds. RIDER-114406 Added support for debug_link.xml files, a debug-only version of link.xml. RIDER-114973 [3.0.28] - 2024-02-20 fix RIDER-103933 \"PlayerSettings.suppressCommonWarnings\" is not supported in Unity 2019.4.40f fix https://github.com/JetBrains/resharper-unity/issues/2431 and RIDER-104221 [3.0.27] - 2023-11-30 Restore the ability to select Rider installation from the custom location Fix possible extra project regeneration on moving focus from Rider to Unity Improve performance of code generation for very large projects [3.0.26] - 2023-10-04 https://github.com/JetBrains/resharper-unity/issues/2421 https://github.com/JetBrains/resharper-unity/issues/2422 [3.0.25] - 2023-08-18 unification of functionality to search JetBrains installations and open solution and file in Rider [3.0.22] - 2023-05-02 RIDER-82999 Unity's plugin SyncAll does not regenerate project files, and instead does basically nothing. #2401 Compilation issue with Unity 2021.3.0f1 [3.0.21] - 2023-04-18 RIDER-92424 JetBrains Rider Editor 3.0.20 package Update for Unity, Cause's Rider to Slows to a Crawl after updating RIDER-92419 JetBrains Rider Editor 3.0.20 for Unity has duplicate assemblies loaded into runtime [3.0.20] - 2023-04-05 fix loading Rider integration EditorPlugin on first switch of External Editor to Rider, see RIDER-91185 Keep the the PackageManager in sync with the Rider changes made to the manifest.json, it should help with RIDER-77343 Support CompilerOptions.RoslynAdditionalFilePaths and CompilerOptions.AnalyzerConfigPath [3.0.18] - 2023-01-09 RIDER-74818 Unity doesn't get to play mode if Editor is not running and user starts debug or profiling Improve performance of project generation - avoid using Directory.Exists avoid doing ProjectGeneration twice on the first start-up [3.0.17] - 2022-12-01 Avoid adding asset project parts to both editor and player projects, fixes the following issues: RIDER-75500 Local package references completions shows duplicate entries if player projects are generated RIDER-73795 Conversion to guid is not offered for assemblies with generated player projects RIDER-71238 No usages can be found for the assembly if player projects are generated [3.0.16] - 2022-09-09 Update the changelog Add folders to the generated csproj files Avoid extra RequestScriptReload call on the first start Fix shader support for folders in packages, but outside asmdef [3.0.15] - 2022-05-24 Cleanup cache after project generation to reduce memory consumption Performance optimization RIDER-76126 Rider package should generate an empty csproj for empty Unity project RIDER-77206 Unity 2020.1.3 'PlayerSettings' does not contain a definition for 'suppressCommonWarnings [3.0.14] - 2022-04-21 Move Rider package persisted state to Library, to avoid vcs collisions or adding it specifically to gitignore [3.0.13] - 2022-03-24 fix RIDER-69927 \"Test not run\" status is shown for the test suite when running unit tests for Unity project fix RIDER-74676 Unity plugin \"JetBrainseRider Editor\" completely breaks <= 2019.1.9 fix RIDER-71503 Unity Hang on \"Domain Unload\", caused by dispose of FileSystemWatcher [3.0.12] - 2022-01-28 Fix bug, which was introduced in 3.0.10: New script was not added to the csproj, because cached list of assemblies was used. [3.0.10] - 2021-12-09 Fix presentation of the TargetFramework in the csproj Fix: Auto-generated solution doesn't compile when code overrides virtual functions in other assemblies Fix RIDER-72234 Avoid full project generation, when only content of assembly was changed Fix RIDER-71985 Building large Unity projects randomly fails Fix RIDER-72174 Looking for Rider installed by dotUltimate installer [3.0.9] - 2021-11-09 Fix path for Roslyn analyser supplied with a package Minimal requirement for roslyn analyzer scope is Unity 2020.3.6f1 and above [3.0.8] - 2021-11-08 Technical release [3.0.7] - 2021-05-07 RIDER-60815 Simplify extensions lists for Rider package Fix csc.rsp -nullable+ / -nullable- parsing https://github.com/van800/com.unity.ide.rider/issues/7 Support -warnaserror/-warnaserror-:/-warnaserror+: in csc.rsp [3.0.6] - 2021-04-06 Fix bug: For Unity 2021.1+ Switching external editor from VS => Rider won't create the connection between Unity and Rider. When PlayerSettings.suppressCommonWarnings is true, it is reflected in the generated csproj with NoWarn \"0169\", \"0649\" By default include T4 templates in the generated solution (RIDER-37159) RIDER-60554 Unity crash in case of project without Unity Test Framework Package. RIDER-60445 Fix presentation of Rider external editor, when it is installed in a custom location. Improve project files generation performance RIDER-60508 Project Generation for projects without any cs files - add reference to UnityEditor/UnityEngine, so that Rider would detect Unity path and version and provide rich features for shader file. [3.0.5] - 2021-02-25 More stable in case of possible Rider product code change, improve test. Allows using \"Rider for Unreal\" with Unity projects (https://youtrack.jetbrains.com/issue/RIDER-51203) Remove implicit dependency to Test-Framework package Fix \"Unreachable code detected\" warning (https://youtrack.jetbrains.com/issue/RIDER-57930) [3.0.4] - 2021-01-26 Use LangVersion provided by Unity for generated csproj Improve documentation Support nullable provided in csc,rsp Avoid doing work in Unity secondary processes in UNITY_2021_1_OR_NEWER with UnityEditor.MPE.ProcessLevel.Secondary [3.0.3] - 2020-11-18 Update License Avoid connecting Rider from secondary UnityEditor instances Fix RIDER-53082 - Generate csproj without cs files, when there are any assets inside [3.0.2] - 2020-10-27 Speedup ProjectGeneration Fix RIDER-51958. Callbacks OnGeneratedCSProjectFiles would not work, but show a Warning instead. Remove release configuration Call RequestScriptReload, when External Editor is changed in Unity. [3.0.1] - 2020-10-02 RIDER-46658 Rider does not run PlayMode tests when ValueSource is combined with parameterized TestFixture RIDER-49947 Invoking PlayerSettings.SetScriptingDefineSymbolsForGroup() does not update definitions in Rider. Add static entrypoint Packages.Rider.Editor.RiderScriptEditor.SyncSolution to allow generating solution from commandline. [2.0.7] - 2020-08-18 Improve performance Add support for asmdef Root Namespace in .csproj generation ProjectGeneration for custom roslyn analysers https://docs.unity3d.com/2020.2/Documentation/Manual/roslyn-analyzers.html Switch target platform in Unity would regenerate csproj files (https://github.com/JetBrains/resharper-unity/issues/1740) [2.0.6] - 2020-08-10 Improve performance Add support for asmdef Root Namespace in .csproj generation ProjectGeneration for custom roslyn analysers https://docs.unity3d.com/2020.2/Documentation/Manual/roslyn-analyzers.html Switch target platform in Unity would regenerate csproj files (https://github.com/JetBrains/resharper-unity/issues/1740) [2.0.5] - 2020-05-27 Fix Regression in 2.0.3: In Unity 2019.2.9 on Mac, changing csproj and calling AssetDatabase.Refresh is not regenerating csproj. Regenerate projects on changes in manifest.json and Project Settings (EditorOnlyScriptingUserSettings.json) (#51) Fix: Assembly references to package assemblies break IDE projects. Fix: Reporting test duration. [2.0.2] - 2020-03-18 fix bug in searching Rider path on MacOS [2.0.1] - 2020-03-05 Speed improvements, ProjectTypeGuids for unity-generated project Improve UI for Project Generation settings Changes in csc.rsp would cause project-generation Remove NoWarn 0169 from generated csproj Support custom JetBrains Toolbox installation location [1.2.1] - 2019-12-09 Load optimised EditorPlugin version compiled to net 461, with fallback to previous version. On ExternalEditor settings page: reorder Generate all ... after Extensions handled Better presentation for Rider of some version in ExternalEditors list Initial support for Code Coverage with dotCover plugin in Rider Added support for Player Project generation [1.1.4] - 2019-11-21 Fix warning - unreachable code [1.1.3] - 2019-10-17 Update External Editor, when new toolbox build was installed Add xaml to default list of extensions to include in csproj Avoid initializing Rider package in secondary Unity process, which does Asset processing Reflect multiple csc.rsp arguments to generated csproj files: https://github.com/JetBrains/resharper-unity/issues/1337 Setting, which allowed to override LangVersion removed in favor of langversion in csc.rsp Environment.NewLine is used in generated project files instead of Windows line separator. [1.1.2] - 2019-09-18 performance optimizations: avoid multiple evaluations avoid reflection in DisableSyncSolutionOnceCallBack project generation optimization fixes: avoid compilation error with incompatible Test Framework package [1.1.1] - 2019-08-26 parse nowarn in csc.rsp warning, when Unity was started from Rider, but external editor was different improved unit test support workaround to avoid Unity internal project-generation (fix #28) [1.1.0] - 2019-07-02 new setting to manage list of extensions to be opened with Rider avoid breaking everything on any unhandled exception in RiderScriptEditor cctor hide Rider settings, when different Editor is selected dynamically load only newer rider plugins path detection (work on unix symlinks) speed up for project generation lots of bug fixing [1.0.8] - 2019-05-20 Fix NullReferenceException when External editor was pointing to non-existing Rider everything was broken by null-ref. [1.0.7] - 2019-05-16 Initial migration steps from rider plugin to package. Fix OSX check and opening of files. [1.0.6] - 2019-04-30 Ensure asset database is refreshed when generating csproj and solution files. [1.0.5] - 2019-04-27 Add support for generating all csproj files. [1.0.4] - 2019-04-18 Fix relative package paths. Fix opening editor on mac. [1.0.3] - 2019-04-12 Fixing null reference issue for callbacks to Asset pipeline. [1.0.2] - 2019-01-01 This is the first release of Unity Package rider_editor. Using the newly created api to integrate Rider with Unity."
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.34/CONTRIBUTING.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.34/CONTRIBUTING.html",
    "title": "Contributing | ModularUIPack",
    "summary": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.34/Documentation~/README.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.34/Documentation~/README.html",
    "title": "Code Editor Package for Rider | ModularUIPack",
    "summary": "Code Editor Package for Rider This package is not intended to be modified by users. Nor does it provide any api intended to be included in user projects."
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.34/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.34/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "About JetBrains Rider Editor Using the JetBrains Rider Editor package"
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.34/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.34/Documentation~/index.html",
    "title": "About JetBrains Rider Editor | ModularUIPack",
    "summary": "About JetBrains Rider Editor The JetBrains Rider editor package integrates support for the JetBrains Rider .NET Integrated Development Environment (IDE), into the Unity Editor. This package provides an end-point for Rider to call different Unity APIs and to generate .csproj and .sln files, which Rider uses to implement support for Unity in its plug-in. This package ensures that IDE features like autocomplete suggestions and flagging dependency conflicts work in Rider. It uses .cproj and .sln files which store information about your project such as: Versioning information Build files Platform requirements Web server or database settings Not all code in Unity is directly visible to code editors, particularly when using packages. This is because packages don’t provide their own .csproj files, and Unity doesn’t create them for installed packages by default. This means that IDE features like autocomplete suggestions and flagging dependency conflicts do not work with code in these packages. The purpose of this package is to produce the .csproj files that make these features possible by default when you use Rider. Installation As of Unity version 2019.2, this package comes as a part of the default Unity installation. If you are updating your project from an older version of Unity, you might need to install this package via the Package Manager. Requirements This version of the JetBrains Rider editor package is compatible with the following versions of the Unity Editor: 2019.2.6 or later To use this package, you must have the following third-party products installed: JetBrains Rider version 2019.3 or newer For more information about the Rider IDE, see the JetBrains Rider documentation. Submitting issues This package is maintained by JetBrains and Unity. Submit issues to the JetBrains/resharper-unity/issues GitHub page. Unity intends for this package to become accessible to the public on GitHub in the future."
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.34/Documentation~/using-the-jetbrains-rider-editor-package.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.34/Documentation~/using-the-jetbrains-rider-editor-package.html",
    "title": "Using the JetBrains Rider Editor package | ModularUIPack",
    "summary": "Using the JetBrains Rider Editor package To use the package, go to Edit > Preferences > External Tools, click on the External Script Editor dropdown menu and select your version of Rider. When you select this option, the window reloads. After the window reloads, new settings that control production of .csproj files become available. External Tools tab in the Preferences window Commandline endpoints Q: Generate sln/csproj files for CI? A: Unity -batchmode -quit -projectPath ProjectPath -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolution Q: Generate sln/csproj and open External Editor? A: Unity -batchmode -quit -projectPath ProjectPath -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolutionAndOpenExternalEditor Package preferences Property: Description: Extensions handled This field lists the file extensions that open in JetBrains Rider. This field contains a variety of extensions by default. Generate .csproj files for: Each setting in this list enables or disables production of .csproj files for a different type of package. The Regenerate project files button updates existing .csproj files and creates the necessary new ones based on the settings you choose. These settings control whether to generate .csproj files for any installed packages. For more information on how to install packages, see the Adding and removing packages documentation. __ Embedded packages__ Any package that appears under your project’s Packages folder is an embedded package. An embedded package is not necessarily built-in; you can create your own packages and embed them inside your project. This setting is enabled by default. For more information on embedded packages, see the Embedded dependencies documentation. __ Local packages__ Any package that you install from a local repository stored on your machine, but from outside of your Unity project. This setting is enabled by default. __ Registry packages__ Any package that you install from either the official Unity registry or a custom registry. Packages in the Unity registry are available to install directly from the Package Manager. For more information about the Unity package registry, see the Package Registry section of the Unity Package Manager documentation. For information on creating and using custom registries in addition to the Unity registry, see the Scoped package registries documentation. __ Git packages__ Any package you install directly from a Git repository using a URL. __ Built-in packages__ Any package that is already installed as part of the default Unity installation. __ Tarball packages__ Any package you install from a GZip tarball archive on the local machine, outside of your Unity project. __ Unknown packages__ Any package which Unity cannot determine an origin for. This could be because the package doesn’t list its origin, or that Unity doesn’t recognize the origin listed. Player projects For each player project, generate an additional .csproj file named 'originalProjectName.Player.csproj'. This allows different project types to have their code included in Rider’s systems, such as assembly definitions or testing suites. This package also adds a second tab under Preferences named Rider, pictured below. Rider tab in the Preferences window Note The Logging Level menu does not control the level of Unity's logging, only the level of log messages that Rider package logs in its own log file. For more information on controlling Unity's logging level, see the Stack Trace Logging section of the Console Window documentation. Property: Description: Pass Console to Rider If Pass Console to Rider is enabled, Rider can access data that Unity sends to the Unity Console and display it within its own environment instead. Log file The Log file field contains an Open log button. Select this button to open the log file inside the Rider IDE. This button is unavailable when Logging Level is set to OFF. Logging Level The Logging Level menu controls how detailed are the Rider package logs. Those logs may be used for troubleshooting communication between Rider and Unity. Rider package logs all messages of the type you select as well as any messages of a more severe type. For example, if you choose WARN, then Rider logs all ERROR and FATAL messages as well as WARN messages. The message types are listed below in order of severity, with FATAL as the most severe type of message and TRACE as the least severe. OFF Rider does not produce any logs. **FATAL Logs information relating to serious problems that cause the application to crash. This setting produces the smallest logs. ERROR Logs information about errors that prevent some functionality from working, but don’t cause the application to fail (for example, a failed database connection). WARN Logs information about possible problems, or any unusual behaviour. Warnings don’t indicate that something has gone wrong, but that Unity detects something that might potentially cause an issue if not investigated. INFO Logs information about normal operation of the application, such as a successful database connection attempt. VERBOSE Logs detailed but not exhaustive information about your code. This setting is helpful for checking how your code executes or providing diagnostic information for other developers. TRACE Logs as much information about the application as possible. This can create a very large and detailed log, so it’s good practice to only use it when attempting to find the cause of a specific issue with your code."
  },
  "Library/PackageCache/com.unity.ide.rider@3.0.34/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ide.rider@3.0.34/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.ide.rider copyright © 2019 Unity Technologies ApS & JetBrains s.r.o. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CHANGELOG.html",
    "title": "Code Editor Package for Visual Studio | ModularUIPack",
    "summary": "Code Editor Package for Visual Studio [2.0.22] - 2023-10-03 Integration: Add support for XDG_DATA_DIRS and .desktop files on Linux for VS Code discovery. Use compile-time platform-specifics instead of using runtime conditions. Project generation: Suppress USG0001 warnings. Mark referenced assemblies as private (to not copy extra files to output directory when building). Add Unity capability to SDK-Style projects. Prevent circular dependency errors with SDK-Style projects. [2.0.21] - 2023-09-05 Integration: Only disable the legacy com.unity.ide.vscode package going forward. Fix json parsing issues with specific non-UTF code pages. Project generation: Target netstandard2.1 instead of netstandard2.0. Set defaultSolution in settings.json. Remove files.exclude entries for root csproj and sln files in settings.json when needed. Add vstuc launch configuration to launch.json when needed. Add visualstudiotoolsforunity.vstuc entry to extensions.json when needed. You can prevent the package from patching those configuration files by creating a .vscode/.vstupatchdisable file. [2.0.20] - 2023-06-27 Integration: Internal API refactoring. Add support for Visual Studio Code. Project generation: Add support for Sdk Style project generation. Fix an issue related to missing properties with 2021.3. [2.0.18] - 2023-03-17 Integration: Performance improvements with EditorApplication.update callbacks. Project generation: Add extra compiler options for analyzers and source generators. [2.0.17] - 2022-12-06 Integration: Fix rare deadlocks while discovering or launching Visual Studio on Windows. Improve launching Visual Studio on macOs. Project generation: Include analyzers from response files. Update supported C# versions. Performance improvements. [2.0.16] - 2022-06-08 Integration: Prevent ADB Refresh while being in safe-mode with a URP project Fixed an issue keeping the progress bar visible even after opening a script with Visual Studio. [2.0.15] - 2022-03-21 Integration: Improved project generation performance. Added support for keeping file/folder structure when working with external packages. Fixed project generation not being refreshed when selecting Visual Studio as the preferred external editor. [2.0.14] - 2022-01-14 Integration: Remove package version checking. [2.0.13] - 2022-01-12 Integration: Fixed wrong path to analyzers in generated projects when using external packages. Fixed selective project generation not creating Analyzer/LangVersion nodes. Fixed asmdef references with Player projects. Documentation: Added new documentation including ToC, overview, how to use and images. [2.0.12] - 2021-10-20 Integration: Do not block asset opening when only a VS instance without a loaded solution is found. Only check package version once per Unity session. Improved support for Visual Studio For Mac 2022. [2.0.11] - 2021-07-01 Integration: Added support for Visual Studio and Visual Studio For Mac 2022. Fixed an issue when the package was enabled for background processes. Project generation: Use absolute paths for Analyzers and rulesets. [2.0.10] - 2021-06-10 Project generation: Improved project generation performance when a file is moved, deleted or modified. Integration: Improved Inner-loop performance by avoiding to call the package manager when looking up vswhere utility. Fixed a network issue preventing the communication between Visual Studio and Unity on Windows. [2.0.9] - 2021-05-04 Project generation: Added support for CLI. Integration: Improved performance when discovering Visual Studio installations. Warn when legacy assemblies are present in the project. Warn when the package version is not up-to-date. [2.0.8] - 2021-04-09 Project generation: Improved generation performance (especially with DOTS enabled projects). Improved stability. Updated Analyzers lookup strategy. Fixed .vsconfig file not generated when using \"regenerate all\". Integration: Improved automation plugins. Documentation: Open sourced automation plugins. [2.0.7] - 2021-02-02 Integration: Remove com.unity.nuget.newtonsoft-json dependency in favor of the built-in JsonUtility for the VS Test Runner. [2.0.6] - 2021-01-20 Project generation: Improved language version detection. Integration: Added support for the VS Test Runner. Added initial support for displaying asset usage. Fixed remaining issues with special characters in file/path. [2.0.5] - 2020-10-30 Integration: Disable legacy pdb symbol checking for Unity packages. [2.0.4] - 2020-10-15 Project generation: Added support for embedded Roslyn analyzer DLLs and ruleset files. Warn the user when the opened script is not part of the generation scope. Warn the user when the selected Visual Studio installation is not found. Generate a .vsconfig file to ensure Visual Studio installation is compatible. Integration: Fix automation issues on MacOS, where a new Visual Studio instance is opened every time. [2.0.3] - 2020-09-09 Project generation: Added C#8 language support. Added UnityProjectGeneratorVersion property. Local and Embedded packages are now selected by default for generation. Added support for asmdef root namespace. Integration: When the user disabled auto-refresh in Unity, do not try to force refresh the Asset database. Fix Visual Studio detection issues with languages using special characters. [2.0.2] - 2020-05-27 Added support for solution folders. Only bind the messenger when the VS editor is selected. Warn when unable to create the messenger. Fixed an initialization issue triggering legacy code generation. Allow package source in assembly to be generated when referenced from asmref. [2.0.1] - 2020-03-19 When Visual Studio installation is compatible with C# 8.0, setup the language version to not prompt the user with unsupported constructs. (So far Unity only supports C# 7.3). Use Unity's TypeCache to improve project generation speed. Properly check for a managed assembly before displaying a warning regarding legacy PDB usage. Add support for selective project generation (embedded, local, registry, git, builtin, player). [2.0.0] - 2019-11-06 Improved Visual Studio and Visual Studio for Mac automatic discovery. Added support for the VSTU messaging system (start/stop features from Visual Studio). Added support for solution roundtrip (preserves references to external projects and solution properties). Added support for VSTU Analyzers (requires Visual Studio 2019 16.3, Visual Studio for Mac 8.3). Added a warning when using legacy pdb symbol files. Fixed issues while Opening Visual Studio on Windows. Fixed issues while Opening Visual Studio on Mac. [1.1.1] - 2019-05-29 Fix Bridge assembly loading with non VS2017 editors. [1.1.0] - 2019-05-27 Move internal extension handling to package. [1.0.11] - 2019-05-21 Fix detection of visual studio for mac installation. [1.0.10] - 2019-05-04 Fix ignored comintegration executable. [1.0.9] - 2019-03-05 Updated MonoDevelop support, to pass correct arguments, and not import VSTU plugin. Use release build of COMIntegration for Visual Studio. [1.0.7] - 2019-04-30 Ensure asset database is refreshed when generating csproj and solution files. [1.0.6] - 2019-04-27 Add support for generating all csproj files. [1.0.5] - 2019-04-18 Fix relative package paths. Fix opening editor on mac. [1.0.4] - 2019-04-12 Fixing null reference issue for callbacks to AssetPostProcessor. Ensure Path.GetFullPath does not get an empty string. [1.0.3] - 2019-01-01 This is the first release of Unity Package visualstudio_editor. Using the newly created api to integrate Visual Studio with Unity."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CONTRIBUTING.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CONTRIBUTING.html",
    "title": "Contributing | ModularUIPack",
    "summary": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) and Microsoft Contributor License Agreement (CLA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA and CLA, including that your contributions are your original creation and that you have complete right and authority to make your contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/README.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/README.html",
    "title": "Code Editor Package for Visual Studio | ModularUIPack",
    "summary": "Code Editor Package for Visual Studio This package is not intended to be modified by users. Nor does it provide any api intended to be included in user projects."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "About Visual Studio Editor Using the Visual Studio Editor package"
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/index.html",
    "title": "Code Editor Package for Visual Studio | ModularUIPack",
    "summary": "Code Editor Package for Visual Studio About Visual Studio Editor The Visual Studio Editor package provides the Unity Editor with support for Unity-specific features from the Visual Studio Tools for Unity extension in Visual Studio and Visual Studio for Mac. These include IntelliSense auto-complete suggestions, C# editing, and debugging. Installation This package is a built-in package and installed by default. Note: If you’re using a version of the Unity Editor before 2019.4, you’ll need to install this package through the package manager. Requirements This version of the Visual Studio Editor package is compatible with the following versions of the Unity Editor: 2019.4 and later To use this package, you must have the following third-party products installed: On Windows: Visual Studio 2019 version 16.9 or newer with Visual Studio Tools for Unity 4.0.9 or newer. On macOS: Visual Studio for Mac 2019 version 8.9 or newer with Visual Studio Tools for Unity 2.0.9 or newer. For more information about using Visual Studio with Unity, see Microsoft’s Visual Studio Tools for Unity documentation. Submitting issues This package is maintained by Microsoft and Unity. Submit issues directly from Visual Studio and Visual Studio for Mac from the Help > Submit Feedback > Report a Problem menu. Unity will make this package accessible to the public on GitHub in the future."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/using-visual-studio-editor.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/using-visual-studio-editor.html",
    "title": "Using the Visual Studio Editor package | ModularUIPack",
    "summary": "Using the Visual Studio Editor package To use the package, go to Edit > Preferences > External Tools > External Script Editor and select the version of Visual Studio you have installed. When you select this option, the window reloads and displays settings that control production of .csproj files. Generate .csproj files Each setting in the table below enables or disables the production of .csproj files for a different type of package.When you click Regenerate project files, Unity updates the existing .csproj files and creates the necessary new ones based on the settings you choose. These settings control whether to generate .csproj files for any installed packages. For more information on how to install packages, see Adding and removing packages. Property Description Embedded packages Any package that appears under your project’s Packages folder is an embedded package. An embedded package is not necessarily built-in; you can create your own packages and embed them inside your project. This setting is enabled by default. For more information on embedded packages, see Embedded dependencies. Local packages Any package that you install from a local repository stored on your machine, but from outside of your Unity project. This setting is enabled by default. Registry packages Any package that you install from either the official Unity registry or a custom registry. Packages in the Unity registry are available to install directly from the Package Manager. For more information about the Unity package registry, see The Package Registry section of the Unity Package Manager documentation. For information on how to create and use custom registries in addition to the Unity registry, see Scoped package registries. Git packages Any package you install directly from a Git repository using a URL. Built-in packages Any package that is already installed as part of the default Unity installation. Tarball packages Any package you install from a GZip tarball archive on the local machine, outside of your Unity project. Unknown packages Any package which Unity cannot determine an origin for. This could be because the package doesn’t list its origin, or that Unity doesn’t recognize the origin listed. Player projects For each player project, generate an additional .csproj file named ‘originalProjectName.Player.csproj’. This allows different project types to have their code included in Visual Studio’s systems, such as assembly definitions or testing suites."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "MIT License Copyright (c) 2019 Unity Technologies Copyright (c) 2019 Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/ThirdPartyNotices.html": {
    "href": "Library/PackageCache/com.unity.ide.visualstudio@2.0.22/ThirdPartyNotices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: VSWhere License Type: \"MIT\" The MIT License (MIT) Copyright (C) Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: benbuck/EnvDTE License Type: Zero-Clause BSD Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
  },
  "Library/PackageCache/com.unity.ide.vscode@1.2.5/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ide.vscode@1.2.5/CHANGELOG.html",
    "title": "Code Editor Package for Visual Studio Code | ModularUIPack",
    "summary": "Code Editor Package for Visual Studio Code [1.2.5] - 2022-02-07 Introduce OnGeneratedCSProjectFiles, OnGeneratedCSProject and OnGeneratedSlnSolution callbacks. Always use forward slash in source paths Analyzers use absolute paths Ruleset files for roslyn analyzers Extra snap search paths on Ubuntu Specific c# language version for specific unity versions No longer hide .gitignore in VSCode file explorer [1.2.3] - 2020-10-23 Remove workaround for VSCode omnisharp (as of https://github.com/OmniSharp/omnisharp-vscode/issues/4113 we no longer need to disable the referenceoutputassemblies). [1.2.2] - 2020-09-04 VSC-14 - synchronize solution file when adding new assembly [1.2.1] - 2020-05-15 Source filtering adds support for asmref [1.2.0] - 2020-03-04 Do not reference projects that has not been generated (case 1211057) Only open files that exists (case 1188394) Add individual toggle buttons for generating csprojects for packages Add support for Roslyn analyzers in project generation through csc.rsp and compiled assembly references Remove Release build target from csproj and sln [1.1.4] - 2020-01-02 Delta project generation, only recompute the csproj files whose script modified. [1.1.3] - 2019-10-22 Exe version of vscode will use Normal ProcessWindowStyle while cmd will use Hidden [1.1.2] - 2019-08-30 Fixing OSX open command arguments [1.1.1] - 2019-08-19 Support for Player Project. Generates specific csproj files containing files, reference, defines, etc. that will show how the assembly will be compiled for a target platform. [1.1.0] - 2019-08-07 Adds support for choosing extensions to be opened with VSCode. This can be done through the GUI in Preferences. Avoids opening all extensions after the change in core unity. [1.0.7] - 2019-05-15 Fix various OSX specific issues. Generate project on load if they are not generated. Fix path recognition. [1.0.6] - 2019-04-30 Ensure asset database is refreshed when generating csproj and solution files. [1.0.5] - 2019-04-27 Add support for generating all csproj files. [1.0.4] - 2019-04-18 Fix relative package paths. Fix opening editor on mac. Add %LOCALAPPDATA%/Programs to the path of install paths. [1.0.3] - 2019-01-01 This is the first release of Unity Package vscode_editor. Using the newly created api to integrate Visual Studio Code with Unity."
  },
  "Library/PackageCache/com.unity.ide.vscode@1.2.5/CONTRIBUTING.html": {
    "href": "Library/PackageCache/com.unity.ide.vscode@1.2.5/CONTRIBUTING.html",
    "title": "Contributing | ModularUIPack",
    "summary": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "Library/PackageCache/com.unity.ide.vscode@1.2.5/Documentation~/README.html": {
    "href": "Library/PackageCache/com.unity.ide.vscode@1.2.5/Documentation~/README.html",
    "title": "Code Editor Package for Visual Studio Code | ModularUIPack",
    "summary": "Code Editor Package for Visual Studio Code This package is not intended to be modified by users. Nor does it provide any api intended to be included in user projects."
  },
  "Library/PackageCache/com.unity.ide.vscode@1.2.5/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ide.vscode@1.2.5/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "MIT License Copyright (c) 2019 Unity Technologies Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.mathematics@1.2.6/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.mathematics@1.2.6/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [1.2.6] - 2022-02-11 Added Changed Made Il2CppEagerStaticClassConstructionAttribute internal to avoid conflicts with other definitions outside of the package. Deprecated Removed Fixed [1.2.5] - 2021-11-01 Added Changed Deprecated Removed Fixed Fixed property drawing when manually drawing a property that was hidden with [HideInInspector]. [1.2.4] - 2021-09-22 Added Added [Il2CppEagerStaticClassConstruction] to Unity.Mathematics types to run static constructors at startup. This improves IL2CPP performance slightly for types that have static constructors. Changed License file updated to satisfy Unity's package validation tests. Changed noise documentation in comments to xmldoc comments. Deprecated Removed Fixed Fixed Equals(object) override which did not check type before casting. This could cause exceptions to be thrown when the object did not match the expected type. Fixed incorrect math.tzcnt documentation which mentioned leading zero counts instead of trailing zero counts. Fixed float2x2.Rotate documentation to mention radians instead of degrees. Fixed documentation for methods and properties that were previously undocumented. [1.2.1] - 2020-08-06 Added Changed Deprecated Removed Fixed Fixed warnings for meta files existing even though the files they represent did not exist. Internal (Not ready for production) [1.2.0] - 2020-08-03 Added Added [MethodImpl(MethodImplOptions.AggressiveInlining)] to many static functions to improve IL2CPP performance. Added compress() that accepts a float4 and uint4. Added math.project() and math.projectsafe() for vector projection. Added math.EPSILON, math.INFINITY, math.NAN and their double counterparts. Added [Serializable] to RigidTransform. Added math.ceillog2(). Added math.floorlog2(). Added math.down(), math.forward(), etc for Cartesian coordinate axes that match UnityEngine Vector3 equivalents. Added math.ispow2(). Added half.MinValueAsHalf and half.MaxValueAsHalf to avoid having to explicitly convert from float. Added a float3x3 constructor which takes a float4x4 as input. Added [Serializable] to half types. Added some performance tests which can be run from the Unity test project. Added Random.CreateFromIndex() to assist in creating Random instances from loop indices. Changed Deprecated Removed Fixed Fixed documentation bug where quaternion.RotateX/Y/Z referred to a float4x4 instead of quaternion. Fixed code generation bugs which could cause Windows and Mac to generate different test code. Fixed some test asserts which used NaNs and signed zeros which failed in IL2CPP builds. Updated documentation for math.countbits() to include equivalent names on Intel and ARM architectures to aid in discoverability. Internal (Not ready for production) Added Unity.Mathematics.Geometry.Plane to represent planes in 3D space. Added more MinMaxAABB functionality from Unity.Physics.Aabb. Added Unity.Mathematics.Geometry.Math to hold static functions like AABB transformations. Added MinMaxAABB. [1.1.0] - 2019-07-08 Release stable version [1.1.0-preview.1] - 2019-06-27 Add new math.bitmask to return a bit mask from a bool4 [1.0.1] - 2019-04-15 Release stable version Modify all math constants (e.g math.PI) to provide float constant by default instead of double. Use for example math.PI_DBL to get the previous double constant. [1.0.0-preview.1] - 2019-02-28 Fixed bug where modifications on prefabs could not be reverted for vector properties when using context menu in Inspector. Fixed structure of the package for internal validation"
  },
  "Library/PackageCache/com.unity.mathematics@1.2.6/Documentation~/mathematics.html": {
    "href": "Library/PackageCache/com.unity.mathematics@1.2.6/Documentation~/mathematics.html",
    "title": "Unity.Mathematics | ModularUIPack",
    "summary": "Unity.Mathematics A C# math library providing vector types and math functions with a shader like syntax. Used by the Burst compiler to compile C#/IL to highly efficient native code. The main goal of this library is to provide a friendly Math API familiar to SIMD and graphic/shaders developers, using the well known float4, float3 types...etc. with all intrinsics functions provided by a static class math that can be imported easily into your C# program with using static Unity.Mathematics.math. In addition to this, the Burst compiler is able to recognize these types and provide the optimized SIMD type for the running CPU on all supported platforms (x64, ARMv7a...etc.) NOTICE: The API is a work in progress and we may introduce breaking changes (API and underlying behavior) Usage You can use this library in your Unity game by using the Package Manager and referencing the package com.unity.mathematics. See the forum Welcome page for more details. using static Unity.Mathematics.math; namespace MyNamespace { using Unity.Mathematics; ... var v1 = float3(1,2,3); var v2 = float3(4,5,6); v1 = normalize(v1); v2 = normalize(v2); var v3 = dot(v1, v2); ... } Building Open the src\\Unity.Mathematics.sln under Visual Studio 2015 or MonoDevelop and compile in Debug\\Release. Contributing We don't yet accept PR on this repository. See the FAQ below. The project is using editorconfig to keep files correctly formatted for EOL and spaces. We assume that your IDE has support for editorconfig, you can download the following extensions if your IDE is listed: VS2015/VS2017 EditorConfig extension Visual Studio Code EditorConfig extension SublimeText EditorConfig extension Frequently Asked Question Why developing another Math library instead of using existing Unity Vector3...etc.? After years of feedback and experience with the previous API, we believe that providing an API that is closer to the way graphics developers have been using math libraries should better help its adoption and the ease of its usage. HLSL / GLSL math library is a very well designed, well understood math library leading to greater consistency. Why not using System.Numerics.Vectors? Mainly for the reason mentioned above, System.Numerics.Vectors is in many ways similar to our previous Vector library (more object oriented than graphics programming oriented). Also the fact that our Burst compiler is able to recognize a lot more patterns for SIMD types and math intrinsics makes it easier to work with a dedicated API that reflects this ability. Naming convention In C# int and float are considered builtin types. Burst extends this set of bultin types to also include vectors, matrices and quaternions. These types are bultin in the sense that Burst knows about them and is be able to generate better code using these types than what would be possible with equivalent code using custom types. To signify that these types are bultin their type names are in all lower case. The operators on these bultin types found in Unity.Mathematics.math are considered intrinsics and are thus always in lower case. There are no plans to extend the set of intrinsic types beyond the current set of vectors (typeN), matrices (typeNxN) and quaternions (quaternion). This convention has the added benefit of making the library highly compatible with shader code and makes porting or sharing code between the two almost frictionless. Why can't we send a PR yet? We are working on providing a Contributor License Agreement (CLA) with a sign-over functionality and our UCL License doesn't cover this yet. Licensing Unity Companion License (“License”) Software Copyright © 2019 Unity Technologies ApS For licensing details see LICENSE.md"
  },
  "Library/PackageCache/com.unity.mathematics@1.2.6/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.mathematics@1.2.6/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.mathematics copyright © 2019 Unity Technologies Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [1.1.5] - 2025-02-14 Added Managed fields referencing native allocations are now parsed as references. References show up in the References To tab for the managed objects holding the references, as well as in the Referenced By tab for native allocations under Native > Unity Subsystems > UnsafeUtility in the All Of Memory table. Note that this is not an exhaustive list of all references to these allocations, as stack variables could reference them as well but are not part of the snapshot. Thus, a native allocation without references is not necessarily leaked. Native Allocations (e.g. those listed in Native > Unity Subsystems > UnsafeUtility in the All Of Memory table) are now named based on the field and object information of the first managed reference to them, making them easier to parse than address values and stand out from the list as having reference information. Fixed The Boehm GC treats any pointer sized field as potential managed pointer. So far the Memory Profiler only examined reference fields to find referenced objects (outside of those directly held by static fields or GCHandles). The Memory Profiler does not yet follow this logic as it would end up finding invalid Managed objects, but it now finds references from unsafe pointer fields to Managed Objects that are also held by a GC Handle. The Managed Fields table now shows any pointer sized fields that might be holding managed objects as referencing these managed objects (Note: if they are not referenced otherwise, they won't sho up in the other tables). Changed The References To table now shows field information for references held by managed fields [1.1.4] - 2025-02-07 Added Added memory amount taken up by static field data to Virtual Machine Memory description when selecting it. It usually is a very small portion of the VM but it is one that all snapshots already have data for. Added snapshot meta data description (reported via an implementation of Unity.MemoryProfiler.MetadataCollect or Unity.Profiling.Memory.MemoryProfiler.CreatingMetadata) to the tooltips of the snapshot screenshot images. Fixed Fixed native sizes getting trimmed down for Native Objects captured in snapshots from Unity versions before 2022.2, when their Native Allocations did not fall within reported memory regions. This trimming falsely assumed proper memory region reporting. Changed Improved object size information in selection details view; now lists Graphics memory. Showing Graphics sizes in All Of Memory table for snapshots of Unity versions prior to 2022.2 and adjusting native sizes to rely on Profiler.GetRuntimeMemorySizeLong data for these captures. Switched Unity Objects table and summary to use the explicitly reported graphics sizes for all snapshots taken from 2022.2 or newer, instead of 2023.1 or newer. 2022.2 and 2022.3 had this data but was displaying graphics sizes based on calculations using Profiler.GetRuntimeMemorySizeLong data. Earlier 2022.2 and 2022.3 versions had different bugs in the reported values for the explicitly reported graphics sizes so snapshots taken between version 2022.2.0a8 and 2022.3.7f1 might have shown different graphics and native sizes on the Unity Objects table vs what the All Of Memory table was showing for them. Small discrepancies in native memory reporting, that also might have had an influence on the graphics and native sizes shown in the two tables have been fixed in 2022.3.43f1 so for the most reliable data, use that or a newer version for profiling. Grouping all Graphics > <No Name> entries into one. If you have these, please update to at least Unity patch version: 2022.3.44f1 or 6000.0.0b16 Improved the documentation for MetadataCollect API. Opening the Memory Profiler window no longer starts indexing the assets search provider by default, leading to potential crashes. [1.1.3] - 2024-10-31 Fixed Static field references were only listed in the References view if they directly referenced the selected item, i.e. a static field referencing an object B that referenced the selected object A would only show object B, but not the static reference to B (PROFB-173). Fixed an ArgumentOutOfRangeException when opening the Unity Objects page in compare mode with 2 snapshots that were captured without capturing Native Objects. Fixed a NullReferenceException when opening the All of Memory page in compare mode with 2 snapshots that were captured without capturing Native Objects but with Native Allocations, both from the same session. Fixed the ID numbers for Graphics objects on the All of Memory page in compare mode with 2 snapshots that where both captured from the same session to be their Native Object's instance ID. Changed Adjusted package dependency on Unity.Collections down to 1.2 to retain compatibility to 2022.3 without forcing to update Unity.Collections to 2.1 or newer. [1.1.2] - 2024-10-24 Fixed Fixed Memory Profiler UI freezing on selecting Unity Objects when the search index hasn't been built yet. Reattributed Nintendo Switch's reserved GPU memory from Native to Graphics in the Summary view and All Of Memory table. Improved the performance of the Managed Data Crawler by using the Job System when parsing managed array data with potential references to managed objects. In some worst case scenarios this brings the opening times down from several hours to <5min, thereby fixing PROFB-191. Fixed misalignment of managed object sizes shown in the All Of Memory table vs. what is shown in the selected item details where that was caused by faulty readings of the managed heap data in the package (reading something as a potential reference to effectively random memory that looks close enough to a valid object, but not quiet), or faulty data reported by the capture backend (caused by e.g. the capture process allowing the creation of new Unity Objects between capturing the managed heap data and reporting all GC Handles held by currently alive Unity Objects(UUM-77449, fixed in 6000.0.16f1, 2022.3.43f1 2021.3.44f1) and/or an incomplete reporting of reserved but unused heap bytes (UUM-53413)) leading to the package \"discovering\" managed objects that can't reasonably exist as live objects because their size exceeds the reported heap bytes. (PROFB-118) Fixed inclusion of allocated GPU memory on the Nintendo Switch on the All Of Memory table under Native > Unity Subsystem > Unknown. Instead, it is now shown under Graphics (Estimated) and/or Untracked > Graphics. Changed Improved accuracy of the search for Assets and Scene Objects within the open project which is used for the \"Select in Editor\" button, Open in Search and Preview Image by constraining it to exact names. Improved responsiveness of table item selection of Unity Objects (in any table) by switching the Assets and Scene Object search triggered by that selection to run async instead of synchronous. The All Of Memory table now lists all individual allocation under Native > Unity Subsystem > UnsafeUtility to allow for checking the count and size of different allocations made via UnsafeUtility. Selecting items in the Graphics category of the All Of Memory table, when they represent the GPU side of a Unity Object, now shows the details for that Unity Object. [1.1.1] - 2024-09-10 Added Added the name of the assembly to the Type details when selecting a Managed Type group. Fixed Fixed navigating with arrow keys not updating reference list in All of Memory view (PROFB-153). Fixed retention of Snapshot list expansion and scroll state so that it does not expand all items unexpectedly but remembers which sessions were collapsed and which extended (PROFB-196). Fixed dropdown text being clipped when \"Allocated and Resident Memory on Device\" was selected. Fixed an issue whereby graphics allocations not associated with a native object would display under a \"No Name\" category in the All of Memory table. Fixed issues with selecting array objects, or objects that had managed fields with arrays, when the arrays where multidimensional with one or more dimensions of size 0. Fixed exception when opening the Unity Objects table in Comparison mode when there are multiple MonoBehaviour or ScriptableObject types with the same name but from different assemblies. Fixed exception when opening the All Of Memory table in Comparison mode when either of the snapshots is from a pre 2022.2 runtime and the untracked amount is negative. Fixed an ArgumentOutOfRangeException when inspecting some Managed Objects (PROFB-223). Fixed longer string values not being displayed in the Managed Fields Inspector. Fixed an issue that caused IL2CPP VM memory to not be calculated correctly in the Summary and All Of Memory table. Remove deprecated UxmlFactory/UxmlTraits API usage on Unity 6. Add divider on \"Capture\" toolbar button dropdown. Reattributed IL2CPP VM memory from Native to Managed in the All Of Memory table. Changed Allowed Snapshots to reside in Subfolders within the configured memory snapshot path. Improved Snapshots folder monitoring: Changes to the folder are now reflected in the Editor without it requiring to acquire focus first. Improved display of managed arrays in the Selected Item Details and Managed Fields. [1.1.0] - 2023-10-16 Changed Bump version to 1.1.0 from 1.1.0-pre.3. [1.1.0-pre.3] - 2023-09-27 Fixed Fixed an exception on capturing when the default snapshot storage path was used (./MemoryCaptures) but did not exist. It now gets created if it is missing. Custom set storage paths will still not be created as issues with these need user input to get resolved properly. Fixed an ArgumentOutOfRangeException in ManagedObjectInspector on selecting some object entries in the All of Memory and Unity Objects table. The field inspector UI was trying to display the managed field values of static fields that hadn't been initialized. Fixed Snapshot opening triggering a synchronous search via SearchService to initialize it for the Select, Find and Asset Preview functionality. As that could trigger SearchService to start indexing, this might have lead to longer stalls on opening snapshots. Fixed string rendering when strings included the ´\\r´ character (PROFB-113). Fixed a crash on opening snapshots with very large managed memory usage (PROFB-156). Fixed messaging for resident memory breakdown data availability. Detailed resident memory breakdown data is available for snapshots taken from Unity versions 2023.1 or newer. Fixed the Unity Object and All Of Memory table UI so that the table mode dropdown does not disappear in a narrow window size. (PROFB-110) Disabled resident memory visualization in \"Unity Objects\" and \"All of Memory\" tables for WebGL platform. WebGL doesn't provide residency status. Fixed bug that detailed information isn't showed for graphics resources. Fixed a bug when you can't switch snapshot if snapshot was previously open in compare mode. Fixed a managed memory leak in the Memory Profiler Module UI that the package inserts into the Profiler Window (PROFB-160). Also reduced the impact of a Mesh memory leak caused by UI TK (UUM-46520). Fixed the display of the memory usage bar diagrams in the Memory Profiler Module UI that the package inserts into the Profiler Window (PRFOB-165). Fixed issue with Unity Objects view that caused some managed objects not to group and shown as separate items. Changed Documentation updated. The \"Search In Project\" button now searches in the Assets folder and in Packages (related to (PROFB-54)). Improved the performance of selecting items in the All Of Memory and Unity Objects tables for objects with managed memory. This affected in particular objects which have a lot of entries (their own or nested fields) displayed in their Managed Fields in the Selection Details panel. Beyond improving the performance in general, 'Continue...' entries, which can be clicked to get further entries added to the view, now not only appear in fields 4 layers down and for big arrays, but also after a total of 1000 field entries have been added to the view. [1.1.0-pre.1] - 2023-05-04 Added Added thumbnailing for screenshots to improve startup speed. Changed Deprecated accidentally exposed as public IComparableItemData interface. Updated window icon. Fixed Fixed an empty MonoBehaviour entry being displayed in the Unity Objects table when 'Show Potential Duplicates' was checked and there are no potential duplicate MonoBehaviours. Fixed Summary view tracking of Graphics memory on Switch. Fixed the Summary breakdown bar's total label overlapping with its legend when using small window sizes. Fixed not showing negative values when comparing snapshots in Summary view (PROFB-72). [1.1.0-exp.2] - 2023-04-20 Added Added metadata support for AudioClip and Shader objects. Fixed Fixed an ArgumentNullException for a parameter named e in MemoryBreakdownLegendViewController.GatherColumnReferences (PROFB-97). Fixed Selection Details foldouts so that they retain their expansion status for the duration of an Editor session and not change on every selection change. Fixed screenshots remaining after deleting snapshots. Fixed situations where the highlighted element in tables did not reflect the displayed selection but could not be clicked to show its details in the selection, particularly when the selected row item would change due to search filtering the table, switching back to a previously visited view. Fixed leaks of native UnsafeUtility.Malloc(Persistent) allocations that occurred when the Editor recompiled code while a snapshot was open. Fixed leaks of Persistent NativeArray allocations via the Snapshot FileReader occurring with every (attempted) opening of a snapshot. Fixed Unity Objects view not showing graphics resources for snapshots made with Unity 2022.1 and older Added a tooltip for graphics items in All of Memory Table in \"Resident\" and \"Allocated and Resident\" views for a better explanation of why some elements are grayed out Removed not-actionable console warning for iOS captures about reported overlapping Native Objects allocations Fixed error if you try to open a snapshot while capturing Fixed error reported if you try to change table view mode with dropdown while the view is still loading Fixed snapshot renaming issues in situations when warning or error dialog is shown [1.1.0-exp.1] - 2023-03-21 Added Added a dropdown to the Unity Objects and All Of Memory views that allows switching between showing all sizes as they relate to Resident Memory, Allocated Memory or both. Added support for RenderTexture metadata in memory captures. Added tooltips to sizes in Selection Details view, showing the memory usage in bytes. Changed Reduced managed memory usage when opening snapshots by loading the managed heap bytes into native instead of managed memory containers. Changed the naming of managed object entries in tables when they are not connected to a native Unity Object from \"No Name\" to their address. Strings and char arrays additionally show their first characters after their address value. Entries for Unity Objects that had their native object destroyed further get the postfix \"(Leaked Shell)\" after their address. Changed Unity Object comparison for same session comparisons to further distinguish Unity Objects by their Instance IDs, unless the table is flattened. Improved Preview, Search and Select In Editor functionality, especially for Scene Objects. Objects of types inheriting from MonoBehaviour or ScriptableObject are now grouped under their managed type name in the Unity Objects table. Fixed General layout improvements in details view. Fixed missing allocators information in Native->Reserved breakdown in compare mode of the All of Memory view. Fixed Managed Fields table to show details for struct data. Searching the tables now correctly finds items by their type name or overarching group name. Fixed Exceptions when opening snapshots with a managed heap bigger than 2 GB and contiguous managed heap sections bigger than 2 GB (PROFB-41). Fixed IndexOutOfBoundsException when selecting Managed Type groups in the All Of Memory table if all instances are Leaked Shell objects. Fixed a bug where the Select In Editor button was available, even though the selected object did not clearly refer to one particular item. Clicking the button could therefore select the wrong item. (PROFB-54) Fixed captures failing to save when the product name contained illegal characters (PROFB-63). Fixed NullReferenceException when selecting a PrefabImporter in the the Unity Objects and All Of Memory tables (PROFB-58) Fixed Search in Editor button being enabled when nothing can be searched for (PROFB-59). Fixed the issue that finding managed objects by their type was impossible (PROFB-64). Fixed an IndexOutOfRangeException when inspecting the details of a managed object with a pointer to a native allocation that has no root name reported (PROFB-66). [1.0.0] - 2022-08-26 Fixed Fixed typos in the UI. Fixed 'Destroying assets is not permitted to avoid data loss' error when previewing TerrainData objects. Minor styling adjustments to Light theme. Fixed script upgrader updating the memory profiler code. [1.0.0-pre.3] - 2022-06-30 Added All Of Memory Comparison functionality. Added the ability to sort by multiple columns on Unity Objects, All Of Memory, Unity Objects Comparison, and All Of Memory Comparison table column headers. CTRL-click a table column header to add it as an additional (secondary, tertiary etc.) sorting column. List of executables and mapped files if snapshot is made with Unity 2022.2 or newer. Changed Close a snapshot by clicking the new 'Close' button, instead of selecting an open snapshot. Remove A/B snapshot colors. Remove Swap Snapshots button. Fixed Renaming a snapshot no longer allows duplicate file names with different casing, which naturally caused file system errors. Fixed detail panel reference view not showing all the references for selected object. [1.0.0-pre.2] - 2022-05-05 Changed Changed details view UI to hide references section if selected item doesn't have references. Fixed Fixed a crash in DynamicArray.Resize (Case 1426543). Selecting a Unity Object Type in the Unity Objects Comparison view now clears the selection in the Details view. Fixed Value cannot be Null error and infinite Circular References when expanding types with self references in the Managed Fields table in the Selected Item Details panel. [1.0.0-pre.1] - 2022-05-04 Added Added Unity Objects comparison view when comparing two snapshots. Removed Removed accidentally exposed as public internal API Removed Fragmentation, Objects & Allocations, and Tree Map legacy tabs. Changed Changed minimal supported version to 2022.2. Use Editor built-in platform icons in the Snapshot panel. Moved Unity Objects and All Of Memory breakdowns to their own tabs. Moved Potential Duplicates to an option within Unity Objects. Fixed Fixed an issue whereby tab bar text would overlap with details text on sufficiently small window sizes. Fixed an exception occurring when loading an unsupported snapshot and opening the Unity Objects breakdown. Fixed an issue whereby a 'feature not available due to pre 2022.1' message can be shown incorrectly. [0.7.1-preview.1] - 2022-05-10 Fixed Fixed a crash in DynamicArray.Resize (Case 1426543). [0.7.0-preview.2] - 2022-05-04 Fixed Fixed the layout of entries in the Selected Item Details panel. [0.7.0-preview.1] - 2022-05-04 Added Progress bar when opening the Tree Map for the first time. Fixed Fixed Displaying of strings longer than 8000 characters breaking the Selected Item Details UI by capping the maximum length of strings to 8000 before displaying them. Fixed Compilation on Unity 2021.1. Fixed a possible TempJob allocation leak when failing to reading a corrupt snapshot. Fixed a NullReferenceException that was thrown upon trying to go back to having Untracked Memory selected while in Fragmentation tab using Memory Profiler (Case 1401201). Fixed type name headers in Details panel running off-screen for long type names (Case 1401535). Fixed NullPointer exception when clicking on the selected item label in the References panel if no item is selected. Changed Sped up snapshot opening times. Moved All Object Tree Map and Table to its own Page. The Memory Usage Summary on the Summary Page will now be always unfolded on switching to this page. For all other pages containing the Memory Usage Summary, it defaults to being folded up and will remember its state on each page for the current Session of the Editor. Optimized Tree Map generation. This reduces time to open Tree Map by 25%. Remove reflection usage for opening the Preferences window focused on the Memory Profiler's settings. Renamed \"Top Issues\" to \"Potential Capture Issues\". Adjusted the colors of the bar diagrams in the Memory Usage Overview foldout to improve their readability and clarity. Adjusted Engine and Editor API usage to reflect Memory Profiler APIs moving out of Experimental namespaces in 2022.2.0a13. Removed Removed View History buttons from the toolbar. With the removal of links in tables in version 0.5.0-preview.1, these buttons had become largely redundant. Removed sorting of the tables for the Memory Summary bars until pending rework on them is conducted. [0.6.0-preview.1] - 2022-03-11 Added Added the 'Unity Objects' view to show a breakdown of memory contributing to all Unity Objects. This enables you to more easily understand the total memory impact of the assets and objects in your project by showing you their total, native, and managed sizes in one place. Unity Objects are grouped by their types, such as Texture2D, Material, and Mesh. Use the 'Search By Name' functionality to filter the view to specific objects. Use the 'Flatten Hierarchy' functionality to remove the Type groupings. Added the 'Potential Duplicates' view to show a breakdown of all potential duplicate Unity Objects. Potential duplicates, which are Unity Objects of the same type, name, and size, might represent the same asset loaded multiple times in memory. Added the 'All Tracked Memory' view to show a breakdown of all tracked memory that Unity knows about. Added References To functionality. A list of the objects that the current selection has \"references to\" will now be displayed in the References To tabbed section of the details panel. Fixed Removed two instances of Reflection for loading icons. [0.5.1-preview.1] - 2022-02-25 Added Added tooltip to the Referenced By section to explain what it means. \"Displays a list of other entities that reference the selected object.\" Fixed Fixed Managed Type truncation for generic types to only truncate the type that holds the generic type arguments. Removed \"Examples/SearchService/Providers\" Menu item. Fixed issue where filters would be added to the spreadsheet tables and could not be removed. Fixed issue where selecting something in the references tree view would cause the spreadsheet to repaint and lose latent selection. Fixed Duplicate entries appearing in searches in the reference view. Fixed NotImplementedException being thrown when traversing history from the fragmentation panel to a high-level element breakdown selection. Fixed the main selection not being recreated in the references view when navigating back in history from other views to the details panel. Fixed issue where removing filters would leave the wrong selection in the table view. Fixed references view selection causing table expansion state to reset. Fixed Errors and Exceptions breaking the Memory Profiler Window when minimizing, maximizing or docking and undocking it. Improved \"Select in Editor\" search accuracy for Assets and Scene Objects in 2021.1 or newer editors. Improved \"Open in Quick Search\" search string when searching for Scene Objects in 2021.1 or newer editors. Changed Changed Snapshot preview screen-shot textures to get compressed in memory to reduce memory overhead. Changed Type name truncation so that all type names are truncated not just the initial type name. Changed the Referenced By tree view to not contain the selected object. The selected object that the references are calculated for are now displayed above the tree view. The Referenced By button now show the number of direct connections in its label. The import buttons has been moved to left side of the memory profiler window toolbar. The snapshots panel toggle text has been removed. The details panel toggle text has been removed and the icon has been changed to use the inspector icon. [0.5.0-preview.1] - 2022-02-02 Added Added selection events to the view history. Added details panel. This is context aware and will show extra information about whatever the current selection is. Referenced By (Raw) section: This section of the details panel shows the connections to the current selection, where applicable. This can be used to determine the paths to objects that are holding objects in memory and is currently designed as a 1:1 match to the references column click through from the object tables. Selection Details section: This section of the details panel displays, where possible, additional information about the currently selected item e.g. the fields on a managed object or the description of the currently selected memory usage overview category. Showing these details is currently only implemented for Managed or Native Objects, Managed or Native Types and the breakdown categories in the Memory Usage Overview. If an Object is selected that inherits from UnityEngine.Object (a \"Unity Object\") that has a Managed Shell to its Native Object, the Selection Details treat it as one object, giving you all the info for both of them and list out details separately as well were useful. Where applicable, the selected item is searched for in the editor. If there is exactly one item found in the editor which match the search criteria, which is either the Instance ID (if the capture is from the current Editor Session) or its Name and Type, two things become available The \"Select in Editor\" button to ping the object in the Scene Hierarchy or Project Browser and to select the object so it's details are shown in any open Inspector view. If applicable, a preview is loaded from the object in the Editor. (NOTE: This is NOT how the object necessarily looked in the build. The search logic may have found a different object or it may have been changed since the build was made. This is just to potentially help in identifying the Object in the capture faster.) Regardless of the results of the search for a specific object, the new \"Search in Scene/Project\" button can always help in finding Assets or Scene Objects quickly. In Unity 2021.1 and newer, an additional button will open Quick Search. Added the ability to hide table columns and reduced the set of columns shown by default down to the most commonly useful ones. The reasoning for hiding these is: With the managed fields moved to the Selection Details section, the \"Static\" and \"Field Target Size\" columns have become redundant, and so has the ability to expand Managed Objects to see their fields, and the \"Address\" column to see the field layout clearer. With the Selection Details section showing a Unity Object's managed and Native info as one, the Managed Objects no longer show their Native Object's size and instead of splitting their size into a Managed Size and a Native Size column, the tables now only show one Size column and one Name Column by default. The Native Instance ID is also shown in the Selection Details under the Advanced tab. The most important info from it is considered for the \"Status\" displayed in the \"Basic\" info section (i.e. negative = Runtime Created, Positive = Loaded from file). If you took a snapshot of the current editor session, the Instance ID is used by the \"Select in Editor\" button in the Selection Details section to select the instance. It therefore no longer needs to be displayed as a link in the table. All other links in the tables have also been disabled, as they would only help see further details for an object, that now live in the Selection Details section Added a \"Count\" and a \"Total Size\" label above each table that dynamically adjusts as you filter the table. The Managed Fields inspector in the Selection Details section has some additions over what was previously shown in the tables: It links up NativeArray fields that point to native Allocations with these allocations for easier analysis of DOTS memory usage. For IntPtr fields, it tries to find the Object, Allocation or Region that the IntPtr points at, and shows the information it finds. For UnityEngine.Object.m_CachedPointer it shows the Native Object that the Managed Shell Object points to. Recursive reference chains are caught and truncated so that it is safe to use Alt/Option + LMB click to expand the tree all the way. Though right now, to keep processing times low, it only searches 3 levels deep at a time. Added toggle to truncate type names in the details panel. It can be accessed through the kebab menu icon and the context menu of both the managed object inspector and referenced by tree views. Fixed Fixed Fragmentation page to show an Allocations table with root object and area names when comparing snapshots. Changed Memory Usage Overview categories can now be selected, either via their colored bar or via their row in the table below it. Selecting the category will show a description of what is encompassed in this category in the Selection Details section. Reduced the amount of memory used for snapshot preview images in the Editor. The Name column in the tables now shows managed string content in quotes. On capturing or importing a snapshot, the Snapshot side bar is now toggled visible if it was not before. It also scrolls to reveal the new snapshot. [0.4.4-preview.2] - 2022-01-12 Added Added the Unity version a capture was made in to the tool-tip of the Session label of opened snapshots. Fixed Fixed tables drawing blank areas when scrolled past row 60000 and scrolling to the right. Fixed the Fragmentation view's Memory Map drawing of Managed Memory regions while comparing snapshots when they changed size between captures. They would previously show the entire region as changed and not show which objects within them were new or deleted. (Case 1388611) Fixed an IndexOutOfBoundsException when sorting size tables in the Memory Map's Object list and switching to the Region or Allocations lists. Fixed the row size option in the Fragmentation view not being properly stored across sessions for Fragmentation analysis of snapshots in comparison mode. Fixed an issue where the crawler would find impossibly big string objects, inflating Managed Object Memory and causing exceptions when these were to be drawn in a table (Case 1393878). Changed Renamed the References column to Referenced By to improve clarity slightly. [0.4.3-preview.1] - 2021-12-13 Added Added a toggle to the Memory Usage Summary when comparing snapshots to switch between normalizing the bars to their respective total, or scaling them to the bigger of the two. Fixed Fixed an exception that occurred when creating a new UI Document via Create > UI Toolkit > UI Document. Fixed an Index Out Of Bounds exception in ManagedMemorySectionEntriesCache.Find on opening some snapshots, particularly IL2CPP snapshots. Fixed an issue which affected the crawling of some snapshots that prevented Managed Objects of types inheriting from UnityEngine.Object from being properly connected with their Native Objects and therefore not showing their Native Sizes, Instance IDs and Native Object Names in the tables (Case 1383114). Fixed \"Failed To read Object, please report a bug.\" Objects appearing in snapshots with only one or two managed heap sections. Fixed \"abnormal mesh bounds\" error to not appear on opening snapshots. Fixed total available memory so it no longer adds GPU memory on unified memory platforms. Fixed Memory Usage breakdown categories adding up to more than the Total value (Case 1381034). Changed Renamed the Memory Usage Breakdown category Other to Other Native Memory to improve clarity slightly. It shows all native memory usage tracked by Unity's Memory Manager that does not show up in the other, more specific categories. Renamed the Memory Usage Breakdown category Virtual Machine to Virtual Machine (IL2CPP), Virtual Machine (Mono) or Virtual Machine (Scripting) depending on which scripting back-end is used, or if two different ones are used when comparing snapshots. [0.4.2-preview.1] - 2021-10-22 Fixed Fixed an exception thrown by the Tree Map when opening a snapshot that contains a group of types that collectively \"use\" 0 B, preventing the opening of the snapshot (Case 1368289). Fixed compilation on earlier 2019.4 patch versions which failed due to usage of some newer RuntimePlatform enum values. Fixed the profiler target drop-down to no longer cause a TargetParameterCountException and draw as blank button on 2022.1.0a13 or newer. Fixed the snapshot rename work-flow when renaming an open snapshot so that the name input field gets the keyboard focus after closing the dialog prompt. [0.4.1-preview.1] - 2021-09-21 Added Added two capture options when capturing the Editor, allowing you to choose whether or not the Memory Profiler should close all open snapshots and trigger a Garbage Collection before taking the capture. The default behavior is to do both of these to reduce the noise when capturing the memory usage in the Editor. Changed Changed capture logic when capturing snapshots from a Player to not close open snapshots and trigger a Garbage Collection in the capturing Editor. Fixed platform icons so they show up for more platforms. Fixed the Memory Profiler Module UI so it shows non-broken, single data set Memory Breakdown bars and a functional object data list again. Fixed a calculation for the Memory Usage breakdown where Virtual Machine memory was faultily subtracted from Other. Fixed Managed Memory Breakdown bars not swapping A and B bars when swapping the Snapshot. Fixed the value of Untracked so it stays as Unknown on sorting, instead of changing to 0 B. Fixed Allocation tables to not show allocations without a proper root object id as associated with ExecutableAndDlls but instead as having an Unkown root object. [0.4.0-preview.2] - 2021-09-01 Changed Fixed error messages appearing about 90deg and 270deg being an UnsupportedUnit for Unity versions before 2021.2. The 'A' icon in the break down table header is now hidden when in single snapshot mode. [0.4.0-preview.1] - 2021-08-31 Recommended Unity versions to upgrade to when using this package version: 2019.x 2019.4.29f1 or newer 2020.x 2020.3.12f1 or newer 2021.1 2021.1.9f1 or newer 2021.2 2021.2.0a12 or newer or any newer version of Unity. Added Added a collapsible \"Memory Usage Overview\" section containing a high level breakdown of the Memory usage. It shows the same breakdowns as the Profiler Window's simple Memory Profiler panel, adding two more categories which are untracked in the Profiler Window: Virtual Machine and Executable and DLLs It additionally shows a breakdown of Managed Memory usage into Virtual Machine (currently only available when using the Mono scripting backend), Objects and the two kinds of free reserved space, either in the Active Heap section, or as Fragmented Heap in older sections. Note that Fragmented Heap Space can be reused for Managed Object memory, if new objects fit into contiguous free space in it. You can use the Fragmentation page to analyze your memory usage if you seem to have a lot of fragmented memory. This breakdown should help you determine if it might be worth to dig deeper into Fragmentation or your Managed Object usage, or if there are other areas to focus on. Added a collapsible \"Top Issues\" section containing some identified issues with the opened snapshot. On opening a snapshot, checks will be run and entries added to the list. Note: There are a lot of memory usage scenarios that might be problematic but are not clear cut enough for an algorithm without any context of the project to make any determination on. This list can therefore not be exhaustive but aims to offer a helpful start into memory investigations. More checks will be added going forward. The current set of checks will add: A warning if the snapshot was taken from a Unity Editor, as memory usage in the Editor might be misleading compared to memory usage in a build. A warning if the System Allocator is used. An info entry if the snapshot was taken with some options for capturing disabled. A warning when comparing snapshots that were taken with different capturing options being enabled. An info entry when comparing snapshots taken from different sessions or an unknown session, as this will affect the detail level at which differences can be checked. An info entry when comparing snapshots taken from different Unity versions, as observed changes in memory could be due to the version change instead of a change in the project. The version numbers are shown if they are known. Added a view selection Ribbon Renamed the Memory Map view to Fragmentation page. Moved all Table views into the new Objects and Allocations page. Renamed the Tree Map view to Summary page. This is an intermediate step in a larger UI refactor. In a next step, the Summary page will get new top level summary sections and the Tree Map view will be moved to the Objects and Allocations page. Added an option to the drop-down of the Capture button to not take a screenshot on capture. Added Virtual Machine memory as a category to Memory Map. This relies on changes made to the snapshot data and only works for any snapshots taken from Unity versions 2021.2.0a12, 2021.1.9, 2020.3.12f1, 2019.4.29f1 or newer. Only builds made against the Mono Scripting Back-end report Virtual Machine memory usage. IL2CPP does, as of yet, not report any of its Virtual Machine memory usage. This also addresses (Case 987987) Added a Button to open the package's documentation to the top right corner. Added a Menu button to the top right corner, containing an option to show the Memory Profiler's Preferences window. Added a \"Snapshot Window\" Button to the top left corner to toggle the visibility of the open snapshots pane and the snapshots list. Added the ability to set match row filtering for string based rows to check for exact (case-insensitive) matches additionally to the existing option to filter if it contains the searched string. Added a replacement for the details view of the Profiler Window's Memory Profiler module. If the Package is installed, it will provide the UI for the Memory Profiler module for Unity versions of 2021.2 or newer. Added a setting to Preferences / Analysis / Memory Profiler / Replace Memory UI in Profiler Window to toggle the Memory Profiler Module replacement on or off. Added \"All Native Allocations\" table which lists the Memory Region, Area and Root Object names for each Allocation. Changed Changed the snapshot list UI by: Moving the open snapshots section to the top Adding a bar to break-down the total allocated memory vs. the systems maximally available memory to each snapshot (only works for snapshots taken form 2021.2.0a12, 2021.1.9, 2020.3.12f1, 2019.4.29f1 or newer) Grouping snapshots taken from the same session together and listing the project name along side them (only works for snapshots taken form 2021.2.0a12, 2021.1.9, 2020.3.12f1, 2019.4.29f1 or newer, older snapshots are grouped into the \"Unknown Session\") Moved snapshots options (Rename, Delete, Open Folder) into right-click context menu. Snapshots are now refereed to as \"A\" or \"B\" when comparing them. Fixed table UI so that it no longer starts glitching when looking at tables of over 60000 rows. Fixed an issue where the Memory Map would draw Native Objects over other Native Objects and over the end of their Native Region. The UI falsely assumed that an Object's memory is contiguous, starting from the address to the Object's header. In reality it may consist of several buffers and other allocations distributed across different memory regions. Right now, the memory reporting of Native UnityEngine.Objects is not detailed enough (broken down to each allocation) to clarify just where all of an Object's memory is residing. Current Native Objects being drawn in the Memory Map therefore is not 100% guaranteed to be showing the correct amount of contiguous memory owned by this object, but at least it no longer draws over other Objects or outside of the Region or Allocation it resides in. (Case 1278205) Fixed Memory map colors for Objects and Allocations drawn outside of regions. (Case 1278203) Fixed Memory Map to not draw anything or a white background outside of actual memory address usage. The pixels for these regions where no longer correctly cleared to full transparency. Fixed Memory Map to not draw Virtual Machine memory as Managed Stack Memory in improbably high virtual address space. (Reporting of Managed Stack memory is not yet supported. Virtual Machine memory was miss-read as stack memory by the crawler.) Fixed Memory Map Diff to draw lines correctly again as green, red, yellow or purple instead of drawing all lines as red. Changed \"Native Memory Regions\" table to \"All Memory Regions\" table, naming Managed Memory Regions as either \"Managed Heap Memory Section\" or \"Virtual Machine Memory Section\" and showing this table in Memory Map details section when opting to look at Regions. Changed Memory map to show the new \"All Native Allocations\" table when displaying allocations to provide more accessible information on the details of the allocations. Changed \"Import\" button to use an icon instead of text and moved it to the right side of the toolbar. Changed the link text for the Native Instance ID column to ping the object it belongs to, if the capture was taken from the current Editor session. Clarified UI of the snapshot list to show more clearly which snapshots are open (Case 1129613) Changed loading of Snapshot preview screenshots to happen asynchronously to speed up opening the window and rebuilding it after Domain Reload. Improved Memory Map selection workflow, hinting that the table below it needs a selection to show anything and clarifying why there might be no data. Fixed Memory Map deselection not affecting the view immediately. Improved handling when taking a snapshot and waiting for the screenshot to be transmitted takes unusually long. Fixed removing of sort filters via the 'x' button to actually remove the filter from the column. Improved table names in the table view drop-down to format the amount of rows with thousand-separators. Fixed filters to only use \"Pretty Names\" for the columns they apply to. Changed Tree Map table to explicitly show the filters applied to the table when selecting a type block in the map. This also, for the first time, allows clearing the filtering after the first such selection was made. Improved the Memory Module simple view in the Profiler Window (this package replaces the default one) by adding a scrollbar. Fixed Tree Map to include 0B sized Native Objects in the count for objects of their Type. Fixed match filter input field so it always gets the keyboard focus on adding the filter (Case 1359045) Removed Removed support for Unity 2018.4. Old snapshots can still be imported but the package of the UI no longer works with 2018.4. Removed the option to toggle off \"Pretty Names\" in the table views. It is now an unchangeable default. Removed Managed Global from references list of managed objects. [0.2.10-preview.1] - 2021-07-30 Changed Fixed an issue where snapshots taken on UWP using the .NET scripting backend, could not be loaded by the package. Removed Removed ReflectionUtility as it was no longer used by the package. [0.2.9-preview.3] - 2021-05-26 Changed Fixed an issue with the creation of several string buffers inside the snapshot file reader, where buffer memory would not be zero initialized. Fixed an issue where compilation against Unity Editor 2021.2 was broken. Fixed target connection dropdown being broken on 2021.2. [0.2.9-preview.2] - 2021-05-26 Changed Fixed an unused variable warning for kCurrentVersion (case 1329193) [0.2.9-preview.1] - 2021-03-17 Changed Updated from Unity Distribution License to Unity Companion License Fixed an issue with setting capture folder path, failing to correctly parse the provided path [0.2.8-preview.2] - 2021-01-18 Changed Fixed an issue with the capture button style not appearing on 2018.4 Editors. [0.2.8-preview.1] - 2021-01-14 Changed Fixed an issue with heap section sorting and remapping which would cause managed objects to sometimes fail to be crawled. [0.2.7-preview.1] - 2020-12-21 Added Added a capture flags selection dropdown onto the Capture button. Added tooltips to display the complete value of table entries such as multiline strings, which are being turncated. Changed Fixed an issue with the reference table, where value type fields would be skipped when displaying the reference target. Fixed an issue where multiple match filters could be added to one column. Fixed an issue where the Native Instance ID column in the All Objects Table would not be display some entries. (case 1278247). Fixed an issue with the Tree Map where history events would not be applied to the view, after clicking the previous view button (case 1299864). Fixed an issue where the table pane would attempt to change GUI state in between layout and repaint events. Fixed an issue with multiline strings being displayed incorrectly inside their row (case 1275855). Changed the Address column formatting to show pointer values in hex rather than decimal, for raw data tables. Renamed the Owned Size column into Managed Size for the All Objects table and Size for Managed and Native Objects tables. Renamed the Target Size column into Field Target Size for All Objects and Managed Objects tables. Fixed an issue with filters UI not being displayed for the Memory Map. Fixed an issue with Memory Map selection being incorrect after loading a snapshot (case 1276377). Removed Removed the profile target concatenation from the capture button, as the currently selected target is already visible on the target dropdown. [0.2.6-preview.1] - 2020-10-01 Added Added search field delay when filtering table entries via the match filter. Added a dialog box when attempting to rename a snapshot to same name as an existing one (case 1273417). Added a dialog box when attempting to rename a snapshot with invalid characters (case 1274987). Added name tags for snapshot preview screenshots, to avoid confusion when the user takes a snapshot with the memory profiler window open. Added name tag for memory map backing memory texture. Changed Removed unneeded finalizer from CachedSnasphot, which could crash the Editor. Fixed an issue inside the VM data validation tools, where we would not catch invalid VM info data. Fixed incorrect parsing of table headers as callstack site ids when attempting to retrieve callstacks for a native allocation. Fixed texture color space to linear inside the MemoryMap view creation (case 1261948). Fixed potential alpha overflows inside the MemoryMap, where some regions on the memory map might have become transparent. Secured the MemorySnapshot backend so that we handle array sizes larger than int.Max gracefully. Fixed an issue with reading entries null entries from reference arrays, where this would cause a NullReferenceException. Changed the snapshot crawler to discard unknown type data as some types are VM internal. Note: The following versions are able to capture all type data: 2020.2b2, 2020.1.5f1, 2019.4.10f1. Changed table diffing to be multi-key, thus making the diffing operation accurate with regards to matching object as \"Same\". Changed the Address column formatting to show pointer values in hex rather than decimal, for object tables. Changed the Name column so that it only shows object or field name depending on the expanded item. Fixed some static fields not showing up in the Reference table. Fixed a leak where the snapshot collection would never clean up it's Texture2D. Fixed a leak where the memory map's backing texture would never be cleaned up during flush. Fixed an issue where snapshots could be imported twice (case 1271886). Fixed an issue showing \"None\" in the diff table's match filter, when matching by \"Diff\" column value. Fixed an issue where the snapshot deletion message would not to explicitly state that the file will be permanently removed. Fixed an issue where the naming convention used for snapshots inside the memory map diff view was incorrect. Fixed an issue where the snapshots used inside memory map would not swap when the swap button was pressed. Fixed an issue where snapshot file list was sorted alphabetically (case 1276092). Fixed an issue where open snapshots could end up losing their open state while still open in the tool (case 1275288). Fixed an issue where the snapshot file list wouldn't update when the editor would change focus (case 1275835). [0.2.5-preview.1] - 2020-07-01 Changed Fixed up some issues with connections not being added properly during crawling. Fixed up an issue when diffing two snapshots where invalid object would cause the system to throw (case 1236254). Optimized the crawling of native connections. Reduced crawling operation memory footprint by ~30%. Fixed Memory Map address label text spilling over (case 1256489). Fixed Memory Map interfering with Profiler Line Charts (case 1260533). [0.2.4-preview.1] - 2020-06-10 Changed Fixed an issue with the Memory Profiler Window failing to load it's resources when opening during playmode. Upgraded the dependency on EditorCoroutines package to 1.0.0. Fixed a compilation issue with Unity 2019.4 (case 1254424). Fixed up two unused variable warnings. [0.2.3-preview.2] - 2020-03-18 Changed Upgraded the dependency on EditorCoroutines package to 0.1.0-preview.2. Fixed an issue with the layouting of the Memory Map's legend. [0.2.3-preview.1] - 2020-03-04 Changed Fixed an issue where selecting an object of type System.String would raise exceptions when attempting to retrieve field memory metrics(case 1224644). Fixed an issue where matching string objects based on their value, was not retrieving the correct object data. [0.2.2-preview.1] - 2020-02-26 Changed Fixed incorrect layouting behavior when scrolling down or up inside a table. Improved snapshot crawler performance, by allocating crawled data in blocks. Fixed an issue with the \"Owned size\" column for managed objects, which caused the displayed value to be incorrect. Fixed an UI issue where tables would throw exceptions when scrolling too fast. Improved Treemap UI performance. [0.2.1-preview.2] - 2020-02-18 Changed Improved snapshot crawler performance by reducing the number of Exception objects being creating during snapshot crawling. Fixed an issue where the crawler would skip some managed object fields depending on offset. [0.2.1-preview.1] - 2020-02-10 Added Added MetadataCollect abstract class in order to provide a better, performant way to inject new collectors into the metadata collection system. Changed Fixed an issue with the native object connections cache, where invalid native object references would not be skipped. Removed Removed IMetadataCollect interface and the method of injection used for it, as it would degrade runtime performance each time the injection would occur. [0.2.0-preview.1] - 2020-01-09 Changed Fixed an issue with the snapshot crawler going out of bounds, when scanning an array object's binary data Upgraded the dependency on EditorCoroutines package to 0.1.0-preview.1. [0.1.0-preview.9] - 2019-11-22 Changed Fixed an issue where the Memory Profiler's progress bar would keep being displayed after the window was closed. Fixed a UI issue where items selected inside a table would no longer be highlighted. The package is now no longer compatible with the following version range of the Editor: 2020.1.0a0 - 2020.1.0a14. [0.1.0-preview.8] - 2019-11-08 Changed Fixed the MetaDataInjector warning when using the obsolete EditorApplication.scriptingRuntimeVersion in Unity versions newer than 2019.3. Improved native connection stitching to managed objects. Integrated v.10 snapshot support where native connections are dumped as Object ID instead of indices. Optimized the snapshot crawling process, by reducing the number of heap look-ups. Optimized snapshot heap lookup functionality, to use binary search instead of linear search. Fixed an issue when importing a snapshot via the Import window would not copy the file into the Memory Captures folder. Fixed a number of UI issues related to the Editor theming update. The package is now no longer compatible with the following version range of the Editor: 19.3.0a1 - 19.3.0b9. Removed Removed unnecessary Profiling abstraction code present in the package. Removed XML loading support in preparation to deprecate XML usage in the package, and to provide users with an interface to create their own tables. [0.1.0-preview.7] - 2019-08-02 Added Added Screenshots getting taken on capture for Unity versions starting from 2019.3 and up. Added window tab icon. Added a popup warning about the potential for sharing personally identifying or otherwise sensitive data when sharing snapshots. Added info to the documentation regarding potential sensitive data contained in snapshot files. Added a button to the preferences to reset the opt-out decisions for above mentioned warning popup. Added byte size formatting for size columns in the tables. Added \"Open Folder\" option to the snapshot options menu. Changed Fixed snapshot file rename functionality (case 1131905). Fixed snapshot file and meta data fields overlapping in 2019.3.x. Fixed new snapshot folders getting created with every character change to the path in the Memory Profiler preferences (case 1162851). Fixed a numerical overflow when parsing snapshots with large amounts of objects and/or allocations. Fixed compile issues due to the removed \"EditorApplication.scriptingRuntimeVersion\" API. Fixed the target selection drop-down which stopped working in 2019.3 Moved the Memory Profiler preferences under Analysis/Memory Profiler in the Preferences window to group it with Profiler Window Settings. Fixed alternating table row colors as well as row selection in 2019.3 Fixed link text color being hard to read in the light editor skin. Removed Metadata collection for Scripting Runtime version for Unity >= 2019.3 since \"EditorApplication.scriptingRuntimeVersion\" was removed. [0.1.0-preview.6] - 2019-04-03 Changed Fixed dangling subscriber for OnPlaymodeChanged. Fixed broken metadata injector, implemented metadata processors will now be called. Fixed incorrect referencing of managed objects to native objects that did not own them. Fixed style sheet warnings. Changed the display string of uninitialized types from \"Unknown Type\" to \"Uninitialized Type\". Fixed missing references for managed objects. Fixed incorrect disposal of sidebar delegate. [0.1.0-preview.5] - 2019-01-29 Added Added progress bar displays for actions like opening/importing snapshots. Restored binary compatibility with the 2017.4 memory snapshot format. Added handling for duplicate GC handles present in the snapshot. Changed Lowered the number of GC allocations when crawling a snapshot. Upgraded dependency on EditorCoroutines package to 0.0.2-preview.1. Changed the initialization of the managed memory sections to not overallocate. Fixed an issue where selecting a region on the memory map would expand the table underneath onto the whole window. Fixed an issue where closing either snapshot (with two snapshots loaded) would close the other one instead. Resolved UI issues with upstream UI elements versions. Removed Removed links in columns: Native Object Name, Native Size. For the Native Objects table. [0.1.0-preview.4] - 2019-01-02 Added Added on demand computing for tables with the purpose of speeding up the snapshot opening process. Added better handling for corrupted snapshots, in order to avoid having the UI become non-responsive. Changed Changed the managed data crawler to use a stack based approach in order to avoid stack overflows when processing large amounts of managed object references. Fixed an issue where attempting to rename a snapshot with two snapshots open would cause an I/O sharing violation, due to the other snapshot being closed instead. Changed capture sequence to first output to a temporary (.tmpsnap) file, to avoid having the Workbench's refresh functionality(triggered during application focus) try to access a snapshot that currently being streamed from a remote target. [0.1.0-preview.3] - 2018-12-17 Added Added enable callback for the capture button, to support cases where the compilation guards get triggered by building the Player. Added missing deregister step for the compilation callbacks to the OnDisable method. [0.1.0-preview.2] - 2018-12-12 Added Added documentation for the package. Added a table display underneath the \"TreeMap\" in order to display data about the currently selected object. Added metadata injection functionality, to allow users to specify their metadata collection in a simple way. Added \"Diff\" functionality for the \"MemoryMap\". Added import functionality for old snapshot formats that were exported via the \"Bitbucket Memory Profiler\". Added platform icons for snapshots whose metadata contains the platform from which they were taken. Added basic file management functionality (rename, delete) for the \"Workbench\". It can be found under the option cogwheel of the snapshots. Added the \"Open Snapshots View\" to the \"Workbench\", where users can Diff the last two open snapshots. Changed Reworked the \"MemoryMap\" to display memory allocations in a more intuitive way, allowing better understanding of the captured memory layout. Reworked the \"Workbench\" to manage the snapshot directory and display all snaphot files contained in it. The \"Workbench\" default directory resides in \"[ProjectRoot]/MemoryCaptures\". General UX improvements. Removed Removed \"Diff\" button from the snapshot entries inside the \"Workbench\". Removed \"Delete\" button from the snapshot entries inside the \"Workbench\". Delete can instead be found in the menu under the options cogwheel of the snapshot. [0.1.0-preview.1] - 2018-11-15 Added Added memory snapshot crawler. Added data caching for the crawled snapshot. Added database and tables for displaying processed object data. Added \"Diff\" functionality to tables, in order to allow the user to compare two different snapshots. Migrated the \"TreeMap\" view from the bitbucket memory profiler. Added XML syntax for defining tables, with default tables being defined inside \"memview.xml\". Added the concept of a \"Workbench\" to allow the user to save a list of known snapshots. Added the \"MemoryMap\" view to allow users to see the allocated memory space for their application. This is the first release of Unity Package Memory Profiler. Source code release of the Memory Profiler package, with no added documentation."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "Memory Profiler overview What's new The Memory Profiler window Memory Profiler window reference Main component Summary tab Unity Objects tab All Of Memory tab References component Selection Details component Snapshots Snapshots concepts Open, import and capture snapshots Snapshots component Compare two snapshots Inspect memory usage Inspect assets that use the most memory Total memory use Find memory leaks Managed Shell Objects Memory on device"
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/all-memory-tab.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/all-memory-tab.html",
    "title": "All Of Memory tab | ModularUIPack",
    "summary": "All Of Memory tab The All Of Memory tab displays a breakdown of all the memory in the snapshot that Unity tracks. The memory usage visualized in this tab usually contains large sections of memory that either Unity or the current platform manages. Use this tab to see how much of your application's memory use isn't related to Unity objects, or to identify memory problems in your application that aren't visible in the Unity objects tab. The All Of Memory tab The table in this tab displays the proportion of tracked memory that each entry uses. By default, the rows in the table are collapsed. Select the arrow icon in the description column of any row to expand it and see the child members of that row. Select the arrow icon in any expanded row to collapse it. The All Of Memory tab splits tracked memory into four different top-level categories. The following table describes each category: Category Description Managed Displays all Virtual Machine and Managed Heap memory allocations. The Managed Heap contains data related to Managed Objects and the space that has been reserved for them. It is managed by the Scripting Garbage Collector, so that any managed objects that no longer have a references chain to a root are collected. The 'reserved' amount in this category may be quickly reused if needed and if any new allocations fit within one of the free spaces. Check Managed memory documentation page for more details. Native Displays all memory that Unity allocated internally for different native objects, such Scene Objects (Game Objects and their Components), Assets and Managers, Native Allocations including Native Arrays and other Native Containers, CPU side of Graphics Asset memory, and other. This doesn't include Graphics, which is shown in a separate category. Expand this group to see the different kinds of native memory that Unity tracks. The Unity Objects subgroup displays memory that any Unity object in your application, such as a Shader or Texture2D, uses. Use this information to find areas where you could optimize memory use; you can then find these objects in the Unity Objects tab to inspect them in more detail. The Unity Subsystems subgroup displays memory that installed modules or systems use. You can find which modules use the most memory and, if any aren't used, uninstall them to reduce how much memory your application needs. Executables & Mapped Displays the memory taken up by the build code of the application, including all shared libraries and assemblies, managed and native. This value is not yet reported consistently on all platforms. You can reduce this memory usage by using a higher code stripping level and by reducing your dependencies on different modules and libraries. Graphics (Estimated) Displays how much memory is used by the Graphics Driver and the GPU to visualize your application. The information is based on the tracking of graphics resource allocations within Unity. This includes RenderTextures, Textures, Meshes, Animations and other graphics buffers which are allocated by Unity or Scripting API. Use All Of Memory tab to explore graphics resources. Not all these objects' memory is represented in this category. For example, Read/Write enabled graphics assets need to retain a copy in CPU-accessible memory, which doubles their total memory usage. Use Unity Objects tab to explore total memory usage of Unity Objects. Also, not necessarily all memory from these type of objects resides in GPU memory. Memory Profiler is unable to get exact residence information for graphics resources. Untracked Memory that the memory profiler cannot yet account for, due to platform specific requirements, potential bugs or other gaps in memory tracking. The size of Untracked memory is determined by analyzing all allocated regions of the process and subtracting known to Unity memory manager. To analyze this memory further, you will need to use a platform specific profiler. The Native and Managed groups have a Reserved subgroup which contains memory that Unity allocated but doesn't use at the moment of capture. For more information on how to adjust how Unity reserves memory for this purpose, see Memory allocator customization. You can enable \"Show reserved memory breakdown\" to see more detailed breakdown of this group. Table mode Use Table Mode dropdown to see Allocated, Resident Memory usage of allocations, and their relative impact on the total usage. The dropdown changes the memory columns the table displays: Allocated Memory - shows only Allocated memory, % Impact is shown against Allocated Memory In Table Resident Memory on Device - shows only Resident memory, % Impact is shown against Resident Memory In Table Allocated and Resident Memory on Device - shows Allocated and Resident memory, % Impact is shown against Allocated Memory In Table For more information on the Resident Memory see Memory Usage On Device."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/find-memory-leaks.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/find-memory-leaks.html",
    "title": "Find memory leaks | ModularUIPack",
    "summary": "Find memory leaks Memory leaks cause your application to perform worse over time and might eventually lead to a crash. Memory leaks typically happen for one of two reasons: Your project lacks code to release an object from memory, which leads to the object remaining in memory permanently. An object stays in memory because of an unintentional reference. You need to capture and compare multiple snapshots to identify memory leaks. To learn how to do this, see Compare two snapshots. Find memory leaks that happen after Scene unload There are multiple ways that memory leaks happen. A common cause of leaks is user-allocated objects or resources that your code doesn't release after your application unloads a Scene. To identify this type of leak with the Memory Profiler package: Attach the Memory Profiler to a running Player. For instructions on how to attach the Memory Profiler to a Player, see Capture a snapshot. Load an empty Scene in the Player. Create a snapshot of the empty Scene. Load the Scene you want to test for leaks. Play partway through the Scene. Unload the Scene or switch to an empty Scene. To fully unload Assets in the last opened Scene, you need to either call Resources.UnloadUnusedAssets or load into two new Scenes (e.g. Load Empty Scene twice). Take another snapshot. You can optionally close the Player after you take this snapshot. Follow the instructions in Compare two snapshots to open and compare both snapshots. Use any of the three Memory Profiler window tabs to evaluate the two snapshots. Any increase in memory use in the second snapshot is potentially due to a memory leak."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/index.html",
    "title": "Memory Profiler | ModularUIPack",
    "summary": "Memory Profiler The Memory Profiler is a tool you can use to inspect the memory usage of your Unity application and the Unity Editor. The package adds a Memory Profiler window to the Unity Editor, which you can use to capture, inspect, and compare Snapshots of memory. Snapshots are a record of how the memory your application uses was organized when the Memory Profiler captured the snapshot. The Memory Profiler window The Memory Profiler window also provides an overview of native and managed memory allocations, to assess your application's memory use and identify potential issues such as memory leaks. This package is complimenting the built-in Memory Profiler module which provides high level memory usage information over time. The Memory Profiler package is designed to provide more detailed information about your application's memory allocations at a specific moment of time. Installing Memory Profiler To install this package, follow the instructions in the Package Manager documentation. You can install the package using the package registry list. Or using com.unity.memoryprofiler name when adding a registry package by name. You can also use the following link to open the Unity Editor and install the Memory Profiler via the package manager directly: Open the Unity Editor and install the Memory Profiler Requirements This version of the Memory Profiler is compatible with the following versions of the Unity Editor: Unity Version Package Version Minimum Unity Version Recommended Unity Version 2022.2 or newer 1.x.x 2022.2.0a16 2022.2.0b1 or newer 2021.x 0.7.x 2021.1.0a1 2021.3.3f1 or newer 2020.x 0.7.x 2020.1.0a1 2020.3.35f1 or newer 2019.x 0.7.x 2019.3.0f1 2019.4.29f1 or newer When you install the Memory Profiler package, Unity automatically installs the Editor Coroutines package as a dependency. Data concerns when sharing snapshots The memory snapshots you take with the Memory Profiler UI or the Memory Profiler API contain the entire contents of the managed heap of the Player or Editor instance you are capturing. You can see most of the data through the Memory Profiler UI, with the exception of managed allocations that do not have a garbage collection handle. These allocations might be related to Mono type data, or allocations that the garbage collector has already collected and released but the memory section they were located in has not been overwritten with new data yet. The latter happens because garbage-collected memory is not \"stomped\" for performance reasons. The kind of data that you can explore in areas such as the All Managed Objects view gives you an idea of what data could be included in the memory snapshot. The Memory profiler includes any object instance of a class, all fields on that object, as well as the class’ statics excluding literals such as const values. The Memory Profiler stores fields depending on the data type: It stores value types by their value It stores reference types as pointer addresses. The UI resolves any pointer address as a link to the object the address points to. For example, string type fields might indicate via their name what the string they point to means. So searching for a field named \"Password\", \"Credentials\" or \"Token\" might identify strings with sensitive data. If Unity has garbage collected the object that points to the string, or even the string itself, the data might still be there. However, it is no longer easily identifiable, unless you have a rough idea of what you're looking for or part of the string value to search for. Note: The previous section only mentions string data as potentially problematic, but this issue isn't exclusive to strings and might happen in other forms as well, such as field or type names. One way to safeguard against accidentally disclosing personally-identifying information, credentials or similar confidential data when you share snapshot files outside of your teams, is to put that data into constant fields. Constant fields bake that data into the binary executable, which the Memory Profiler does not capture. However, a binary executable might be de-compiled by users and expose the data that way. You can only take a memory snapshot in development Players, so these fields might be non-const in release builds, which will make it more difficult to get to the data, but not entirely impossible. If you have any further questions regarding this topic, use the Unity Forum thread to discuss this issue. Additional resources Profiler overview - Documentation about how to use Unity's built-in profiler. Ultimate guide to profiling Unity games - A guide describing how to profile an application including best practices, recommended workflows and advice."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/inspect-assets-that-use-most-memory.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/inspect-assets-that-use-most-memory.html",
    "title": "Inspect the assets that use the most memory | ModularUIPack",
    "summary": "Inspect the assets that use the most memory Start by identifying which objects are the best candidates for optimization: Open a snapshot - to do this, follow the instructions in Opening snapshots. Open the Unity Objects tab. The Memory Profiler window sorts the table in descending order by default. If you've changed the sort order, select the Total Size column header to change the sort order back to descending order for this workflow. This ensures that the objects with the highest memory use are easily visible at the top of the table. You can now search through the results in two ways: Expand groups to show individual objects within the group. Enable the Flatten hierarchy property to show only individual objects in the table. If you aren't sure which objects are most likely to use excessive memory, leave the Flatten hierarchy property disabled and look at the groups to see where the largest objects are likely to be. Enable the property if you're confident about most of your assets but suspect there are a small number of outliers using too much memory. Enable the Show Potential Duplicates Only property to see objects that the Memory Profiler identifies as potentially being duplicates of each other. You can see more detailed information about these objects with the References component and the Selection Details component. Use this information to determine whether the objects are expected duplicates, such as multiple instances of a Prefab that should exist in a scene, or problematic duplicates, such as objects that are created unintentionally or objects that Unity hasn't disposed of correctly."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/inspect-memory-usage.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/inspect-memory-usage.html",
    "title": "Inspect memory usage | ModularUIPack",
    "summary": "Inspect memory usage This section describes some of the more common tasks you can perform with the Memory Profiler package to inspect your application's memory usage. Page Description Inspect the assets that use the most memory How to find which assets in your application use the highest percentage of total memory. Total memory use How to assess your application's total memory usage with the Memory Profiler package. Find memory leaks How to find potential memory leaks with the Memory Profiler package. Memory on device How to analyze resident memory with the Memory Profiler package."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/main-component.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/main-component.html",
    "title": "The Main Component | ModularUIPack",
    "summary": "The Main Component The Main Component displays various data visualizations about the selected Memory Snapshot. You can control which visualizations the Main View displays with the toolbar. The Main Component contains the following tabs: The Main Component in the Memory Profiler window Page Description The Summary tab Provides a general overview of how the memory in your application is distributed. The Unity Objects tab Provides a detailed breakdown of how much memory each type of Unity Object in the snapshot uses. The All Of Memory tab Provides a detailed breakdown of all the tracked memory in the snapshot, not limited to Unity Objects."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/managed-shell-objects.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/managed-shell-objects.html",
    "title": "Managed Shell Objects | ModularUIPack",
    "summary": "Managed Shell Objects What are Managed Shells? In Unity a lot of the objects and types used in building your application have some part of them implemented in native code and often a good chunk of their data stored in native allocations that are handled by Unity's memory manager under the hood. When you can interact with these in your C# scripts via our Scripting API, you usually encounter these as types that inherit from UnityEngine.Object, which has an equivalent on the native side as NamedObject. For simplicity sake, we call these Unity Objects in the Memory Profiler. For your scripts to be able to interact with the native objects and their memory, Unity creates managed wrapper objects for each of the objects your managed code interacts with, on demand. Their on demand creation means that, for example, a BoxCollider or a Texture that is loaded into memory without any C# code handling that loading (e.g. a scene load for an object with such a component and a Renderer, that references a Material that references the Texture) will just be created as a native object. If C# code then queries the BoxCollider component, or accesses component fields referencing the Texture, Unity will create their managed wrapper of the managed types UnityEngine.BoxCollider and UnityEngine.Texture2D. Once such a wrapper is created, it is cached and held onto by the native object, until it is destroyed, meaning subsequent access to it won't create a new wrapper. What are Leaked Managed Shells? The native part of a Unity Object can be destroyed, e.g. because the Scene that a GameObject or Component resides in has been unloaded, or because UnityEngine.Object.Destroy() is called on these. If C# code holds a reference to a Unity Object, after it has been destroyed, it keeps the managed wrapper object, its Managed Shell, in memory. Due to an overload of the == operator and the implicit conversion to bool for managed types inheriting from UnityEngine.Object, this reference may appear to be == null and implicitly converts to false. This is why these objects are sometimes called \"fake null\" objects. How Bad are Leaked Manage Shells? The impact on your memory usage for holding on to these Leaked Managed Shell objects is often not huge, as the majority memory held by most of these type of objects is native memory. Most of the types in Unity's API layer, e.g. the Material in the example above, also only reference other Unity Objects through native references and only expose properties that will fetch the Managed Shell object for these when queried. A Leaked Managed Shell of a Material does therefore not hold on to the Texture Asset. The same is not true for your own C# types. If e.g. your MonoBehaviour or ScriptableObject derived types hold a reference to a Texture, or managed types that may consume a lot of memory, like huge arrays or other collections, leaking a managed shell of such a type can have devastating effects on your memory usage beyond the small amount held by just the Leaked Managed Shell itself as the referenced memory will be kept from being unloaded. In case of Asset type Unity Objects, i.e. Unity Objects that are not Game Objects or their Components, such references will not only keep their Managed Shells but also their native memory from being freed up by Resources.UnloadUnusedAssets() or a destructive Scene unload. How to Analyze Leaked Managed Shells? If you enter “(Leaked Managed Shell)” into the search field of the All Of Memory table, you can get a quick overview of all of these in your snapshot and check if any of these could be problematic. You can see what they might still hold on to via the Managed Fields data group in the Selection Details component and the References To tab of the Referencing component. If you want to ensure that a Leaked Managed Shell will be properly unloaded in the future: Go over the references shown in Referenced By tab on the References component to find out what is referencing them. Find reference to these in the C# code. Make sure to manually set these references to null. Once that is done, the managed Garbage Collector will take care of the rest. Counter Indicators Always nulling all references to Unity Objects can be a premature optimization. For example, if the references are confined to objects in a scene that will eventually be unloaded and there is no cumulative effect because it is only a finite set of objects, it can be safe to ignore these. That said, once a Unity Object becomes a Leaked Managed Shell, it serves no further purpose, so monitoring these type of objects via the Memory Profiler and reducing their count can be a good way to keep abreast of instances where paying closer attention to your lifetime management of these objects could be usefull to avoid surprises."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/memory-on-device.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/memory-on-device.html",
    "title": "Memory Usage On Device | ModularUIPack",
    "summary": "Memory Usage On Device The Summary, Unity Objects, and All Of Memory views provide data for resident memory usage, and allocated memory. Resident memory of a process is a fraction of the allocated memory of the process that's currently in physical memory. Diagram of memory layout. The Resident Memory metric is only available for projects made with Unity 2022.2 or later. Older projects only have the Allocated Memory metric available. To view Resident Memory data on older projects, use platform-specific profiling tools. Additionally, all Allocated Memory on the PS4, PS5, Switch, and WebGL platforms is Resident Memory On Device. Summary view The Summary view provides a general overview of the impact on physical memory with the Total Resident on Device metric. If your application needs to run on a platform with limited memory, the Total Resident on Device metric can help your review low-memory warnings and out-of-memory evictions. It's best practice to not use over 70% of the total physical memory available on a device. All of Memory and Unity Objects view For detailed analysis, you can use Unity Objects, and All Of Memory views. Select Resident on Device or Allocated and Resident on Device from the dropdown menu and sort by Resident size to get a list of objects that contribute most to the total physical memory used. These options are only available for captures of projects made with Unity 2023.1 and later. Resident memory best practices When analyzing resident memory usage, remember: Managed memory is primarily resident because the managed heap and the garbage collector accesses objects regularly. The Graphics memory (estimated) value is an estimation because for most platforms, Unity doesn't have access to information on the exact usage of graphics resources. Unity estimates the size based on available information such as width, height, depth, and pixel format. It also means that information about graphics resources’ residency status isn't available. For usability reasons, all graphics objects are displayed only in the Allocated view mode. Untracked is all memory reported by the operating system as allocated by the application but which lacks solid information on the source of the allocation. This memory might be attributed to areas such as native plug-ins, OS libraries, or thread stacks. On some platforms, and in projects made with Unity 2023.1 and newer, the Memory Profiler provides additional insights into what might have allocated that memory in the group breakdown. Native memory Native memory contains all Unity non-managed allocations used by objects, and includes the Reserved memory metric. Reserved memory is memory allocated by the Unity Memory Manager but not used by any Unity object during capture. Reserved memory can be resident, which means that there might have been an object that was recently deleted. To access additional information about reserved memory, go to the Memory Profiler settings and enabling the Show reserved memory breakdown setting. By default, this is disabled, because then Reserved breakdown doesn’t always contain enough actionable information and requires a deep understanding of how Unity Memory Manager works. For more information about the Unity Memory Manager and allocation strategies, refer to Customize allocators documentation. Platform-specific memory On some platforms, the Memory Profiler displays additional platform-specific groups if they’re a significant size, such as Android Runtime on Android. Here are some notes on Android Runtime: On some versions, Android Runtime tends to pre-allocate a significant amount of memory but never uses it. In that case, allocated memory doesn’t add to the application memory footprint and only the resident part of it needs to be considered. If the Android Runtime resident part is taking up a significant amount of the application memory footprint, use the Android Studio profiler to analyze allocations done in Java. Although Android doesn’t have a page file or memory compression by default, the Linux kernel allows applications to overcommit and allocate more memory than is physically available. When capturing, make sure you understand the device you’re using. Some vendors supply the Android Linux kernel with memory compression (zRAM) or vendor-custom page swap file tools."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/memory-profiler-window-reference.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/memory-profiler-window-reference.html",
    "title": "Memory Profiler window controls reference | ModularUIPack",
    "summary": "Memory Profiler window controls reference The Memory Profiler package operates in its own window inside the Editor. To open the Memory Profiler window, go to Window > Analysis and select Memory Profiler. The Memory Profiler window has four components: The Memory Profiler window A The Snapshots component contains all the memory snapshots in your Project and allows you to compare snapshots. B The Main component displays in-depth data about memory in a snapshot. C The References component displays information about references to and from a selected object. D The Selection Details component displays more detailed information about a selected object. Use the control bar at the top of the window to perform various actions in the Memory Profiler window. The control bar contains the following items: Control Function Toggle snapshots component Expand or hide the snapshots component. Attach to Player Use the dropdown menu to choose a target to take a snapshot of. You can choose from Play mode, any Player that's running, the Editor itself, or manually enter the IP address of the device you want to take a memory snapshot on. For more information, see Profiling your application. Capture Select this button to take a memory snapshot. This operation might take a few seconds, depending on the size of your application. Once the Memory Profiler has captured the snapshot, it appears in the Snapshots component. Select the dropdown arrow to open the Choose Capture Flags dropdown menu. Use this menu to choose which flags the Memory Profiler captures. Import Import a saved capture file."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/memory-profiler-window-section.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/memory-profiler-window-section.html",
    "title": "Memory Profiler window reference | ModularUIPack",
    "summary": "Memory Profiler window reference This section describes the user interface for the Memory Profiler package window and contains the following pages: Page Description The Memory Profiler window reference Provides an overview of how the Memory Profiler window UI is organized. Main component Describes the main UI component and identifies the tabs in this component. Summary tab Describes the tab in the main component which provides a broad overview of your application's memory. Unity Objects tab Describes the tab in the main component which provides insights into memory usage by individual Unity objects and groups of objects. All Of Memory tab Describes the tab in the main component which provides a detailed breakdown of all the tracked memory in the snapshot, not limited to Unity objects. Selection Details component Describes the Selection Details component, which displays much more information about a selected object. References component Describes the References component, which lists references to and from a selected object."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/references-component.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/references-component.html",
    "title": "References component | ModularUIPack",
    "summary": "References component The References component displays how objects reference each other in your snapshot. Use this component to see how the selected object is linked to other objects. The References component The component has two tabs to display reference information: The Referenced By tab shows the tree of references from the selected object. The References To tab shows a list of objects that the selected object references. The References component displays the selected object's name regardless of whether it contains any references. If a selected object does contain references or if another object references the selected object, then the component lists the references in the appropriate tab. By default, the entries in the Referenced By tab are collapsed and only show the root object. Select objects that belong to a hierarchy to expand them and see the full reference hierarchy of the object. In the References To tab, the component only displays all directly referenced objects but not the objects referenced by these."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/selection-details-component.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/selection-details-component.html",
    "title": "Selection Details | ModularUIPack",
    "summary": "Selection Details This component displays detailed information about an item you select in either the Main component or the References component. The contents of this component change dynamically based on the selected object. The Selection Details component The Selection Details component displays three buttons to interact with and multiple contextual data groups to describe the currently selected obeject. The three available buttons are: Select in Editor - Select the object inside the Editor, if possible. This option is disabled for any objects that Unity generates at runtime. Search In Project - Use Unity's legacy search to highlight the object in the project browser. For more information about the legacy search, see Search in the Editor. Open in Search - Search for the object in the Unity Search window. Th Selection Details component also provides information about the object through the following data groups: A: Basic - displays high level information about any selected object. B: MetaData - displays various detailed information about certain objects. C: Help - displays text to explain the status of the object in more detail. D: Advanced - displays more detailed information about the object than the Basic group. The Selection Details panel doesn't display this group for all types of objects. E: Preview - displays a preview of how an object appears in the Editor or your application e.g. Shaders. F: Managed Fields - displays a table including any managed fields the selected object contains and information about those fields. Basic This data group contains three entries: The Size entry displays the size of the object in memory, and how much of that total is native or managed memory. The Referenced By entry displays how many other objects reference the selected object and how many self-references the object has. The References component provides more details about these references. The Status entry displays the type of object selected, whether or not it's used anywhere in the application and, if applicable, how it's used. MetaData This group shows additional data specifics for supported objects. Current supported object types: Texture (eg. Texture2D, RenderTexture, Cubemap...) Mesh AudioClip Shader Help This data group contains text to explain the Status section of the Basic data group in more detail, and provide some insight into how to use this information. The text can consist only of a paragraph of text, or can include individual definitions for some terms, for example, explaining the meaning of the phrase \"self-references\", that might be used in other data groups. Advanced This data group contains any of the following entries: Instance ID - the unique ID associated with this object in this snapshot. Flags - displays a list of active Flags on the object. HideFlags - displays a list of active HideFlags on the object. Native Address - the memory location where the native component of this object exists. Only visible on objects that use native memory. Managed Address - the memory location where the managed component of this object exists. Only visible on objects that use managed memory. Preview This data group displays a preview of how some objects appear in the application or Editor. This group is only visible for the following object types: Shaders Meshes Textures Materials Audio clips Managed Fields This data group displays a table containing any fields in managed memory that the selected object contains. Some entries might involve hierarchies; select the parent entry to expand or hide sub-entries. The table displays the following columns: Name - the name of the field. Value - the current value of the field when the snapshot was captured. Type - the data type of the field. Size - the amount of memory the field used when the snapshot was captured. Notes - any additional or supplementary information relevant to the field."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/snapshot-capture.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/snapshot-capture.html",
    "title": "Open, import and capture snapshots | ModularUIPack",
    "summary": "Open, import and capture snapshots Capture a snapshot You can capture a snapshot from the Editor, from an application running in Play mode in the Editor, or from a player running on your local machine or connected device. Use the Attach to Player dropdown in the Profiler Window toolbar to choose between these options. By default, the Memory Profiler captures Editor snapshots. When an application is running in Play mode or in a Player, Unity adds those options to the dropdown menu. They don't appear in the dropdown if no application is running. After you choose a capture target in the dropdown menu, you can use the following buttons to capture a new snapshot: The Capture New Snapshot button is visible in the Memory Profiler window when you have no snapshots selected. The Capture button is always visible in the control bar in the Memory Profiler window. Both buttons perform the same operation. Alongside the Capture button on the control bar there is a Choose Capture Flags dropdown menu, which you can use to configure the snapshot. See the table entry in Memory Profiler window for more information. You can also capture a memory snapshot through a script. For information about how to capture snapshots this way, see the Memory Profiler.TakeSnapshot Scripting API documentation. For more information about using custom metadata with snapshots in code, see MetaData and Add Player hook. Import snapshots If you already have access to existing memory snapshots, you can import them into the Memory Profiler. You can import a snapshot in any of the following ways: Copy the snapshot into your Project folder Use the Import button in the Snapshots component Copy snapshots into the Project folder Inside your Project folder, find or create a folder named MemoryCaptures. Copy the snapshot files to this folder. Open the Memory Profiler window, and you can see the added snapshot in the Snapshots component. Use the Import button in the Snapshots component In the Memory Profiler window toolbar, click on the Import button. This opens a file browser window. In the file browser window, locate and open the memory snapshot you want to import. When you import a .snap file, Unity copies the file to your MemoryCaptures folder. Unity creates this folder if it doesn't already exist. Opening snapshots To open a single snapshot and view its associated data, select the snapshot from the list in the Snapshot Panel with a single click. Opening a snapshot might take a long time because a snapshot can contain a lot of data. To open two snapshots and compare them, enable the Compare Snapshots mode in the Open Snapshots pane, then select the two snapshots you want to compare from the list. The Main component then displays different visualizations of the snapshot data. Tip Clicking the snapshot name doesn't open the snapshot; instead, this opens a renaming text box which you can use to rename the snapshot."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/snapshots-comparison.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/snapshots-comparison.html",
    "title": "Compare two snapshots | ModularUIPack",
    "summary": "Compare two snapshots You can use the Compare Snapshots mode in the Snapshots component to compare two snapshots together. When you enable this mode, select any two snapshots to open them both in a comparison view in the Main component. Make sure to read any tips in the tips section when you compare snapshots. This is important because variations in snapshots, such as taking snapshots from different sessions, can lead to variations from factors not related to your applications. In the Summary comparison, select any table entry or segment of a bar to display it in detail in the Selection Details component. For the Unity Objects comparison and All Of Memory comparison, you can customize the data that the tables display. By default, the tables don't display any data that's identical in both snapshots. To display matching data in the displays, enable the Show Unchanged checkbox. To sort the tables by a particular column, click on the column name in the table. When you click on the column the table is currently sorted by, this toggles between ascending and descending order. Click on a different column name to sort by that column instead. You can only sort by one column at a time. To enable or disable columns, right-click on any column name to open the column sub-menu. Click on any active column name in the menu to hide the column, or click on any hidden column to display it. You can't hide the Description column; all other columns are enabled by default. Select any non-parented entry to open that entry in the direct comparison tables underneath the primary table, and in the Selection Details component, if any details are available. Summary comparison In this tab, each of the Memory Usage On Device, Allocated Memory Distribution, Managed Heap Utilization and Top Unity Objects Categories sections contains two sets of information - two bars to visually display the memory used in each snapshot, and a table to compare the absolute values for the used memory. Hover your cursor over any element in either of the bars or over any entry in the table too see exactly how much memory that entry uses, and the percentage of both the reserved and total memory that it represents. The first bar in the tab represents the first snapshot you selected, with the other bar being the second snapshot. In the table, the first two columns are the memory usage values for each snapshot and the third column displays the absolute difference between those two values for that row. Select another snapshot from the Snapshots Component to replace the least recently selected snapshot. Alternatively, select the Close button next to an entry in the Open Snapshots Pane to close that snapshot. You can then select another to take its place. Unity Objects comparison This tab compares the memory usage of any Unity Objects in the two selected snapshots. The table in this tab displays the absolute values for both snapshots and the difference between them. You can use the difference to, for example, test optimizations - if you compress a Texture2D object to save some memory, you can compare a snapshot from before and after the change to make sure that it saved the expected amount of memory. This tab displays information about specific Unity Objects, so can contain a huge number of possible entries. To improve readability the table groups similar Unity Objects, such as Shaders, together into parented row entries by default. Expand the parent entry to see individual Unity Object entries. Enable the Flatten Hierarchy checkbox to only show individual row entries. All Of Memory comparison Use this tab to evaluate how the total memory use in your application changes over time. Compare more recent snapshots to earlier ones to see how changes you make to your application can affect the total memory use. Be aware that taking snapshots in different sessions might not provide completely accurate comparisons - for example, other executables running on your machine can change the total memory use that this tab displays. If you need to compare snapshots from different sessions, try to keep as many conditions the same as possible when you record the snapshots."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/snapshots-component.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/snapshots-component.html",
    "title": "Snapshots component | ModularUIPack",
    "summary": "Snapshots component The Snapshots component displays a list of memory snapshots in your project. You can select an individual snapshot for analysis, or compare any two snapshots. The Memory Profiler package can capture snapshots of the Unity Editor or of a running Player. Note Editor-only snapshots don't include a screenshot. A - Open Snapshots Pane B - List of available snapshots Each snapshot in the list displays a screenshot of the profiling target during the capture, a default name, and the time and date of the capture. If there are snapshots in the list from more than one session, Unity sorts them into logical groups, which you can click on to expand or collapse them. Unity stores the date on each snapshot in Universal Coordinated Time (UTC) format and converts it to your computer's local time. Hover your cursor over the date to see which Project the snapshot is from. Path to captured snapshots When you create a snapshot for the first time, Unity creates a sub-folder in your Project folder called MemoryCaptures. By default, the Memory Profiler stores all snapshots in this folder. To change the default storage path for the snapshots, go to Edit > Preferences > Analysis > MemoryProfiler and edit the Memory Snapshot Storage Path property. The default value is \"MemoryCapture\". The path in this property is relative, which means it must start with: \"./\" if the MemoryCaptures folder is within the Project folder \"../\" if the MemoryCaptures folder is one level above the Project folder in the hierarchy. Memory Profiler Preferences Open Snapshots pane The Open Snapshots pane displays the currently selected snapshot or snapshots. By default, the Single Snapshot mode is active, which enables you to view one snapshot at a time. Select the Compare Snapshots mode to choose two snapshots to compare to each other. When in Compare Snapshots mode, Unity keeps both snapshots in active memory to minimize the time needed to switch between them. For more information, see Compare two snapshots. Unity displays details about any selected snapshot in the Open Snapshots pane, including: The screenshot associated with the snapshot The snapshot's name The time and date of capture The session you captured it in The project you used to capture it Icons to identify the platform and application you used to capture it (whether in the Editor or a Player) The total memory used by your application during the snapshot, and the total resources available at the time"
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/snapshots-concepts.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/snapshots-concepts.html",
    "title": "Snapshots concepts | ModularUIPack",
    "summary": "Snapshots concepts A memory snapshot is a record of how the memory in your application is organized at the point in a frame when the snapshot was taken. You can take multiple snapshots during an application's execution but this isn't the same as constant monitoring. If you need to profile how memory use in your application changes in real-time during execution, use the Memory Profiler module in the built-in Profiler. Define snapshot metadata When you capture a snapshot, you can generate MetaData on the Player side. If the Player was built from a Project that has the Memory Profiler package installed, the Player generates some default metadata for the snapshot. The default metadata consists of: MetaData.content: Contains the Project's name, and the scripting version when you capture the Editor. MetaData.platform: Contains the RuntimePlatform of the Player or the Editor that you captured, and stores it as a string. MetaData.screenshot: A screenshot the Memory Profiler takes at the moment of the capture. Its size is under 480x240 pixels. When you capture a snapshot, you should define some metadata on the Player side so you can get a good overview of the content of your snapshot. There are two ways to do so: When you don't have the Memory Profiler package in your Project, but want to add metadata to your snapshots, register a listener to MemoryProfiler.createMetaData. If you have the package in your Project, keep the default data or write a metadata collector. For more information see Add Player hook below. Add Player hook To define custom metadata in a Project that has the Memory Profiler package installed, create a class that inherits from Unity.MemoryProfiler.MetadataCollect. You need to implement void CollectMetadata(MetaData data) in which you fill data with the information you want. You can create multiple classes that inherit from Unity.MemoryProfiler.MetadataCollect but their CollectMetadata methods have no defined call order. If you have a class that inherits from Unity.MemoryProfiler.MetadataCollect, it does not generate the default metadata described in Define snapshot metadata. If you want to keep some or all of the default metadata, go to the file com.unity.memoryprofiler/Runtime/MetadataInjector.cs and copy the content you want to keep from DefaultCollect(MetaData data) into your implementation. Ignore snapshot files in source control Add the .snap extension to your version control system’s ignore file to avoid committing memory snapshot files to your repository. Memory snapshot files might use large amounts of disk space."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/snapshots.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/snapshots.html",
    "title": "Snapshots | ModularUIPack",
    "summary": "Snapshots This section describes what a snapshot is, how to create them, and how to use them in the Memory Profiler window: Page Description Snapshots concepts Contains information about what snapshots are. Open, import and capture snapshots Describes how to open an existing snapshot, import snapshots from previous sessions and capture new snapshots. Snapshots component Describes the UI component which contains snapshots in the Memory Profiler window. Compare two snapshots Explains how to open two snapshots at once and compare them."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/summary-tab.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/summary-tab.html",
    "title": "Summary tab | ModularUIPack",
    "summary": "Summary tab This tab displays general information about the state of memory in the selected snapshot or snapshots. You can investigate the information the Summary tab displays in more detail in the other available tabs. The Summary tab in the Main component The following table describes the sections available in this tab: Section Description Tips Displays any contextual warnings or additional useful information about the snapshots, such as potential issues with your snapshot and insight about how to understand an Editor capture. Memory Usage On Device The application footprint in physical memory. It includes all Unity and non-Unity allocations resident in memory at the time of the capture. Allocated Memory Distribution Displays how your allocated memory is distributed across different memory categories. Managed Heap Utilization Displays a breakdown of the memory that Unity's Scripting VM manages, which includes managed heap memory used for Managed Objects, Empty Heap Space that might've previously been used by Objects or been reserved during the last heap expansion, and memory used by a virtual machine itself. Top Unity Objects Categories Displays which types of Unity Objects use the most memory in the snapshot. Hover over any of the bars in the tab to highlight the corresponding label, and vice versa. Continue hovering your cursor over the bar or label to display how much that element contributes to the total, as a percentage. You can also select any element to display more detailed information about it in the Selection Details component. To investigate any of the sections in more depth, select the Inspect button to open either the All Of Memory tab (from the Allocated Memory Distribution section or the Managed Heap Utilization section) or the Unity Objects tab (from the Top Unity Objects Categories section)."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/total-memory-use.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/total-memory-use.html",
    "title": "Total memory use | ModularUIPack",
    "summary": "Total memory use Inspect your application's total memory use regularly to identify problems with memory use as early as possible, such as if your application uses too much memory for the target platform. Capture snapshots often and in a variety of circumstances - don't rely entirely on a capture of your application running in the Editor in Play mode, for example. For instructions on how to capture and open snapshots, see Capture a snapshot and Opening snapshots. After you capture and open a snapshot, you can inspect the snapshot in a variety of ways using the different available tabs. Use the All Of Memory tab to see how much memory your application uses in total. This is useful if your application needs to meet a target size for memory use because you can see the exact total that your application uses."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/unity-objects-tab.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/unity-objects-tab.html",
    "title": "Unity Objects tab | ModularUIPack",
    "summary": "Unity Objects tab The Unity Objects tab displays any Unity objects that allocated memory, how much native and managed memory that the object uses, and the combined total. Use this information to identify areas where you can eliminate duplicate memory entries or to find which objects use the most memory. Use the search bar to find the entries in the table which contain the text you enter. The Unity Objects tab Note The search bar can only search for the text shown in the Description column. This will be changed to include other search functionality in future updates. The following table describes each of the available columns in the table: Column Description Description Displays the name of each individual object or group of objects. Can't be disabled. Allocated Size Displays how much memory the object or group of objects allocated, in bytes. Resident Size Displays how much memory the object or group of objects is resident, in bytes. % Impact Displays how much memory the object or group of objects uses as a percentage of the Allocated Memory In Table value. All measurement bars, including the Allocated Memory In Table bar, adjust dynamically based on the selected object in the table. Native Size Displays how much of the Allocated Size value is made up of native memory. Managed Size Displays how much of the Allocated Size value is made up of managed memory. Graphics Size Displays how much of the Allocated Size value is made up of graphics memory. By default, the table lists all relevant objects by Allocated Size in descending order. You can click on a column header name to sort the table by that column or to change whether the column sorts in ascending or descending order. Hold Ctrl (macOS: Cmd) when you click on a column name to add it to an existing sort. For example, to sort by both Description and Allocated Size, click on the Description header, then hold Ctrl or Cmd and click on the Allocated Size header. You can continue to hold Ctrl/Cmd and select the header again to toggle between ascending and descending for each individual sorted column. You can sort by any number of columns and in any order - Unity displays a number in each column header to display the sort order, alongside the arrow which indicates whether the Memory Profiler sorts that column in ascending or descending order. To hide a column, or to display a hidden column, right click on any column header name and select a name from the sub-menu to hide or display that column. You can hide any column except the Description column, which is always visible. Table mode Use Table Mode dropdown to see Allocated, Resident Memory usage of allocations, and their relative impact on the total usage. The dropdown changes the memory columns the table displays: Allocated Memory - shows only Allocated memory, % Impact is shown against Allocated Memory In Table Resident Memory on Device - shows only Resident memory, % Impact is shown against Resident Memory In Table Allocated and Resident Memory on Device - shows Allocated and Resident memory, % Impact is shown against Allocated Memory In Table For more information on the Resident Memory see Memory Usage On Device. Modifier toggles There are two toggles you can use to change which entries the table displays, which are both disabled by default: Enable the Flatten Hierarchy toggle to expand all objects into single entries instead of collapsible groups. Enable the Show Potential Duplicates Only toggle to only display instances where objects might be separate instances of the same object. The Show Potential Duplicates Only toggle populates the table with information about duplicated memory use. When you enable this toggle, the Memory Profiler window groups any objects in the table with the same name, size, and type together. You can then look through the list to separate any similar objects that should be independent from those that are two instances of the same object."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/whats-new.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/Documentation~/whats-new.html",
    "title": "What's new in version 1.1.1 | ModularUIPack",
    "summary": "What's new in version 1.1.1 Summary of changes in Memory Profiler version 1.1.1. Added Added the name of the assembly to the Type details when selecting a Managed Type group. Fixed Fixed navigating with arrow keys not updating reference list in All of Memory view (PROFB-153). Fixed retention of Snapshot list expansion and scroll state so that it does not expand all items unexpectedly but remembers which sessions were collapsed and which extended (PROFB-196). Fixed dropdown text being clipped when \"Allocated and Resident Memory on Device\" was selected. Fixed an issue whereby graphics allocations not associated with a native object would display under a \"No Name\" category in the All of Memory table. Fixed issues with selecting array objects, or objects that had managed fields with arrays, when the arrays where multidimensional with one or more dimensions of size 0. Fixed exception when opening the Unity Objects table in Comparison mode when there are multiple MonoBehaviour or ScriptableObject types with the same name but from different assemblies. Fixed exception when opening the All Of Memory table in Comparison mode when either of the snapshots is from a pre 2022.2 runtime and the untracked amount is negative. Fixed an ArgumentOutOfRangeException when inspecting some Managed Objects (PROFB-223). Fixed longer string values not being displayed in the Managed Fields Inspector. Fixed an issue that caused IL2CPP VM memory to not be calculated correctly in the Summary and All Of Memory table. Remove deprecated UxmlFactory/UxmlTraits API usage on Unity 6. Add divider on \"Capture\" toolbar button dropdown. Reattributed IL2CPP VM memory from Native to Managed in the All Of Memory table. Changed Allowed Snapshots to reside in Subfolders within the configured memory snapshot path. Improved Snapshots folder monitoring: Changes to the folder are now reflected in the Editor without it requiring to acquire focus first. Improved display of managed arrays in the Selected Item Details and Managed Fields. For a full list of changes and updates in this version, see the Memory Profiler Changelog."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "Memory Profiler copyright © 2023 Unity Technologies Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). Unless expressly provided otherwise, the software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.memoryprofiler@1.1.5/README.html": {
    "href": "Library/PackageCache/com.unity.memoryprofiler@1.1.5/README.html",
    "title": "Memory Profiler | ModularUIPack",
    "summary": "Memory Profiler UI frontend of the memory profiler. This package was licensed under UDL between the following version ranges: com.unity.memoryprofiler@0.1.0-preview.6 (2019-04-03) -> com.unity.memoryprofiler@0.2.4-preview.2 (2020-06-10) This package is currently licensed under UCL and within the following version ranges: com.unity.memoryprofiler@0.2.5-preview.1 (2020-07-01) -> com.unity.memoryprofiler@1.1.0-pre.1 (2023-05-04)"
  },
  "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [3.2.1] - 2023-04-27 Fixed Newtonsoft DLL when compiling with netstandard 2.0. [3.2.0] - 2023-04-19 Fixed Newtonsoft DLL public key token so it properly supports assembly strong name. Support Newtonsoft's JsonSelectSettings.RegexMatchTimeout. [3.1.0] - 2023-02-28 Updated AOT and Editor DLLs to corresponds to Newtonsoft.Json version 13.0.2 [3.0.2] - 2022-03-29 Removed test code from package. [3.0.1] - 2022-02-21 Updated license file [3.0.0] - 2022-01-27 Updated Documentation [3.0.0-preview.1] - 2022-01-25 Updated AOT and Editor DLLs to corresponds to Newtonsoft.Json version 13.0.1 Removed deprecated Portable DLL Updated README Updated Documentation [2.0.2] - 2020-10-04 Updated README Added package signature for validation [2.0.1-preview.1] - 2020-11-14 Updated README and Internal Fixtures [2.0.0] - 2020-04-20 This is the release of Unity Package Nuget.NewtonsoftJson v2.0.0. Updated dll to AOT compatible version to allow for IL2CPP compilation platform targets Added dll to Portable compatible version to allow for additional platform targets Updated associated Package Documents [2.0.0-preview] - 2019-11-14 This is the preview of Unity Package Nuget.NewtonsoftJson v2.0.0-preview. Changed dll to AOT compatible version to allow for IL2CPP compilation platform targets [1.1.2] - 2019-10-31 This is the release of Unity Package Nuget.NewtonsoftJson v1.1.2. Fixed tests for 2018.4. [1.1.1] - 2019-10-30 This is the release of Unity Package Nuget.NewtonsoftJson v1.1.1. Added some sanity tests to catch issues in the CI. [1.1.0] - 2019-10-29 This is the release of Unity Package Nuget.NewtonsoftJson v1.1.0. Use .net standard 2.0 version of the dll. Renamed the dll to match the assembly name. Users will need to update their assembly references. [1.1.0-preview.1] - 2019-08-09 This is the first preview of Unity Package Nuget.Newtonsoft.Json version 1.1.0. Updated to bug fix release 12.0.2 of Newtonsoft Json. Updated package description. [1.0.1-preview.2] - 2019-10-02 This is the second preview release of Unity Package Nuget.NewtonsoftJson v1.0.1. Use .net standard 2.0 version of the dll. [1.0.1-preview.1] - 2019-08-13 This is the first preview release of Unity Package Nuget.Newtonsoft.Json v1.0.1. Renamed the dll to match the assembly name. Users will need to update their assembly references. [1.0.0] - 2019-08-08 This is the first release of Unity Package Nuget.Newtonsoft.Json. No notable changes from the previous preview release. [1.0.0-preview.4] - 2019-08-06 This is the fourth preview release of Unity Package Nuget.Newtonsoft.Json. Remove the unused asmdef file and make it such that the dll needs to be explicitly included. [1.0.0-preview.3] - 2019-07-03 This is the third preview release of Unity Package Nuget.Newtonsoft.Json. Update the documentation for the package and the package description to state that this package is for internal Unity use only. [1.0.0-preview.2] - 2019-06-21 This is the second preview release of Unity Package Nuget.NewtonsoftJson. The name of the package has been changed to avoid a naming issue with npm. [1.0.0-preview.1] - 2019-06-21 This is the first preview release of Unity Package Nuget.NewtonsoftJson. This is the first preview of a the custom Unity package for NewtonsoftJson. Please report any bugs."
  },
  "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Documentation~/index.html",
    "title": "Newtonsoft Json Unity Package | ModularUIPack",
    "summary": "Newtonsoft Json Unity Package This is a Unity package for Newtonsoft Json and corresponds to Newtonsoft.Json version 13.0.2. Documentation for this Package is provided as links to the Json.NET Documentation. Json.NET is a popular JSON framework for .NET Documentation Json.NET Main Page Json.NET Documentation Json.NET Source Code Use Cases Flexible JSON serializer for converting between .NET objects and JSON LINQ to JSON for manually reading and writing JSON Write indented, easy-to-read JSON Convert JSON to and from XML Supports .NET Standard 2.0, .NET 2, .NET 3.5, .NET 4, .NET 4.5, Silverlight, Windows Phone and Windows 8 Store"
  },
  "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "Nuget.Newtonsoft.Json copyright © 2022 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/README.html": {
    "href": "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/README.html",
    "title": "Newtonsoft.JSON | ModularUIPack",
    "summary": "This package wraps the Json.NET DLLs. Newtonsoft.JSON Unity Package for [Newtonsoft's JSON library] (https://www.newtonsoft.com/json) This package includes the DLL version of JSON.Net Version: 13.0.1. It also has the AOT DLL for additional Platform Compatibility. This package is intended to be inherited as a dependency, and should not be directly installed, by end users."
  },
  "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Third Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: Newtonsoft.Json License Type: MIT The MIT License (MIT) Copyright (c) 2007 James Newton-King Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Json.Net.Unity3D License Type: MIT The MIT License (MIT) Copyright (c) Copyright (c) 2016 SaladLab Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Newtonsoft.Json-for-Unity License Type: MIT The MIT License (MIT) Copyright (c) Copyright (c) 2019 Kalle Jillheden (jilleJr) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: com.newtonsoft.json License Type: MIT MIT License Copyright (c) 2019 Mike Wuetherick Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Library/PackageCache/com.unity.profiling.core@1.0.2/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.profiling.core@1.0.2/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [1.0.2] - 2022-03-10 Changed Removed 'preview package' paragraph from documentation. [1.0.1] - 2021-09-03 Changed Added direct install link to the documentation. [1.0.0] - 2021-08-30 Fixed Made structs layout to be compatible with Burst in Release Players. [1.0.0-pre.1] - 2021-02-16 Fixed Fixed ProfilerMarker with 3 parameters being configured as for 2 parameters. Removed ProfilerCounter constructor with MarkerFlags. [0.2.1-preview.1] - 2020-08-25 Fixed ProfilerMarker and ProfilerCounter usage in release Player builds. [0.2.0-preview.1] - 2020-08-18 Added ProfilerCounter and ProfilerCounterValue API. Profiler counters documentation and usage guide. [0.1.0-preview.1] - 2020-05-28 Added This is the first release of Unity Profiling Core Package. ProfilerMarker API with metadata support."
  },
  "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "Unity Profiling Core Package What's new Upgrade guide ProfilerMarker API guide Profiler Counter API guide"
  },
  "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/index.html",
    "title": "About Unity Profiling Core | ModularUIPack",
    "summary": "About Unity Profiling Core Use the Unity Profiling Core package to add contextual information to the Unity Profiler captures. You can use the Scripting APIs provided with the Unity Profiling Core package to add a string or number to a Profiler sample or pass custom data to the Profiler data stream to later use in the Editor. Installation To install this package, follow the instructions in the Package Manager documentation. The Unity Profiling Core package is not discoverable in the Package Manager UI because it is a core package. Therefore the recommended installation method is to add the package by name, which is com.unity.profiling.core. If you are using Unity 2021.2.0a5 or newer, you can also install it via this link. Install package by name. Requirements This version of Unity Profiling Core is compatible with the following versions of the Unity Editor: 2020.1 and later Helpful links If you are new to Unity Profiling Core, or have a question after reading the documentation, you can: Watch the Tutorials here. Join our support forum."
  },
  "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/profilercounter-guide.html": {
    "href": "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/profilercounter-guide.html",
    "title": "Profiler counters API guide | ModularUIPack",
    "summary": "Profiler counters API guide You can use the ProfilerCounter or ProfilerCounterValue API to track the integral metrics of your application and make them visible in the Unity Profiler or in other code. This is particularly useful if you want to track performance changes in your application, and it speeds up the investigation of performance issues because you can use the information from your Profiler counters in conjunction with Unity built-in counters and instrumentation data. If you are an Asset Store package developer, you can add Profiler counters to your code to help other developers to understand important performance characteristics of your system, and they can use this information for optimization or budgeting tooling. The following diagram displays a high level overview of the Profiler counters data flow: Profiler counters flow. The ProfilerRecorder API retrieves Profiler counter data in your application code, and the RawFrameDataView or HierarchyFrameDataView APIs retrieves Profiler counter data in the Editor code. Additionally, you can visualize this counter data in the Profiler Window by configuring a custom Profiler Module in the Module Editor. ProfilerCounter and ProfilerCounterValue support the following types: int long float double How to pass counter values to the Profiler The Profiler counters API supports push and pull operations. You can push the value of the counter to the Profiler, or the Profiler can pull the value at the end of the frame. If your data changes infrequently - for example once per frame, use the ProfilerCounter API to push the counter data to the Profiler. If your data changes multiple times per frame, use the ProfilerCounterValue API. This makes the Profiler automatically pick up the last value at the end of the frame. The following example shows you how to use these APIs to set up and pass counter values to the Profiler 1. Define counters To pass counter values to the Profiler, you must first define which counters you want to send. The following example uses ProfilerCounter for the enemies count because the value changes infrequently. Additionally, the example uses ProfilerCounterValue for bullet count because a player or enemies might fire many bullets per frame. using Unity.Profiling; class GameStats { public static readonly ProfilerCategory MyProfilerCategory = ProfilerCategory.Scripts; public static readonly ProfilerCounter<int> EnemyCount = new ProfilerCounter<int>(MyProfilerCategory, \"Enemy Count\", ProfilerMarkerDataUnit.Count); public static ProfilerCounterValue<int> BulletCount = new ProfilerCounterValue<int>(MyProfilerCategory, \"Bullet Count\", ProfilerMarkerDataUnit.Count, ProfilerCounterOptions.FlushOnEndOfFrame); } 2. Update the value The next example assumes that the GameManager class handles high level logic and knows about enemies. To update the value of the counter, in the Update or LateUpdate method (depending on when the logic is performed with spawning or destroying enemies), you can use Sample method to push the enemies count value to the Profiler. using UnityEngine; using Unity.Profiling; class GameManager : MonoBehaviour { Enemy[] m_Enemies; void Update() { GameStats.EnemyCount.Sample(m_Enemies.Length); } } To pass the bullet count to the Profiler, this example assumes that there is a Shell script that manages the bullet lifecycle. It then increases the GameStats.BulletCount value in Awake and decreases it in OnDestroy to give accurate information about the current bullet flow in the game. using UnityEngine; using Unity.Profiling; public class Shell : MonoBehaviour { void Awake() { GameStats.BulletCount.Value += 1; } void OnDestroy() { GameStats.BulletCount.Value -= 1; } } Note Both ProfilerCounter and ProfilerCounterValue are compiled out in non-development builds. Viewing the counters in the Profiler Window You can view the data that ProfilerCounter or ProfilerCounterValue generates in the Profiler Window in a custom Profiler Module. This might help to visually recognise relationships with other system metrics and identify performance issues quickly. You can use the Module Editor to select built-in or newly added counters for the visualization. To open the Profiler Module Editor, open the Profiler Window (Window > Analysis > Profiler) and then select the Profiler Module dropdown in the top left of the window. Click the gear icon, and the Profiler Module Editor opens in a new window. Profiler Module Editor window. You can then view the data in the Profiler Window alongside with other counters. Module with custom counters in the Profiler Window. Note Counters declared as static are dynamically initialized in the C# code when a type is initialized and might not be available until they are actually initialized and used. This applies to both Edit and Play Modes. If you don't see your counters appearing in the Module Editor, record some data with the profiler first until some frames passed that should have send values through these counters. Getting counter values in Players Profiler counters give you an insight into important game or engine system metrics. If you have a continuous integration setup or want to visualize key performance metrics in your application during a test play through you can use the ProfilerRecorder API to get custom Profiler counter values as well as Unity built-in counters. For example, the following script displays the frame time, Mono/IL2CPP heap size, and total memory that the application uses. using System.Collections.Generic; using System.Text; using Unity.Profiling; using UnityEngine; public class StatsScript : MonoBehaviour { string statsText; ProfilerRecorder systemMemoryRecorder; ProfilerRecorder gcMemoryRecorder; ProfilerRecorder mainThreadTimeRecorder; double GetRecorderFrameAverage(ProfilerRecorder recorder) { var samplesCount = recorder.Capacity; if (samplesCount == 0) return 0; double r = 0; unsafe { var samples = stackalloc ProfilerRecorderSample[samplesCount]; recorder.CopyTo(samples, samplesCount); for (var i = 0; i < samplesCount; ++i) r += samples[i].Value; r /= samplesCount; } return r; } void OnEnable() { systemMemoryRecorder = ProfilerRecorder.StartNew(ProfilerCategory.Memory, \"System Used Memory\"); gcMemoryRecorder = ProfilerRecorder.StartNew(ProfilerCategory.Memory, \"GC Reserved Memory\"); mainThreadTimeRecorder = ProfilerRecorder.StartNew(ProfilerCategory.Internal, \"Main Thread\", 15); } void OnDisable() { systemMemoryRecorder.Dispose(); gcMemoryRecorder.Dispose(); mainThreadTimeRecorder.Dispose(); } void Update() { var sb = new StringBuilder(500); sb.AppendLine($\"Frame Time: {GetRecorderFrameAverage(mainThreadTimeRecorder) * (1e-6f):F1} ms\"); sb.AppendLine($\"GC Memory: {gcMemoryRecorder.LastValue / (1024 * 1024)} MB\"); sb.AppendLine($\"System Memory: {systemMemoryRecorder.LastValue / (1024 * 1024)} MB\"); statsText = sb.ToString(); } void OnGUI() { GUI.TextArea(new Rect(10, 30, 250, 50), statsText); } } Don't forget to use ProfilerRecorder.Dispose() to free unmanaged resources associated with the ProfilerRecorder. Note Not all Profiler counters are available in the Release Players. Use ProfilerRecorder.Valid to determine if the data is available and that the Profiler can record it. Alternatively, you can use ProfilerRecorderHandle.GetAvailable to enumerate all available Profiler stats. Getting counter values from Profiler Frame data in the Editor To get Profiler counter values when processing Profiler frame data in the Editor, use the FrameDataView API. You can use the FrameDataView.GetCounterValueAsInt, FrameDataView.GetCounterValueAsLong, FrameDataView.GetCounterValueAsFloat and FrameDataView.GetCounterValueAsDouble to get a frame value of the specific counter, like so: using UnityEditor.Profiling; class Example { static int ExtractMyCounterValue(FrameDataView frameData, string counterName) { var counterMarkerId = frameData.GetMarkerId(counterName); return frameData.GetCounterValueAsInt(counterMarkerId); } }"
  },
  "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/profilermarker-guide.html": {
    "href": "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/profilermarker-guide.html",
    "title": "ProfilerMarker API guide | ModularUIPack",
    "summary": "ProfilerMarker API guide Use ProfilerMarker to mark up resource-intensive script code blocks and make them visible in the Unity Profiler. This can be useful because by default, the built-in Unity Profiler does not profile all method calls. Also, if you enable Deep Profiling, it causes a large overhead that significantly slows down your application execution and skews the results. To use the ProfilerMarker API, start your code with ProfilerMarker.Begin() and end it with ProfilerMarker.End() like the following: using UnityEngine; using Unity.Profiling; public class ProfilerMarkerExample { static readonly ProfilerMarker k_MyCodeMarker = new ProfilerMarker(\"My Code\"); void Update() { k_MyCodeMarker.Begin(); Debug.Log(\"This code is being profiled\"); k_MyCodeMarker.End(); } } Unity then records and reports that code block's execution time to the Profiler, and displays it in the CPU Profiler module without the need to use Deep Profiling. It displays it as a new entry in the Hierarchy View of the CPU Profiler module, as follows: Profiler sample in Profiler Window. You can also capture this information with the Recorder profiling API. During development in the Editor and in Development Players, you can use it to get a performance overview of the different parts of your code and to identify performance issues. You can add as many Profiler samples as you like: these calls have zero overhead when Unity deploys them in a non-development build. Begin and End methods are marked with ConditionalAttribute. Unity conditionally compiles them away, and as such, they have zero execution overhead in non-developmenet (Release) builds. The marker field will be present in release build though, taking up memory for it's IntPtr, i.e. 8 Byte. ProfilerMarker represents a named Profiler handle and is the most efficient way of profiling your code. You can use it in any C# code of your application. How to add instrumentation to C# code You can also use ProfilerMarker.Auto() in your code to ensure that ProfilerMarker.End() is automatically called at the end of the code block. The following calls are equivalent: using Unity.Profiling; public class MySystemClass { static readonly ProfilerMarker k_UpdatePerfMarker = new ProfilerMarker(\"MySystem.Update\"); public void Update() { k_UpdatePerfMarker.Begin(); // ... k_UpdatePerfMarker.End(); using (k_UpdatePerfMarker.Auto()) { // ... } } } ProfilerMarker.Auto() can not be compiled out in non-development (Release) builds but just returns null and thus adding minimal overhead. How to add integer or floating point parameters to instrumentation sample Sometimes you might want to provide additional context to your code samples, to identify specific conditions on why the code might have been running for a long time. For example, if your system is carrying out simulations of a number of objects, you can pass the number of objects with a Profiler sample. If you then see an abnormal number along with a long sample duration, that might mean you have to use another thread for simulation or split the CPU work across multiple frames (timeslicing) or even do a game design adjustments to prevent frame drops. using Unity.Profiling; public class MySystemClass { static readonly ProfilerMarker<int> k_PreparePerfMarker = new ProfilerMarker<int>(\"MySystem.Prepare\", \"Objects Count\"); static readonly ProfilerMarker<float> k_SimulatePerfMarker = new ProfilerMarker<float>(ProfilerCategory.Scripts, \"MySystem.Simulate\", \"Objects Density\"); public void Update(int objectsCount) { k_PreparePerfMarker.Begin(objectsCount); // ... k_PreparePerfMarker.End(); using (k_SimulatePerfMarker.Auto(objectsCount * 1.0f)) { // ... } } } Note: The ProfilerMarker supports up to three numeric parameters: ProfilerMarker<TP1>, ProfilerMarker<TP1, TP2> and ProfilerMarker<TP1, TP2, TP3>. How to add string parameter to instrumentation sample Similarly, when you load level or data files you might want to see the name of the level or file which took longer than expected to process. Use ProfilerMarkerExtension methods to pass a string parameter along with a Profiler sample: using Unity.Profiling; public class MySystemClass { static readonly ProfilerMarker k_PreparePerfMarker = new ProfilerMarker(\"MySystem.Prepare\"); public void Prepare(string path) { k_PreparePerfMarker.Begin(path); // ... k_PreparePerfMarker.End(); } } Where to see the sample parameters in Profiler Window The samples that ProfilerMarker.Begin()/End() or ProfilerMarker.Auto generates are visible in Timeline View and Hierarchy View of the CPU module in the Profiler Window. Profiler sample with metadata in Timeline View. Profiler sample with metadata in Hierarchy View."
  },
  "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/upgrade-guide.html": {
    "href": "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/upgrade-guide.html",
    "title": "Profiling Core upgrade guide | ModularUIPack",
    "summary": "Profiling Core upgrade guide You do not need to take any actions to upgrade your project to this package version."
  },
  "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/whats-new.html": {
    "href": "Library/PackageCache/com.unity.profiling.core@1.0.2/Documentation~/whats-new.html",
    "title": "Profiling Core what's new guide | ModularUIPack",
    "summary": "Profiling Core what's new guide This is a new package release. In future package versions, this page will display a summary of updates and changes for that version."
  },
  "Library/PackageCache/com.unity.profiling.core@1.0.2/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.profiling.core@1.0.2/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.profiling.core copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.profiling.core@1.0.2/README.html": {
    "href": "Library/PackageCache/com.unity.profiling.core@1.0.2/README.html",
    "title": "com.unity.profiling.core | ModularUIPack",
    "summary": "com.unity.profiling.core Unity Profiling package provides a set of APIs that allows to add instrumentation and performance metrics to C# code for futher analysis in Unity Profiler."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [1.1.33] - 2022-07-12 Fixed an issue where using Assert.Expect with the same string multiple times can lead to incorrect errors in some cases (DSTR-442). Improved the logging when using multiple Assert.Expect that the logs appear in another order than expected (DSTR-442). Moved the targetPlatform specified when running tests in the TestRunnerApi from the Filter to the ExecutionSettings (DSTR-186). Fixed an issue where an inheritance of UnityPlatformAttribute which was not working (ESTT-70). Fixed the log of excluded platforms which was not displaying the right information. Added filename and linenumber to test finished message (DSTR-505). Add the possibility of running tests in a specified order from a test list (DSTR-494). [1.1.32] - 2022-04-06 Ensured that BuildTargetGroup is set correctly before TestPlayerBuildModifier is invoked (DSTR-394). Added a TestSetting that allows to build an Android App Bundle instead of APK. [1.1.31] - 2022-02-03 Fixed \"Open source code\" on tests when located inside a package. Added editor analytics events. Added buildPlayerPath argument. Path to where built player with tests is saved. [1.1.30] - 2021-10-15 Added validation of IEnumerator return type for parameterized tests with UnityTest attribute (DSTP-743). Fixed runInBackground reset to original value after finishing to run playmode tests (DSTR-248). Fixed issue with circular assembly references when constructing the test tree (DSTR-300). [1.1.29] - 2021-08-12 Nested enumerator execution order fix (DSTR-227). Fix UI not running any tests if run select on a nested namespaces (DSTR-256). [1.1.28] - 2021-06-25 Fix CountDownEvent reference due to com.unity.ext.nunit update. Various performance optimization to fix \"Test execution timed out. No activity received from the player in 600 seconds.\"(DSTR-100). [1.1.27] - 2021-06-15 Fix empty reason on passed tests results xml (DSTR-63) Fix Repeat and Retry attribute for UnityTest in PlayMode (DSTR-237). Remove XDK Xbox One platform after Unity 2020.3 Fixed issue when . suffix was applied to BuildTargets without extension. Added support for GameCoreXboxOne and GameCoreXboxSeries reduced location path length. [1.1.26] - 2021-05-25 Fix html bug in TestRunnerApi API code snippet (DS-1973). Fix typo bug in PreBuildSetup code example (DS-1974). Fix incorrect syntax in command line reference (DS-1971). Fixed a bug where test filter would match project or player path (DSTP-412). Added playerGraphicsAPI TestSettings parameter [1.1.25] - 2021-05-05 Fixed a bug where test filter would match project or player path (DSTP-412). Added playerGraphicsAPI TestSettings parameter [1.1.24] - 2021-03-04 Improving UTF documentation(DSTR-120) Updated \"Actions outside of tests\" section of user manual. Added flow charts to clarify execution order for SetUp/TearDown, TestActions, and complete flow (DSTR-121). Fixed accepted values for scriptingBackend argument to be string literals instead of int values (DSTR-122). Fixed possible values of ResultState to be Passed, Failed, Skipped, Inconclusive, plus labels instead of Success and Failure (DSTR-125). Added NUNit version information (DSTR-130). Added namespace information for LogAsset in user manual (DSTR-124). Added instructions for creating additional sets of tests (DSTR-129). Added information on testResults XML output format and exit codes (DSTR-131). Updated description of testPlatform command line argument to clarify accepted values and their meaning (DSTR-123). Reduce time taken by filtering operations when only a subset of tests is run. Reduced the time taken to rebuild the test tree and to scan for assets a test created but did not delete. Reduce the per-test overhead of running tests in the editor. Added profiler markers around test setup, teardown, and execution. Fixed unstable timeout bug (DSTR-21). [1.1.23] - 2021-01-21 Improving UTF documentation(DSTR-120) Updated \"Actions outside of tests\" section of user manual. Added flow charts to clarify execution order for SetUp/TearDown, TestActions, and complete flow (DSTR-121). Fixed accepted values for scriptingBackend argument to be string literals instead of int values (DSTR-122). Fixed possible values of ResultState to be Passed, Failed, Skipped, Inconclusive, plus labels instead of Success and Failure (DSTR-125). Added NUNit version information (DSTR-130). Added namespace information for LogAsset in user manual (DSTR-124). Added instructions for creating additional sets of tests (DSTR-129). Added information on testResults XML output format and exit codes (DSTR-131). Updated description of testPlatform command line argument to clarify accepted values and their meaning (DSTR-123). [1.1.22] - 2021-01-21 Fixed issue where test result of an explicit test was set to skipped in case it was passing and running from command line with testfilter set to the explicit test (DS-1236). Fixed an issue where tests located in assemblies that did not directly reference any test assemblies were not included (DSTR-30). Fixed an issue where UnitySetup methods were incorrectly being rerun when entering playmode, rather than being skipped (DSTR-68). Internal: Remove ##utp message AssemblyCompilationErrors (DS-1277) Fixed issue where if the timeout was exceeded in SetUp the timeout exception was not thrown(DSTR-21). Removed ability to Enable playmode tests for all assemblies from the TestRunner UI, since it is a deprecated behavior. It enforces to use of assembly definition files (DSTR-45). Fixed typo in LogAssert.cs documentation. [1.1.21] - 2020-12-04 Fixed issue where test result of an explicit test was set to skipped in case it was passing and running from command line with testfilter set to the explicit test (DS-1236). Fixed an issue where tests located in assemblies that did not directly reference any test assemblies were not included (DSTR-30). Fixed an issue where UnitySetup methods were incorrectly being rerun when entering playmode, rather than being skipped (DSTR-68). Internal: Remove ##utp message AssemblyCompilationErrors (ds-1277) Fixed issue where if the timeout was exceeded in SetUp the timeout exception was not thrown(DSTR-21). Removed ability to Enable playmode tests for all assemblies from the TestRunner UI, since it is a deprecated behavior. It enforces to use of assembly definition files (DSTR-45). [1.1.20] - 2020-12-04 The logscope is now available in OneTimeTearDown. Fixed an issue where failing tests would not result in the correct exit code if a domain reload happens after the test has run (DS-1304). If a player build fails, the test specific build settings should be cleaned up and the original values restored as intended (DS-1001). Added better error message when using TestRunCallbackAttribute and the implementation is stripped away (DS-454). Fixed an issue where the test results xml would have a zero end-time for tests executed before a domain reload (DSTR-63). Fixed OpenSource in case of a Test in a nested class (DSTR-6) UnityTests with a domain reload now works correctly in combination with Retry and Repeat attributes (DS-428). Fixed OpenSource in case of Tests located inside a package (DS-432) [1.1.19] - 2020-11-17 Command line runs with an inconclusive test result now exit with exit code 2 (case DS-951). Fixed timeout during UnitySetUp which caoused test to pass instead of failing due to wrong time format. Timeout exeption thrown when timeout time is exeded in the UnitySetup when using WaitForSeconds(n). Updating com.unity.ext.nunit version Method marked with UnityTest that are not returning IEnumerator is now giving a proper error (DS-1059). [1.1.18] - 2020-10-07 Fixed issue of timeout during UnitySetUp which wasn't detected and allowed the test to pass instead of failing (case DSTR-21) [1.1.17] - 2020-10-05 Fixed an issue where the WaitForDomainReload yield instruction would sometimes let the test continue for one frame before the domain reload. Added support for negation in filters using !. E.g. !CategoryToExclude. Fixed an issue where if the first test enters PlayMode from UnitySetup then the test body will not run on consecutive runs (case 1260901). Clear Results button clears the test results in the GUI (DSTR-16) Improved UI in Test Runner window, added new options: Run Selected Tests in player Build/Export project with all tests in player Build/Export project with selected tests in player Fixed issue on loading EditMode or Playmode test tree in the wrong tab when switching between tabs when TestRunner is loading (DS-865) [1.1.16] - 2020-07-09 Follow up on fix when UTF picks up on outdated compilation errors [1.1.15] - 2020-07-02 Fixed an issue where an exception is thrown on getting the enumerator of a UnityTest would result in stopping the test run instead of failing it (case 1212000). Including a trailing semi-colon in a testName filter no longer results in all tests being run (case 1171200). Fixed and issue when Unity Test Framework exits editor on an outdated script compilation error (during api updates) [1.1.14] - 2020-04-03 Added the 'assemblyNames' command line argument for filtering on the assembly level. The dll and project level of the tree view should now correctly show the results when running tests in a player (case 1197026). Optimize usage of player connection when transfering test results (case 1229200). Ignore internal test framework tests assertions (case 1206961). [1.1.13] - 2020-03-16 Fixed an issue where a combination of Entering / Exiting playmode and recompiling scripts would result in the test run repeating (case 1213958). Fixed a regression from 1.1.12 where prefabs left in the scene would be cleaned up to aggressively. Fixed Test execution timed out. No activity received from the player in 600 seconds error when player is not supposed to start (case 1225147) [1.1.12] - 2020-03-02 Now 'Open error line' for a failed UTF test does not throw exceptions for corrupted testable pdb in Editor release mode (case 1118259) Fixed an issue where running a test fixture would also run other fixtures with the same full name (namespace plus classname) in other assemblies (case 1197385). Running tests with the same full name, with a domain reload inbetween, will no longer fail to initialize the fixture of the second class (case 1205240). Running a playmode tests with \"Maximize on Play\" will now correctly show the result of the tests in the test runner window (case 1014908). Fixed an issue where leaving a game object in a scene with a DontSaveInEditor hideFlags would result in an error on cleanup (case 1136883). Now ITestPlayerBuildModifier.ModifyOptions is called as expected when running tests on a device (case 1213845) [1.1.11] - 2020-01-16 Fixed test runner dlls got included into player build (case 1211624) Passing a non-full-path of XML file for -testResults in Unity Batchmode issue resolved, now passing \"result.xml\" creates the result file in the project file directory (case 959078) Respect Script Debugging build setting when running tests [1.1.10] - 2019-12-19 Introduced PostSuccessfulLaunchAction callback Fixed an issue where canceling a UnityTest while it was running would incorrectly mark it as passed instead of canceled. Added command line argument for running tests synchronously. The test search bar now handles null values correctly. The test output pane now retains its size on domain reloads. [1.1.9] - 2019-12-12 Rolled back refactoring to the test run system, as it caused issues in some corner cases. [1.1.8] - 2019-11-15 Ensured that a resumed test run is continued instantly. [1.1.7] - 2019-11-14 Fixed an issue with test runs after domain reload. [1.1.6] - 2019-11-12 Building a player for test will no longer look in unrelated assemblies for relevant attributes. [1.1.5] - 2019-10-23 Fixed a regression to synchronous runs introduced in 1.1.4. [1.1.4] - 2019-10-15 Running tests in batch mode now correctly returns error code 3 (RunError) when a timeout or a build error occurs. Fixed an issue where a test run in a player would time out, if the player takes longer than 10 minutes to run. Added command line argument and api setting for specifying custom heartbeat timeout for running on players. [1.1.3] - 2019-09-23 Fixed a regression where tests in a player would report a timeout after a test run is finished. Made it possible for the ui to change its test items when the test tree changes without script compilation. Added synchronous runs as an option to the TestRunnerApi. [1.1.2] - 2019-09-11 Fixed an issue where Run Selected would run all tests in the category, if a category filter was selected, regardless of what tests were selected. Unsupported attributes used in UnityTests now give an explicit error. Added support for the Repeat and Retry attributes in UnityTests (case 1131940). Tests with a explicit timeout higher than 10 minutes, no longer times out after running longer than 10 minutes when running from command line (case 1125991). Fixed a performance regression in the test runner api result reporting, introduced in 2018.3 (case 1109865). Fixed an issue where parameterized test fixtures would not run if selected in the test tree (case 1092244). Pressing Clear Results now also correctly clears the counters on the test list (case 1181763). Prebuild setup now handles errors logged with Debug.LogError and stops the run if any is logged (case 1115240). It now also supports LogAssert.Expect. [1.1.1] - 2019-08-07 Tests retrieved as a test list with the test runner api incorrectly showed both mode as their TestMode. Fixed a compatibility issue with running tests from rider. [1.1.0] - 2019-07-30 Introduced the TestRunnerApi for running tests programmatically from elsewhere inside the Editor. Introduced yield instructions for recompiling scripts and awaiting a domain reload in Edit Mode tests. Added a button to the Test Runner UI for clearing the results. [1.0.18] - 2019-07-15 Included new full documentation of the test framework. [1.0.17] - 2019-07-11 Fixed an issue where the Test Runner window wouldn’t frame selected items after search filter is cleared. Fixed a regression where playmode test application on the IOS platform would not quit after the tests are done. [1.0.16] - 2019-06-20 Fixed an issue where the Test Runner window popped out if it was docked, or if something else was docked next to it, when re-opened (case 1158961) Fixed a regression where the running standalone playmode tests from the ui would result in an error. [1.0.15] - 2019-06-18 Added new [TestMustExpectAllLogs] attribute, which automatically does LogAssert.NoUnexpectedReceived() at the end of affected tests. See docs for this attribute for more info on usage. Fixed a regression where no tests would be run if multiple filters are specified. E.g. selecting both a whole assembly and an individual test in the ui. Fixed an issue where performing Run Selected on a selected assembly would run all assemblies. Introduced the capability to do a split build and run, when running playmode tests on standalone devices. Fixed an error in ConditionalIgnore, if the condition were not set. [1.0.14] - 2019-05-27 Fixed issue preventing scene creation in IPrebuildSetup.Setup callback when running standalone playmode tests. Fixed an issue where test assemblies would sometimes not be ordered alphabetically. Added module references to the package for the required modules: imgui and jsonserialize. Added a ConditionalIgnore attribute to help ignoring tests only under specific conditions. Fixed a typo in the player test window (case 1148671). [1.0.13] - 2019-05-07 Fixed a regression where results from the player would no longer update correctly in the UI (case 1151147). [1.0.12] - 2019-04-16 Added specific unity release to the package information. [1.0.11] - 2019-04-10 Fixed a regression from 1.0.10 where test-started events were triggered multiple times after a domain reload. [1.0.10] - 2019-04-08 Fixed an issue where test-started events would not be fired correctly after a test performing a domain reload (case 1141530). The UI should correctly run tests inside a nested class, when that class is selected. All actions should now correctly display a prefix when reporting test result. E.g. \"TearDown :\". Errors logged with Debug.LogError in TearDowns now append the error, rather than overwriting the existing result (case 1114306). Incorrect implementations of IWrapTestMethod and IWrapSetUpTearDown now gives a meaningful error. Fixed a regression where the Test Framework would run TearDown in a base class before the inheriting class (case 1142553). Fixed a regression introduced in 1.0.9 where tests with the Explicit attribute could no longer be executed. [1.0.9] - 2019-03-27 Fixed an issue where a corrupt instance of the test runner window would block for a new being opened. Added the required modules to the list of package requirements. Fixed an issue where errors would happen if the test filter ui was clicked before the ui is done loading. Fix selecting items with duplicate names in test hierarchy of Test Runner window (case 987587). Fixed RecompileScripts instruction which we use in tests (case 1128994). Fixed an issue where using multiple filters on tests would sometimes give an incorrect result. [1.0.7] - 2019-03-12 This is the first release of Unity Package com.unity.test-framework. Migrated the test-framework from the current extension in unity."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/CONTRIBUTING.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/CONTRIBUTING.html",
    "title": "Contributing | ModularUIPack",
    "summary": "Contributing If you are interested in contributing, here are some ground rules: ... Define guidelines & rules for what contributors need to know to successfully make Pull requests against your repo ... All contributions are subject to the Unity Contribution Agreement(UCA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "Unity Test Framework overview Edit Mode vs. Play Mode tests Getting started with UTF How to create a new test assembly How to create a test How to run a test How to create a Play Mode test How to run a Play Mode test as standalone Resources Extending UTF How to split the build and run process for standalone Play Mode tests How to run tests programmatically How to get test results How to retrieve the list of tests Reference Running tests from the command-line UnityTest attribute Setup and cleanup at build time IPrebuildSetup IPostBuildCleanup Actions outside of tests Action execution order UnitySetUp and UnityTearDown OuterUnityTestAction Domain Reloads Custom attributes ConditionalIgnore attribute PostBuildCleanup attribute PrebuildSetup attribute TestMustExpectAllLogs attribute TestPlayerBuildModifier attribute TestRunCallback attribute UnityPlatform attribute UnitySetUp attribute UnityTearDown attribute UnityTest attribute Custom equality comparers ColorEqualityComparer FloatEqualityComparer QuaternionEqualityComparer Vector2EqualityComparer Vector3EqualityComparer Vector4EqualityComparer Custom equality comparers with equals operator Test Utils Custom yield instructions IEditModeTestYieldInstruction EnterPlayMode ExitPlayMode RecompileScripts WaitForDomainReload Custom assertion LogAssert Custom constraints Is Parameterized tests MonoBehaviour tests MonoBehaviourTest<T> IMonoBehaviourTest TestRunnerApi ExecutionSettings Filter ITestRunSettings ICallbacks IErrorCallbacks"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/edit-mode-vs-play-mode-tests.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/edit-mode-vs-play-mode-tests.html",
    "title": "Edit Mode vs. Play Mode tests | ModularUIPack",
    "summary": "Edit Mode vs. Play Mode tests Let’s clarify a bit what Play Mode and Edit Mode test means from the Unity Test Framework perspective: Edit Mode tests Edit Mode tests (also known as Editor tests) are only run in the Unity Editor and have access to the Editor code in addition to the game code. With Edit Mode tests it is possible to test any of your Editor extensions using the UnityTest attribute. For Edit Mode tests, your test code runs in the EditorApplication.update callback loop. Note: You can also control entering and exiting Play Mode from your Edit Mode test. This allow your test to make changes before entering Play Mode. Edit Mode tests should meet one of the following conditions: They should have an assembly definition with reference to nunit.framework.dll and has only the Editor as a target platform: \"includePlatforms\": [ \"Editor\" ], Legacy condition: put tests in the project’s Editor folder. Play Mode tests You can run Play Mode tests as a standalone in a Player or inside the Editor. Play Mode tests allow you to exercise your game code, as the tests run as coroutines if marked with the UnityTest attribute. Play Mode tests should correspond to the following conditions: Have an assembly definition with reference to nunit.framework.dll. Have the test scripts located in a folder with the .asmdef file. The test assembly should reference an assembly within the code that you need to test. \"references\": [ \"NewAssembly\" ], \"optionalUnityReferences\": [ \"TestAssemblies\" ], \"includePlatforms\": [], Recommendations Attributes Use the NUnit Test attribute instead of the UnityTest attribute, unless you need to yield special instructions, in Edit Mode, or if you need to skip a frame or wait for a certain amount of time in Play Mode. References It is possible for your Test Assemblies to reference the test tools in UnityEngine.TestRunner and UnityEditor.TestRunner. The latter is only available in Edit Mode. You can specify these references in the Assembly Definition References on the Assembly Definition."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extending.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extending.html",
    "title": "Extending Unity Test Framework | ModularUIPack",
    "summary": "Extending Unity Test Framework It is possible to extend the Unity Test Framework (UTF) in many ways, for custom workflows for your projects and for other packages to build on top of UTF. These extensions are a supplement to the ones already offered by NUnit. Some workflows for extending UTF include: How to split the build and run process for standalone Play Mode tests How to run tests programmatically How to get test results How to retrieve the list of tests"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-get-test-results.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-get-test-results.html",
    "title": "How to get test results | ModularUIPack",
    "summary": "How to get test results You can receive callbacks when the active test run, or individual tests, starts and finishes. You can register callbacks by invoking RegisterCallbacks on the TestRunnerApi with an instance of a class that implements ICallbacks. There are four ICallbacks methods for the start and finish of both the whole run and each level of the test tree. Example An example of how listeners can be set up: Note: Listeners receive callbacks from all test runs, regardless of the registered TestRunnerApi for that instance. public void SetupListeners() { var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.RegisterCallbacks(new MyCallbacks()); } private class MyCallbacks : ICallbacks { public void RunStarted(ITestAdaptor testsToRun) { } public void RunFinished(ITestResultAdaptor result) { } public void TestStarted(ITestAdaptor test) { } public void TestFinished(ITestResultAdaptor result) { if (!result.HasChildren && result.ResultState != \"Passed\") { Debug.Log(string.Format(\"Test {0} {1}\", result.Test.Name, result.ResultState)); } } } Note: The registered callbacks are not persisted on domain reloads. So it is necessary to re-register the callback after a domain reloads, usually with InitializeOnLoad. It is possible to provide a priority as an integer as the second argument when registering a callback. This influences the invocation order of different callbacks. The default value is zero. It is also possible to provide RegisterCallbacks with a class instance that implements IErrorCallbacks that is an extended version of ICallbacks. IErrorCallbacks also has a callback method for OnError that invokes if the run fails to start, for example, due to compilation errors or if an IPrebuildSetup throws an exception."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-retrieve-test-list.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-retrieve-test-list.html",
    "title": "How to retrieve the list of tests | ModularUIPack",
    "summary": "How to retrieve the list of tests It is possible to use the TestRunnerApi to retrieve the test tree for a given test mode (Edit Mode or Play Mode). You can retrieve the test tree by invoking RetrieveTestList with the desired TestMode and a callback action, with an ITestAdaptor representing the test tree. Example The following example retrieves the test tree for Edit Mode tests and prints the number of total test cases: var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.RetrieveTestList(TestMode.EditMode, (testRoot) => { Debug.Log(string.Format(\"Tree contains {0} tests.\", testRoot.TestCaseCount)); });"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-run-tests.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-run-tests.html",
    "title": "How to run tests programmatically | ModularUIPack",
    "summary": "How to run tests programmatically Filters Run tests by calling Execute on the TestRunnerApi, and provide some execution settings that consists of a Filter. The Filter specifies what tests to run. Example The following is an example of how to run all Play Mode tests in a project: var testRunnerApi = ScriptableObject.CreateInstance<TestRunnerApi>(); var filter = new Filter() { testMode = TestMode.PlayMode }; testRunnerApi.Execute(new ExecutionSettings(filter)); Multiple filter values It is possible to specify a more specific filter by filling out the fields on the Filter class in more detail. Many of the fields allow for multiple values. The runner tries to match tests against at least one of the values provided and then runs any tests that match. Example In this example, the API runs tests with full names that fit either of the two names provided: var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.Execute(new ExecutionSettings(new Filter() { testNames = new[] {\"MyTestClass.NameOfMyTest\", \"SpecificTestFixture.NameOfAnotherTest\"} })); Multiple filter fields If using multiple different fields on the filter, then it matches against tests that fulfill all the different fields. Example In this example, it runs any test that fits either of the two test names, and that also belongs to a test assembly that fits the given name. var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.Execute(new ExecutionSettings(new Filter() { assemblyNames = new [] {\"MyTestAssembly\"}, testNames = new [] {\"MyTestClass.NameOfMyTest\", \"MyTestClass.AnotherNameOfATest\"} })); Multiple constructor filters The execution settings take one or more filters in its constructor. If there is no filter provided, then it runs all Edit Mode tests by default. If there are multiple filters provided, then a test runs if it matches any of the filters. Example In this example, it runs any tests that are either in the assembly named MyTestAssembly or if the full name of the test matches either of the two provided test names: var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.Execute(new ExecutionSettings( new Filter() { assemblyNames = new[] {\"MyTestAssembly\"}, }, new Filter() { testNames = new[] {\"MyTestClass.NameOfMyTest\", \"MyTestClass.AnotherNameOfATest\"} } )); Note: Specifying different test modes or platforms in each Filter is not currently supported. The test mode and platform is from the first Filter only and defaults to Edit Mode, if not supplied."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/getting-started.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/getting-started.html",
    "title": "Getting started with Unity Test Framework | ModularUIPack",
    "summary": "Getting started with Unity Test Framework To access the Unity Test Framework (UTF) in the Unity Editor, open the Test Runner window; go to Window > General > Test Runner. To get started with UTF, follow the workflows below: How to create a new test assembly How to create a test How to run a test How to create a Play Mode test How to run a Play Mode test as standalone For further information, see the resources and reference sections."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/index.html",
    "title": "About Unity Test Framework | ModularUIPack",
    "summary": "About Unity Test Framework The Unity Test Framework (UTF) enables Unity users to test their code in both Edit Mode and Play Mode, and also on target platforms such as Standalone, Android, iOS, etc. This package provides a standard test framework for users of Unity and developers at Unity so that both benefit from the same features and can write tests the same way. UTF uses a Unity integration of NUnit library, which is an open-source unit testing library for .Net languages. UTF currently uses NUnit version 3.5. For more information about NUnit, see the official NUnit website and the NUnit documentation. Note: UTF is not a new concept or toolset; it is an adjusted and more descriptive naming for the toolset otherwise known as Unity Test Runner, which is now available as this package. Installing Unity Test Framework To install this package, follow the instructions in the Package Manager documentation. Note: Search for the Test Framework package. In Unity 2019.2 and higher, you may need to enable the package before use. Using Unity Test Framework To learn how to use the Unity Test Framework package in your project, read the manual. Technical details Requirements This version of the Unity Test Framework is compatible with the following versions of the Unity Editor: 2019.2 and later. Known limitations Unity Test Framework version 1.0.18 includes the following known limitations: The UnityTest attribute does not support WSA platform. The UnityTest attribute does not support Parameterized tests (except for ValueSource). The UnityTest attribute does not support the NUnit Repeat attribute. Nested test fixture cannot run from the Editor UI. When using the NUnit Retry attribute in PlayMode tests, it throws InvalidCastException. Async tests are not supported in the current version of UTF. Package contents The following table indicates the root folders in the package where you can find useful resources: Location Description /com.unity.test-framework/Documentation~ Contains the documentation for the package. Document revision history Date Reason February 4, 2021 Applied user feedback to the documentation. Matches package version 1.1.22 August 23, 2019 Applied feedback to the documentation July 25, 2019 Documentation updated to include features in version 1.1.0 July 11, 2019 Documentation updated. Matches package version 1.0.18 May 27, 2019 Documentation created. Matches package version 1.0.14"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/manual.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/manual.html",
    "title": "Unity Test Framework manual | ModularUIPack",
    "summary": "Unity Test Framework manual This is the manual for the Unity Test Framework (UTF): Introduction Unity Test Framework overview Edit Mode vs. Play Mode tests Getting started Getting started with UTF Workflows: How to create a new test assembly How to create a test How to run a test How to create a Play Mode test How to run a Play Mode test in player Resources Extending UTF Extending UTF Workflows: How to split the build and run process for standalone Play Mode tests How to run tests programmatically How to get test results How to retrieve the list of tests Reference Running tests from the command-line UnityTest attribute Setup and cleanup at build time IPrebuildSetup IPostBuildCleanup Actions outside of tests Action execution order UnitySetUp and UnityTearDown OuterUnityTestAction Domain Reloads Custom attributes ConditionalIgnore attribute PostBuildCleanup attribute PrebuildSetup attribute TestMustExpectAllLogs attribute TestPlayerBuildModifier attribute TestRunCallback attribute UnityPlatform attribute UnitySetUp attribute UnityTearDown attribute UnityTest attribute Custom equality comparers ColorEqualityComparer FloatEqualityComparer QuaternionEqualityComparer Vector2EqualityComparer Vector3EqualityComparer Vector4EqualityComparer Custom equality comparers with equals operator Test Utils Custom yield instructions IEditModeTestYieldInstruction EnterPlayMode ExitPlayMode Custom assertion LogAssert Custom constraints Is Parameterized tests MonoBehaviour tests MonoBehaviourTest IMonoBehaviourTest TestRunnerApi ExecutionSettings Filter ITestRunSettings ICallbacks IErrorCallbacks"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-actions-outside-tests.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-actions-outside-tests.html",
    "title": "Actions outside of tests | ModularUIPack",
    "summary": "Actions outside of tests When writing tests, it is possible to avoid duplication of code by using the SetUp and TearDown methods built into NUnit. The Unity Test Framework has extended these methods with extra functionality, which can yield commands and skip frames, in the same way as UnityTest. Action execution order The actions related to a test run in the following order: Attributes implementing IApplyToContext Any attribute implementing OuterUnityTestAction has its BeforeTest invoked Tests with UnitySetUp methods in their test class Attributes implementing IWrapSetUpTearDown Any method with the [SetUp]) attribute Action attributes have their BeforeTest method invoked Attributes implementing IWrapTestMethod The test itself runs Action attributes have their AfterTest method invoked Any method with the TearDown attribute Tests with UnityTearDown methods in their test class Any OuterUnityTestAction has its AfterTest invoked The list of actions is the same for both Test and UnityTest. Execution order flow Note: Some browsers do not support SVG image files. If the image above does not display properly (for example, if you cannot see any text), please try another browser, such as Google Chrome or Mozilla Firefox. Domain Reloads In Edit Mode tests it is possible to yield instructions that can result in a domain reload, such as entering or exiting Play Mode (see Custom yield instructions). When a domain reload happens, all non-Unity actions (such as OneTimeSetup and Setup) are rerun before the code, which initiated the domain reload, continues. Unity actions (such as UnitySetup) are not rerun. If the Unity action is the code that initiated the domain reload, then the rest of the code in the UnitySetup method runs after the domain reload."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-conditionalignore.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-conditionalignore.html",
    "title": "ConditionalIgnore attribute | ModularUIPack",
    "summary": "ConditionalIgnore attribute This attribute is an alternative to the standard Ignore attribute in NUnit. It allows for ignoring tests only under a specified condition. The condition evaluates during OnLoad, referenced by ID. Example The following example shows a method to use the ConditionalIgnore attribute to ignore a test if the Unity Editor is running macOS: using UnityEditor; using NUnit.Framework; using UnityEngine.TestTools; [InitializeOnLoad] public class OnLoad { static OnLoad() { var editorIsOSX = false; #if UNITY_EDITOR_OSX editorIsOSX = true; #endif ConditionalIgnoreAttribute.AddConditionalIgnoreMapping(\"IgnoreInMacEditor\", editorIsOSX); } } public class MyTestClass { [Test, ConditionalIgnore(\"IgnoreInMacEditor\", \"Ignored on Mac editor.\")] public void TestNeverRunningInMacEditor() { Assert.Pass(); } } Note: You can only use InitializeOnLoad in Edit Mode tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testmustexpectalllogs.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testmustexpectalllogs.html",
    "title": "TestMustExpectAllLogs attribute | ModularUIPack",
    "summary": "TestMustExpectAllLogs attribute The presence of this attribute causes the Test Runner to expect every single log. By default, the Test Runner only fails on error logs, but TestMustExpectAllLogs fails on warnings and info level messages as well. It is the same as calling the method LogAssert.NoUnexpectedReceived at the bottom of every affected test. Assembly-wide usage You can apply this attribute to test assemblies (that affects every test in the assembly), fixtures (affects every test in the fixture), or on individual test methods. It is also inherited from base fixtures. The MustExpect property (true by default) lets you enable or disable the higher level value. For example when migrating an assembly to this more strict checking method, you might attach [assembly:TestMustExpectAllLogs] to the assembly itself, but then whitelist failing fixtures and test methods with [TestMustExpectAllLogs(MustExpect=false)] until you have migrated them. This also means new tests in that assembly would have the more strict checking."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testplayerbuildmodifier.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testplayerbuildmodifier.html",
    "title": "TestPlayerBuildModifier attribute | ModularUIPack",
    "summary": "TestPlayerBuildModifier attribute You can use the TestPlayerBuildModifier attribute to accomplish a couple of different scenarios: Modify the Player build options for Play Mode tests It is possible to change the BuildPlayerOptions for the test Player, to achieve custom behavior when running Play Mode tests. Modifying the build options allows for changing the target location of the build as well as changing BuildOptions. To modify the BuildPlayerOptions, do the following: Implement the ITestPlayerBuildModifier Reference the implementation type in a TestPlayerBuildModifier attribute on an assembly level. Example using UnityEditor; using UnityEditor.TestTools; [assembly:TestPlayerBuildModifier(typeof(BuildModifier))] public class BuildModifier : ITestPlayerBuildModifier { public BuildPlayerOptions ModifyOptions(BuildPlayerOptions playerOptions) { if (playerOptions.target == BuildTarget.iOS) { playerOptions.options |= BuildOptions.SymlinkLibraries; // Enable symlink libraries when running on iOS } playerOptions.options |= BuildOptions.AllowDebugging; // Enable allow Debugging flag on the test Player. return playerOptions; } } Note: When building the Player, it includes all TestPlayerBuildModifier attributes across all loaded assemblies, independent of the currently used test filter. As the implementation references the UnityEditor namespace, the code is typically implemented in an Editor only assembly, as the UnityEditor namespace is not available otherwise. Split build and run It is possible to use the Unity Editor for building the Player with tests, without running the tests. This allows for running the Player on e.g. another machine. In this case, it is necessary to modify the Player to build and implement a custom handling of the test result. By using TestPlayerBuildModifier, you can alter the BuildOptions to not start the Player after the build as well as build the Player at a specific location. Combined with PostBuildCleanup, you can automatically exit the Editor on completion of the build. Example using System; using System.IO; using System.Linq; using Tests; using UnityEditor; using UnityEditor.TestTools; using UnityEngine; using UnityEngine.TestTools; [assembly:TestPlayerBuildModifier(typeof(HeadlessPlayModeSetup))] [assembly:PostBuildCleanup(typeof(HeadlessPlayModeSetup))] namespace Tests { public class HeadlessPlayModeSetup : ITestPlayerBuildModifier, IPostBuildCleanup { private static bool s_RunningPlayerTests; public BuildPlayerOptions ModifyOptions(BuildPlayerOptions playerOptions) { // Do not launch the player after the build completes. playerOptions.options &= ~BuildOptions.AutoRunPlayer; // Set the headlessBuildLocation to the output directory you desire. It does not need to be inside the project. var headlessBuildLocation = Path.GetFullPath(Path.Combine(Application.dataPath, \".//..//PlayModeTestPlayer\")); var fileName = Path.GetFileName(playerOptions.locationPathName); if (!string.IsNullOrEmpty(fileName)) { headlessBuildLocation = Path.Combine(headlessBuildLocation, fileName); } playerOptions.locationPathName = headlessBuildLocation; // Instruct the cleanup to exit the Editor if the run came from the command line. // The variable is static because the cleanup is being invoked in a new instance of the class. s_RunningPlayerTests = true; return playerOptions; } public void Cleanup() { if (s_RunningPlayerTests && IsRunningTestsFromCommandLine()) { // Exit the Editor on the next update, allowing for other PostBuildCleanup steps to run. EditorApplication.update += () => { EditorApplication.Exit(0); }; } } private static bool IsRunningTestsFromCommandLine() { var commandLineArgs = Environment.GetCommandLineArgs(); return commandLineArgs.Any(value => value == \"-runTests\"); } } } If the Editor is still running after the Play Mode tests have run, the Player tries to report the results back, using PlayerConnection, which has a reference to the IP address of the Editor machine, when built. To implement a custom way of reporting the results of the test run, let one of the assemblies in the Player include a TestRunCallback. At RunFinished, it is possible to get the full test report as XML from the NUnit test result by calling result.ToXml(true). You can save the result and then save it on the device or send it to another machine as needed."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testruncallback.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testruncallback.html",
    "title": "TestRunCallback attribute | ModularUIPack",
    "summary": "TestRunCallback attribute It is possible for the test framework to invoke callbacks as the current test run progresses. To do this, there is a TestRunCallback attribute which takes the type of ITestRunCallback implementation. You can invoke the callbacks with NUnit ITest and ITestResult classes. At the RunStarted and RunFinished methods, the test and test results are for the whole test tree. These methods invoke at each node in the test tree; first with the whole test assembly, then with the test class, and last with the test method. From these callbacks, it is possible to read the partial or the full results, and it is furthermore possible to save the XML version of the result for further processing or continuous integration. Example using NUnit.Framework.Interfaces; using UnityEngine; using UnityEngine.TestRunner; [assembly:TestRunCallback(typeof(MyTestRunCallback))] public class MyTestRunCallback : ITestRunCallback { public void RunStarted(ITest testsToRun) { } public void RunFinished(ITestResult testResults) { } public void TestStarted(ITest test) { } public void TestFinished(ITestResult result) { if (!result.Test.IsSuite) { Debug.Log($\"Result of {result.Name}: {result.ResultState.Status}\"); } } } Note: The TestRunCallback does not need any references to the UnityEditor namespace and is thus able to run in standalone Players, on the Player side."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unityplatform.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unityplatform.html",
    "title": "UnityPlatform attribute | ModularUIPack",
    "summary": "UnityPlatform attribute Use this attribute to define a specific set of platforms you want or do not want your test(s) to run on. You can use this attribute on the test method, test class, or test assembly level. Use the supported RuntimePlatform enumeration values to specify the platforms. You can also specify which platforms to test by passing one or more RuntimePlatform values along with or without the include or exclude properties as parameters to the Platform attribute constructor. The test(s) skips if the current target platform is: Not explicitly specified in the included platforms list In the excluded platforms list using UnityEngine; using UnityEngine.TestTools; using NUnit.Framework; [TestFixture] public class TestClass { [Test] [UnityPlatform(RuntimePlatform.WindowsPlayer)] public void TestMethod() { Assert.AreEqual(Application.platform, RuntimePlatform.WindowsPlayer); } } Properties Syntax Description RuntimePlatform[] exclude List the platforms you do not want to have your tests run on. RuntimePlatform[] include A subset of platforms you need to have your tests run on."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unitytest.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unitytest.html",
    "title": "UnityTest attribute | ModularUIPack",
    "summary": "UnityTest attribute UnityTest attribute is the main addition to the standard NUnit library for the Unity Test Framework. This type of unit test allows you to skip a frame from within a test (so background tasks can finish) or give certain commands to the Unity Editor, such as performing a domain reload or entering Play Mode from an Edit Mode test. In Play Mode, the UnityTest attribute runs as a coroutine. Whereas Edit Mode tests run in the EditorApplication.update callback loop. The UnityTest attribute is, in fact, an alternative to the NUnit Test attribute, which allows yielding instructions back to the framework. Once the instruction is complete, the test run continues. If you yield return null, you skip a frame. That might be necessary to ensure that some changes do happen on the next iteration of either the EditorApplication.update loop or the game loop. Edit Mode example The most simple example of an Edit Mode test could be the one that yields null to skip the current frame and then continues to run: [UnityTest] public IEnumerator EditorUtility_WhenExecuted_ReturnsSuccess() { var utility = RunEditorUtilityInTheBackground(); while (utility.isRunning) { yield return null; } Assert.IsTrue(utility.isSuccess); } Play Mode example In Play Mode, a test runs as a coroutine attached to a MonoBehaviour. So all the yield instructions available in coroutines, are also available in your test. From a Play Mode test you can use one of Unity’s Yield Instructions: WaitForFixedUpdate: to ensure changes expected within the next cycle of physics calculations. WaitForSeconds: if you want to pause your test coroutine for a fixed amount of time. Be careful about creating long-running tests. The simplest example is to yield to WaitForFixedUpdate: [UnityTest] public IEnumerator GameObject_WithRigidBody_WillBeAffectedByPhysics() { var go = new GameObject(); go.AddComponent<Rigidbody>(); var originalPosition = go.transform.position.y; yield return new WaitForFixedUpdate(); Assert.AreNotEqual(originalPosition, go.transform.position.y); }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-command-line.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-command-line.html",
    "title": "Running tests from the command line | ModularUIPack",
    "summary": "Running tests from the command line It’s pretty simple to run a test project from the command line. Here is an example in Windows: Unity.exe -runTests -batchmode -projectPath PATH_TO_YOUR_PROJECT -testResults C:\\temp\\results.xml -testPlatform PS4 Note: Use the -batchmode option when running tests on the command line to remove the need for manual user inputs. For more information, see Unity Command line arguments. Test Framework command line arguments forgetProjectPath Don't save your current Project into the Unity launcher/hub history. runTests Runs tests in the Project. testCategory A semicolon-separated list of test categories to include in the run. A semi-colon separated list should be formatted as a string enclosed in quotation marks, e.g. testCategory \"firstCategory;secondCategory\". If using both testFilter and testCategory, then only tests that match both are run. This argument supports negation using '!'. If using '!MyCategory' then no tests with the 'MyCategory' category will be included in the run. testFilter A semicolon-separated list of test names to run, or a regular expression pattern to match tests by their full name. A semi-colon separated list should be formatted as a string enclosed in quotation marks, e.g. testFilter \"Low;Medium\". This argument supports negation using '!'. If using the test filter '!MyNamespace.Something.MyTest', then all tests except that test will be run. testPlatform The platform to run tests on. Accepted values: EditMode Edit Mode tests. Equivalent to running tests from the EditMode tab of the Test Runner window. PlayMode Play Mode tests that run in the Editor. Equivalent to running tests from the PlayMode tab of the Test Runner window. Any value from the BuildTarget enum. Play Mode tests that run on a player built for the specified platform. Equivalent to using the Run all tests (<target_platform>) dropdown in the PlayMode tab of the Test Runner window. Note: If no value is specified for this argument, tests run in Edit Mode. assemblyNames A semicolon-separated list of test assemblies to include in the run. A semi-colon separated list should be formatted as a string enclosed in quotation marks, e.g. assemblyNames \"firstAssembly;secondAssembly\". testResults The path where Unity should save the result file. By default, Unity saves it in the Project’s root folder. Test results follow the XML format as defined by NUnit, see the NUnit documentation. There is currently no common definition for exit codes reported by individual Unity components under test. The best way to understand the source of a problem is the content of error messages and stack traces. playerHeartbeatTimeout The time, in seconds, the editor should wait for heartbeats after starting a test run on a player. This defaults to 10 minutes. runSynchronously If included, the test run will run tests synchronously, guaranteeing that all tests runs in one editor update call. Note that this is only supported for EditMode tests, and that tests which take multiple frames (i.e. [UnityTest] tests, or tests with [UnitySetUp] or [UnityTearDown] scaffolding) will be filtered out. testSettingsFile Path to a TestSettings.json file that allows you to set up extra options for your test run. An example of the TestSettings.json file could look like this: { \"scriptingBackend\":\"WinRTDotNET\", \"Architecture\":null, \"apiProfile\":0 } apiProfile The .Net compatibility level. Set to one of the following values: 1 - .Net 2.0 2 - .Net 2.0 Subset 3 - .Net 4.6 5 - .Net micro profile (used by Mono scripting backend if Stripping Level is set to Use micro mscorlib) 6 - .Net Standard 2.0 appleEnableAutomaticSigning Sets option for automatic signing of Apple devices. appleDeveloperTeamID Sets the team ID for the apple developer account. architecture Target architecture for Android. Set to one of the following values: None = 0 ARMv7 = 1 ARM64 = 2 X86 = 4 All = 4294967295 iOSManualProvisioningProfileType Set to one of the following values: 0 - Automatic 1 - Development 2 - Distribution iOSManualProvisioningProfileID scriptingBackend Set to one of the following values, which should be given as a string literal enclosed in quotes: Mono2x IL2CPP WinRTDotNET playerGraphicsAPI Set graphics API that will be used during test execution in the player. Value can be any GraphicsDeviceType as a string literal enclosed in quotes. Value will only be set if it is supported on the target platform. androidBuildAppBundle A boolean setting that allows to build an Android App Bundle (AAB) instead of APK for tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-color.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-color.html",
    "title": "ColorEqualityComparer | ModularUIPack",
    "summary": "ColorEqualityComparer Use this class to compare two Color objects. ColorEqualityComparer.Instance has default calculation error value set to 0.01f. To set a test specific error value instantiate a comparer instance using the one argument constructor. Static properties Syntax Description Instance A singleton instance of the comparer with a default error value set to 0.01f. Constructors Syntax Description ColorEqualityComparer(float error) Creates an instance of the comparer with a custom error value. Public methods Syntax Description bool Equals(Color expected, Color actual); Compares the actual and expected Color objects for equality using Utils.AreFloatsEqualAbsoluteError to compare the RGB and Alpha attributes of Color. Returns true if expected and actual objects are equal otherwise, it returns false. Example [TestFixture] public class ColorEqualityTest { [Test] public void GivenColorsAreEqual_WithAllowedCalculationError() { // Using default error var firstColor = new Color(0f, 0f, 0f, 0f); var secondColor = new Color(0f, 0f, 0f, 0f); Assert.That(firstColor, Is.EqualTo(secondColor).Using(ColorEqualityComparer.Instance)); // Allowed error 10e-5f var comparer = new ColorEqualityComparer(10e-5f); firstColor = new Color(0f, 0f, 0f, 1f); secondColor = new Color(10e-6f, 0f, 0f, 1f); Assert.That(firstColor, Is.EqualTo(secondColor).Using(comparer)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-equals.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-equals.html",
    "title": "Custom equality comparers with equals operator | ModularUIPack",
    "summary": "Custom equality comparers with equals operator If you need to compare Vectors using the overloaded operator == (see Vector2.operator ==, Vector3.operator ==, and Vector4.operator ==) you should use the respective comparer implementations: Vector2ComparerWithEqualsOperator Vector3ComparerWithEqualsOperator Vector4ComparerWithEqualsOperator The interface is the same as for other equality comparers except the public constructor error parameter is inapplicable in this case. Example [TestFixture] public class Vector3Test { [Test] public void VerifyThat_TwoVector3ObjectsAreEqual() { var actual = new Vector3(10e-7f, 10e-7f, 10e-7f); var expected = new Vector3(0f, 0f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(Vector3ComparerWithEqualsOperator.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-float.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-float.html",
    "title": "FloatEqualityComparer | ModularUIPack",
    "summary": "FloatEqualityComparer Use this class to compare two float values for equality with NUnit constraints. Use FloatEqualityComparer.Instance comparer to have the default error value set to 0.0001f. For any other error, use the one argument constructor to create a comparer. Static Properties Syntax Description Instance A singleton instance of the comparer with a default error value set to 0.0001f. Constructors Syntax Description FloatEqualityComparer(float allowedError) Creates an instance of the comparer with a custom error value. Public methods Syntax Description bool Equals(float expected, float actual); Compares the actual and expected float values for equality using Utils.AreFloatsEqual. Example [TestFixture] public class FloatsTest { [Test] public void VerifyThat_TwoFloatsAreEqual() { var comparer = new FloatEqualityComparer(10e-6f); var actual = -0.00009f; var expected = 0.00009f; Assert.That(actual, Is.EqualTo(expected).Using(comparer)); // Default relative error 0.0001f actual = 10e-8f; expected = 0f; Assert.That(actual, Is.EqualTo(expected).Using(FloatEqualityComparer.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-quaternion.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-quaternion.html",
    "title": "QuaternionEqualityComparer | ModularUIPack",
    "summary": "QuaternionEqualityComparer Use this utility to compare two Quaternion objects for equality with NUnit assertion constraints. Use the static instance QuaternionEqualityComparer.Instance to have the default calculation error value set to 0.00001f. For any other custom error value, use the one argument constructor. Static properties Syntax Description Instance A comparer instance with the default error value 0.00001f. Constructors Syntax Description QuaternionEqualityComparer(float allowedError) Creates an instance of the comparer with a custom allowed error value. Public methods Syntax Description bool Equals(Quaternion expected, Quaternion actual) Compares the actual and expected Quaternion objects for equality using the Quaternion.Dot method. Example [TestFixture] public class QuaternionTest { [Test] public void VerifyThat_TwoQuaternionsAreEqual() { var actual = new Quaternion(10f, 0f, 0f, 0f); var expected = new Quaternion(1f, 10f, 0f, 0f); var comparer = new QuaternionEqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); //Using default error 0.00001f actual = new Quaternion(10f, 0f, 0.1f, 0f); expected = new Quaternion(1f, 10f, 0.1f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(QuaternionEqualityComparer.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector2.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector2.html",
    "title": "Vector2EqualityComparer | ModularUIPack",
    "summary": "Vector2EqualityComparer Use this class to compare two Vector2 objects for equality with NUnit constraints. Use the static Vector2EqualityComparer.Instance to have the calculation error value set to default 0.0001f. For any other error value, instantiate a new comparer object with the one argument constructor. Static properties Syntax Description Instance A comparer instance with the default error value set to 0.0001f. Constructors Syntax Description Vector2EqualityComparer(float error) Creates an instance with a custom error value. Public methods Syntax Description Equals(Vector2 expected, Vector2 actual) Compares the actual and expected Vector2 objects for equality using the Utils.AreFloatsEqual method. Example [TestFixture] public class Vector2Test { [Test] public void VerifyThat_TwoVector2ObjectsAreEqual() { // Custom calculation error var actual = new Vector2(10e-7f, 10e-7f); var expected = new Vector2(0f, 0f); var comparer = new Vector2EqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); //Default error 0.0001f actual = new Vector2(0.01f, 0.01f); expected = new Vector2(0.01f, 0.01f); Assert.That(actual, Is.EqualTo(expected).Using(Vector2EqualityComparer.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector3.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector3.html",
    "title": "Vector3EqualityComparer | ModularUIPack",
    "summary": "Vector3EqualityComparer Use this class to compare two Vector3 objects for equality with NUnit constraints. Call Vector3EqualityComparer.Instance comparer to perform a comparison with the default calculation error value 0.0001f. To specify a different error value, use the one argument constructor to instantiate a new comparer. Static properties Syntax Description Instance A comparer instance with the default calculation error value equal to 0.0001f. Constructors Syntax Description Vector3EqualityComparer(float allowedError) Creates an instance with a custom error value. Public methods Syntax Description bool Equals(Vector3 expected, Vector3 actual) Compares the actual and expected Vector3 objects for equality using Utils.AreFloatsEqual to compare the x, y, and z attributes of Vector3. Example [TestFixture] public class Vector3Test { [Test] public void VerifyThat_TwoVector3ObjectsAreEqual() { // Custom error 10e-6f var actual = new Vector3(10e-8f, 10e-8f, 10e-8f); var expected = new Vector3(0f, 0f, 0f); var comparer = new Vector3EqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); //Default error 0.0001f actual = new Vector3(0.01f, 0.01f, 0f); expected = new Vector3(0.01f, 0.01f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(Vector3EqualityComparer.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector4.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector4.html",
    "title": "Vector4EqualityComparer | ModularUIPack",
    "summary": "Vector4EqualityComparer Use this class to compare two Vector4 objects for equality with NUnit constraints. Call Vector4EqualityComparer.Instance to perform comparisons using default calculation error value 0.0001f. To set a custom test value, instantiate a new comparer using the one argument constructor. Static Properties Syntax Description Vector4EqualityComparer Instance A comparer instance with the default calculation error value set to 0.0001f. Constructors Syntax Description Vector4EqualityComparer(float allowedError) Creates an instance with a custom error value. Public methods Syntax Description bool Equals(Vector4 expected, Vector4 actual); Compares the actual and expected Vector4 objects for equality using Utils.AreFloatsEqual to compare the x, y, z, and w attributes of Vector4. Example [TestFixture] public class Vector4Test { [Test] public void VerifyThat_TwoVector4ObjectsAreEqual() { // Custom error 10e-6f var actual = new Vector4(0, 0, 1e-6f, 1e-6f); var expected = new Vector4(1e-6f, 0f, 0f, 0f); var comparer = new Vector4EqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); // Default error 0.0001f actual = new Vector4(0.01f, 0.01f, 0f, 0f); expected = new Vector4(0.01f, 0.01f, 0f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(Vector4EqualityComparer.Instance)); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-assertion.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-assertion.html",
    "title": "Custom assertion | ModularUIPack",
    "summary": "Custom assertion A test fails if Unity logs a message other than a regular log or warning message. Use LogAssert to check for an expected message in the log so that the test does not fail when Unity logs the message. Use LogAssert.Expect before running the code under test, as the check for expected logs runs at the end of each frame. A test also reports a failure, if an expected message does not appear, or if Unity does not log any regular log or warning messages. Example [Test] public void LogAssertExample() { // Expect a regular log message LogAssert.Expect(LogType.Log, \"Log message\"); // The test fails without the following expected log message Debug.Log(\"Log message\"); // An error log Debug.LogError(\"Error message\"); // Without expecting an error log, the test would fail LogAssert.Expect(LogType.Error, \"Error message\"); } LogAssert LogAssert lets you expect Unity log messages that would otherwise cause the test to fail. It is available under the namespace UnityEngine.TestTools, see the Scripting API for more details. Static properties Syntax Description bool ignoreFailingMessages Set this property to true to prevent unexpected error log messages from triggering an assertion. By default, it is false. Static Methods Syntax Description void Expect(LogType type, string message); void Expect(LogType type, Regex message); Verifies that a log message of a specified type appears in the log. A test won’t fail from an expected error, assertion, or exception log message. It does fail if an expected message does not appear in the log. void NoUnexpectedReceived(); Triggers an assertion when receiving any log messages and fails the test if some are unexpected messages. If multiple tests need to check for no received unexpected logs, consider using the TestMustExpectAllLogs attribute instead. Expect string message void Expect(LogType type, string message); Parameters Syntax Description LogType type A type of log to expect. It can take one of the LogType enum values. string message A string value that should equate to the expected message. Expect Regex message void Expect(LogType type, Regex message); Parameters Syntax Description LogType type A type of log to expect. It can take one of the LogType enum values. Regex message A regular expression pattern to match the expected message."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-attributes.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-attributes.html",
    "title": "Custom attributes | ModularUIPack",
    "summary": "Custom attributes As a part of UTF’s public API we provide the following attributes: ConditionalIgnore attribute PostBuildCleanup attribute PrebuildSetup attribute TestMustExpectAllLogs attribute TestPlayerBuildModifier attribute TestRunCallback attribute UnityPlatform attribute UnitySetUp attribute UnityTearDown attribute UnityTest attribute"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-constraints.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-constraints.html",
    "title": "Custom constraints | ModularUIPack",
    "summary": "Custom constraints NUnit allows you to write test assertions in a more descriptive and human readable way using the Assert.That mechanism, where the first parameter is an object under test and the second parameter describes conditions that the object has to meet. Is We’ve extended NUnit API with a custom constraint type and declared an overlay Is class. To resolve ambiguity between the original implementation and the custom one you must explicitly declare it with a using statement or via addressing through the full type name UnityEngine.TestTools.Constraints.Is. Static Methods Syntax Description AllocatingGCMemory A constraint type that invokes the delegate you provide as the parameter of Assert.That and checks whether it causes any GC memory allocations. It passes if any GC memory is allocated and fails if not. Example using Is = UnityEngine.TestTools.Constraints.Is; class MyTestClass { [Test] public void MyTest() { Assert.That(() => { var i = new int[500]; }, Is.AllocatingGCMemory()); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-equality-comparers.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-equality-comparers.html",
    "title": "Custom equality comparers | ModularUIPack",
    "summary": "Custom equality comparers To enable easier verification of custom Unity type values in your tests we provide you with some custom equality comparers: ColorEqualityComparer FloatEqualityComparer QuaternionEqualityComparer Vector2EqualityComparer Vector3EqualityComparer Vector4EqualityComparer Use these classes to compare two objects of the same type for equality within the range of a given tolerance using NUnit or custom constraints . Call Instance to apply the default calculation error value to the comparison. To set a specific error value, instantiate a new comparer object using a one argument constructor ctor(float error). Static properties Syntax Description Instance A singleton instance of the comparer with a predefined default error value. Constructors Syntax Description ctor(float error) Creates an instance of comparer with a custom error value.allowedError. The relative error to be considered while comparing two values. Public methods Syntax Description bool Equals(T expected, T actual); Compares the actual and expected objects for equality using a custom comparison mechanism. Returns true if expected and actual objects are equal, otherwise it returns false."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-yield-instructions.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-yield-instructions.html",
    "title": "Custom yield instructions | ModularUIPack",
    "summary": "Custom yield instructions By implementing this interface below, you can define custom yield instructions in Edit Mode tests. IEditModeTestYieldInstruction In an Edit Mode test, you can use IEditModeTestYieldInstruction interface to implement your own instruction. There are also a couple of commonly used implementations available: EnterPlayMode ExitPlayMode RecompileScripts WaitForDomainReload Example [UnityTest] public IEnumerator PlayOnAwakeDisabled_DoesntPlayWhenEnteringPlayMode() { var videoPlayer = PrefabUtility.InstantiatePrefab(m_VideoPlayerPrefab.GetComponent<VideoPlayer>()) as VideoPlayer; videoPlayer.playOnAwake = false; yield return new EnterPlayMode(); var videoPlayerGO = GameObject.Find(m_VideoPlayerPrefab.name); Assert.IsFalse(videoPlayerGO.GetComponent<VideoPlayer>().isPlaying); yield return new ExitPlayMode(); Object.DestroyImmediate(GameObject.Find(m_VideoPlayerPrefab.name)); } Properties Syntax Description bool ExpectDomainReload Returns true if the instruction expects a domain reload to occur. bool ExpectedPlaymodeState Returns true if the instruction expects the Unity Editor to be in Play Mode. Methods Syntax Description IEnumerator Perform() Used to define multi-frame operations performed when instantiating a yield instruction. EnterPlayMode Implements IEditModeTestYieldInstruction. Creates a yield instruction to enter Play Mode. When creating an Editor test that uses the UnityTest attribute, use this to trigger the Editor to enter Play Mode. Throws an exception if the Editor is already in Play Mode or if there is a script compilation error. ExitPlayMode Implements IEditModeTestYieldInstruction. A new instance of the class is a yield instruction to exit Play Mode. Throws an exception if the Editor is not in Play Mode."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-execution-settings.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-execution-settings.html",
    "title": "ExecutionSettings | ModularUIPack",
    "summary": "ExecutionSettings The ExecutionSettings is a set of filters and other settings provided when running a set of tests from the TestRunnerApi. Constructors Syntax Description ExecutionSettings(params Filter[] filtersToExecute) Creates an instance with a given set of filters, if any. Fields Syntax Description Filter[] filters A collection of Filters to execute tests on. ITestRunSettings overloadTestRunSettings An instance of ITestRunSettings to set up before running tests on a Player. bool runSynchronously If true, the call to Execute() will run tests synchronously, guaranteeing that all tests have finished running by the time the call returns. Note that this is only supported for EditMode tests, and that tests which take multiple frames (i.e. [UnityTest] tests, or tests with [UnitySetUp] or [UnityTearDown] scaffolding) will be filtered out. 'int playerHeartbeatTimeout' The time, in seconds, the editor should wait for heartbeats after starting a test run on a player. This defaults to 10 minutes."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-filter.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-filter.html",
    "title": "Filter | ModularUIPack",
    "summary": "Filter The filter class provides the TestRunnerApi with a specification of what tests to run when running tests programmatically. Fields Syntax Description TestMode testMode An enum flag that specifies if Edit Mode or Play Mode tests should run. Applying both Edit Mode and Play Mode is currently not supported when running tests from the API. string[] testNames The full name of the tests to match the filter. This is usually in the format FixtureName.TestName. If the test has test arguments, then include them in parenthesis. E.g. MyTestClass2.MyTestWithMultipleValues(1). string[] groupNames The same as testNames, except that it allows for Regex. This is useful for running specific fixtures or namespaces. E.g. \"^MyNamespace\\\\.\" Runs any tests where the top namespace is MyNamespace. string[] categoryNames The name of a Category to include in the run. Any test or fixtures runs that have a Category matching the string. string[] assemblyNames The name of assemblies included in the run. That is the assembly name, without the .dll file extension. E.g., MyTestAssembly. BuildTarget? targetPlatform The BuildTarget platform to run the test on. If set to null, then the Editor is the target for the tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-icallbacks.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-icallbacks.html",
    "title": "ICallbacks | ModularUIPack",
    "summary": "ICallbacks An interface for receiving callbacks when running tests. All test runs invoke the callbacks until the next domain reload. The RunStarted method runs when the whole test run starts. Then the TestStarted method runs with information about the tests it is about to run on an assembly level. Afterward, it runs on a test fixture level and then on the individual test. If the test is a parameterized test, then it is also invoked for each parameter combination. After each part of the test tree have completed running, the corresponding TestFinished method runs with the test result. At the end of the run, the RunFinished event runs with the test result. An extended version of the callback, IErrorCallbacks, extends this ICallbacks to receive calls when a run fails due to a build error. Public methods Syntax Description void RunStarted(ITestAdaptor testsToRun) Invoked when the test run starts. The ITestAdaptor represents the tree of tests to run. void RunFinished(ITestResultAdaptor result) Invoked when the test run finishes. The ITestResultAdaptor represents the results of the set of tests that have run. void TestStarted(ITestAdaptor test) Invoked on each node of the test tree, as that part of the tree starts to run. void TestFinished(ITestResultAdaptor result) Invoked on each node of the test tree once that part of the test tree has finished running. The ITestResultAdaptor represents the results of the current node of the test tree. Example An example that sets up a listener on the API. The listener prints the number of failed tests after the run has finished: public void SetupListeners() { var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.RegisterCallbacks(new MyCallbacks()); } private class MyCallbacks : ICallbacks { public void RunStarted(ITestAdaptor testsToRun) { } public void RunFinished(ITestResultAdaptor result) { Debug.Log(string.Format(\"Run finished {0} test(s) failed.\", result.FailCount)); } public void TestStarted(ITestAdaptor test) { } public void TestFinished(ITestResultAdaptor result) { } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-ierror-callbacks.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-ierror-callbacks.html",
    "title": "IErrorCallbacks | ModularUIPack",
    "summary": "IErrorCallbacks An extended version of the ICallbacks, which get invoked if the test run fails due to a build error or if any IPrebuildSetup has a failure. Public methods Syntax Description void OnError(string message) The error message detailing the reason for the run to fail."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-adaptor.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-adaptor.html",
    "title": "ITestAdaptor | ModularUIPack",
    "summary": "ITestAdaptor ITestAdaptor is a representation of a node in the test tree implemented as a wrapper around the NUnit ITest interface. Properties Syntax Description string Id The ID of the test tree node. The ID can change if you add new tests to the suite. Use UniqueName, if you want to have a more permanent point of reference. string Name The name of the test. E.g., MyTest. string FullName The full name of the test. E.g., MyNamespace.MyTestClass.MyTest. int TestCaseCount The total number of test cases in the node and all sub-nodes. bool HasChildren Whether the node has any children. bool IsSuite Whether the node is a test suite/fixture. IEnumerable<ITestAdaptor> Children The child nodes. ITestAdaptor Parent The parent node, if any. int TestCaseTimeout The test case timeout in milliseconds. Note that this value is only available on TestFinished. ITypeInfo TypeInfo The type of test class as an NUnit ITypeInfo. If the node is not a test class, then the value is null. IMethodInfo Method The Nunit IMethodInfo of the test method. If the node is not a test method, then the value is null. string[] Categories An array of the categories applied to the test or fixture. bool IsTestAssembly Whether the node represents a test assembly. RunState RunState The run state of the test node. Either NotRunnable, Runnable, Explicit, Skipped, or Ignored. string Description The description of the test. string SkipReason The skip reason. E.g., if ignoring the test. string ParentId The ID of the parent node. string ParentFullName The full name of the parent node. string UniqueName A unique generated name for the test node. E.g., Tests.dll/MyNamespace/MyTestClass/[Tests][MyNamespace.MyTestClass.MyTest]. string ParentUniqueName A unique name of the parent node. E.g., Tests.dll/MyNamespace/[Tests][MyNamespace.MyTestClass][suite]. int ChildIndex The child index of the node in its parent. TestMode TestMode The mode of the test. Either Edit Mode or Play Mode. Note: Some properties are not available when receiving the test tree as a part of a test result coming from a standalone Player, such as TypeInfo and Method."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-result-adaptor.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-result-adaptor.html",
    "title": "ITestResultAdaptor | ModularUIPack",
    "summary": "ITestResultAdaptor The ITestResultAdaptor is the representation of the test results for a node in the test tree implemented as a wrapper around the NUnit ITest interface. Properties Syntax Description ITestAdaptor Test The test details of the test result tree node as a TestAdaptor. string Name The name of the test node. string FullName Gets the full name of the test result string ResultState The state of the result as a string. E.g., Success, Skipped, Failure, Explicit, Cancelled. TestStatus TestStatus The status of the test as an enum. Either Inconclusive, Skipped, Passed, or Failed. double Duration Gets the elapsed time for running the test in seconds. DateTime StartTime Gets or sets the time the test started running. DateTime EndTime Gets or sets the time the test finished running. string Message Gets the message associated with a test failure or with not running the test string StackTrace Gets any stack trace associated with an error or failure. Not available in the Compact Framework 1.0. int AssertCount Gets the number of asserts that ran during the test and all its children. int FailCount Gets the number of test cases that failed when running the test and all its children. int PassCount Gets the number of test cases that passed when running the test and all its children. int SkipCount Gets the number of test cases skipped when running the test and all its children. int InconclusiveCount Gets the number of test cases that were inconclusive when running the test and all its children. bool HasChildren Indicates whether this result has any child results. Accessing HasChildren should not force the creation of the Children collection in classes implementing this interface. IEnumerable<ITestResultAdaptor> Children Gets the collection of child results. string Output Gets any text output written to this result. TNode ToXml Gets the test results as an NUnit XML node. Use this to save the results to an XML file."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-run-settings.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-run-settings.html",
    "title": "ITestRunSettings | ModularUIPack",
    "summary": "ITestRunSettings ITestRunSettings lets you set any of the global settings right before building a Player for a test run and then reverts the settings afterward. ITestRunSettings implements IDisposable, and runs after building the Player with tests. Public methods Syntax Description void Apply() A method called before building the Player. void Dispose() A method called after building the Player or if the build failed. Example The following example sets the iOS SDK version to be the simulator SDK and resets it to the original value after the run. public class MyTestSettings : ITestRunSettings { private iOSSdkVersion originalSdkVersion; public void Apply() { originalSdkVersion = PlayerSettings.iOS.sdkVersion; PlayerSettings.iOS.sdkVersion = iOSSdkVersion.SimulatorSDK; } public void Dispose() { PlayerSettings.iOS.sdkVersion = originalSdkVersion; } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-outerunitytestaction.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-outerunitytestaction.html",
    "title": "OuterUnityTestAction | ModularUIPack",
    "summary": "OuterUnityTestAction OuterUnityTestAction is a wrapper outside of the tests, which allows for any tests with this attribute to run code before and after the tests. This method allows for yielding commands in the same way as UnityTest. The attribute must inherit the NUnit attribute and implement IOuterUnityTestAction. OuterUnityTestAction Example using System.Collections; using NUnit.Framework; using NUnit.Framework.Interfaces; using UnityEngine; using UnityEngine.TestTools; public class MyTestClass { [UnityTest, MyOuterActionAttribute] public IEnumerator MyTestInsidePlaymode() { Assert.IsTrue(Application.isPlaying); yield return null; } } public class MyOuterActionAttribute : NUnitAttribute, IOuterUnityTestAction { public IEnumerator BeforeTest(ITest test) { yield return new EnterPlayMode(); } public IEnumerator AfterTest(ITest test) { yield return new ExitPlayMode(); } } Execution order Unity outer test action is not rerun on domain reload but non-Unity action attributes are: Note: Some browsers do not support SVG image files. If the image above does not display properly (for example, if you cannot see any text), please try another browser, such as Google Chrome or Mozilla Firefox. Test actions with domain reload example using NUnit.Framework.Interfaces; public class TestActionOnSuiteAttribute : NUnitAttribute, ITestAction { public void BeforeTest(ITest test) { Debug.Log(\"TestAction OnSuite BeforeTest\"); } public void AfterTest(ITest test) { } public ActionTargets Targets { get { return ActionTargets.Suite; } } } public class TestActionOnTestAttribute : NUnitAttribute, ITestAction { public void BeforeTest(ITest test) { Debug.Log(\"TestAction OnTest BeforeTest\"); } public void AfterTest(ITest test) { Debug.Log(\"TestAction OnTest AfterTest\"); } public ActionTargets Targets { get { return ActionTargets.Test; } } } public class OuterTestAttribute : NUnitAttribute, IOuterUnityTestAction { public IEnumerator BeforeTest(ITest test) { Debug.Log(\"OuterTestAttribute BeforeTest\"); yield return null; } public IEnumerator AfterTest(ITest test) { Debug.Log(\"OuterTestAttribute AfterTest\"); yield return null; } } [TestActionOnSuite] public class ActionOrderTestBase { [Test, OuterTest, TestActionOnTest] public void UnitTest() { Debug.Log(\"Test\"); } [UnityTest, OuterTest, TestActionOnTest] public IEnumerator UnityTestWithDomainReload() { Log(\"Test part 1\"); yield return new EnterPlayMode(); //Domain reload yield return new ExitPlayMode(); Log(\"Test part 2\"); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-recompile-scripts.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-recompile-scripts.html",
    "title": "RecompileScripts | ModularUIPack",
    "summary": "RecompileScripts RecompileScripts is an IEditModeTestYieldInstruction that you can yield in Edit Mode tests. It lets you trigger a recompilation of scripts in the Unity Editor. Constructors Syntax Description RecompileScripts(bool expectScriptCompilation = true, bool expectScriptCompilationSuccess = true) Creates a new instance of the RecompileScripts yield instruction. The parameter expectScriptCompilation indicates if you expect a script compilation to start (defaults to true). If a script compilation does not start and expectScriptCompilation is true, then it throws an exception. Example [UnitySetUp] public IEnumerator SetUp() { using (var file = File.CreateText(\"Assets/temp/myScript.cs\")) { file.Write(\"public class ATempClass { }\"); } AssetDatabase.Refresh(); yield return new RecompileScripts(); }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-setup-and-cleanup.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-setup-and-cleanup.html",
    "title": "Setup and cleanup at build time | ModularUIPack",
    "summary": "Setup and cleanup at build time In some cases, it is relevant to perform changes to Unity or the file system before building the tests. In the same way, it may be necessary to clean up such changes after the test run. In response to such needs, you can incorporate the pre-build setup and post-build cleanup concepts into your tests in one of the following ways: Via implementation of IPrebuildSetup and IPostBuildCleanup interfaces by a test class. Via applying the PrebuildSetup attribute and PostBuildCleanup attribute on your test class, one of the tests or the test assembly, providing a class name that implements the corresponding interface as an argument (fx [PrebuildSetup(\"MyTestSceneSetup\")]). Execution order All setups run in a deterministic order one after another. The first to run are the setups defined with attributes. Then any test class implementing the interface runs, in alphabetical order inside their namespace, which is the same order as the tests run. Note: Cleanup runs right away for a standalone test run, but only after related tests run in the Unity Editor. PrebuildSetup and PostBuildCleanup Both PrebuildSetup and PostBuildCleanup attributes run if the respective test or test class is in the current test run. The test is included either by running all tests or setting a filter that includes the test. If multiple tests reference the same pre-built setup or post-build cleanup, then it only runs once. IPrebuildSetup Implement this interface if you want to define a set of actions to run as a pre-build step. Public methods Syntax Description void Setup() Implement this method to call actions automatically before the build process. IPostBuildCleanup Implement this interface if you want to define a set of actions to execute as a post-build step. Cleanup runs right away for a standalone test run, but only after all the tests run within the Editor. Public methods Syntax Description void Cleanup() Implement this method to specify actions that should run as a post-build cleanup step. Example [TestFixture] public class CreateSpriteTest : IPrebuildSetup { Texture2D m_Texture; Sprite m_Sprite; public void Setup() { #if UNITY_EDITOR var spritePath = \"Assets/Resources/Circle.png\"; var ti = UnityEditor.AssetImporter.GetAtPath(spritePath) as UnityEditor.TextureImporter; ti.textureCompression = UnityEditor.TextureImporterCompression.Uncompressed; ti.SaveAndReimport(); #endif } [SetUp] public void SetUpTest() { m_Texture = Resources.Load<Texture2D>(\"Circle\"); } [Test] public void WhenNullTextureIsPassed_CreateShouldReturnNullSprite() { // Check with Valid Texture. LogAssert.Expect(LogType.Log, \"Circle Sprite Created\"); Sprite.Create(m_Texture, new Rect(0, 0, m_Texture.width, m_Texture.height), new Vector2(0.5f, 0.5f)); Debug.Log(\"Circle Sprite Created\"); // Check with NULL Texture. Should return NULL Sprite. m_Sprite = Sprite.Create(null, new Rect(0, 0, m_Texture.width, m_Texture.height), new Vector2(0.5f, 0.5f)); Assert.That(m_Sprite, Is.Null, \"Sprite created with null texture should be null\"); } } Tip: Use #if UNITY_EDITOR if you want to access Editor only APIs, but the setup/cleanup is inside a Play Mode assembly."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-runner-api.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-runner-api.html",
    "title": "TestRunnerApi | ModularUIPack",
    "summary": "TestRunnerApi The TestRunnerApi retrieves and runs tests programmatically from code inside the project, or inside other packages. TestRunnerApi is a ScriptableObject. You can initialize the API like this: var testRunnerApi = ScriptableObject.CreateInstance<TestRunnerApi>(); Note: You can subscribe and receive test results in one instance of the API, even if the run starts from another instance. The TestRunnerApi supports the following workflows: How to run tests programmatically How to get test results How to retrieve the list of tests Public methods Syntax Description void Execute(ExecutionSettings executionSettings) Starts a test run with a given set of ExecutionSettings. void RegisterCallbacks(ICallbacks testCallbacks, int priority = 0) Sets up a given instance of ICallbacks to be invoked on test runs. void UnregisterCallbacks(ICallbacks testCallbacks) Unregisters an instance of ICallbacks to no longer receive callbacks from test runs. void RetrieveTestList(TestMode testMode, Action<ITestAdaptor> callback) Retrieve the full test tree as ITestAdaptor for a given test mode."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-utils.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-utils.html",
    "title": "Test Utils | ModularUIPack",
    "summary": "Test Utils This contains test utility functions for float value comparison and creating primitives. Static Methods Syntax Description bool AreFloatsEqual(float expected, float actual, float allowedRelativeError) Relative epsilon comparison of two float values for equality. allowedRelativeError is the relative error to be used in relative epsilon comparison. The relative error is the absolute error divided by the magnitude of the exact value. Returns true if the actual value is equivalent to the expected value. bool AreFloatsEqualAbsoluteError(float expected, float actual, float allowedAbsoluteError) Compares two floating point numbers for equality under the given absolute tolerance. allowedAbsoluteError is the permitted error tolerance. Returns true if the actual value is equivalent to the expected value under the given tolerance. GameObject CreatePrimitive( type) Creates a GameObject with a primitive MeshRenderer. This is an analogue to the GameObject.CreatePrimitive, but creates a primitive MeshRenderer with a fast Shader instead of the default built-in Shader, optimized for testing performance. type is the primitive type of the required GameObject. Returns a GameObject with primitive MeshRenderer and Collider. Example [TestFixture] class UtilsTests { [Test] public void CheckThat_FloatsAreEqual() { float expected = 10e-8f; float actual = 0f; float allowedRelativeError = 10e-6f; Assert.That(Utils.AreFloatsEqual(expected, actual, allowedRelativeError), Is.True); } [Test] public void CheckThat_FloatsAreAbsoluteEqual() { float expected = 0f; float actual = 10e-6f; float error = 10e-5f; Assert.That(Utils.AreFloatsEqualAbsoluteError(expected, actual, error), Is.True); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-monobehaviour.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-monobehaviour.html",
    "title": "MonoBehaviour tests | ModularUIPack",
    "summary": "MonoBehaviour tests MonoBehaviourTest is a coroutine and a helper for writing MonoBehaviour tests. Yield a MonoBehaviourTest when using the UnityTest attribute to instantiate the MonoBehaviour you wish to test and wait for it to finish running. Implement the IMonoBehaviourTest interface on the MonoBehaviour to state when the test completes. Example [UnityTest] public IEnumerator MonoBehaviourTest_Works() { yield return new MonoBehaviourTest<MyMonoBehaviourTest>(); } public class MyMonoBehaviourTest : MonoBehaviour, IMonoBehaviourTest { private int frameCount; public bool IsTestFinished { get { return frameCount > 10; } } void Update() { frameCount++; } } MonoBehaviourTest<T> This is a wrapper that allows running tests on MonoBehaviour scripts. Inherits from CustomYieldInstruction. Properties Syntax Description T component A MonoBehaviour component created for the test and attached to the test’s GameObject. GameObject gameObject A GameObject created as a container for the test component. bool keepWaiting (Inherited) Returns true if the test is not finished yet, which keeps the coroutine suspended. IMonoBehaviourTest An interface implemented by a MonoBehaviour test. Properties Syntax Description bool IsTestFinished Indicates when the test is considered finished."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-parameterized.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-parameterized.html",
    "title": "Parameterized tests | ModularUIPack",
    "summary": "Parameterized tests For data-driven testing, you may want to have your tests parameterized. You may use both the NUnit attributes TestCase and ValueSource with a unit test. Note: With UnityTest it is recommended to use ValueSource since TestCase is not supported. Example static int[] values = new int[] { 1, 5, 6 }; [UnityTest] public IEnumerator MyTestWithMultipleValues([ValueSource(\"values\")] int value) { yield return null; }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-unitysetup-and-unityteardown.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-unitysetup-and-unityteardown.html",
    "title": "UnitySetUp and UnityTearDown | ModularUIPack",
    "summary": "UnitySetUp and UnityTearDown The UnitySetUp and UnityTearDown attributes are identical to the standard SetUp and TearDown attributes, with the exception that they allow for yielding instructions. The UnitySetUp and UnityTearDown attributes expect a return type of IEnumerator. UnitySetUp and UnityTeardown example public class SetUpTearDownExample { [UnitySetUp] public IEnumerator SetUp() { yield return new EnterPlayMode(); } [Test] public void MyTest() { Debug.Log(\"This runs inside playmode\"); } [UnityTearDown] public IEnumerator TearDown() { yield return new ExitPlayMode(); } } Execution order UnitySetUp and UnityTearDown can be used with either the Test or UnityTest test attributes. In both cases the relative execution order of Unity and non-Unity SetUp and TearDown attributes is the same. The only difference is that a UnityTest allows for yielding instructions during the test that can result in a domain reload, in which case the non-Unity SetUp and TearDown methods are re-run before proceeding to the second part of the test. Note: Some browsers do not support SVG image files. If the image above does not display properly (for example, if you cannot see any text), please try another browser, such as Google Chrome or Mozilla Firefox. Base and Derived classes The term base in the execution order denotes a base class from which a test class inherits. UnitySetUp and UnityTearDown follow the same pattern as NUnit SetUp and TearDown attributes in determining execution order between base classes and their derivatives. SetUp methods are called on base classes first, and then on derived classes. TearDown methods are called on derived classes first, and then on the base class. See the NUnit Documentation for more details. Base and Derived class example public class BaseClass { [OneTimeSetUp] public void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp Base\"); } [SetUp] public void SetUp() { Debug.Log(\"SetUp Base\"); } [UnitySetUp] public IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup Base\"); yield return null; } [TearDown] public void TearDown() { Debug.Log(\"TearDown Base\"); } [UnityTearDown] public IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown Base\"); yield return null; } } public class DerivedClass: BaseClass { [OneTimeSetUp] public new void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp\"); } [SetUp] public new void SetUp() { Debug.Log(\"SetUp\"); } [UnitySetUp] public new IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup\"); yield return null; } [Test] public void UnitTest() { Debug.Log(\"Test\"); } [UnityTest] public IEnumerator UnityTest() { Debug.Log(\"UnityTest before yield\"); yield return null; Debug.Log(\"UnityTest after yield\"); } [TearDown] public new void TearDown() { Debug.Log(\"TearDown\"); } [UnityTearDown] public new IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown\"); yield return null; } [OneTimeTearDown] public void OneTimeTearDown() { Debug.Log(\"OneTimeTearDown\"); } } Domain reload example public class BaseClass { [OneTimeSetUp] public void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp Base\"); } [SetUp] public void SetUp() { Debug.Log(\"SetUp Base\"); } [UnitySetUp] public IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup Base\"); yield return null; } [TearDown] public void TearDown() { Debug.Log(\"TearDown Base\"); } [UnityTearDown] public IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown Base\"); yield return null; } } public class DerivedClass: BaseClass { [OneTimeSetUp] public new void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp\"); } [SetUp] public new void SetUp() { Debug.Log(\"SetUp\"); } [UnitySetUp] public new IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup\"); yield return null; } [Test] public void UnitTest() { Debug.Log(\"Test\"); } [UnityTest] public IEnumerator UnityTest() { Debug.Log(\"UnityTest before yield\"); yield return new EnterPlayMode(); //Domain reload happening yield return new ExitPlayMode(); Debug.Log(\"UnityTest after yield\"); } [TearDown] public new void TearDown() { Debug.Log(\"TearDown\"); } [UnityTearDown] public new IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown\"); yield return null; } [OneTimeTearDown] public void OneTimeTearDown() { Debug.Log(\"OneTimeTearDown\"); } }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-wait-for-domain-reload.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-wait-for-domain-reload.html",
    "title": "WaitForDomainReload | ModularUIPack",
    "summary": "WaitForDomainReload WaitForDomainReload is an IEditModeTestYieldInstruction that you can yield in Edit Mode tests. It delays the execution of scripts until after an incoming domain reload. If the domain reload results in a script compilation failure, then it throws an exception. Constructors Syntax Description WaitForDomainReload() Create a new instance of the WaitForDomainReload yield instruction. Example [UnitySetUp] public IEnumerator SetUp() { File.Copy(\"Resources/MyDll.dll\", @\"Assets/MyDll.dll\", true); // Trigger a domain reload. AssetDatabase.Refresh(); yield return new WaitForDomainReload(); }"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/resources.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/resources.html",
    "title": "Resources | ModularUIPack",
    "summary": "Resources Here you can find other related resources to the Unity Test Framework: Performance Benchmarking in Unity: How to Get Started [Blog] Testing Test-Driven Development with the Unity Test Runner [Blog]"
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-playmode-test.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-playmode-test.html",
    "title": "Workflow: How to create a Play Mode test | ModularUIPack",
    "summary": "Workflow: How to create a Play Mode test To create a Play Mode test, you can follow a similar process as when you want to create an Edit Mode test. Start with switching to the PlayMode tab in the Test Runner window. Create a test assembly folder (see How to create a new test assembly). The folder name is Tests by default (or Tests 1, Tests 2, etc. if the preceding name is already in use). Note: If you don’t see the Create Play Mode Test Assembly Folder button enabled, make sure that in the Project window you navigate out of a folder with another .asmdef (such as one for Edit Mode tests). When you have your Play Mode test assembly folder ready, then create your Play Mode test. Note: Pre-defined Unity assemblies (such as Assembly-CSharp.dll) do not reference your new assembly. References and builds Unity Test Framework adds a reference to TestAssemblies in the Assembly Definition file but does not include any other references (e.g., to other scripting assemblies within the Unity project). To test other assemblies, you need to add them to the assembly definition yourself. For how to add assembly references, see Assembly Definition. We recommend putting tests into separate assemblies and using assembly definitions files. This way you will have more control over which assemblies need to reference test related dlls. Playmode build with TestsAssemblies Note: Enabling Play Mode tests for all assemblies includes additional assemblies in your project build, which can increase the project’s size as well as the build time. The supported workflow is to exclude TestAssemblies from Player builds. You can choose to enable playmode tests for all assemblies to run your tests inside the Editor, but this should be disabled again before building the Player to prevent build failures. To enable play mode tests for all assemblies you need to set the flag playModeTestRunnerEnabled to 1 inside the ProjectSettings/ProjectSetting.asset file in your project. Before building the Player you must disable it again, either by setting the flag back to 0 or by clicking on Disable playmode tests for all assemblies in the dropdown menu, accessed by right-clicking on the Test Runner window tab. For more information, see Edit Mode vs. Play Mode tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test-assembly.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test-assembly.html",
    "title": "Workflow: How to create a new test assembly | ModularUIPack",
    "summary": "Workflow: How to create a new test assembly Unity Test Framework looks for a test inside any assembly that references NUnit. We refer to such assemblies as TestAssemblies. The Test Runner UI can help you set up TestAssemblies. Play Mode and Edit Mode tests need to be in separate assemblies. In the Test Runner window, you will see an EditMode tab enabled by default, as well as a Create EditMode Test Assembly Folder button. Click the button to create a Tests folder with a respective .asmdef file by default. Change the name of the new Assembly Definition, if necessary, and press Enter to accept it. In the Inspector window, it should have references to nunit.framework.dll*,* UnityEngine.TestRunner, and UnityEditor.TestRunner assemblies, as well as Editor preselected as a target platform. Note: The UnityEditor.TestRunner reference is only available for Edit Mode tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test.html",
    "title": "Workflow: How to create a test | ModularUIPack",
    "summary": "Workflow: How to create a test To create a test, do the following: Create your Test assembly folder and select it in the Project window. Click the button Create Test Script in current folder option in the Test Runner window. It creates a NewTestScript.cs file in the Tests folder. Change the name of the script, if necessary, and press Enter to accept it. Now you’ll see two sample tests in the Test Runner window: Now you can open the tests in your favorite script editor. You can also create test scripts by navigating to Assets > Create > Testing > C# Test Script, unless adding a test script would result in a compilation error. Note: Unity does not include TestAssemblies (NUnit, Unity Test Framework, and user script assemblies) when using the normal build pipeline, but does include them when using Run on <Platform> in the Test Runner window. Create additional tests To create another set of tests: In the Project window, select Assets. Create a new test assembly folder (menu: Assets > Create> Testing > Tests Assembly Folder). In the Project window, select the new folder. Create a new test script in the folder (menu: Assets > Create > Testing > C# Test Script). The assembly definition is assigned the same name as your new asset. To rename it, change the Name in the Insepctor window. Assembly definition names must be unique. Note: Changing the file name of the assembly definition file does not affect the value of the Name property in the file. Use the Inspector window to make sure the name is properly changed. By default Any Platform is preselected as the target platform for the new assembly, which means the test script appears as a PlayMode test in the TestRunner window. To change it to an EditMode test, in the Inspector window select Editor only under Platforms. New assemblies created through the Assets menu should automatically include references to UnityEngine.TestRunner and UnityEditor.TestRunner. If these references are missing, add them in the Inspector window under Assembly Definition References: Filters If you have a lot of tests, and you only want to view/run a sub-set of them, you can filter them in three ways (see image above): Type in the search box in the top left Click a test class or fixture (such as NewTestScript in the image above) Click one of the test result icon buttons in the top right For more information, see Edit Mode vs. Play Mode tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-playmode-test-standalone.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-playmode-test-standalone.html",
    "title": "Workflow: How to run a Play Mode test in player | ModularUIPack",
    "summary": "Workflow: How to run a Play Mode test in player If you run a Play Mode test in the same way as an Editor test, it runs inside the Unity Editor. You can also run Play Mode tests on specific platforms. Click Run all in the player to build and run your tests on the currently active target platform. Note: Your current platform displays in brackets on the button. For example, in the image above, the button reads Run all in player (StandaloneWindows), because the current platform is Windows. The target platform is always the current Platform selected in Build Settings (menu: File > Build Settings). The test result displays in the build once the test completes: The application running on the platform reports back the test results to the Editor UI then displays the executed tests and shuts down. To make sure you receive the test results from the Player on your target platform back into the Editor that’s running the test, both should be on the same network. Note: Some platforms do not support shutting down the application with Application.Quit, so it will continue running after reporting the test results. If Unity cannot instantiate the connection, you can see the tests succeed in the running application. Running tests on platforms with arguments, in this state, does not provide XML test results. For more information, see Edit Mode vs Play Mode tests."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-test.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-test.html",
    "title": "Workflow: How to run a test | ModularUIPack",
    "summary": "Workflow: How to run a test To run a test, you need to double-click on the test or test fixture name in the Test Runner window. You can also use one of the buttons on the top bar, Run All or Run Selected. As a result, you’ll see the test status icon changed and a counter in the top right corner updated: You may also use a context menu option Run, right-click on any item in the test tree to have it (with all its children if any) run. Run tests within Rider It is possible to run unit tests in the Unity Test Framework directly from JetBrains Rider. For more information, see the JetBrains official documentation and their blog post Run Unity tests in Rider 2018.1."
  },
  "Library/PackageCache/com.unity.test-framework@1.1.33/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.test-framework@1.1.33/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "Test Framework copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.textmeshpro@3.0.7/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.textmeshpro@3.0.7/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog These are the release notes for the TextMesh Pro UPM package which was first introduced with Unity 2018.1. Please see the following link for the Release Notes for prior versions of TextMesh Pro. http://digitalnativestudios.com/forum/index.php?topic=1363.0 [3.0.7] - 2024-01-14 Changes Add support for Visions OS keyboard. [3.0.6] - 2021-04-23 [2.1.6] [1.5.6] Changes Added compiler conditional to exclude reference to PS5 in Unity 2019.4.22f1 or older and similar for Unity 2020.2.2f1 or older. [3.0.5] - 2021-04-09 [2.1.5] [1.5.5] Changes Added compiler conditional to address error related to missing RectMask2D padding property which was added in Unity 2019.4.12f1. See forum post for details. Fixed GetPreferredValues(string text) and GetPreferredValues(string text, float width, float height) incorrectly changing the text. See forum post for details. Fixed potential crash when FontEngine.GetGlyphIndex is called on a font asset that was previously unloaded or deleted. See forum post for details. Fixed potential crash when trying to add new glyphs to a dynamic font asset whose atlas texture is set to non readable. Case #1319567 Fixed Format Exception error when using the Project Text Spacing Conversion Tool when the Language Region Format is not English. Case #1320544 Fixed text rendering issue due to incorrectly SDF scaling when using a CanvasScaler and resizing the game view. Fixed TextMeshPro component Sorting Layer field in the Inspector's Extra Settings not showing the correct layer. Case #1326985 Fixed m_AlphaTweenRunner not initialized in TMP_Dropdown when Reload Domain is disabled in the Editor Enter Play Mode Settings. See forum post for details. Added support for PS4 and PS5 to TMP Input Field. [3.0.4] - 2021-02-19 [2.1.4] [1.5.4] Changes Improved sprite tag anim functionality to take into consideration the sprite character and glyph scale. Case #1309707 Improved Ellipsis character insertion handling to prevent potential issues when the Ellipsis glyph ascender and descender exceed those of the primary font asset. See forum post for details. Fixed text object margin handles in Scene view not behaving correctly as a result of lossy scale or object rotation. Case #1295523 The <mark> tag padding attribute can now be defined using font units (em). Fixed text parsing issue related to recent memory overhead optimizations. Case #1295755 Updated TMP Essential Resources and TMP Examples & Extras. Updated TMP Sprite shader to add support for Single Pass Stereo rendering. Fixed potential iOS build failure. Case #1298753 Fixed a few missing Profiler.EndSample() in the TMP_FontAsset.cs file. See forum post for details. Fixed SetText() with formatting issue where large numbers would show a leading zero. See forum post for details. Updated profiling code to use the new and more efficient ProfilerMarker. Fixed incorrect text bounds. See forum post for details. Fixed OutOfRangeException error that could occur in the TMP Input Field when selecting all and inserting characters using IME. Case #1301059 Fixed incorrect handling of Surrogate Pairs in the TMP Input Field. Case #1299798 Fixed Font Asset Creator incorrectly leaving the Readable state of font asset atlas textures to readable where it should be set to non readable for static font assets. Case #1305520 Added Multi Select functionality to the \"Create - TextMesh Pro - Font Asset\" context menu option. Case #1303074 Revised internal handling of the various text input methods to ensure the text property is always reflective of the text content in the Inspector Text Input Box in the Editor and via the text property getter even when using a combination of the various SetText methods or the text property setter. Case #1294998 Please note that using the text property getter when the text was updated via one of the SetText methods will results a string allocation. Fixed incorrect line spacing caused by preceding <size=x.x> tag. See forum post for details. Revised how the Bold Spacing which is defined per font asset will affect spacing between bold characters to ensure more uniform spacing. This change may require users to manually adjust the bold spacing value of their font assets to maintain similar spacing / layout results. Fixed linked text components not updating correctly when setting the text to null or empty. Case #1305832 The vertexBufferAutoSizeReduction property will now be set to false by default. This property is used to determine if the internal data structures used in the parsing of the text should be resized when the text content shrinks by more than 256 characters which results in CG. Case #1305311 Fixed animated sprites not behaving correctly when using text overflow mode Ellipsis and Truncate. Case #1303672 Fixed TMP Resource Importer window stealing focus when Inspector Layout Property window is open when TMP Essential Resources have not been imported into the project. Case #1300462 Fixed minor UI cosmetic issue affecting text spacing properties alignment in the Quick Search window. Case #1299587 Fixed minor UI cosmetic issue in the Font Asset inspector related to the positioning of the warning when changing Generation Settings. Fixed issue where the material properties of fallback font assets are not updated when changing the material properties of the primary font asset via code. Case #1271468 Fixed an issue with Text Overflow Linked mode where text would not flow correctly from one component to the other when the last character present at the break point was a linefeed \"\\n\" or vertical tab \"\\v\". See forum post for details. [3.0.3] - 2020-10-27 [2.1.3] [1.5.3] Changes Fixed potential null reference exception in the Input Field that can occur as a result of using a workflow that involves enabling and disabling Canvases. See forum post for details. Fixed potential Invalid AssetDatabase path warning that can be issued when assets are imported from outside the project. See forum post for details. Fixed <TextMeshProUGUI> objects not being created correctly in Prefab isolation mode when using the Create context menu. See forum post for details. Case #1266096 Fixed an issue where nesting <uppercase> and <lowercase> tags didn't behaves as expected. See forum post for details. Fixed Input Field incorrect handling of validation with text selection. Case #1267777 Fixed potential null reference exception that could occur in the Input Field when hiding the soft keyboard on iOS or Android. Case #1273631 Fixed OnScroll event not getting passed to potential parent ScrollRect when the Input Field is in Single Line mode. Case #1270241 Fixed Prefab override context menu to override or revert changes not being available for some text object properties. Case #1271420 The sampling point size in the Font Asset Creator will now be limited to a maximum of 16,384 points for SDF over-sampled modes. This means a maximum point size of 2048 for SDF8, 1024 for SDF16 and 512 for SDF32. Case #1253370 Fixed Margin widget in the scene view not working correctly when the text object is rotated on the z-axis. Case #1263001 Fixed Input Field Scrollbar not behaving correctly when set to Bottom to Top direction. Case #1179982 Fixed minor UI cosmetic issue in the StyleSheet inspector. Case #1258771 Fixed minor UI cosmetic issue in Material inspector texture properties. Case #1163983 Fixed potential IndexOutOfRangeException that could occur when duplicating text objects that have more than 8 sub text objects. Revised and improved Input Field with Scrollbar behavior with respect to text alignment. Case #1272647 Improved Input Field Name validation including adding the ability to use Hyphens. Case #1277951 Fixed state of MeshRenderer potentially not being mirrored on sub text objects. Case #1278329 Fixed GetPreferredValues() function returning incorrect values when called consecutively. See forum post for details. Initial pass at revising some of the data structures used in the text parsing and layout process to reduce text object memory overhead. Fixed incorrect positioning of IME window when using a canvas in World Space when no camera is assigned to the canvas. Case #1043535 Added new option to Font Asset Generation Settings to automatically clear dynamic data and atlas texture when creating a build. Replaced the automatic removal of the CanvasRenderer from <TextMeshPro> components with a warning to manually remove this now unnecessary component. Fixed text object properties not being applied correctly when instantiating a text prefab prior to importing TMP Essential Resources. Case #1271192 Fixed default text object properties potentially not being set correctly when instantiating a prefab. Case #1286412 Fixed incorrect parsing and display of UTF32 characters. See forum post for details. Fixed potential material error when updating a font asset generation settings when the font asset is using a non SDF shader. Case #1286132 Fixed minor UI cosmetic issue in the Sprite Asset Sprite Glyph Table inspector. Case #1285022 [3.0.1] - 2020-07-26 [2.1.1] [1.5.1] Changes Addressed compiler warning related to the new virtual event OnPreRenderText. Added one additional layer of missing character search where in the even the missing glyph character \\u0000 or space character \\u0020 is not available in any font asset or potential fallbacks, the End of Text (ETX) \\u0003 will be used instead. Input Field Integer or Decimal validation will now take into account the current culture. See forum post for details. Added Editor only font asset post processor to handle font assets being modified outside of the Unity Editor. Fixed potential Array Out of Bounds error that could occur when using </style> without first using a valid <style>. Case #1263787 and See forum post for details. Fixed potential issue when using multiple <font> tag in the same text object where these referencing several font assets derived from the same font file. Since their Default Material all have the same name, this was causing an issue in the Material Reference Manager. See forum post for details. Case #1264596. [3.0.0] - 2020-06-30 [2.1.0] [1.5.0] Changes Added support to control if a text object is Maskable and affected by UI Mask components. The new setting is found in the Extra Settings section of the <TextMeshProUGUI> component inspector. Fixed potential Null Reference Exception when trying to add characters and / or glyphs to a font asset via scripting and before it has been initialized or ReadFontAssetDefinition() has been called. Fixed incorrect preferred width values when using alternative font weight font assets. Case #1255336 Enabling or disabling the Mesh Renderer of a <TextMeshPro> text object should now also mirror that state on any sub text object renderers as well. Fixed <sprite> incorrect position when this sprite is the only character in the text and when the sprite asset face info has not been defined. Fixed potential Null Reference Exception related to culling when entering play mode. Added OnPreRenderText event delegate to allow potential modification of the text geometry before it is uploaded to the mesh and rendered. Fixed missing warning when the requested character is missing from the font asset or any potential fallbacks. Case #1256879 Fixed potential issue with Underline and StrikeThrough when using alternative typeface. Case #1255336 Fixed potential errors in the Text StyleSheet Inspector when adding or removing Text Styles after resetting the asset. Case #1254602 Fixed text Margin property values not being draggable in the Extra Settings section of the text inspector. Case #1253447 It will no longer be possible to create Editor Presets for the TMP_FontAsset, TMP_SpriteAsset, TMP_StyleSheet, TMP_ColorGradient and TMP_Settings as these are persistent and runtime assets. Case #1251229 [3.0.0-preview.14] - 2020-06-08 [2.1.0-preview.14] [1.5.0-preview.14] Changes Fixed sprite character and sprite glyph scale not being reflected in the text layout. See forum post for details. Fixed potential null reference exception in the CrossFadeColor or CrossFadeAlpha functions. See forum post for details. Minor improvements to the Sprite Asset Importer to improve allocations and address potential error encountered when creating multiple sprite assets. TMP GUID Remapping Tool - Removed \"UnityEditor.Animations.AnimatorController\" from the exclusion search list. Fixed potential culling issue when dynamically updating the content of child text objects of RectMask2D components. Case #1253625 Fixed InvalidOperationException that could occur when changing text Overflow linked components via code. Case #1251283 [3.0.0-preview.13] - 2020-05-22 [2.1.0-preview.13] [1.5.0-preview.13] Changes Fixed potential issue where the Font Asset Creator could get stuck in the packing phase of the atlas generation process. See forum post for details. Fixed issue potentially affecting text layout as a result of the width of the RectTransform being incorrectly reported. See forum post for details. Previously created prefabs containing sub text objects will now have their HideFlags updated to HideFlags.DontSave to be consistent with newly created prefabs whose sub text objects are no longer serialized. Case #1247184 Fixed culling issue where lossy scale was not considered in the determination of the bounds of the text geometry. [3.0.0-preview.12] - 2020-05-09 [2.1.0-preview.12] [1.5.0-preview.12] Changes Added synchronization of the RaycastTarget property of the parent <TextMeshProUGUI> with potential child sub text objects. Case #1240784 Fixed Font Asset Bold Spacing adjustment scaling based on the text object point size instead of current point size. Case #1241132 Improved text alignment when using RTL in conjunction with character, word and other spacing adjustments. Fixed TMP Input Field caret potentially not being visible when reaching the right side of the viewport. See forum post for more details. Fixed TMP Input Field incorrect text RectTransform horizontal adjustment when using the Backspace key. See forum post for more details. Fixed potential null reference in the TextMeshProUGUI.Cull function when using a workflow that involves enabling / disabling Canvases in the scene. Fixed ArgumentOutOfRangeException when using the \"Update Sprite Asset\" inspector option on a sprite asset that does not contain any sprites. Case #1242936 Fixed incorrect culling of the text geometry by the RectMask2D component on newly created text objects. Case #1245445 It is now possible to use the Material Context Menu options to Copy / Paste Material Properties or Atlas Texture originally created for TMP with all other non TMP specific materials. Case #1242671 Fixed NullReferenceException when setting the Atlas Texture to None in the Debug Settings of the Material Inspector of a text object. Case #1245104 [3.0.0-preview.11] - 2020-04-22 [2.1.0-preview.11] [1.5.0-preview.11] Changes Fixed incorrect culling of text object by RectMask2D component when the parent Canvas Render Mode is set to Screen Space - Camera or World Space. Case #1240595 Added special handling to ForceMeshUpdate() when the parent Canvas is disabled. [3.0.0-preview.10] - 2020-04-21 [2.1.0-preview.10] [1.5.0-preview.10] Changes Revised caching of Preferred Width and Height to further reduce the amount of time it has to be recomputed when using a complex structure of Layout components. Fixed potential issue when using Text Overflow Ellipsis and Truncate modes when the text contains characters using superscript, subscript or using the <voffset> tag. Revised culling of text objects when using a RectMask2D where the bounds of the text geometry instead of the RectTransform define the culling rect. Added HDR support to material preset colors. Fixed various formatting issues in this ChangeLog. Added the ability to define a unicode value for a missing sprite character in the TMP Settings. Added support for displaying a missing sprite character when the requested sprite character is not present in the sprite asset or potential fallback(s). This new functionality is only available when trying to reference a sprite by name. Sprite Characters will now have a default Unicode value of 0xFFFE (Private NonCharacter) instead of a Unicode value of 0x0 (default unicode value for missing character). Using the sprite asset context menu option \"Update Sprite Asset\" will now remap sprite characters with unicode value of 0x0 to 0xFFFE in addition to its currently functionality. Updating TMP Essential Resources via the \"Window - TextMeshPro - Import TMP Essential Resources\" menu option will no longer override existing TMP Settings. Minor optimization where SDF Scale on some text objects could be unnecessarily updated due to floating point rounding errors in their lossy scale. Case #1230799 Fixed minor issue where text objects created before importing the required TMP Essential Resources would have no default text. Improvements to line breaking for CJK and mixed Latin and CJK characters. See the following forum post for more details. Fixed potential NullReferenceException that could occur in the TMP InputField on some platforms if the InputSystem reference is null. Case #1232433 Added small padding to bitmap character geometry to prevent potential clipping. Added optimization to ignore very small RectTransform pivot changes that are usually the result of rounding errors when using Layout Components. Case #1237700 Sorting Layer ID and Sorting Order properties located in the Extra Settings of <TextMeshPro> text objects will now serialized when creating Editor Presets. Case #1215750 TextMeshProUGUI sub text objects will now be set as first sibling of their parent to prevent them from being rendered over other non text object child in the scene hierarchy. Fixed text objects becoming visible when set to empty or null as a result of a scale change. Case #1238408 Fixed useMaxVisibleDescender property now getting set properly via scripting. Case #1218526 Fixed SortingLayerID and SortingOrder not getting set correctly when multiple <TextMeshPro> objects are selected. Case #1171272 Fixed default settings getting applied to disabled text objects in the scene hierarchy whose text property was set to null. Case #1151621 Fixed mouse cursor flickering when hovering the Text Input Box of a text prefab with RTL enabled. Case #1206395 [3.0.0-preview.8] - 2020-03-14 [2.1.0-preview.8] [1.5.0-preview.8] Changes Fixed a minor issue where the preferred width of a text object can be incorrect when using multiple font assets, fallbacks and sprites in the same line of text. Added Alpha Fade Speed property to the TMP_DropDown inspector. Minor improvements to the LogWarning related to missing characters in a font asset or fallback being replaced by a space character. Fixed text object geometry not getting clipped when object is outside of RectMask2D. Improved search for potential missing character to include the primary font asset and potential fallbacks when the current font asset is not the primary. Ignorable / Synthesized characters in font assets will only be created if they do not exist in the source font file. Trying to use Text Overflow Ellipsis mode when no Ellipsis character is available in the primary font asset or potential fallbacks will now issue a warning and switch Text Overflow mode to Truncate. Added &ltcolor=lightblue&gt and &ltcolor=grey&gt to pre-defined rich text tag colors. Fixed compatibility issue when using TexturePacker - JSON (Array) mode and the TMP Sprite Asset Importer to create SpriteAssets. Simple fix to prevent the underline rich text tag becoming visible in the TMP Input Field when in IME composition mode with Rich Text disabled on the TMP Input Field. This is a temporary fix until a more robust and flexible solution is implemented. Case #1219969 Sub Text Objects which are created when the text requires the use of a fallback font asset or sprite asset will now use HideFlags.DontSave to prevent them from being save with Prefabs as they are created on demand. Fix incorrect material reference when current font asset is not the primary or a fallback that is missing a character which is present in the primary font asset. [3.0.0-preview.7] - 2020-03-07 [2.1.0-preview.7] [1.5.0-preview.7] Changes Reverted recent change to the TMP_SubMeshUI OnDisable() function that could result in a Missing Reference Exception in the GraphicRaycaster.cs script. See the following forum post. Fixed glyph drawing issue in the Font Asset Inspector Glyph Adjustment Table when Multi Atlas Texture is enabled and the glyph is not located in the main atlas texture or at atlasTextures[0]. Added support for &ltZWSP&gt tag which is internally replaced by a zero width space or \\u200B. Improved line breaking handling when using &ltNBSP&gt and / or &ltNOBR&gt tags where instead of breaking these line segments per character, they will break at any possible soft breaking space when these segments exceed the width of the text container. Improved PreferredHeight calculations and handling when using Text Auto Size. Fixed incorrect color being applied to the underline or strikethrough line segments when using and / or tags along with a tag while at the same time applying an Underline or Strikethrough font style on the whole text object. Fixed SDF Scale not getting updated when using SetText() with StringBuilder when the lossyScale of the text object changes. Case #1216007 Added Non Breaking Space \\u00A0 and Soft Hyphen \\u00AD to list of synthesized characters in the event they are not present in the source font file. Fixed stack overflow issue when using TMP_FontAsset.HasCharacter and TMP_FontAsset.HasCharacters function on font assets that have circular fallback references. Case #1222574 Fixed atlas texture not getting set correctly to IsReadable when switching a static font asset to dynamic in the Generation Settings of the Font Asset Inspector. Added check for RectTransform.sizeDelta change when OnRectTransformDimensionsChange() is called by the Canvas system to get around potential rounding error that erroneously trigger this callback when the RectTransform is using Stretch Anchor mode. As requested by a few users, TMP_FontAsset.faceInfo setter is now public instead of internal. [3.0.0-preview.5] - 2020-02-25 [2.1.0-preview.5] [1.5.0-preview.5] Changes Revised SetText function formatting options to including ability to specify padding for integral part of the value. Revised format is as follows: {Arg Index:Integral Padding.Decimal Precision} Example: TMP_Text.SetText(\"Value = {0:000.00}\", 10.375f); result in \"Value = 010.38\". Fixed issue where text objects isTextObjectScaleStatic property would be ignored when OnCanvasHierarchyChanged() is called. Added a Character, Glyph and Record count to those respective tables in the Font Asset Inspector. Fixed potential Null Reference Exception that would occur when using text Overflow Ellipsis mode with a primary font asset that doesn't contain the Ellipsis character. Case #1209771 Fixed a potential Editor lockup when using text Overflow Page mode. Case #1219055 Fixed Input Field incorrect caret vertical alignment when using the Midline / Vertical Geometry alignment option. Added initial / minimal support for the New Input System. Please use with caution and report any issues. Changes to Font Asset Generation Settings via the Font Asset Inspector will now update the existing glyphs and characters for the new settings instead of clearing them. Text object InternalUpdate() used to handle potential scale changes of text objects now uses willRenderCanvases event instead of onPreCull. This avoids a potential one frame delay in updating of objects and no impact on objects. Case #1216007 [3.0.0-preview.4] - 2020-01-31 [2.1.0-preview.4] [1.5.0-preview.4] Changes Fixed Input Field issue where scrolling events could prevent OnEndEdit event from firing. See forum post for details. Improved Input Field handling of Vertical Scrollbar in conjunction with the ResetOnDeActivation property. Using the Vertical Scrollbar no longer triggers OnEndEdit event. Fixed potential Missing Component Exception that could occur when a TMP_SubMeshUI object is created. Fixed MissingReferenceException when deleting a TMP prefab that is part of a nested prefab. Case #1207793 Improved handling of allocations of newly created text objects with large amount of text. As a result of these revisions, allocations will potentially be reduce by 10X. See #1205923 Fixed potential Null Reference Exception with the TMP DropDown that could occur when using the experimental Editor \"Enter Play Mode\" feature. Case #1207915 Fixed potential issue with the assignment of sub text object materials. Add support for hiding the soft keyboard for Switch in the TMP Input Field. Fixed incorrect Preferred Height when Word Wrapping is disabled on text objects. See forum post for details. Added support for the new Selected state and color to the TMP Input Field. Case #1210496 Fixed additional instances of TMP Resource Importer window being created when deleting the \"TextMesh Pro\" folder just after having imported them. Case #1205848 Added public ITextPreprocessor textPreprocessor; property to allow setting the text preprocessor for a given text component. [3.0.0-preview.3] - 2019-12-16 [2.1.0-preview.3] [1.5.0-preview.3] Changes Fixed potential issue with TMP Dropdown where calling Show() and Hide() in very short interval could result in additional Blockers. Case #1194114 Fixed potential issues that could occur when upgrading to version 1.5.0-preview.2 or newer of the TMP package without also updating the TMP Essential Resources in the project. Added check and warning when trying to create a font asset whose source font file has \"Incl. Font Data\" disabled in the Font Import Settings. Case #1198587 and #1198112 Fixed Ellipsis overflow mode issue when using small caps. Case #1198392 Fixed potential layout issue when adding a Layout Group to the text object itself. Case #1197614 Fixed Font Asset Creator issue where too many adjustment records with adjustment value of zero were added to the font asset. Added support for Line Separator \\u2028 and Paragraph Separator \\u2029. TMP shaders have been moved from \"TextMesh Pro/Resources/Shaders\" folder to \"TextMesh Pro/Shaders\" folder. See the following post for details. Added new experimental SDF and Mobile SDF Shaders that use Screen Space Derivatives (SSD) where these shaders no longer require SDF Scale to be passed via Vertex Attributes. These shaders have higher performance overhead but are more flexible. This overhead should only be noticeable on mobile platforms. Fixed potential text alignment issue where upgrading from package version 1.4.1 to 1.5.0-preview.2 would result in incorrect alignment on prefabs. Case #1198833 Added \\u061C Arabic Letter Mark, \\u200E Left-to-Right Mark and \\u200F Right-to-Left Mark to list of control and non renderable characters. Fixed Missing Reference Exception that would appear when expanding the Extra Settings of a TextMeshPro Preset asset. Case #1201072 Fixed Missing Reference Exception that would appear when editing the Vertex Color or Color Gradient of a TMP component Preset asset. Case #1201069 Fixed Inspector layout issue preventing enabling or disabling the Outline, Underlay, Lighting and Glow features when selecting a Preset asset material. Case #1196963 Revised the Create Material Preset context menu option to issue a warning and ignore materials outside the project. Case #1200109 Added experimental ITextPreprocessor interface to allow users to create custom components to handle text preprocessing and shaping. This interface includes a PreprocessText(string text) function that is called when the object contains a component that inherits from this interface. Added support for Unity Presets in the Editor for both and components. Case #1191793 Fixed missing CanvasRenderer component issue on the Input Field Caret object. Added padding to the 2DRectMask on the TMP Input Field - Text Area object. Optimization to ensure the TMP Update Manager only rebuilds text objects once per frame regardless of the number of cameras in the scene. [2.1.0-preview.2] - 2019-10-30 [1.5.0-preview.2] Changes Fixed Input Field issue when Read Only flag is set preventing the initial setting of the text. Also fixed Read Only flag not being respected when using IME input. Fixed potential infinite loop when using text overflow mode ScrollRect. See Case #1188867 Fixed Input Field culling related issue(s) where text would be incorrectly culled. See https://forum.unity.com/threads/version-1-5-0-2-1-0-preview-1-now-available-for-testing.753587/#post-5023700 Revised handling and referencing of the CanvasRenderer in anticipation of an incoming change to the MaskableGraphic class where it will no longer automatically add a CanvasRenderer to components inheriting from it. As a result, objects will no longer have a CanvasRenderer. Fixed potential NRE when using Overflow Truncate mode with sprites. See https://forum.unity.com/threads/tmpro-stackoverflow-caused-by-tmpro-textmeshprougui-generatetextmesh.750398/page-2#post-5042822 Fixed issue when using font weights in combination of font styles in the editor. Fixed for potential incorrect preferred height. Improved handling of StyleSheet options to reorder, add or delete styles. Fixed Input Field Caret & Selection Highlight potential culling issue when the object was instantiated outside the culling region. Fixed potential issue with registration of text objects in the TMP_UpdateManager. Optimization to suppress callback to InternalUpdate when parent Canvas is disabled. Case #1189820 Fixed Fallback material not getting updated correctly when changing Generation Settings on the Fallback Font Asset. Fixed a typo in the Font Weight section of the Font Asset Editor. Fixed potential ArgumentOutOfRangeException in the Input Field when using Hide Mobile Input and deleting a long string. Case #1162514 Added \"Is Scale Static\" option in the Extra Settings to exclude text objects from InternalUpdate callbacks to improve performance when the object's scale is static. This InternalUpdate callback is used to track potential changes to the scale of text objects to update their SDF Scale. Added the ability to control culling modes for the TMP Shaders. This new option is available in the Debug section of the Material Inspector. New feature requires updating the TMP Essential Resources. See the following post https://forum.unity.com/threads/not-see-textmeshpro-rendering-from-the-back.767510/#post-5112461. Fixed Material Inspector issue when toggling the Record button in the Animation window. Case #1174960 Improved Line Breaking handling for CJK. This also addresses a few reported issues. Case #1171603 Added support for &ltNBSP&gt tag which is internally replaced by a non-breaking space or \\u00A0. Improved performance when retrieving glyph adjustment records when using dynamic font assets. Fixed potential Null Reference Exception in the Editor when assigning new font asset to disabled game object when no previous font asset was assigned. [2.1.0-preview.1] - 2019-09-30 [1.5.0-preview.1] Changes Fixed an issue when using Overflow Ellipsis mode where the Ellipsis character would not be displayed correctly when the preceding character is a sprite. Added the ability to define the Resource path for Style Sheets in the TMP Settings. TMP Style Sheets can now be assigned to text objects in the Extra Settings section of the text object inspector. Added the ability to assign a Style to text objects using the new Text Style property in the text object inspector. A new public property TMP_Text.textStyle was also added. Improved Style Sheet editor to allow sorting of styles in the style sheet. Improved handling of nested styles. Added public TMP_Style GetStyle(string name) to get the potential style by name. Revised the ForceMeshUpdate() function as follows: public void ForceMeshUpdate(bool ignoreActiveState = false, bool forceTextReparsing = false). Fixed SubMeshUI objects text disappearing when saving a scene. Creating Material Presets via the Material Context menu with multi selection will now work as expected and assign the newly created material preset to all selected text objects. Fixed minor issue when changing Material Preset in prefab isolation mode with multiple text objects selected where the new material preset would not be assigned to disabled text objects. Revised Character, Word, Line and Paragraph spacing adjustments to be in font units (em) where a value of 1 represents 1/100 em. Added TMP_Text.onFontAssetRequest and TMP_Text.onSpriteAssetRequest events to allow users to implement custom asset loading when using the &ltfont=\"Font Asset Name\"&gt and &ltsprite=\"Sprite Asset Name\"&gt tags. Additional Shader Channels on the Canvas will be set to TexCoord1, Normal and Tangents or Mixed when using TMP Surface Shaders. Otherwise it will be set to TexCoord1 only. Case #1100696 Added new attribute to the &ltmark&gt tag to allow users to define a padding value for the mark / highlight region. Example: &ltmark color=#FFFF0080 padding=\"1.0,1.0,0.0,0.0\"&gt where padding=\"Left, Right, Top, Bottom\". Fixed an issue which could result in out of range exception when referencing sprites contained in fallback sprite assets using unicode values. Fixed an issue in the Font Asset Creator where the source font file property of the newly created font asset was not getting set. Added .blend files to exclusion asset scan list of the Project GUID Remapping tool. Fixed issue where Caret position would be incorrect when using IME. Case #1146626 Clamped Outline Softness to a value of 0-1 in the TMP Distance Field shader which makes it consistent with other SDF Shaders. Case #1136161 Text Auto-Sizing Min and Max values are now clamped between 0 and 32767. Case #1067717 Text Font Size Min and Max values are now clamped between 0 and 32767. Case #1164407 Rich Text Tag values are now limited to a maximum value of 32767. Added Placeholder option to TMP Dropdown. Placeholder text is displayed when selection value is -1. Also added example scene in the TMP Examples & Extras. Added the ability to define Face Info metrics per Sprite Assets. This will provide for more consistent scaling of the sprites regardless of the font asset used. Sprite Assets with undefined Face Info will continue to inherit the Face Info metrics of the current font asset. Added Update Sprite Asset option in the header of the Sprite Asset inspector. This increases the discoverability of this option already available via the Sprite Asset Context Menu. Revised the text auto-sizing handling in regards to maximum iteration threshold which could result in a crash on some Android devices. Case #1141328 Font Asset Generation Settings are now disabled in the inspector if the Source Font File is missing or if the Atlas Population Mode is set to static. Fixed vertical alignment issue when using Overflow Page mode. Improved handling of text auto-size line adjustment spacing resulting in fewer iterations and more accurate resulting point size. Added support for Layout Elements to the TMP Input Field. = Fixed text alignment issue with TMP Input Field when using Center alignment on the underlying text component. Setting ContentType.Custom on the TMP Input Field will no longer hide the Soft Keyboard. The Soft Keyboard can now be control independently via the shouldHideSoftKeyboard property. Added new Font Asset Context Menu option \"Force Upgrade To Version 1.1.0\" for convenience purposes in case a font asset didn't get upgraded automatically when migrating from version 1.3.0 to 1.4.x or 2.0.x. The &ltgradient&gt tag now as an optional attribute \"tint=0\" or \"tint=1\" controlling whether or not the gradient will be affect by vertex color. The alpha of the gradient will continue to be affected by the vertex color alpha. Added new angle=x attribute to the &lti&gt tag where the value of x define the italic slant angle. Since the legacy TextContainer used by TMP has been deprecated, it was removed from the Layout Context Menu options. Improved character positioning when using italic text where large angle / slant would potentially result in uneven spacing between normal and italic blocks of text. Fixed an issue where &ltmspace&gt and &ltcspace&gt tags would not be handled correctly in conjunction with word wrapping. Fixed issue in the TMP_Dropdown.cs that was affecting navigation. Case 1162600. See https://forum.unity.com/threads/huge-bug-missing-a-code-line-since-1-4-0.693421/ Fixed an issue related to kerning where the glyph adjustment values did not account for the upsampling of the legacy SDF modes like SDF8 / SDF16 and SDF32. Made the TMP_Text.text property virtual. Fixed Material Preset of fallback materials getting modified when the TMP Settings Match Material Preset option is disabled. Added ShaderUtilities.ID_GlowInner to list of material property IDs. Fixed potential null reference exception when creating new text objects when no default font asset has been assigned in the TMP Settings and the LiberationSans SDF font asset has been deleted from the project. Case #1161120 Fixed import TMP Essential Resources button being disabled when importing the TMP Examples & Extras first. Case #1163979 Fixed potential ArgumentOutOfRangeException when Hide Mobile Input is enabled and deleting the last character in the text. Case #1162514 Improved handling of manual addition of glyph positional adjustment pairs for both dynamic and static font assets. Case #1165763 Fixed issue where text in the TMP_InputField would disappear due to incorrect culling. Case #1164096 Fixed potential IndexOutOfRangeException that could be thrown when using the Pinyin IME interface and typing very fast to enter Chinese text. Case #1164383 Added support for Vertical Tab \\v which inserts a line break but not a paragraph break. Added support for Shift Enter in the TMP Input Field which inserts a Vertical Tab in the text in Multi Line mode. Fixed text horizontal alignment when lines of text only contain the Ellipsis \\u2026 Unicode character. Case #1162685 Text alignment is now serialized into separate fields for horizontal and vertical alignment and can now be get / set independently via TMP_Text.horizontalAlignment and TMP_Text.verticalAlignment. The TMP_Text.alignment property remains and uses the new serialized fields for horizontal and vertical alignment. Improved handling of Soft Hyphens when using Text Auto-Size. Fixed Null character being passed to Validate method of the TMP_InputField. Case #1172102 Fixed an issue where the Preferred Width and Height were not correct when using Tabs. The Cull Transparent Mesh flag on TMP_SubMeshUI objects will now mirror the settings on the parent text object's CanvasRenderer. Updated Sprite Importer to improve compatibility with Texture Packer Json Array export format. Newly created StyleSheets will be pinged in the project tab. Case #1182117 Added new option in the TMP Settings to control line breaking rules for Hangul to enabled Modern line breaking or traditional line breaking. Fixed potential issue related to SDF Scaling when the scale of the text object is negative. See https://forum.unity.com/threads/version-1-4-1-preview-1-with-dynamic-sdf-for-unity-2018-3-now-available.622420/page-5#post-4958240 for details. Added validation check for Sprite Data Source file in the Sprite Asset Importer. Case #1186620 Added warning when using Create - TextMeshPro - Sprite Asset menu when no valid texture is selected. Case #1163982 Fixed potential cosmetic issue in the text component inspector when using Overflow Linked mode. Case #1177640 [1.4.1] - 2019-04-12 Changes Improved handling of font asset automatic upgrade to version 1.1.0 which is required to support the new Dynamic SDF system. Made release compatible with .Net 3.5 scripting runtime. [1.4.0] - 2019-03-07 Changes Same release as 1.4.0-preview.3a. [1.4.0-preview.3a] - 2019-02-28 Changes Improved performance of the Project Files GUID Remapping Tool. Fixed an issue with the TMP_FontAsset.TryAddCharacters() functions which was resulting in an error when added characters exceeded the capacity of the atlas texture. Updated TMP_FontAsset.TryAddCharacters functions to add new overloads returning list of characters that could not be added. Added function in OnEnable of FontAsset Editor's to clean up Fallback list to remove any null / empty entries. Added support for Stereo rendering to the TMP Distance Field and Mobile Distance Field shaders. [1.4.0-preview.2a] - 2019-02-14 Changes Fixed an issue with SDF Scale handling where the text object would not render correctly after the object scale had been set to zero. Fixed an issue with the TMP_UpdateManager where text objects were not getting unregistered correctly. Any changes to Font Asset Creation Settings' padding, atlas width and / or atlas height will now result in all Material Presets for the given font asset to also be updated. Added new section in the TMP Settings related to the new Dynamic Font System. Added new property in the Dynamic Font System section to determine if OpenType Font Features will be retrieved from source font files at runtime as new characters are added to font assets. Glyph Adjustment Data (Kerning) is the only feature currently supported. Fix an issue where font assets created at runtime were not getting their asset version number set to \"1.1.0\". Improved parsing of the text file used in the Font Asset Creator and \"Characters from File\" option to handle UTF16 \"\\u\" and UTF32 \"\\U\" escape character sequences. Fixed a Null Reference Error (NRE) that could occur when using the &ltfont&gt tag with an invalid font name followed by the &ltsprite&gt tag. The Glyph Adjustment Table presentation and internal data structure has been changed to facilitate the future addition of OpenType font features. See https://forum.unity.com/threads/version-1-4-0-preview-with-dynamic-sdf-for-unity-2018-3-now-available.622420/#post-4206595 for more details. Fixed an issue with the &ltrotate&gt tag incorrectly affecting character spacing. [1.4.0-preview.1] - 2019-01-30 Changes Renamed TMPro_FontUtilities to TMP_FontAssetCommon to more accurately reflect the content of this file. Accessing the TextMesh Pro Settings via the new Edit - Settings menu when TMP Essential Resources have not yet been imported in the project will no longer open a new window to provide the options to import these resources. Fixed an issue where using int.MaxValue, int.MinValue, float.MaxValue and float.MinValue in conjunction with SetText() would display incorrect numerical values. Case #1078521. Added public setter to the TMP Settings' missingGlyphCharacter to allow changing which character will be used for missing characters via scripting. Fixed a potential Null Reference Exception related to loading the Default Style Sheet. Added compiler conditional to TMP_UpdateManager.cs to address changes to SRP. Improved the &ltmargin&gt tag to make it possible to define both left and right margin values. Example: &ltmargin left=10% right=10px&gt. Added new menu option to allow the quick creation of a UI Button using TMP. New menu option is located in Create - UI - Button (TextMeshPro). Renamed TMP related create menu options. Fixed TMP object creation handling when using Prefab isolation mode. Case #1077392 Fixed another issue related to Prefabs where some serialized properties of the text object would incorrectly show up in the Overrides prefab options. Case #1093101 Fixed issue where changing the Sorting Layer or Sorting Order of a object would not dirty the scene. Case #1069776 Fixed a text alignment issue when setting text alignment on disabled text objects. Case #1047771 Fixed an issue where text object bounds were not set correctly on newly created text objects or in some cases when setting the text to null or string.empty. Case #1093388 Fixed an issue in the IntToString() function that could result in Index Out Of Bounds error. Case #1102007 Changed the TMP_InputField IsValidChar function to protected virtual. The \"Allow Rich Text Editing\" property of the TMP_InputField is now set to false by default. Added new option to the Sprite Asset context menu to make it easier to update sprite glyphs edited via the Unity Sprite Editor. Added new Sharpness slider in the Debug section of the SDF Material inspector. Fixed an error that would occur when using the context menu Reset on text component. Case #1044726 Fixed issue where CharacterInfo.index would be incorrect as a result of using Surrogate Pairs in the text. Case #1037828 The TMP_EditorPanel and TMP_UiEditorPanel now have their \"UseForChildren\" flag set to true to enable user / custom inspectors to inherit from them. Fixed an issue where rich text tags using pixel (px) or font units (em) were not correctly accounting for orthographic camera mode. This change only affects the normal TMP text component. Fixed an inspector issue related to changes to the margin in the TMP Extra Settings panel. Case #1114253 Added new property to Glyph Adjustment Pairs which determines if Character Spacing Adjustments should affect the given pair. Updated the Glyph Adjustment Table where ID now represents the unicode (hex) value for the character instead of its decimal value. Added new SetValueWithoutNotify() function to TMP_DropDown and SetTextWithoutNotify() function to TMP_InputField allowing these to be set without triggering OnValueChanged event. Geometry buffer deallocation which normally takes place when current allocations exceed those of the new text by more than 256 characters will no longer occur if the new text is set to null or string.empty. Fixed a minor issue where the underline SDF scale would be incorrect when the underline text sequence contained normal size characters and ended with a subscript or superscript character. Fixed an error that would occur when using the Reset Context menu on a Material using the SDF Surface or Mobile SDF Surface Shaders. Case #1122279 Resolved a Null Reference Error that would appear when cycling through the text overflow modes. Case #1121624 [1.3.0] - 2018-08-09 Changes Revamped UI to conform to Unity Human Interface Guidelines. Updated the title text on the Font Asset Creator window tab to \"Font Asset Creator\". Using TMP_Text.SetCharArray() with an empty char[] array will now clear the text. Made a small improvement to the TMP Input Field when using nested 2d RectMasks. Renamed symbol defines used by TMP to append TMP_ in front of the define to avoid potential conflicts with user defines. Improved the Project Files GUID Remapping tool to allow specifying a target folder to scan. Added the ability to cancel the scanning process used by the Project Files GUID Remapping tool. Moved TMP Settings to universal settings window in 2018.3 and above. Changing style sheet in the TMP Settings will now be reflected automatically on existing text objects in the editor. Added new function TMP_StyleSheet.UpdateStyleSheet() to update the internal reference to which style sheet text objects should be using in conjunction with the style tag. [1.2.4] - 2018-06-10 Changes Fixed a minor issue when using Justified and Flush alignment in conjunction with \\u00A0. The Font Asset creationSettings field is no longer an Editor only serialized field. [1.2.3] - 2018-05-29 Changes Added new bitmap shader with support for Custom Font Atlas texture. This shader also includes a new property \"Padding\" to provide control over the geometry padding to closely fit a modified / custom font atlas texture. Fixed an issue with ForceMeshUpdate(bool ignoreActiveState) not being handled correctly. Cleaned up memory allocations from repeated use of the Font Asset Creator. Sprites are now scaled based on the current font instead of the primary font asset assigned to the text object. It is now possible to recall the most recent settings used when creating a font asset in the Font Asset Creator. Newly created font assets now contain the settings used when they were last created. This will make the process of updating / regenerating font assets much easier. New context menu \"Update Font Asset\" was added to the Font Asset inspector which will open the Font Asset Creator with the most recently used settings for that font asset. New Context Menu \"Create Font Asset\" was added to the Font inspector panel which will open the Font Asset Creator with this source font file already selected. Fixed 3 compiler warnings that would appear when using .Net 4.x. Modified the TMP Settings to place the Missing Glyph options in their own section. Renamed a symbol used for internal debugging to avoid potential conflicts with other user project defines. TMP Sprite Importer \"Create Sprite Asset\" and \"Save Sprite Asset\" options are disabled unless a Sprite Data Source, Import Format and Sprite Texture Atlas are provided. Improved the performance of the Project Files GUID Remapping tool. Users will now be prompted to import the TMP Essential Resources when using the Font Asset Creator if such resources have not already been imported. [1.2.2] - 2018-03-28 Changes Calling SetAllDirty() on a TMP text component will now force a regeneration of the text object including re-parsing of the text. Fixed potential Null Reference Exception that could occur when assigning a new fallback font asset. Removed public from test classes. Fixed an issue where using nested links (which doesn't make sense conceptually) would result in an error. Should accidental use of nested links occurs, the last / most nested ends up being used. Fixed a potential text alignment issue where an hyphen at the end of a line followed by a new line containing a single word too long to fit the text container would result in miss alignment of the hyphen. Updated package license. Non-Breaking Space character (0xA0) will now be excluded from word spacing adjustments when using Justified or Flush text alignment. Improved handling of Underline, Strikethrough and Mark tag with regards to vertex color and Color tag alpha. Improved TMP_FontAsset.HasCharacter(char character, bool searchFallbacks) to include a recursive search of fallbacks as well as TMP Settings fallback list and default font asset. The &ltgradient&gt tag will now also apply to sprites provided the sprite tint attribute is set to a value of 1. Ex. &ltsprite=\"Sprite Asset\" index=0 tint=1&gt. Updated Font Asset Creator Plugin to allow for cancellation of the font asset generation process. Added callback to support the Scriptable Render Pipeline (SRP) with the normal TextMeshPro component. Improved handling of some non-breaking space characters which should not be ignored at the end of a line. Sprite Asset fallbacks will now be searched when using the &ltsprite&gt tag and referencing a sprite by Unicode or by Name. Updated EmojiOne samples from https://www.emojione.com/ and added attribution. Removed the 32bit versions of the TMP Plugins used by the Font Asset Creator since the Unity Editor is now only available as 64bit. The isTextTruncated property is now serialized. Added new event handler to the TMP_TextEventHandler.cs script included in Example 12a to allow tracking of interactions with Sprites. [1.2.1] - 2018-02-14 Changes Package is now backwards compatible with Unity 2018.1. Renamed Assembly Definitions (.asmdef) to new UPM package conventions. Added DisplayName for TMP UPM package. Revised Editor and Playmode tests to ignore / skip over the tests if the required resources are not present in the project. Revised implementation of Font Asset Creator progress bar to use Unity's EditorGUI.ProgressBar instead of custom texture. Fixed an issue where using the material tag in conjunction with fallback font assets was not handled correctly. Fixed an issue where changing the fontStyle property in conjunction with using alternative typefaces / font weights would not correctly trigger a regeneration of the text object. [1.2.0] - 2018-01-23 Changes Package version # increased to 1.2.0 which is the first release for Unity 2018.2. [1.1.0] - 2018-01-23 Changes Package version # increased to 1.1.0 which is the first release for Unity 2018.1. [1.0.27] - 2018-01-16 Changes Fixed an issue where setting the TMP_InputField.text property to null would result in an error. Fixed issue with Raycast Target state not getting serialized properly when saving / reloading a scene. Changed reference to PrefabUtility.GetPrefabParent() to PrefabUtility.GetCorrespondingObjectFromSource() to reflect public API change in 2018.2 Option to import package essential resources will only be presented to users when accessing a TMP component or the TMP Settings file via the project menu. [1.0.26] - 2018-01-10 Added Removed Tizen player references in the TMP_InputField as the Tizen player is no longer supported as of Unity 2018.1. [1.0.25] - 2018-01-05 Added Fixed a minor issue with PreferredValues calculation in conjunction with using text auto-sizing. Improved Kerning handling where it is now possible to define positional adjustments for the first and second glyph in the pair. Renamed Kerning Info Table to Glyph Adjustment Table to better reflect the added functionality of this table. Added Search toolbar to the Glyph Adjustment Table. Fixed incorrect detection / handling of Asset Serialization mode in the Project Conversion Utility. Removed SelectionBase attribute from TMP components. Revised TMP Shaders to support the new UNITY_UI_CLIP_RECT shader keyword which can provide a performance improvement of up to 30% on some devices. Added TMP_PRESENT define as per the request of several third party asset publishers. [1.0.23] - 2017-11-14 Added New menu option added to Import Examples and additional content like Font Assets, Materials Presets, etc for TextMesh Pro. This new menu option is located in \"Window -> TextMeshPro -> Import Examples and Extra Content\". New menu option added to Convert existing project files and assets created with either the Source Code or DLL only version of TextMesh Pro. Please be sure to backup your project before using this option. The new menu option is located in \"Window -> TextMeshPro -> Project Files GUID Remapping Tool\". Added Assembly Definitions for the TMP Runtime and Editor scripts. Added support for the UI DirtyLayoutCallback, DirtyVerticesCallback and DirtyMaterialCallback."
  },
  "Library/PackageCache/com.unity.textmeshpro@3.0.7/Documentation~/TextMeshPro.html": {
    "href": "Library/PackageCache/com.unity.textmeshpro@3.0.7/Documentation~/TextMeshPro.html",
    "title": "TextMesh Pro User Guide | ModularUIPack",
    "summary": "TextMesh Pro User Guide Overview This User Guide was designed to provide first time users of TextMesh Pro with a basic overview of the features and functionality of the tool. Installation The TextMesh Pro UPM package is already included with the Unity Editor and as such does not require installation. TextMesh Pro \"TMP\" does however require adding resources to your project which are essential for using TextMesh Pro. To import the \"TMP Essential Resources\", please use the \"Window -> TextMeshPro -> Import TMP Essential Resources\" menu option. These resources will be added at the root of your project in the \"TextMesh Pro\" folder. The TextMesh Pro package also includes additional resources and examples that will make discovering and learning about TextMesh Pro's powerful features easier. It is strongly recommended that first time users import these additional resources. To import the \"TMP Examples & Extras\", please use the \"Window -> TextMeshPro -> Import TMP Examples & Extras\" menu option. These resources will also be added in the same \"TextMesh Pro\" folder inside your project. Quick Start There are two TextMesh Pro components available. The first TMP text component is of type <TextMeshPro> and designed to work with the MeshRenderer. This component is an ideal replacement for the legacy TextMesh component. To add a new <TextMeshPro> text object, go to: �GameObject->3D Object->TextMeshPro Text�. The second TMP text component is of type <TextMeshProUGUI> and designed to work with the CanvasRenderer and Canvas system. This component is an ideal replacement for the UI.Text component. To add a new <TextMeshProUGUI> text object, go to: �GameObject->UI->TextMeshPro Text�. You may also wish to watch this Getting Started short video which covers this topic. We strongly recommend that you also watch the Font Asset Creation video as well as the Working with Material Presets as these two topics is also key to working and getting the most out of TextMesh Pro. As mentionned in the Installation section of this guide, it is recommended that you import the \"TMP Examples & Extras\" and take the time to explore each of the examples as they provide a great overview of the functionality of the tool and the many text layout and rich text tags available in TextMesh Pro. Support & API Documentation Should you have questions or require assistance, please visit the Unity UI & TextMesh Pro section of the Unity forum as well as the TextMesh Pro User Forum where you will find additional information, Video Tutorials and FAQ. In the event you are unable to find the information you seek, always feel free to post on the Unity UI & TextMesh Pro section user forum. Online Documentation is also available on TextMesh Pro including Rich Text tags, Shaders, Scripting API and more."
  },
  "Library/PackageCache/com.unity.textmeshpro@3.0.7/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.textmeshpro@3.0.7/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "TextMesh Pro copyright © 2021 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog [1.7.6] - 2023-10-05 Fixed Fixed issue where a warning would be logged in the console for TrackAsset (TB-229). Fixed issue where changing the name of a group track was not undoable (TB-218). Fixed performance regression when rebuilding the playable graph. [1.7.5] - 2023-06-15 Fixed Fixed issue where exceptions were thrown when different ControlTracks are referencing the same TimelineAsset (IN-21163). The Text Track sample has been updated to use the com.unity.ugui package. Removed usage of deprecated API: UnityEditor.MemoryProfiler [1.7.4] - 2023-03-08 Fixed Fixed issue where previewing the Timeline would create prefab property modifications [1.7.3] - 2023-01-31 Fixed Fixed issue where modifying curves on an animation clip did not trigger an evaluation of the graph when the Timeline Window is hidden. (TB-117) [1.7.2] - 2022-09-12 Fixed Fixed an issue where menu items related to track, marker and clip types in contextual menus would be in arbitrary order in some versions of Unity. Menu items related to types will now be sorted based on their full names, including the assembly name. Fix post-extrapolation mode change not recalculating previous clip pre-extrapolation time. ([ATL-1291]) Fixed an issue where prefab overrides would be created when keyframing a prefab instance in Timeline. ([TB-108]) Fixed an issue where a warning would be raised when using the undo history to undo multiple timeline interactions([TB-119]) Fixed an issue where in some cases a NullReferenceException would be thrown in the PlayableDirector inspector after a TimelineAsset would be unloaded in the Editor([TB-129]) Fixed an issue with the NoFoldOut attribute drawer, which was behaving incorrectly when used outside of the sample context. ([TB-132]) [1.7.1] - 2022-03-07 Fixed Fixed warnings related to meta files related to missing folders. [1.7.0] - 2022-02-21 Added Added TimelinePlaybackControls Editor API: The Playback controls API lets you drive the Timeline Window playback controls from code. From this API, you can Change the current Time/Frame Query the current Time/Frame Start/Stop playback of the currently shown Timeline Go to First or Last frame Go to previous or next frame. Use it to accelerate your workflow, or build your own workflows on top of Timeline. Changed [Requires Unity 2021.2] Fixed an issue where the last frame of a Timeline was not guaranteed to be executed when the Playable Director had Wrap Mode None. License file header changed from \"Timeline copyright © 2021 Unity Technologies ApS\" to \"Timeline copyright © 2021 Unity Technologies\" Fixed Fixed an issue where unused TrackAssets would be saved in the TimelineAsset file after removing tracks. Fixed an issue where grouped markers at time zero would sometimes disappear after clicking on them (https://issuetracker.unity3d.com/issues/timeline-markers-disappear-when-double-clicking-on-stacked-markers-at-0-frames) Fixed an issue where selecting a prefab in the project view could trigger an exception when parenting the prefab to a prefab sub-object. (1386125) Fixed an issue where duplicated or pasted tracks that were part of group tracks would lose their associated bindings (https://issuetracker.unity3d.com/issues/duplicated-track-groups-lose-their-nester-tracks-game-object-assignments) Fixed an issue where pasting a track after changing scenes would lose PlayableAsset references in clips (https://issuetracker.unity3d.com/issues/animation-tracks-copy-loses-its-properties-when-its-pasted-from-another-scene) Fixed an issue where the Timeline Window play range would not be serialized and persisted. Fixed an issue where clicking on a clip during Play Mode would evaluate the Timeline unnecessarily. (https://issuetracker.unity3d.com/issues/timeline-rebuilds-playable-graph-when-selecting-a-timeline-clip-during-play-mode) Fixed an issue where control clips would behave inconsistently if the clip was set to hold, but the PlayableDirector was set to not extrapolate. (https://issuetracker.unity3d.com/product/unity/issues/guid/1375771) Fixed issue where a warning would appear in 2022.1 regarding AnimationWindowState.SnapMode. [Requires Unity 2021.2] Fixed an issue where the last frame of a Timeline was not guaranteed to be executed when the Playable Director had Wrap Mode None. Fixed an issue where the Timeline Window's UI would not update until the user clicked in the window if the TimelineAsset's file contents were changed on disk, such as during a version control operation 1357110 [1.6.3] - 2021-10-20 Fixed Fixed an issue where the Timeline Window would not work correctly with read-only source controlled files. Fixed an issue where the a MissingReferenceException would be thrown when an IAnimationWindowPreview component previewed by Timeline would be destroyed. (https://issuetracker.unity3d.com/issues/missingreferenceexception-is-thrown-when-using-rigbuilder-inside-a-prefab) Fixed an issue where the \"Match Content\" action would not apply on all selected clips. (1368028) [1.6.2] - 2021-08-05 Fixed Fixed an issue where copy-pasting Timeline Clips that contain Generic Lists of ExposedReferences would cause a NullReferenceException (1332377) [1.6.1] - 2021-06-22 Added ClipDrawOptions.hideScaleIndicator can now be used to disable the clip scale indicator. Added an asterisk to the Timeline Window when the currently edited Timeline Asset is dirty (has unsaved changes). (1024230) Added the IInspectorChangeHandler interface to change what happens when a UI component in the inspector is modified. (1283486) (Unity 2020.2+ only) The Timeline window title displays an asterisk when there are unsaved changes. Double click now toggles the collapsed state of group tracks. A keyboard shortcut can now be mapped to expand or collapse group tracks. Added displayClipName property to ClipDrawOption. Use displayClipName to display (true) or hide (false) the clip name. New API added to TimelineEditorWindow: TimelineNavigator. Enables navigation between timelines and nested timelines through code for automation purposes. Gives access to Timeline window breadcrumbs. (Unity 2021.2+ only) Added Framelocked preview option in Timeline preferences. Added framerate display with standard framerates. TimelineAsset framerate can be set with a StandardFramerate value. (TimelineAsset.SetStandardFramerate) Changed Removed non-working PlayRange options (Loop/Hold) as both were actually mapping to Loop behaviour and always have been. Timeline settings menu has been modified to use standard framerates in framerate submenu. TimelineAsset.fps is obsolete and is replaced by TimelineAsset.frameRate. TimelineProjectSettings.assetDefaultFramerate is obsolete and is replaced by TimelineProjectSettings.defaultFramerate. Fixed Removed GC allocations in PlayableDirector.duration when a timeline asset is assigned. (1298818) Removed warnings with AnimationWindowState snap mode. (1306205) Fixed issue where the \"Navigate Right\" (default key: Right Arrow ▶) would not behave consistently. The correct order of operations should now always be, in order: expand group, select first track of group, then select first item of the track. Fixed frame display not rounding up correctly. (1333009) Fixed an issue where TimelinePlayable duration would not be initialized if the playable is not created from the PlayableDirector. (1329151) Fixed memory leak in custom playable inspectors. (1332377) Fixed exception when using the Key All Animated shortcut with no Timeline selected. (1334339) Fixed issue where a warning would appear regarding obsolete AnimationWindowState.SnapMode values. [1.5.5] - 2021-04-30 Fixed Fixed an issue in the Curves view where the color indicator was sized incorrectly on high-res displays. (1318782) Fixed a rare issue where keyframes were created for Playable Curves when switching to play mode. (1319124) Fixed an issue where clearing the Unity selection did not refresh the Timeline window. (1320260) Fixed an issue with IAnimationWindowPreview.StartPreview not getting called for sub timelines. (1322571) Fixed an issue where the curve color identifiers would overlap property names when the Timeline window was resized. (1323591) Fixed a regression where changes made to clip curves would not be processed until another modification caused a graph rebuild. Fixed compilation issue on 2020.1 due to incorrect version checks. Fixed issue where text labels were incorrectly displayed when the mouse pointer was located above a clip. [1.5.4] - 2021-03-10 Fixed Fixed issue where the horizontal scrollbar could not be moved or resized. [1.5.3] - 2021-03-05 Changed Disabled edition of Track Asset Inspector Script field as it could break Timeline Assets. Fixed Fixed issue where the timeline header track would automatically open during a drag and drop operation. (1305436) Fixed a rare issue where some broken tracks could not be removed. (1305388) Fixed rare issue where the time field could not be edited after opening a timeline. (1312198) Fixed cosmetic issue where the duration marker was drawn over the scroll bar. Fixed issue where times without a decimal separator (. or , depending on locale) would not be interpreted correctly by the time field. (1315605) Fixed issue where a selection rectangle could not be made when started inside a track. (1315840) Performing Undo/Redo will not affect Timeline window selection when the window is locked. (Selecting sub-timelines can still be undone). (1313515) Fixed an issue where text would be clipped in the track header binding. (1302401) Fixed issue where clicking in the Timeline window while there is no active timeline would throw an exception. [1.5.2] - 2021-01-08 Added During recording, there are new ways to key animated properties: A new Inspector context menu has been added (Key All Animated) that sets a key to all currently animated properties. It is possible to make a multi-selection of tracks to set a keyframe to all currently animated properties. If no track is selected, all recording tracks are keyed. If properties are selected in the curve editor, only those properties are keyed. TimelineEditor.GetWindow and TimelineEditor.GetOrCreateWindow to get the current Timeline window or create a Timeline window. TimelineEditorWindow.SetCurrentTimeline to change which timeline asset is opened in the Timeline window. TimelineEditorWindow.lock to lock or unlock the Timeline window. TrackExtensions.GetCollapsed, TrackExtensions.SetCollapsed, TrackExtensions.IsVisibleRecursive to get and change the visibility state of a track. AnimationTrackExtensions.IsRecording, AnimationTrackExtensions.SetRecording, AnimationTrackExtensions.SupportsRecording to get or change the recording state of an Animation track. Added two methods in TrackEditor to control how an object is bound to a track: IsBindingAssignableFrom and GetBindingFrom. Added Japanese translation. The Timeline window will automatically rebuild the graph when a notifications's properties are changed. The Timeline window will be automatically refreshed when a marker's properties are changed. Added TimelineEditor.GetInspectedTimeFromMasterTime and TimelineEditor.GetMasterTimeFromInspectedTime to convert time from master to inspected timeline and vice versa when using sub-timelines. Added API to improve how to get/set a TimelineClip's parent track: TimelineClip.GetParentTrack (replaces obsolete property getter) ItemsUtils.SetParentTrack (extension method thar replaces obsolete property setter) Added a new Seconds time display mode and renamed previous Seconds mode to Timecode. TimelinePreferences.timeFormat field, UnityEditor.Timeline.TimeFormat enum. Added API for the user to clip to the track area: API: Relevant member to MarkerOverlayRegion, API: MarkerOverlayRegion.trackRegion, API: MarkerOverlayRegion constructor. Added Gameplay sequence sample. This sample demonstrates how Timeline can be used to create a small in-game moment, using built-in tracks. Added Customization sample. This sample demonstrates how to create custom tracks, clips, markers and actions. Changed The binding field on a track header will change its background color when dragging a valid object on it. Timeline marker track is now selectable. TimelineClip property parentTrack is now obsolete. TimelinePreferences.timeUnitInFrames is now obsolete. Fixed Fixed a bug affecting the conversion between seconds and frames in the inspector. Fixed issue where KeyAllAnimated was available when right-clicking on markers and tracks that were not in record mode. (1270304) Fixed issue where the mouse cursor would stay stuck to a resize icon when resizing the track header. (1076031) Fixed case where an animation event at time 0 would not fire on a timeline loop. (1184106) Fixed issue where Timeline objects (ie. TrackAsset, ControlTrack, SignalAsset, etc.) would have incorrect links to the documentation pages. Available starting from Unity 2021.1. (1082941) Fixed multiple issues related to blends Fix display of blends when clips have ease-in/ease-out (1178066) Fix clip disappearing when dragging it from left to right completely inside another clip. Fix select and drag clip discarding foreground display rule of selected clip after releasing the drag. Fix fully blended clips selection not available. (1289912) Fixed issue where the clip display would flicker when moving two clips that are completely overlapped. (1085679) The Timeline window will no longer revert to editing only the asset if the user uses the Timeline selector to pick a game object and switches focus. (1291455) Create button on timeline panel no longer defaults to an invalid path. (1289923) Fixed issue where Timeline's bindings field would loses names and bindings when selecting clips. (1293941) Make Timeline's duration result displayed in the Inspector, when switching from duration mode: Based On Clips to Fixed Length, closer to the actual duration. (1156920) Copy/Paste of clips in the Timeline Window will no longer paste clips at an invalid time in mix-mode. (1289925) [1.4.5] - 2020-11-19 Fixed Fixed issue where changing a clip's extrapolation values would clear the current clip selection. (936046) Fixed multiple issues related to the curves view: Fixed curve removal not functioning with PlayableAssets (clips & tracks curves). (1231002) Fixed inconsistent icon display on curves. Fixed incorrect ordering of properties. Properties now have a object/type/property ordering. Fixed unnecessary grouping of fields. Changed context menu from Remove Properties to Remove Curves to better reflect the change in functionality between curves for GameObjects and curves for PlayableAssets. Fixed behaviour where removing a single field in a Position, Rotation or Scale group would remove the entire group. Fixed case where pausing in Playmode and switching the active director in editor could pause the director. (1263707) Material properties are now displayed by their shader name in the curves view when possible. (1115961) Fixed issue where a signal could be pasted on a track that doesn't support notifications. (1283763) Fixed issue where a clip could be paseted on an incompatible track. (1283763) Fixed errors when leaving prefab mode when a timeline is opened. (1280331) No preview will be shown when the PlayableDirector is disabled. (1286198) Fixed issue where an infinite clip's Foot Ik property was not visible in the Inspector when selecting its track. (1279824) Fixed issue where child particle systems were not controlled correctly when they are not subemitters. (1212943) Fixed inconsistent recording behaviour on audio tracks and PlayableAssets. Default values are changed when a value is not recorded, and the key added/updated when a value is already animated. (1283453) Fixed issue where the curves view for tracks and PlayableAssets would not update when changed externally (such as from the Animation window). Fixed Add Key/Remove Key context menus not being properly enabled in some cases when using tracks and PlayableAssets. Fixed simulation of subemitters when scrubbing a timeline. (1142781) Fixed choppy playback of particles with a large fixed time step. (1262234) [1.4.4] - 2020-10-09 Fixed Disable drag and drop of Signal asset on Control Track. (1222760) Fixed system locale causing issues when keying float values on custom clips. (1190877) Fixed issue where recording to a clip would place keys on the frame. (1274892) Fixed keyboard clip selection from locked tracks. (1233612) Fixed issue where the Timeline window would stay locked even when no timeline asset is shown. (1278598) Fixed issue where invoking SelectLeft or SelectRight shortcuts on a group track, the group would not collapse or expand. (1279379) Fixed Blend Curve Editor from the clip's inspector that was not responding correctly to undo and redo commands. (978673) Fixed issue where the Frame All action would not frame keys outside of clips when the curve display is collapsed. (1273725, #295) Scrolling the horizontal scrollbar of the timeline to the right edge will no longer prevent the user from dragging left again. (1127199, #301) Splitting a clip with an ease in or out value now ensures ease duration stays on correct side of split. (1279350) Fixed delay when zooming in after reaching Timeline window's maximum and then zooming back. (1214228) Prevent creation of presets with Group Tracks. (1281056) Fixed issue where markers placed on top of clips could not be selected. (1284807, #314) Fixed issue where multiple markers placed on top of each other could not be selected. (1284801, #314) [1.4.3] - 2020-08-26 Fixed Fixed incorrect selection when clicking on a clip's blend. (1178052) Fixed issue where an exception was thrown when drawing an Audio clip's waveform when that clip wasn't in the AssetDatabase. (1268868) When choosing Add Signal Emitter from Signal Asset, closing the Object Selector window will not add an empty Signal Emitter. (1261553) Fixed issue where an error would appear when editing keys in the Animation window if the Timeline window is opened. (1269829) Fixed issue where the Frame All operation would continually increase the zoom value when only empty tracks are added to the timeline (1273540). [1.4.2] - 2020-08-04 Fixed Fixed double-click not opening the AnimationWindow on clips with animated parameters. (1262950) Fixed issue where the Timeline window would rebuild its Playable Graph every time an AnimationClip would be added, changed or deserialized. (1265314, 1267055) [1.4.1] - 2020-07-15 Fixed Fixed IndexOutOfRangeException exception being thrown when editing inspector curves. (1259902) Fixed IndexOutOfRangeException exception being thrown when the New Signal dialog replaces an existing signal. (1241170) Fixed signal state being reset on paused timelines. (1257208) Fixed nested custom types not updating animation values in the inspector. (1239893) Fixed AnimationTracks SceneOffset mode incorrectly overriding root transform on tracks without root transform in editor. (1237704) The DisplayName attribute is now supported when used with TrackAssets. (1253397) Fixed NullReference exception being thrown when clicking on the Scene Preview checkbox if the Timeline window was closed. (1261543) [1.4.0] - 2020-06-26 Added Added ClipCaps.AutoScale to automatically change the speed multiplier value when the clip is trimmed in the Timeline window. Added a DeleteClip method in TrackAsset. Added dependency on Animation, Audio, Director and Particle System modules. (1229825) Added an option in TimelineAsset.EditorSettings to disable scene preview. Added base classes to define custom actions: TimelineAction TrackAction ClipAction MarkerAction Added the following attributes that can be used with action classes: ApplyDefaultUndo to automatically manage undo operations. ActiveInMode to control in which Timeline mode the action is valid. MenuEntry to add the action to the context menu. TimelineShortcut can be added to a static method to invoke the action with a shortcut. Invoker to invoke actions using Timeline's selection or context. MenuOrder contains menu priority values, to be used with MenuEntry. TimelineModes to specify in which mode an action is valid, to be used with MenuEntry. ActionContext to provide a context to invoke TimelineActions. ActionValidity to specify is an action is valid for a given context. UndoExtension to manage undo operations with common Timeline types. Changed Improved performance with ControlTracks in preview mode for cases where multiple Control Tracks are assigned to the same PlayableDirector. Improved layout and appearance of track header buttons. Reduced icons' file size without any quality loss. A track's binding will be duplicated when pasting or duplicating a track. When creating a new timeline asset, the \"Timeline\" suffix will not be added to the file name twice. ClipCaps.All now includes the new Autoscale feature. To get the previous ClipCaps.All behaviour on clips, use ClipCaps.Looping | ClipCaps.Extrapolation | ClipCaps.ClipIn | ClipCaps.SpeedMultiplier | ClipCaps.Blending Inline curve selection is now synced with the clip's selection. Selecting a curve view property will also select the corresponding curve view. Clicking and holding the Command or Control key on a curve view will deselect it if it was already selected. Improved Timeline window UI performance. Fixed Selecting clips from locked tracks is not allowed anymore when using the playhead's context menu. Inserting gaps in locked tracks is not allowed anymore. When adding an Activation track, the viewport is adjusted to show the new Activation clip. Fixed issue where trimming AnimationClips would also change the speed multiplier. [1.3.4] - 2020-06-09 Fixed Fix a Control Track bug that caused the first frame of an animation to evaluated incorrectly when scrubbing forwards and backwards. (1253485) Fixed memory leak where the most recently played timeline would not get unloaded. (1214752 and 1253974) [1.3.3] - 2020-05-29 Fixed Fixed regression where animation tracks were writing root motion when the animation clip did not contain root transform values (1249355) [1.3.2] - 2020-04-02 Fixed Fixed issue where the clip Inspector's curve preview would close when clicking on the curve. (1228127) Fixed issue where the curves view was not synced between Animation and Timeline windows. (1213937) Fixed issue where play range didn't loop when range ends on the final frame. (1215926) Fixed issue where displaying an array in the curves view generated errors. (1178251) [1.3.1] - 2020-03-13 Fixed Fixed issue where the curves view would flicker when editing multiple keys. (1217326) Fixed issue where adding a keyframe in the curves view at the end of a clip would not place the keyframe at the correct position. (1221337) [1.3.0] - 2020-02-26 Added Inline Curve Properties can be removed. Tracks can be individually resized. Changed Creating a new Timeline will no longer automatically add an Animation Track and an Animator to the target GameObject. Ease-in and ease-out values for clips are no longer restricted to 50% of the clip's duration. The resize handle for inline curves has been moved to the track header area. Reduced the minimum width of the track header area. Trimming the left edge of a clip while pressing the Shift key will change the Speed Multiplier value. Fixed Fixed humanoid characters going to default pose during initial root motion recording. (1174752) Fixed Override Tracks not masking RootTransform when an AvatarMask without the Root Node is applied. (1190600) Fixed preview of Avatar Masks on base level Animation Tracks. (1190600) [1.2.13] - 2020-02-24 Fixed Fixed Performance issue where Control Tracks would resimulate during the tail of a non-looping particle clip. (1216702) Fixed adjacent recording clips highlighting the wrong clip. (1210312) Fixed timescale drawing to only draw visible lines which avoids a hang with very large clips. (1213189) Fixed SignalReceiver.ChangeSignalAtIndex incorrectly throwing exception when multiple entries are set to null. (1210877) Fixed a memory leak with Animation Clips in Edit mode. Fixed issue where changes to a Signal Receiver component in a prefab were reverted. (1210883) Fixed avatar mask reassignment not causing immediate re-evaluation. (1219326) Fixed issues related to recursive control tracks. (1178423) Fixed issue where using the HideInMenu attribute in combination with a class inheriting from Marker would not hide the marker from the Timeline context menus. (1221054) [1.2.12] - 2020-02-21 Fixed Fixed issue where the curves view would change its framing when moving a clip. (1217353) [1.2.11] - 2020-01-22 Fixed Fixed Control Track inspector dropdown not opening. (1208943) Fixed issue where applying the Match content command on subtimeline clip with a newly created subtimeline with no duration makes the clip disappear. (1203662) Fixed issue where the opened timeline is changed to another timeline when switching focus from Unity to a different application. (1087348) Fixed issue where the keys in the inline curves view were incorrectly positioned (1205835) Changed ControlPlayableAsset.searchHierarchy (a.k.a. Control Children) now defaults to false. [1.2.10] - 2019-12-08 Fixed Fixed issue where object selectors on tracks did not show bound objects. (1202853) Fixing inspector blend graph display for animation clips. (1201474) Fixed Timeline Window lock state when restarting Unity and no timeline are selected. (1201405) [1.2.9] - 2019-12-06 Fixed Added missing high-resolution icons for Personal Skin. [1.2.8] - 2019-11-21 Fixed Fixed issue where recording couldn't be turned on for override tracks. (1199389) Fixed overlay bug when panning. (1198348) Fixed Foot IK being applied in Editor when option is disabled. (1197426) Fixed issue where the Animation Track's inline curves were not properly aligned when panning the timeline. (1198364) [1.2.7] - 2019-11-15 Fixed Fixed inline curves to display PlayableBehaviour array properties. (1178251) Fixed clip selection from playhead. (1187495) Fixed recorded clips dirtying the scene on copy/paste. (1181492) [1.2.6] - 2019-10-25 Added Added Timeline manual. [1.2.5] - 2019-10-16 Changed Added tooltips that were missing for Timeline selector and settings buttons. (1152790) Removed Undo menu entry that was added when clicking on the Inline curves button. (1187402) Fixed Fixed issue where recording couldn't be turned off when an object is deactivated. (1187174) Timelines listed in the Timeline selector will now be sorted alphabetically. (1190514) Fixed Insert Frames options from Trackhead context menu not applying to markers. (1187895) Fixed incorrect display when a large number of nested group tracks was added to a Timeline. (1157367) [1.2.4] - 2019-10-03 Changed Properties in the Inline Curve editor will now be listed in the same order as the Animation window. (1184058) Updated the appearance of the Timeline window to conform to the editor's UX redesign Improved the appearance of clip blends. Fixed Adding a PlayableDirector with no Playable Asset will no longer trigger a repaint of the Timeline Window on each frame. (1172707) Fixed issue where a clip's blend selection border was not drawn correctly when there was a previous clip. (1178173) Fixed issue where Animation Events were fired twice when the Playable Director Wrap mode is set to Loop. (1173281) Fixed issue where double-clicking on a Timeline Asset would not open it in the Timeline window. (1182159) Fixed issue where the paste shortcut would not work when copying and pasting between two different timelines. (1184967) Fixed audio stutter when going into playmode. (1167289) Fixed PreviousFrame and NextFrame controls in subtimelines with large offsets. (1175320) Fixed issue where exceptions were thrown when resetting a Signal Receiver component. (1158227) Increased font size of clip labels (1179642) [1.2.3] - 2019-10-03 Fixed Removed unnecessary directories from the package. [1.2.2] - 2019-08-20 Fixed Fixed issue where fields for custom clips were not responding to Add Key commands. (1174416) Fixed issue where a different track's bound GameObject is highlighted when clicking a track's bound GameObject box. (1141836) Fixed issue where a clip locks to the playhead's position when moving it. (1157280) [1.2.1] - 2019-08-01 Fixed Fixed appearance of a selected clip's border. Fixed non-transform properties from AnimationClips not being correctly put into preview mode when the avatar root does not contain the animator component. (1162334) Fixed an issue where the context menu for inline curves keys would not open on MacOS. (1158584) Fixed recording state being incorrect after toggling preview mode (1146551) Fixed copying clips without ExposedReferences causing the scene to dirty (1144469) [1.2.0] - 2019-07-16 Compatible with Unity 2019.3 Added Added ILayerable interface. Implementing this interface on a custom track will enable support for multiple layers, similar to the AnimationTracks override tracks. Added \"Pan\" autoscrolling option in the Timeline window. Enabled rectangle tool for inline curves. Changed Scrolling horizontally with the mouse wheel or trackpad now pans the timeline view horizontally, instead of zooming. Scrolling vertically with the mouse wheel or trackpad on the track headers or on the vertical scroll bar now pans the timeline view vertically, instead of zooming. Fixed Fixed an issue causing info text to overlap when displaying multiple lines (1150863). Fixed duration mode not reverting from \"Fixed Length\" to \"Based On Clips\" properly. (1154034) Fixed playrange markers being drawn over horizontal scrollbar (1156023) Fixed an issue where a hotkey does not autofit all when Marker is present (1158704) Fixed an issue where an exception was thrown when overwriting a Signal Asset through the Signal Emitter inspector. (1152202) Fixed Control Tracks not updating instances when source prefab change. (case 1158592) An exception will be thrown when calling TrackAsset.CreateMarker() with a marker that implements INotification if the track does not support notifications. (1150248) Fixed preview mode being reenabled when warnings change on tracks. (case 1151381) Fixed minimum clip duration to be frame aligned. (case 1156602) Fixed playhead being moved when applying undo while recording.(case 1154802) Fixed warnings about localEulerAnglesRaw when using RectTransform. (case 1151100) Fixed precision error on the duration of infinite tracks. (case 1156723) Fixed issue where two GatherProperties call were made when switching between two PlayableDirectors. (1159036) Fixed issue where inspectors for clips, tracks and markers would get incorrectly displayed when no Timeline Window is opened. (1158242, 1158283) Fixed issue with clip connectors that were incorrectly drawn when the timeline was panned or zoomed. (1141960) Fixed issue where evaluating a Playable Graph inside a Notification Receiver would cause an infinite recursion. (1149930) Fixed Trim and Move operations to ensure playable duration is updated upon completion. (1151894) Fixed options menu icon that was blurry on high-dpi screens. (1154623) Track binding field is now larger. (1153446) Fixed issue where an empty Timeline window would create new objects on each repaint. (1142894) Fixed an issue causing info text to overlap when displaying multiple lines (when trimming + time scaling, for example). (1150863) Fixed duration mode not reverting from \"Fixed Length\" to \"Based On Clips\" properly. (1154034) Prevented the PlayableGraph from being created twice when playing a timeline in play mode with the Timeline window opened. (1147247) Fixed issue where an exception was thrown when clicking on a SignalEmitter with the Timeline window in asset mode. (1146261) A timeline will now be played correctly when building a player with Mono and Managed Stripping Level set higher than Low. (1133182) The Signal Asset creation dialog will no longer throw exceptions when canceled on macOS. (1141959) Fixed issue where the Emit Signal property on a Signal Emitter would not get saved correctly. (1148709) Fixed issue where a Signal Emitter placed at the start of a timeline would be fired twice. (1149653) Fixed record button state not updating when offset modes are changed. (1142747) Cleared invalid assets from the Timeline Clipboard when going into or out of PlayMode. (1144473) Copying a Control Clip during play mode no longer throws exceptions. (1141581) Going to Play Mode while inspecting a Track Asset will no longer throw exceptions. (1141958) Resizing Timeline's window no longer affects the zoom value. (1147150) Snap relaxing now responds to Command on Mac, instead of Control. (1149144) Clips will no longer randomly disappear when showing or hiding inline curves. (1141661) The global/local time referential button will no longer be shown for a top-level timeline. (1080872) Playhead will not be drawn above the bottom scrollbar anymore. (1134016) Fixed moving a marker on an Infinite Track will keep the track in infinite mode (1141190) Fixed zooming in/out will keep the padding at the beginning of the timeline (1030689) Fixed marker UI is the same color and size on infinite track (1139370) Fixed Disable the possibility to add Markers to tracks of a Timeline that is ReadOnly (1134463) Fixed wrong context menu being shown when right-clicking a marker (1133592) Fixed creation of override track to work with multiselection (1133592) [1.1.0] - 2019-02-14 Compatible with Unity 2019.2 Added ClipEditor, TrackEditor and MarkerEditor classes users can derive from to control visual appearance of custom timeline clips, tracks and markers using the CustomTimelineEditor attribute. ClipEditor.GetSubTimelines to allow user created clips that support sub-timelines in editor TimelineEditor.selectedClip and TimelineEditor.selectedClips to set and retrieve the currently selected timeline clips IPropertyCollector.AddFromName override that takes a component. Warning icons to SignalEmitters when they do not reference an asset Ability to mute/unmute a Group Track. Mute/Unmute only selected track command added for tracks with multiple layers. Animate-able Properties on Tracks and Clips can now be edited through inline curves. Added loop override on AnimationTrack clips (1140766) ReadOnly/Source Control Lock support for Timeline Scene Changed Control Track display to show a particle system icon when particle systems are being controlled Animate-able Properties for clips are no longer edited using by \"recording\"; they are edited through the inline curves just like tracks. AudioTrack properties can now be animated through inline curves. Changed Marker show/hide to be undoable. Hide will also unselect markers. (1124661) Changed SignalReceivers show their enabled state in the inspector. (1131163) Changed Track Context Menu to show \"Add Signal Emitter\" at the top of the list of Marker commands. (1131166) Moved \"Add Signal Emitter\" and \"Add Signal Emitter From Asset\" commands out of their sub-menu. (1131166) Fixed Fixed markers being drawn outside their pane. (1124381) Fixed non-public tracks not being recognized by the Timeline Editor. (1122803) Fixed keyboard shortcuts for Frame All (default: A) and Frame Selected (default: F) to also apply horizontally (1126623) Fixed recording getting disabled when selecting a different GameObject while the Timeline Window is not locked. (1123119) Fixed time sync between Animation and Timeline windows when clips have non-default timescale or clip-in values. (930909) Fixed animation window link not releasing when deleting the timeline asset. (1127425) Fixed an exception being raised when selecting both a Track marker and a Timeline marker at the same time. (1113006) Fixed the header marker area will so it no longer opens its context menu if it's hidden. (1124351) Fixed Signal emitters to show the Signals list when created on override tracks. (1102913) Fixed a crash on IL2CPP platforms when the VideoPlayer component is not used. (1129572) Fixed Timeline Duration changes in editor not being undoable. (1109279) Fixed Match Offsets commands causing improper animation defaults to be applied. (911678) Fixed Timeline Inspectors leaving EditorGUI.showMixedValue in the wrong state. (1123895) Fixed issue where performing undo after moving items on multiple tracks would not undo some items. (1131071) Fixed cog icon in the Signal Receiver inspector being blurry. (1130320) Fixed Timeline marker track hamburger icon not being centered vertically. (1131112) Fixed detection of signal receivers when track is in a group. (1131811) Fixed exception being thrown when deleting Signal entries. (1131065) Fixed Markers blocking against Clips when moving both Clips and Markers in Ripple mode. (1102594) Fixed NullReferenceException being thrown when muting an empty marker track. (1131106) Fixed SignalEmitter Inspector losing the Receiver UI when it is locked and another object is selected. (1116041) Fixed Marker and Clip appearing to be allowed to move to another track in Ripple mode. (1131123) Fixed issue where the Signal Emitter inspector did not show the Signal Receiver UI when placed on the timeline marker track. (1131811) Fixed Replace mode not drawing clips when moved together with a Marker. (1132605) Fixed inline curves to retain their state when performing undo/redo or keying from the inspector. (1125443) Fixed an issue preventing Timeline from entering preview mode when an Audio Track is present an a full assembly reload is performed. (1132243) Fixed an issue where the Marker context menu would show a superfluous line at the bottom. (1132662) Fixed an issue preventing Timeline asset to be removed from a locked Timeline Window when a new scene is loaded. (1135073) Fixed EaseIn/Out shortcut for clips [1.0.0] - 2019-01-28 Compatible with Unity 2019.1 Added This is the first release of Timeline, as a Package Added API calls to access all AnimationClips used by Timeline. Added support in the runtime API to Animate Properties used by template-style PlayableBehaviours used as Mixers. Added Markers. Markers are abstract types that represent a single point in time. Added Signal Emitters and Signal Assets. Signal Emitters are markers that send a notification, indicated by a SignalAsset, to a GameObject indicating an event has occurred during playback of the Timeline. Added Signal Receiver Components. Signal Receivers are MonoBehaviour that listen for Signals from Timeline and respond by invoking UnityEvents. Added Signal Tracks. Signal Tracks are Timeline Tracks that are used only for Signal Emitters. Fixed Signal Receiver will no longer throw exceptions when its inspector is locked (1114526) Context menu operations will now be applied on all selected tracks (1089820) Clip edit mode clutch keys will not get stuck when holding multiple keys at the same time (1097216) Marker inspector will be disabled when the marker is collapsed (1102860) Clip inspector will no longer throw exceptions when changing values when the inspector is locked (1115984) Fixed appearance of muted tracks (1018643) Fixed multiple issues where clips and markers were selectable when located under the time ruler and the marker header track (1117925, 1102598) A marker aligned with the edge of a clip is now easier to select (1102591) Changed behaviour of the Timeline Window to apply modifications immediately during Playmode (922846, 1111908) PlayableDirector.played event is now called after entering or exiting Playmode (1088918) Undoing a paste track operation in a group will no longer corrupt the timeline (1116052) The correct context menu will now be displayed on the marker header track (1120857) Fixed an issue where a circular reference warning appeared in the Control Clip inspector even if there was no circular reference (1116520) Fixed preview mode when animation clips with root curves are used (case 1116297, case 1116007) Added option to disable foot IK on animation playable assets (case 1115652) Fixed unevaluated animation tracks causing default pose (case 1109118) Fixed drawing of Group Tracks when header is off-screen (case 876340) Fixed drag and drop of objects inside a group being inserted outside (case 1011381, case 1014774)"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "About Timeline Timeline overview Using the Timeline window Creating a Timeline Asset and Timeline instance Recording basic animation with an Infinite clip Converting an Infinite clip to an Animation clip Animating a humanoid Using an Animation Override track and Avatar masking Nesting Timeline instances Timeline window Timeline Preview and Timeline Selector Timeline Playback Controls Track List and Track Headers Adding Tracks Selecting Tracks Duplicating Tracks Deleting Tracks Locking Tracks Muting Tracks Reordering Tracks and Rendering Priority Using Track Groups Collapsing and Expanding Track Groups Locking Track groups Clip Edit modes and the Clips view Panning and Zooming the Clips View Adding Clips Inserting Clips Selecting Clips Positioning Clips Tiling Clips Duplicating Clips Trimming Clips Splitting Clips Resetting Clips Changing Clip Play Speed Setting Gap Extrapolation Easing-in and Easing-out Clips Blending Clips Matching clip offsets Curves View Hiding and Showing Curves Navigating the Curves View Selecting Keys Adding Keys Editing Keys Changing Interpolation and Shape Deleting Keys Timeline Settings Timeline Inspector Setting Timeline Properties Setting Track Properties Activation Track Properties Animation Track Properties Setting Clip Properties Activation Clip Properties Animation Clip Common Properties Animation Clip Playable Asset Properties Audio Clip Properties Control Clip Common Properties Control Clip Playable Asset Properties Playable Director Component Samples Annotation marker Video track Time dilation track Tween track Text track Defining custom USS styles Timeline Glossary"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_about.html",
    "title": "Clip Edit modes and the Clips view | ModularUIPack",
    "summary": "Clip Edit modes and the Clips view Use the Clips view to add, position, and manipulate clips on each track in the Track list. The selected Clip Edit mode determines how clips interact when you add, move, or delete them. The Clip Edit modes (green) and the Clips view (red) Clips and the Clips view In the Clips view, each clip has a colored accent line that identifies the type of clip: Activation clips are green. Animation clips are blue. Audio clips are orange. Control clips are turquoise. Playable clips are white. A clip based on data, such as an Animation clip or an Audio clip, displays arrows that indicate when the clip has been trimmed to exclude part of its source animation, waveform, or other data. For example, if an Animation clip uses only part of its full key animation, white arrows indicate that key animation exists before the start or after the end of the clip. Small arrows (circled) indicate that data exists before the start or after the end of the area defined by the clip To resize a clip and view its hidden data, either right-click the clip and select Match Content from the context menu, or select the clip and modify its clip timing properties in the Inspector window. When you resize a clip, the selected Clip Edit mode determines how the surrounding clips are affected. Clip Edit modes Select a Clip Edit mode to choose how clips are added, positioned, and trimmed within the Clips view, or when modifying clip timing properties in the Inspector window. There are three Clip Edit modes that affect most clip editing features: Mix mode (default), Ripple mode, and Replace mode. Clip Edit modes are Mix (default and selected), Ripple, and Replace mode You can also temporarily switch between Clip Edit modes. This is useful if, for example, you want to temporarily use Ripple mode to offset the content of a track while you position clips. To temporarily switch between Clip Edit modes, hold down the following keyboard keys: Hold 1 to temporarily switch to Mix mode. Hold 2 to temporarily switch to Ripple mode. Hold 3 to temporarily switch to Replace mode. Mix mode Use Mix mode to add, position, and trim clips without moving or replacing adjacent clips. Mix mode creates blends between intersecting clips. Mix mode is the default Clip Edit mode. Timeline window with Mix mode as the selected Clip Edit mode. The position cursor (circled) indicates where you drag to position the clip. In Mix mode, when you hover over a selected clip in the Clips view, the cursor changes to indicate the action that you can perform. The action depends on the part of the clip that you hover over: When you hover over the start of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the start of the clip. When you hover over the middle of a selected clip, the cursor changes to a position cursor and indicates the area to drag to position the clip. When you hover over the end of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the end of the clip. In Mix mode, if you drag to trim or position a clip and it intersects another clip, the cursor changes to a white arrow that points towards the blend being created. There are three possible cursors depending on whether the blend is created at the beginning of the clip, at the end of the clip, or at both the beginning and end of the clip. The white arrow cursor indicates that dragging Clip 2A to the right creates a blend, at the end of the clip, between Clip 2A and Clip 2B. Ripple mode Use Ripple mode to add, position, and trim a clip while affecting the subsequent clips on the same track. Positioning or trimming clips in Ripple mode preserves the gaps between subsequent clips. Timeline window with Ripple mode as the selected Clip Edit mode. The position cursor (circled) indicates where you drag to position the clip. In Ripple mode, when you hover over a selected clip in the Clips view, the cursor changes to indicate the action that you can perform. The actions and areas are similar to Mix mode: When you hover over the start of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its start. When you hover over the middle of a clip, the cursor changes to a position cursor and indicates the area to drag to position the clip. When you hover over the end of a clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its end. In Ripple mode, when you click and drag to trim or position a clip, the cursor switches to a yellow arrow that points towards the affected clips and gaps. A yellow line indicates the ripple point. When you drag to trim a clip, dragging left and right changes the duration of the selected clip and repositions subsequent clips and gaps after the ripple point. For example, the yellow arrow cursor indicates that trimming the start of Clip 2A in Ripple mode changes the clip duration and affects the clips and gaps after the ripple point: Clip 2B and Clip 2C.] Replace mode Use Replace mode to add, position, and trim a clip while cutting or replacing intersecting clips. Timeline window with Replace mode as the selected Clip Edit mode. The position cursor (circled) indicates where you drag to position the clip. In Replace mode, when you hover over a selected clip in the Clips view, the cursor changes to indicate the action that you can perform. The actions and areas are similar to Mix mode: When you hover over the start of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its start. When you hover over the middle of a clip, the cursor changes to a position cursor and indicates the area to drag to position the clip. When you hover over the end of a clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its end. In Replace mode, when you drag to position a clip, the clip becomes translucent so that you can view overlapping clips. If the clip being positioned overlaps other clips, the cursor changes to a red arrow and red replacement lines indicate where each overlap occurs. Releasing the clip cuts the underlying clip at each red overlap. For example, the red arrow cursor indicates that dragging Clip 2A to the right overlaps Clip 2B. Releasing the clip cuts Clip 2B at the point where the overlap occurs. In Replace mode, trimming a clip is similar to positioning a clip. When you drag to trim a clip and it intersects another clip, the cursor changes to a red arrow and a red replacement line indicates where the overlap occurs. Releasing the trim cuts the intersecting clip at the red replacement line."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_add.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_add.html",
    "title": "Adding clips | ModularUIPack",
    "summary": "Adding clips The Timeline window supports different methods of adding clips to tracks, depending on the type of track, where you click, and whether a clip or track is already selected. The quickest method to add a clip is to right-click on an empty area within a track and select the appropriate Add option from the context menu. Depending on the track, the options for adding a clip change. Context menu for adding an Activation clip. There are other ways to add clips: Select a clip option from the Track menu in the Track Header to add a clip at the location of the Timeline Playhead. Drag an animation Source Asset from the Project window to an empty area in the Timeline window to automatically create an Animation track and add an Animation clip. Drag an animation Source Asset from the Project window to an existing track in the Timeline window to add an Animation clip to the same track. Drag an audio Source Asset from the Project window to an empty area in the Timeline window to automatically create an Audio track and add an Audio clip. Drag a GameObject with a PlayableDirector component to create a nested Timeline instance. This automatically creates a Control track and adds a Control clip for the nested Timeline instance. Drag a Prefab from the Project window to an empty area in the Timeline window to add a Prefab instance to your Timeline instance. This automatically creates a Control track and adds a Control clip for the Prefab instance. Drag a GameObject with a Particle component to add a particle effect to your Timeline instance. This automatically creates a Control track and adds a Control clip for the duration of the Particle effect. When you add a clip, the selected Clip Edit mode determines how the added clip interacts with surrounding clips. For example, if you add an Animation clip or an Audio clip in Mix mode and the added clip intersects a clip on the same track, Timeline creates a blend."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_blend.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_blend.html",
    "title": "Blending clips | ModularUIPack",
    "summary": "Blending clips Blend two clips on the same track to create a smooth transition between two Animation clips, two Audio clips, or two Playable clips. To blend two clips, select the Mix Clip Edit mode and position or trim one clip until it overlaps an adjacent clip. In a blend, the first clip is referred to as the outgoing clip and the second clip is referred to as the incoming clip. The area where the outgoing clip transitions to the incoming clip is referred to as the blend area. The blend area sets the duration of the transition. The blend area shows the transition between the outgoing clip and incoming clip Although the Clips view represents a blend area as a single linear curve, the transition between clips is actually comprised of two blend curves. The blend curve for the outgoing clip is referred to as the Blend Out curve. The blend curve for the incoming clip is referred to as the Blend In curve. By default, each blend curve is automatically set to an ease-in and ease-out curve. Use Blend Curves to customize the blend area Use the Blend Curves in the Inspector window to change the shape for either the Blend In or Blend Out curve of the selected clip. However, the Inspector window only allows you to edit the properties of one clip at a time. You cannot simultaneously customize both blend curves from the same blend area. To customize the Blend Curves for the transition between two clips: Select the outgoing clip to customize its Blend Out curve (labelled Out). Select the incoming clip to customize its Blend In curve (labelled In). To customize either the Blend Out curve or Blend In curve, use the drop-down menu to switch from Auto to Manual. With Manual selected, the Inspector window shows a preview of the blend curve. Click the curve preview to open the Curve Editor below the Inspector window. Select Manual and click the curve preview to open the Curve Editor Use the Curve Editor to customize the shape of the blend curve. By default, the blend curve includes a key at the beginning of the curve and a key at the end of the curve. The Curve Editor provides the following different methods of modifying the blend curve: Select the key at the start or end of the blend curve and use the tangent handles to adjust the interpolation between keys. Add additional keys to change the shape of the blend curve by adding more interpolation points. Adding keys in the Curve Editor is the same as adding keys in the Curves view. Right-click a key to delete or edit the key. Editing keys in the Curve Editor is the same as editing keys in the Curves view. Note that you cannot delete the first and last keys. Select a shape template from the bottom of the Curve Editor. The Curve Editor also includes shape templates based on whether you are modifying the Blend In curve or the Blend Out curve. Select a shape template to change the blend curve to the selected shape template."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_dup.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_dup.html",
    "title": "Duplicating clips | ModularUIPack",
    "summary": "Duplicating clips There are many ways to duplicate clips in the Clips view: Select a clip or multiple clips. Right-click in the Clips view and select Duplicate from the context menu. Select a clip or multiple clips. Hold Command/Control and press D. Right-click an unselected clip and choose Duplicate from the context menu. Duplicating clips copies each selected clip and places the duplicates after the last clip on the same track. If you duplicate clips used in a blend or clips separated by a gap, the blend or gap is also duplicated. If you duplicate an Animation clip that uses a recorded clip as its Source Asset, the recorded clip is also duplicated. The duplicate of the recorded clip only appears in your Project after you save the Scene or Project. For example, the following images demonstrates what happens if you duplicate an Animation clip named \"Clip 2B\" that uses the recorded clip named \"Recorded (3)\". Select the\"Clip 2B\", hold Command/Control and press D to duplicate A duplicate Animation clip is placed at the end of the same track. The recorded clip associated with \"Clip 2B\" is also duplicated. The new \"Recorded (6)\" recorded clip appears in the Project window after you save the Scene or Project"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_ease.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_ease.html",
    "title": "Easing-in and easing-out clips | ModularUIPack",
    "summary": "Easing-in and easing-out clips Ease-in and ease-out a clip to create a smooth transition between a clip and its surrounding gaps. To create an ease-in or ease-out transition, select a clip and, in the Inspector window, set either the Ease In Duration or the Ease Out Duration. Use Ease In Duration and Ease Out Duration to smoothly transition into and out of the selected clip. Ease-in and ease-out transitions create different effects, depending on the track: On an Animation track or an Animation Override track, ease-in to an Animation clip to create a smooth transition between the animation in the gap before the clip and the Animation clip. Ease-out of an Animation clip to create a smooth transition between the Animation clip and the animation in the gap after the clip. For information on the factors that determine what animation occurs in the gap before and after an Animation clip, see Setting gap extrapolation. On an Audio track, ease-in to an Audio clip to fade in the volume of the audio waveform. Ease-out of an Audio clip to fade out the volume of the audio waveform specified by the Audio clip. On a Playable track, ease-In to a Playable clip to fade in the effect or script in the Playable clip. Ease-out of a Playable clip to fade out the effect or script in the Playable clip. Ease-in and ease-out an Animation clip to transition between its animation and its gaps. Timeline represents ease-in and ease-out transitions as a linear curve. Although the Clips view represents an ease-in or ease-out transition as a single linear curve, every ease-in or ease-out transition is actually set to a gradually easing-in or easing-out curve by default. To change the shape of either the ease-in curve (labelled In) or the ease-out (labelled Out) curve, use the Blend Curves in the Inspector window. Use the Blend Curves to customize ease-in or ease-out transitions Note that the Blend Curves might affect the blend area used for blending between two clips. The Ease In Duration and Ease Out Duration properties indicate whether the Blend Curves affect an ease-in or ease-out transition, or a blend. For example, If the Ease Out Duration is editable, then the Blend Out curve (labelled Out) affects the curve used by an ease-out transition. If the Ease Out Duration is not editable, then the Blend Out curve (labelled Out) affects the outgoing clip in a blend between two clips. Ease Out Duration is not editable, therefore the Out curve affects the blend area between two clips To customize either the ease-in or ease-out transition, use the drop-down menu to switch from Auto to Manual. With Manual selected, the Inspector window shows a preview of the blend curve. Click the curve preview to open the Curve Editor below the Inspector window. Select Manual and click the preview to open the Curve Editor The Curve Editor is the same editor that is used to customize the shape of the blend curves when blending between clips. When creating an ease-in or an ease-out transition with Animation clips, the Animation clip blends between its gaps and the Animation clip. The following factors affect the values of animated properties in the gaps surrounding an Animation clip: The pre-extrapolate and post-extrapolate settings for the Animation clip and for other Animation clips on the same track. Animation clips on other Animation tracks that are bound to the same GameObject. The position or animation of the GameObject in the Scene, outside the Timeline Asset. Gap extrapolation and easing clips To successfully ease-in or ease-out an Animation clip, gap extrapolation must not be set based on the Animation clip being eased-in or eased-out. Gap extrapolation must either be set to None or set by another Animation clip. For example, the following ease-in transition has no effect because the Pre-Extrapolate for the Victory_Dance clip is set to Hold. This means that the ease-in creates a transition between the first frame of the Animation clip and the rest of the Animation clip. The gap is set to Hold from the Animation clip (circled). The ease-in transition has no effect. To ease-in from the Idle clip, set pre-extrapolate for the Victory_Dance clip to None. The ease-in gap uses the post-extrapolate mode from the Idle clip (circled). Overriding Animation tracks with ease-in and ease-out transitions Use two Animation tracks bound to the same GameObject to create a smooth transition between two Animation clips. For example, if two Animation tracks are bound to the same GameObject and a clip on the second track contains an ease-in transition, the ease-in transition creates a smooth transition between the animation on the previous track and the animation on the second track. Example of using two Animation tracks, bound to the same GameObject, to create smooth transitions between Animation clips. In this example, the Animation clip on the first track is a repeated idle cycle where the humanoid GameObject stands still. The Animation clip in the second track eases-in the Victory_Dance motion and eases-out to return back to the idle cycle To successfully override animation on a previous track, the gap extrapolation for the second track must be set to None so that the animation data in the gap is taken from the previous track bound to the same GameObject. The ease-in and ease-out transitions use this animation data."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_gap_extrap.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_gap_extrap.html",
    "title": "Setting gap extrapolation | ModularUIPack",
    "summary": "Setting gap extrapolation Gap extrapolation refers to how an Animation track approximates animation data in the gaps before and after an Animation clip. The main purpose for extrapolating animation data in the gaps between Animation clips is to avoid animation anomalies. Depending on the GameObject bound to the Animation track, these anomalies could be a GameObject jumping between two transformations, or a humanoid jumping between different poses. Each Animation clip has two gap extrapolation properties: Pre-Extrapolate, which controls how animation data is approximated in the gap before an Animation clip, and Post-Extrapolate, which controls how animation data extends in the gap after an Animation clip. By default, Timeline sets both extrapolation properties to Hold. This sets the gap before the Animation clip to the animation on the first frame, and the gap after the Animation clip to the animation on the last frame. Each gap \"holds\" the animation at a certain frame. Icons before and after an Animation clip indicate the selected extrapolation modes. Icons indicate the pre-extrapolate and post-extrapolate modes When an Animation track contains a gap between two Animation clips, the Post-Extrapolate property of the left clip sets the gap extrapolation. If the Post-Extrapolate property of the clip to the left of a gap is set to None, the Pre-Extrapolate property of the right clip sets the gap extrapolation. Icons before and after Animation clips indicate whether the extrapolation for a gap is taken from the Post-Extrapolate property of the clip to the left or from the Pre-Extrapolate property of the clip to the right. First track (red box): gap extrapolation from Post-Extrapolate of the left clip. Third track (blue box): gap extrapolation from Pre-Extrapolate of the right clip. To change the Pre-Extrapolate and Post-Extrapolate properties, select the Animation clip and use the Animation Extrapolation properties in the Inspector window. Use Pre-Extrapolate and Post-Extrapolate to set the extrapolation modes for the selected Animation clip The Pre-Extrapolate property is hidden when one of the following is true: The gap before the Animation clip is set by the Post-Extrapolation mode of the previous clip. There is no gap before the Animation clip. Use the Pre-Extrapolation property to set the gap extrapolation of the gap before the selected Animation clip to one of the following options: None: Turns off pre-extrapolation. In the gap before the selected Animation clip, the GameObject uses its transform, pose, or state from the Scene. Select None if, for example, you want to create an ease-in between the motion of a GameObject in the Scene and an Animation clip. See Easing-in and Easing-out Clips for details. Hold (default): In the gap before the selected Animation clip, the GameObject bound to the Animation track uses the values assigned at the start of the Animation clip. Loop: In the gap before the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation as a forward loop: from start to end. To offset the start of the loop, use the Clip In property. Ping Pong: In the gap before the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation forwards, then backwards. Use the Clip In property to offset the start of the loop. Changing the Clip In property affects the start of the loop when looping forward, and the end of the loop when looping backwards. Continue: In the gap before the selected Animation clip, the GameObject bound to the Animation track either holds or loops the animation based on the settings of the Source Asset. For example, if the selected Animation clip uses the motion file \"Recorded(2)\" as its Source Asset and \"Recorded(2)\" is set to Loop, then selecting Continue loops the animation according to the \"Recorded(2)\" Loop Time settings. Use the Post-Extrapolate property to set the gap extrapolation of the gap after the selected Animation clip to one of the following options: None: Turns off post-extrapolation. In the gap after the selected Animation clip, the GameObject uses its transform, pose, or state from the Scene. Selecting None is useful if, for example, you want to create an ease-out between an Animation clip and the motion of a GameObject in the Scene. See Easing-in and Easing-out Clips for details. Hold (default): In the gap after the selected Animation clip, the GameObject bound to the Animation track uses the values assigned at the end of the Animation clip. Loop: In the gap after the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation as a forward loop: from start to end. To offset the start of the loop, use the Clip In property. Ping Pong: In the gap after the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation forwards, then backwards. Use the Clip In property to offset the start of the loop. Changing the Clip In property affects the start of the loop when looping forward, and the end of the loop when looping backwards. Continue: In the gap after the selected Animation clip, the GameObject bound to the Animation track either holds or loops the animation based on the settings of the Source Asset. For example, if the selected Animation clip uses the motion file \"Recorded(2)\" as its Source Asset and \"Recorded(2)\" is set to Loop, then selecting Continue loops the animation according to the \"Recorded(2)\" Loop Time settings."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_insert.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_insert.html",
    "title": "Inserting clips | ModularUIPack",
    "summary": "Inserting clips The Timeline window supports different methods of inserting clips depending on the type of track, where you click, and whether a clip or track is already selected. In the Timeline window, inserting clips refers to adding and making space for a clip without blending or replacing intersecting clips. To accurately insert a clip, select Ripple mode as the Clip Edit mode, and position the Timeline Playhead to set the insertion point. Select Add From Animation Clip from the Track menu for the track where you want to insert the clip. Accurately insert a clip with the Ripple mode (red circle), the Timeline Playhead (green box), and the Add From Animation Clip in the Track menu In the above example, the Timeline Playhead is the insertion point. You can specify the insertion point using these other methods: Right-click within a gap and add a clip with the context menu. The insertion point is where you right-click. Drag a Source Asset (animation or audio) to a track in the Clips view. The insertion point is where you stop dragging. The location of the insertion point determines where the clip is inserted and how it affects the other clips and gaps on the same track: If the insertion point intersects a clip, the inserted clip is added at the insertion point. The intersected clip, and all subsequent clips and gaps, are rippled after the inserted clip. If the insertion point is within a gap and there is enough space between the insertion point and the next clip, then the inserted clip is added to the gap. The other clips on the track are not affected. If the insertion point is within a gap and the inserted clip overlaps the next clip, the inserted clips is added at the insertion point. The next clip, and all subsequent clips and gaps, are rippled to accommodate the inserted clip. For example, inserting a clip at the Timeline Playhead ripples Clip 1B to accommodate the 36 frame Run clip."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_match.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_match.html",
    "title": "Matching clip offsets | ModularUIPack",
    "summary": "Matching clip offsets Every Animation clip contains key animation, or motion, that animates the GameObject, or humanoid, bound to the Animation track. When you add an Animation clip to an Animation track, its key animation or motion does not automatically begin where the previous clip ends. The key animation or motion also does not end where the next clip begins. By default, each Animation clip begins at the position and rotation of the GameObject, or humanoid, at the beginning of the Timeline instance. An animation sequence of three Animation clips. For example, three Animation clips create an animation sequence that starts with a clip of a standing humanoid that starts to run, then turns left, and finally comes to a stand still. Each Animation clip begins at the position and rotation of the humanoid at the start of the Timeline instance, indicated by a red arrow in the Scene view below. The three Animation clips, Stand2Run, RunLeft, and Run2Stand, end at the green, blue, and yellow arrows, respectively. For an animation sequence to flow seamlessly between adjacent Animation clips, you must match each Animation clip with its previous clip or next clip. Matching clips adds a position and rotation offset for each Animation clip. The position and rotation offsets are named Clip Transform Offsets and they can be set manually or automatically. The following sections describe how to automatically match two or many Animation clips. Matching two clips To match the clip offsets between two clips, right-click the Animation clip that you want to match. From the context menu, select either Match Offsets to Previous Clip or Match Offsets to Next Clip. Matching an Animation clip with the next clip For example, right-click the middle Animation clip, named \"RunLeft\", and select Match Offsets To Next Clip to match its offsets to the next clip When you are matching offsets for a single Animation clip, you don’t need to select the Animation clip first, but you must right-click the Animation clip that you want to match. For example, if you right-click an Animation clip that is not selected, Timeline matches the clicked clip and ignores the selected Animation clips. The context menu only displays the match options available for the clicked Animation clip. For example, if there is a gap before the clicked Animation clip, only the Match Offsets to Next Clip menu item is available. Matching many clips To match the clip offsets of many clips, select the adjacent Animation clips that you want to match and right-click one of the selected clips. From the context menu, select either Match Offsets to Previous Clip or Match Offsets to Next Clip. Matching many clips with previous clips For example, select the \"RunLeft\" and \"Run2Stand\" clips. Right-click one of the selected clips, and select Match Offsets to Previous Clips, to match the \"RunLeft\" clip with the previous \"Stand2Run\" clip, and to match \"Run2Stand\" with the previous \"RunLeft\" clip."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_pan_zoom.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_pan_zoom.html",
    "title": "Panning and zooming the Clips view | ModularUIPack",
    "summary": "Panning and zooming the Clips view Use either the keyboard or the zoombar to pan and zoom the contents of the Clips view. There are many ways to pan, zoom, or frame clips in the Clips view with the keyboard: To pan, either middle-drag, or hold Alt and drag. To frame all selected clips, select clips then press F. To frame all clips, press A. To zoom horizontally, move the scroll-wheel. To zoom vertically, hold Command/Control and move the scroll-wheel. When you horizontally zoom the Clips view, the zoombar indicates the level of zoom. The zoombar is the horizontal bar at the bottom of the Clips view that zooms and pans the section of the Timeline instance or Timeline Asset that is shown in the Clips view. The zoombar (inside the red box) and the zoombar handles (shown by the green arrows). The zoombar thumb is the area between the two zoombar handles. There are many ways to pan and zoom with the zoombar: To pan, drag the zoombar thumb left or right. To jump to a section of the Timeline instance or Timeline Asset, click on an empty area of the scrollbar, on either side of the zoombar. To zoom in or zoom out, drag either zoombar handle. Dragging a zoombar handle also resizes the zoombar thumb. On the zoombar thumb, a white line indicates the location of the Timeline Playhead. Use this line to see where the Timeline Playhead is in relation to the zoom level and the part of the Timeline instance shown in the Clips view."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_position.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_position.html",
    "title": "Positioning clips | ModularUIPack",
    "summary": "Positioning clips To position a clip, select Mix mode as the Clip Edit mode. Select a clip and hover over the middle of the clip. When the cursor changes to a position cursor, click and drag the clip to its new position. While dragging, black lines indicate the selection of clips being positioned. The Timeline ruler shows the start time and end time of the selected clips being positioned. Select Mix mode (circled). Select and drag to position a clip. By default, when you drag to position clips, both Snap to Frame and Edge Snap are enabled in the Clips view. You can change these snap settings in the Timeline Settings menu. You can also move a clip to another track of the same type. Drag the clip off of its current track and a white ghost indicates where the clip will be moved. If you drag a clip to an area where the clip cannot be placed, the ghost changes to red indicating that you cannot release the clip in that area. For example, you cannot drag a clip where there is no track. The ghost of the selection being moved is drawn in red if you attempt to move a clip to an invalid area You can position a selection of clips on the same track, or on different tracks. You are not limited to positioning one clip at a time. The same edge snapping rules and invalid area restrictions apply when positioning a selection of clips on many tracks. Positioning clips with the Inspector window You can use the Inspector window to position clips. To position a clip with the Inspector window, select a clip and use the Clip Timing properties in the Inspector window to change its Start property. Clip Timing properties for an Animation clip The effect that changing the Start value has on adjacent clips depends on the selected Clip Edit mode. Positioning clips in different Clip Edit modes You are not restricted to positioning clips with Mix mode as the selected Clip Edit mode. You can also position clips in Ripple mode and in Replace mode. The difference is the effect each Clip Edit mode has on adjacent clips on the tracks where clips are being moved: Positioning clips in Mix mode creates blends between intersecting clips. Positioning clips in Ripple mode ripples subsequent clips, respecting the gaps between clips. Positioning clips in Replace mode cuts or replaces intersecting clips. Positioning clips with the Timeline Playhead You can position clips by inserting frames at the position of the Timeline Playhead. To do this, move the Timeline Playhead to where you want to insert frames. To insert frames starting at frame 40, move the Timeline Playhead to frame 40 Right-click the Timeline Playhead on the Timeline ruler above the Clips view, choose Insert > Frame, and a number of frames. To insert 25 frames, right-click the Timeline Playhead and select Insert > Frame, then 25 Frames This inserts frames in the Timeline Asset at the position of the Timeline Playhead. Inserting frames only repositions the clips that start after the position of the Timeline Playhead. Only the clips that start after the Timeline Playhead are moved. In this example, inserting 25 frames at frame 40 affects Clip 1B, Clip 2B, and Clip 2C."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_reset.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_reset.html",
    "title": "Resetting clips | ModularUIPack",
    "summary": "Resetting clips You can reset the duration and speed of a clip. Resetting a clip does not reset the following properties: Start Ease In Duration and Ease Out Duration Animation Extrapolation settings Blend Curves To reset a clip, right-click the clip and select Editing from the context menu. Then, select Reset Duration, Reset Speed, or Reset All. Depending on the reset option you select, resetting a clip does the following: Option: Description: Reset Duration Resets the Duration and the Clip In. Reset Speed Resets the Speed Multiplier. Reset All Resets the Duration, Clip In, and Speed Multiplier. If resetting a clip results in two clips overlapping each other, Timeline creates a blend for the overlap, regardless of the selected Clip Edit mode."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_select.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_select.html",
    "title": "Selecting clips | ModularUIPack",
    "summary": "Selecting clips Click to select a single clip. The Clips view displays the selected clip with a white border, including its blends. Selecting a clip deselects all other tracks or clips. Selecting a clip also shows its properties in the Inspector window. The clip properties change depending on the type of clip and whether multiple clips are selected. See Setting Clip properties for details. Hold Shift and click to select contiguous clips vertically on different tracks or horizontally on the same track. For example, to select three contiguous clips on the same track, select the first clip, then hold Shift and click the third clip. All three clips are selected. Click to select the first clip Shift-click the third clip to select contiguous clips on the same track Hold Command/Control and click to select discontiguous clips. Hold Command/Control and click a selected clip to deselect it. Click and drag on an empty area in the Clips view to draw a selection rectangle. This selects all clips inside the rectangle, including the clips that intersect the rectangle. Hold down Shift and draw a selection rectangle to add clips to the current selection. You can also press the Tab key to select clips. The behaviour of the Tab key changes depending on the current selection: If a track is selected, press Tab to select the first clip on the selected track. If many tracks are selected, press Tab to select the first clip on the first selected track. If a clip is selected, press Tab to select its track. If there are no clips or tracks selected, press Tab to select the first clip on the first track. Use the arrow keys to change the selected clips. The behaviour and results depend on the current selection and which modifier keys you press: If nothing is selected in the Timeline window, press the Tab, Up arrow, or Down arrow key to select the first clip on the first track. If a clip is selected, press the Left arrow key to select the previous clip. If the selected clip is the first clip on a track, the Left arrow key selects the track. If a clip is selected, press the Right arrow key to select the next clip. Press the Up arrow key to select the closest clip on a previous track. Press the Down arrow key to select the closest clip on a next track. Hold Shift and press either the Left arrow key or Right arrow key to add or remove clips from the selection of clips. Whether a clip is added to or removed from the selection of clips is relative to the first selected clip. If you zoom into the Clips view, it pans to show either the start or end of the most recently selected clip. For example, if a selected clip is framed in the Clips view and you press the Right arrow key to select the next clip which is outside the Clips view, the Clips view pans to show the start of the selected clip. You can also select clips with the Timeline Playhead. Right-click the Timeline Playhead and choose a selection option. This selects clips that either start after, start before, end after, end before, or intersect the Timeline Playhead. Clips are selected on all tracks. Right-click the Timeline Playhead and choose Select for more clip selection options"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_speed.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_speed.html",
    "title": "Changing clip play speed | ModularUIPack",
    "summary": "Changing clip play speed Change the clip play speed to accelerate or decelerate its audio, motion, animation, or particle effect. Changing the clip play speed affects the duration of the clip. You can only change the play speed for Animation clips, Audio clips, and Control clips. To change the clip play speed, first, select the Clip Edit mode to determine how other clips on the same track are affected: If the change in duration results in two clips that overlap each other: Select Mix mode to create a blend. Select Replace mode to cut or remove intersecting clips. Select Ripple mode to reposition the clips that come after the clip being sped up or slowed down. Ripple mode preserves the gaps between clips. Select the clip and set the Speed Multiplier property in the Inspector window. The Speed Multiplier property shows the play speed as a multiplier of the original clip speed, so 1 plays the clip at the same speed as the original clip. Speed Multiplier in the Inspector window For example, to double the play speed of an Animation clip, change the Speed Multiplier to 2. This changes the duration of an 80 frame Animation clip to 40 frames by doubling its play speed. There are other ways to change the play speed of a clip: Right-click the clip and select Editing > Double Speed to halve the clip duration. The clip plays at twice its current speed. A short-dashed line and a multiplication factor indicates an accelerated clip. Doubling the clip speed sets the Speed Multiplier property to double its current value. Right-click the clip and select Editing > Half Speed to double the clip duration. The clip plays at half its current speed. A long-dashed line and multiplication factor indicates a decelerated clip. Halving the clip speed sets the Speed Multiplier property to half its current value. Right-click the clip and select Editing > Reset Speed to reset the clip to its original speed. This is the original duration of the clip. Resetting the clip speed sets the Speed Multiplier property to 1. A short-dashed line and multiplication factor of 2.00x indicates a clip playing at double its original speed"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_split.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_split.html",
    "title": "Splitting clips | ModularUIPack",
    "summary": "Splitting clips You can split a clip into two identical clips that have different start points, end points, and durations. You can extend the start or end of the clip to include split animation or audio. You can also reset a clip to undo a split and other edits. To split a clip, select the clip, position the playhead where you want to split the clip, and either right-click the clip and select Editing > Split, or press S. Any selected clips that intersect the playhead are split into separate clips. You can position, trim, and edit split clips independently. Select the clips to be split, position the playhead where you want the split to occur, and press S Selected clips are split where each clip intersects the playhead If a split clip is part of a blend, or if the split is performed within a blend, Timeline copies the blend settings to the split clips."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_tile.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_tile.html",
    "title": "Tiling clips | ModularUIPack",
    "summary": "Tiling clips Tile clips to remove gaps and blends between clips on the same track. Tiling clips is useful if you want each clip to begin exactly where the previous clip ends. If you select multiple clips on multiple tracks, you must select at least two clips on the same track for tiling to have an affect. To tile clips, select at least two clips on the same track. Three clips with gaps and blends are selected Right-click on one of the selected clips and select Tile from the context menu. Timeline positions the selected clips based on the position of the first selected clip. The first selected clip does not move, and the duration of each clip remains the same. Tiling removes gaps and blends between the selected clips"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_trim.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_trim.html",
    "title": "Trimming clips | ModularUIPack",
    "summary": "Trimming clips Trimming a clip cuts off a portion of the clip at its start or end. To trim a clip, select the Mix mode as the Clip Edit mode, then drag the start or end of the clip. Dragging the start or end of a clip automatically selects the clip, showing its properties in the Inspector window. Use the Clip Timing properties in the Inspector window to set the start, end, duration, and offset (Clip In) of a clip to exact values. Position and trim a clip by adjusting its Start, End, Duration, and Clip In properties in the Inspector window Trimming the start of a clip Trimming an Animation clip or Audio clip after the start of the Source Asset, selects the part of the Source Asset the clip uses. Trimming the start of an Animation clip trims its key animation, relative to the start of the Source Asset Trimming a clip is non-destructive. Trim the clip again to modify its start to include the animation, or the audio waveform, cut off during a previous trim. You can also reset a clip to undo trims or other edits. To trim the start of a clip to a precise time or frame, use the Clip In property in the Inspector window. Changing the Clip In property is similar to the same effect as trimming the start of a clip after the start of its Source Asset. Trimming the end of a clip As with the start of the clip, trimming an Animation clip or Audio clip before the end of the Source Asset, selects the part of the Source Asset the clip uses. Trimming the end of an Animation clip trims its key animation, relative to the end of the Source Asset If you trim the end of an Animation clip or Audio clip past the end of the Source Asset the clip is based on, the extra clip area either holds or loops, depending on the settings of the Source Asset. For example, an Animation clip named \"End Move\" uses the motion file \"Recorded(2)\" as its Source Asset. The motion file \"Recorded(2)\" is set to loop. Trimming the end of the Animation clip past the end of the \"Recorded(2)\" Source Asset fills the extra clip area by looping \"Recorded(2)\". A white animation curve shows the hold or loop. A white animation curve indicates whether the extra clip area holds or loops data, depending on the Source Asset To choose whether the extra clip area holds or loops, select the Source Asset to change its settings in the Inspector window. Depending on the type of Source Asset, different properties control whether the Source Asset holds or loops. If you are unsure which Source Asset is used by a clip, select the clip in the Clips view, right-click and select Find Source Asset from the context menu. This highlights the Source Asset in the Project window. Trimming the end of looping clips The Timeline window provides special trimming options for Animation clips or Audio clips with loops. These special trim options either remove the last partial loop or complete the last partial loop. For example, the Animation clip named run_away is over three times longer than the Source Asset on which it is based. Since the Source Asset is set to loop, the Animation clip loops the Source Asset until the Animation clip ends which results in a partial loop. L1, L2, and L3 signify complete loops. The clip ends partially through the fourth loop, L4. To extend the end of the clip and complete a partial loop, select the clip, right-click and select Editing > Complete Last Loop. To trim the clip at the last complete loop, select the clip, Right-clip and select Editing > Trim Last Loop. The result of select Editing > Complete Last Loop The result of select Editing > Trim Last Loop Trimming with the Timeline Playhead You can also trim a clip based on the location of the playhead. To trim using the playhead, position the playhead within the clip to be trimmed. Right-click the clip and select either Editing > Trim Start or Editing > Trim End. Trim Start trims the start of the clip to the playhead. Trim End trims the end of the clip to the playhead. _Move the Timeline Playhead within the _ Right-click and select Editing > Trim Start to trim the start of the clip to the playhead If you select clips on multiple tracks, Timeline only trims the selected clips that intersect the playhead."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_about.html",
    "title": "Curves view | ModularUIPack",
    "summary": "Curves view The Curves view shows the animation curves for Infinite clips, or for Animation clips that were converted from Infinite clips. Use the Curves view for basic animation editing such as adding keys, modifying keys, adjusting tangents, and changing the interpolation between keys. To view animation curves for an Infinite clip, click the Curves icon next to the Track name. To view animation curves for an Animation clip, select the Animation clip and click the Curves icon. The Curves view is similar to Curves mode in the Animation window. The Curves icon (circled) shows and hides the Curves view for the selected clip The Curves icon does not appear for Animation tracks with humanoid animation or imported animation. To view and edit key animation for humanoid or imported Animation clips, right-click an Animation clip and select Edit in Animation Window from the context menu. You can also double-click the Animation clip. The Animation window appears, linked to the Timeline window. When in linked mode, the Animation window shows a Linked icon and the name of the Animation clip being edited. Click the Linked icon to stop editing the Animation clip and to release the Animation window from linked mode. Animation window linked to the Timeline window, indicated by the Linked icon and Animation clip name"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_hide.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_hide.html",
    "title": "Hiding and showing curves | ModularUIPack",
    "summary": "Hiding and showing curves For the selected Animation clip, the Curves view includes a hierarchical list of the properties with animation curves. Expand, collapse, select, and deselect the properties in this list to filter which animation curves show in the Curves view. For example, to show only the X-axis animation curves for the position of a GameObject, expand Position, select the Position.x property, and then press F to frame the animation curve for the Position.x property. Curves view showing the animation curve for the Position.x property There are many ways to expand, collapse, select, and deselect animation curves: Click the Triangle icon of a parent property to expand and collapse its list of child properties. Hold Shift and click to select contiguous properties. Hold Command/Control and click to select discontiguous properties. Hold Command/Control and click a selected property to deselect it."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_add.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_add.html",
    "title": "Adding keys | ModularUIPack",
    "summary": "Adding keys The Curves view provides the following methods for adding keys: Right-click on an animation curve and select Add Key. This method adds a key at the location of the right-click. Double-click on an animation curve. This method adds a key at the location of the Double-click."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_del.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_del.html",
    "title": "Deleting keys | ModularUIPack",
    "summary": "Deleting keys The Curves view provides the following methods for deleting keys: Right-click a key and select Delete Key from the context menu. This method does not affect selected keys. Select a key and either press Delete or right-click and select Delete Key from the context menu."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_edit.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_edit.html",
    "title": "Editing keys | ModularUIPack",
    "summary": "Editing keys Edit a key to change its time, value, or both. The Curves view provides the following different methods for editing a key: Right-click a key and select Edit from the context menu to enter specific values for time and value. Select a key and press Enter to enter specific values. Select and drag a key to change its time and value. Drag a key vertically, then press Shift to snap the key on the vertical axis. This changes the value of the key, but not its time. Drag a key horizontally, then press Shift to snap the key on the horizontal axis. This changes the time of the key, but not its value."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_interp.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_interp.html",
    "title": "Changing interpolation and shape | ModularUIPack",
    "summary": "Changing interpolation and shape Every key has one or two tangents that control the interpolation of the animation curve. The term interpolation refers to the estimation of values that determine the shape of the animation curve between two keys. Whether a key has one of two tangents depends on the location of the key on the animation curve. The first key only has a right tangent that controls the interpolation of the animation curve after the key. The last key only has a left tangent that controls the interpolation of the animation curve before the last key. The first key (red) only has a right tangent, and the last key (blue) only has a left tangent All other keys have two tangents where the left tangent controls the interpolation before the key, and the right tangent controls the interpolation after the key. By default, tangents are joined. Dragging one tangent affects the position of both tangents, and the interpolation of the animation curve both before and after the key. Keys that are neither the first key nor last key have joined tangents by default. Dragging either tangent changes the interpolation of the animation curve both before and after the key. Dragging a tangent may also change the interpolation mode of the animation curve. For example, most keys are set to the Clamped Auto interpolation mode which automatically smooths animation curve as it passes through the key. If you drag a tangent of a key set to Clamped Auto, the interpolation mode changes to Free Smooth. The term interpolation mode refers to the interpolation algorithm that determines which shape to use when drawing the animation curve. To view the interpolation mode for a key, select the key and right-click. The context menu shows the interpolation mode. To change the interpolation mode for a key, select the key, right-click and select another interpolation mode. The context menu shows the interpolation mode for the selected key. Use the context menu to change the interpolation mode. Some interpolation modes break the left and right tangents so that you can position them separately. When tangents are broken, you can set a separate interpolation mode for the animation curve before the key and the animation curve after the key. For more details on the different interpolation modes, see Editing Curves. In the Animation window documentation, the interpolation mode is referred to as tangent type."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_sel.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_sel.html",
    "title": "Selecting keys | ModularUIPack",
    "summary": "Selecting keys Click to select a single key. Selecting a key deselects all other selected keys. The Curves view displays the selected key with its tangents. Click to select a single key. A selected key shows its tangents. To select contiguous keys along the same animation curve, click the first key, then hold Shift and click the last key. Hold Shift and click a key to select contiguous keys There are many ways to select and deselect keys in the Curves view: Hold Command/Control and click to select discontiguous keys. Hold Command/Control and click a selected key to deselect it. Click and drag on an empty spot in the Curves view to draw a selection rectangle. This selects all keys within the rectangle. Hold down Shift while drawing the selection rectangle to add keys to the current selection. Double-click a selected key to select all keys on the same animation curve."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_nav.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_nav.html",
    "title": "Navigating the Curves view | ModularUIPack",
    "summary": "Navigating the Curves view Use one of the following methods to pan, zoom, resize, or frame the animation curves and keys in the Curves view: To pan, middle-drag, or hold Alt and drag. To zoom vertically, move the scroll-wheel, or hold Alt and right-drag. To zoom horizontally, hold Command/Control and zoom vertically. To resize the Curves view, drag the double line separating the Curves view from the next track in the Track list. To frame only selected animation curves or selected keys, press F. To frame all animation curves or keys, press A. You can also use the Zoombar to pan, zoom, and resize the Clips view."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_hide.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_hide.html",
    "title": "Collapsing and expanding Track groups | ModularUIPack",
    "summary": "Collapsing and expanding Track groups To collapse the tracks in a Track group, either click the Triangle icon beside the name of the Track group or double-click the Track group. The tracks are collapsed from view in the Timeline window, not muted. To expand the tracks in a Track group, click the Triangle icon or double-click the Track group again. Triangle icon (circled) collapses the tracks in the Game Board Track group. A ghost track visually represents the tracks in the collapsed group. You can also press the Left Arrow key to collapse the tracks in a Track group while the Track group is selected. Press the Right Arrow key to expand the tracks in a Track group. If you press the Right Arrow key with a Track group already selected, the selection switches to the first track in the Track group."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_lock.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_lock.html",
    "title": "Locking Track groups | ModularUIPack",
    "summary": "Locking Track groups You can also lock a Track group to prevent editing its Track sub-groups, tracks, and clips. This is useful when you have finished animating the content within a Track group and you want to avoid inadvertently modifying its tracks or clips. You cannot edit the tracks or select the clips in a locked Track group. The Lock icon identifies a locked Track group. Selected and locked Track group with Lock icon (red circle) To lock a Track group, right-click on the Track group header and select Lock from the context menu. You can also select a Track group and press L. You can select and lock multiple Track groups. To unlock a Track group, click the Lock icon. You can also select a locked Track group and press L, or right-click and select Unlock from the context menu. Tracks in a Track group maintain their individual locked state when you lock a Track group. This means that if you lock a track and then lock its Track group, when you unlock the Track group, the track remains locked. For example, the MovingPieces Track group has its first track locked and its second track unlocked. If you lock the Track group, both the first and second track are locked. If you unlock the Track group, the first track remains locked and the second track is unlocked because the first track was already locked before the Track group was locked."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_use.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_use.html",
    "title": "Using Track groups | ModularUIPack",
    "summary": "Using Track groups Use Track groups to organize tracks when you are working with many tracks. For example, a Timeline Asset contains an Animation track and an Audio track that interacts with the same GameObject. To organize these tracks, move them into their own Track group. To add a Track group, click the Add button and select Track Group from the Add menu. You can also right-click an empty area of the Track list and select Track Group from the context menu. A new Track group appears at the bottom of the Track list. Timeline window with Track group added To rename a Track group, click its name and an I-beam cursor appears. Type the new name for the Track group and press Return. To move tracks into a Track group, select one or more tracks and drag over the Track group. The Track group is highlighted. When dragging a selection of tracks, the last selected track type displays beside the cursor. To drop the tracks before a specific track in the Track group, drag until a white insert line indicates the destination. Release the mouse button when the white insert line appears within the Track group Selected tracks are moved to the location of the insert line A Track group can also have any number of Track sub-groups. To add a Track sub-group, either select a Track group and click the Add button in the Track list, or click the Plus icon beside the Track group name, and select Track Sub-Group. You can also use this menu to add tracks directly to a Track group or a Track sub-group. Click the Plus icon to add Track Sub-Groups and tracks to Track groups"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/index.html",
    "title": "About Timeline | ModularUIPack",
    "summary": "About Timeline Unity's Timeline Use Unity's Timeline to create cinematic content, game-play sequences, audio sequences, and complex particle effects. Each cut-scene, cinematic, or game-play sequence that you create with Unity's Timeline consists of a Timeline Asset and a Timeline instance. The Timeline window creates and modifies Timeline Assets and Timeline instances simultaneously. The Timeline Overview section includes details on the relationship between the Timeline window, Timeline Assets, and Timeline instances. The Using Timeline section shows how to create Timeline Assets and Timeline instances, record basic animation, animate humanoids, and use other Timeline features. The Samples section includes a description of the samples offered by the Timeline package. Installing Timeline Timeline is a Package and is installed through the Packages window in Unity. Consult the Packages window documentation for more information. Technical details Requirements This version of Timeline is compatible with the following versions of the Unity Editor: 2019.1 and later (recommended) Package contents The following table indicates the folder structure of the Timeline package: Location Description <Runtime> Root folder containing the source for the Timeline Runtime. This is the source for what is available in the Player. <Editor> Root folder containing the source for the Timeline Editor used to edit Timeline files inside the Unity Editor. Document revision history Date Reason October 23, 2020 Added documentation for customization samples. October 22, 2020 Added samples section October 10, 2018 Document created. Matches package version 0.0.0"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_about.html",
    "title": "Timeline properties in the Inspector window | ModularUIPack",
    "summary": "Timeline properties in the Inspector window The Inspector window displays information about the selected GameObject including all attached components and their properties. This section documents the properties in the Inspector window that appear when you select one or many Timeline Assets, tracks, clips, or a combination. If you select a single Timeline Asset, track, or clip, the Inspector window displays the properties for the selected Asset, track, or clip. For example, if you select an Animation clip, the Inspector window shows the common properties and Playable Asset properties for the selected Animation clip. Inspector window when selecting an Animation clip in the Timeline window If you select multiple Timeline Assets, tracks, or clips, the Inspector window shows two sections: a section with properties that apply to the entire selection, and a section of common properties that apply to each selected object individually. For example, if you select an Audio clip on one track and two Animation clips on another track, the Inspector window includes Multiple Clip Timing properties and Clip Timing properties: Use the Multiple Clip Timing properties to change the Start or End of the selection as a group. For example, if you change the Start to frame 30, the selection of clips start at frame 30. This moves the start of the first clip to frame 30 and the remaining selected clips are placed relative to the first clip, respecting gaps between selected clips. Use the Clip Timing properties to change the common properties for each selected clip. If the selected clips have different values for the same property, the value is represented with a dash (\"-\"). If you change the dash to a value, it sets the value for all selected clips. For example, if you change the Ease In Duration from a dash to 10 frames, the ease in of each selected clip changes to 10 frames. Inspector window when selecting multiple clips, on multiple tracks, in the Timeline window If your selection does not have common properties, the Inspector window prompts you to narrow the selection. For example, if you select an Animation track and an Audio clip in the Timeline window, you are prompted to narrow the selection: The message in the Inspector window when the selection does not have common properties"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp.html",
    "title": "Setting clip properties | ModularUIPack",
    "summary": "Setting clip properties Use the Inspector window to change the name of a clip and other properties, such as its timing and blend properties. The available properties depend on the type of clip selected. For example, select an Activation clip to change its name and set its Clip Timing. Inspector window when selecting an Activation clip in the Timeline window Not all clips have properties. See the following sections for clips with properties: Activation clip properties Animation clip common properties Animation clip Playable Asset properties Audio clip properties Control clip common properties Control clip Playable Asset properties"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_act.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_act.html",
    "title": "Activation clip properties | ModularUIPack",
    "summary": "Activation clip properties Use the Inspector window to change the name of an Activation clip and its Clip Timing. Inspector window when selecting an Activation clip in the Timeline window Display Name The name of the Activation clip shown in the Timeline window. By default, each Activation clip is named \"Active\". Clip Timing properties Use the Clip Timing properties to change the position and duration of the Activation clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds to modify a Clip Timing property, all decimal values are accepted. When specifying frames, only integer values are accepted. For example, if you attempt to enter 12.5 in a frames (f) field, it is set to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End, or Duration may ripple or replace Activation clips on the same track. Property Description Start The frame or time (in seconds) when the clip starts. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_com.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_com.html",
    "title": "Animation clip common properties | ModularUIPack",
    "summary": "Animation clip common properties Use the Inspector window to change the common properties of an Animation clip. The common properties of an Animation clip include its name, timing, play speed, blend properties, and extrapolation settings. Inspector window when selecting an Animation clip in the Timeline window Display Name The name of the Animation clip shown in the Timeline window. Clip Timing properties Use the Clip Timing properties to position, change the duration, change the ease-in and ease-out duration, choose the extrapolation mode, and adjust the play speed of the Animation clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds, a Clip Timing property accepts decimal values. When specifying frames, a property only accepts integer values. For example, if you attempt to enter 12.5 in a frames (f) field, the Inspector window sets the value to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End, or Duration may blend, ripple, or replace Animation clips on the same track. Property Description Start The frame or time (in seconds) when the clip starts. Changing the Start changes the position of the clip on its track in the Timeline Asset. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration. Ease In Duration Sets the number of seconds or frames that it takes for the clip to ease in. If the beginning of the clip overlaps and blends with another clip, the Ease In Duration cannot be edited and instead shows the duration of the blend between clips. See Blending clips. Ease Out Duration Sets the number of seconds or frames that it takes for the clip to ease out. If the end of the clip overlaps and blends with another clip, the Ease Out Duration cannot be edited and instead shows the duration of the blend between clips. In this case, trim or position the clip to change the duration of the blend between clips. See Blending clips. Clip In Sets the offset of when the source clip should start playing. For example, to play the last 10 seconds of a 30 second Animation clip, set Clip In to 20 seconds. Speed Multiplier A multiplier on the playback speed of the clip. This value must be greater than 0. Changing this value changes the duration of the clip. Animation Extrapolation Use the Animation Extrapolation properties to set the gap extrapolation before and after an Animation clip. The term gap extrapolation refers to how an Animation track approximates or extends animation data in the gaps before, between, and after the Animation clips on a track. There are two properties for setting the gap extrapolation between Animation clips. The Pre-Extrapolate property only appears for Animation clips. Property Description Pre-Extrapolate Controls how animation data is approximated in the gap before an Animation clip. The Pre-Extrapolate property affects the easing-in of an Animation clip. Post-Extrapolate Controls how animation data extends in the gap after an Animation clip. The Post-Extrapolate property affects the easing-out of an Animation clip. Blend Curves Use the Blend Curves to customize the transition between the outgoing and incoming Animation clips. See Blending clips for details on how to blend clips and customize blend curves. When easing-in or easing-out clips, use the Blend Curves to customize the curve that eases-in or eases-out an Animation clip. See Easing-in and Easing-out clips for details."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_plyb.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_plyb.html",
    "title": "Animation clip Playable Asset properties | ModularUIPack",
    "summary": "Animation clip Playable Asset properties Use the Inspector window to change the Playable Asset properties of an Animation clip. These properties include controls for manually applying position and rotation clip offsets, and options for overriding default clip matching. To view the Playable Asset properties for an Animation clip, select an Animation clip in the Timeline window and expand Animation Playable Asset in the Inspector window. Inspector window showing the Animation Playable Asset properties for the selected Animation clip Animation Clip Use the Animation Clip to change the source asset used by the clip on the Animation track. The source asset is either a recorded Infinite clip or an external motion clip. Clip Transform Offsets Use the Clip Transform Offsets area to manually apply position and rotation offsets to the selected Animation clip. The tools and properties underneath the Clip Transform Offsets provide two methods of manually applying offsets based on the selected source: Property: Description: Move tool Shows a Move Gizmo in the Scene view. Use the Move Gizmo to manually position the clip offset for the selected Animation clip. Using the Move Gizmo changes the Position coordinates. Rotate tool Shows a Rotate Gizmo in the Scene view. Use the Rotate Gizmo to manually rotate the clip offset for the selected Animation clip. Using the Rotate Gizmo changes the Rotation coordinates. Position Manually sets the clip offset in X, Y, and Z coordinates. By default, the Position coordinates are set to zero and are relative to the track offsets. Rotation Manually sets the clip rotation offset around the X, Y, and Z axes. By default, the Rotation axes are set to zero and are relative to the track offsets. You can also automatically match the clip offsets based on the end of the previous Animation clip, or the start of the next Animation clip. The transforms that are matched depends on the Offset Match Fields. Offsets Match Fields Use Offsets Match Fields to choose which transforms to match when matching clip offsets. By default, Use Defaults is enabled and uses the default matching options set for the Animation track. Disable Use Defaults to override the track matching options and choose which transformations to match when performing a Match Offsets to Previous Clip or Match Offsets to Next Clip for the selected Animation clip. When you disable Offsets Match Fields, a series of additional checkboxes appear. Use these additional checkboxes to enable or disable matching per coordinate, for both position and rotation. Remove Start Offset Enable Remove Start Offset to make the Animation clip begin at position zero and rotation zero. The rest of the position and rotation keys in the Animation clip follow from zero. Enabling Remove Start Offset makes it easier to match the Animation clip with the previous Animation clip. Disable Remove Start Offset to keep the starting position and rotation. The Animation clip starts from its original position and rotation. Foot IK Enable Foot IK if the Animation clip is animating a humanoid and you want to use inverse kinematics for foot solving. Inverse kinematics attempts to remedy foot sliding by solving and influencing foot placement from the foot to the hip of the humanoid. Disable Foot IK if the Animation clip is animating a non-humanoid object such as a moving platform or a quadruped character with a non-human bone structure."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_aud.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_aud.html",
    "title": "Audio clip properties | ModularUIPack",
    "summary": "Audio clip properties Use the Inspector window to change the properties of an Audio clip. These properties include the name, timing, play speed, blend properties, audio media, and loop option. Inspector window when selecting an Audio clip in the Timeline window Display Name The name of the Audio clip shown in the Timeline window. This is not the name of the audio file that Unity uses for the waveform. For information on audio file properties, see Audio Playable Asset below. Clip Timing properties Use the Clip Timing properties to position, change the duration, change the ease-in and ease-out duration, and adjust the play speed of the Audio clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds, a Clip Timing property accepts decimal values. When specifying frames, a property only accepts integer values. For example, if you attempt to enter 12.5 in a frames (f) field, the Inspector window sets the value to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End, or Duration may blend, ripple, or replace Audio clips on the same track. Property Description Start The frame or time (in seconds) when the clip starts. Changing the Start property changes the position of the clip on its track in the Timeline Asset. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration. Blend Curves Use the Blend Curves to customize the fade-in and fade-out between the outgoing and incoming Audio clips. See Blending clips for details on how to blend clips and customize blend curves. When easing-in or easing-out Audio clips, use the Blend Curves to customize the curve that fades-in or fades-out an Audio clip. See Easing-in and Easing-out clips for details. Audio Playable Asset Use the Audio Playable Asset properties to select the Audio file used by the Audio clip and to set whether the selected Audio clip loops (Loop enabled) or plays once (Loop disabled)."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_com.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_com.html",
    "title": "Control clip common properties | ModularUIPack",
    "summary": "Control clip common properties Use the Inspector window to change the common properties of a Control clip. You can only create a Control clip in a Control track. A Control clip is a special clip that controls a nested Timeline instance, Particle System, Prefab instance, or ITimeControl Script, depending on how you create the Control clip: If you create the Control clip from a GameObject with a Playable Director component associated with a Timeline Asset, then the Control clip controls a nested Timeline instance. If the GameObject parents other GameObjects associated with many Timeline Assets, then the Control clip controls multiple Timeline instances. If you create the Control clip from a GameObject with a Particle System component, then the Control clip controls a Particle System. If you create the Control clip from a GameObject linked to a Prefab, then the Control clip controls a Prefab instance. If you create the Control clip from a GameObject with a script that implements the ITimeControl interface, then the Control clip controls an ITimeControl Script. The common properties of a Control clip include its name and Clip Timing properties. Not all common properties apply to all types of Control clips. Inspector window when selecting a Control clip in the Timeline window Display Name The name of the Control clip shown in the Timeline window. Clip Timing properties Use the Clip Timing properties to position and change the duration of the Control clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds, a Clip Timing property accepts decimal values. When specifying frames, a property only accepts integer values. For example, if you attempt to enter 12.5 in a frames (f) field, the Inspector window sets the value to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End or Duration of a Control clip may create an insert or replace clips on the same track. You cannot create a blend between Control clips. Property: Description: Start The frame or time (in seconds) when the Control clip starts. Changing the Start changes the position of the Control clip on its track in the Timeline Asset. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the Control clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration. Clip In Sets the offset of when the Control clip starts playing. The Clip In property only affects Particle Systems and nested Timeline instances. Speed Multiplier A speed multiplier that affects the playback speed of the Control clip. This value must be greater than 0. The Speed Multiplier property only affects Particle Systems and nested Timeline instances."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_plyb.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_plyb.html",
    "title": "Control clip Playable Asset properties | ModularUIPack",
    "summary": "Control clip Playable Asset properties Use the Inspector window to change the playable asset properties of a Control clip. To view the playable asset properties for a Control clip, select a Control clip in the Timeline window and expand Control Playable Asset in the Inspector window. Inspector window showing the Control Playable Asset properties for the selected Control clip Source Game Object Use Source Game Object to select the GameObject with the Particle System, nested Timeline instance, or ITimeControl Script for the selected Control clip. Changing the Source Game Object changes what the Control clip controls. Prefab Use Prefab to select a Prefab to instantiate when the Timeline instance plays in Play Mode. When a Prefab is selected, the label of the Source Game Object property changes to Parent Object. When in Play Mode, the Prefab is instantiated as a child of the Parent Object. Although the Prefab is instantiated at the start of the Timeline instance, the Prefab is only activated during the Control clip. When the Control clip ends, the Prefab instance is deactivated. Control Activation Enable Control Activation to activate the Source Game Object while the Control clip plays. Disable this property to activate the Source Game Object during the entire Timeline instance. The Control Activation property only affects Control clips that control a nested Timeline instance or a Particle System. Post Playback When Control Activation is enabled, use the Post Playback property to set the activation state for the nested Timeline instance when the main Timeline stops playing. The Post Playback property only affects nested Timeline instances. Post-Playback State Description Active Activates the Source Game Object after the nested Timeline instance finishes playing. Inactive Deactivates the Source Game Object after the nested Timeline instance finishes playing. Revert Reverts the Source Game Object to its activation state before the nested Timeline instance began playing. Advanced properties Use the Advanced properties to select additional functionality based on whether the Control clip controls a Playable Director, Particle System, or ITimeControl Script. The Advanced properties do not apply to all Control clips. Property Description Control Playable Directors Enable this property if the Source Game Object is attached to a Playable Director and you want the Control clip to control the nested Timeline instance associated with this Playable Director. Control Particle Systems Enable this property when the Control clip includes a Particle System. Set the value of the Random Seed property to create a unique, repeatable effect. Control ITimeControl Enable this property to control ITimeControl scripts on the Source GameObject. To use this feature, the Source Game Object must have a script that implements the ITimeControl interface. Control Children Enable this property if the Source Game Object has a child GameObject with either a Playable Director, Particle System, or ITimeControl Script, and you want the Control clip to control this child component. For example, if the Source Game Object is a GameObject that parents another GameObject with a Particle System, enable this property to make the Control clip control the Particle system on the child GameObject."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_tl.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_tl.html",
    "title": "Setting Timeline Asset properties | ModularUIPack",
    "summary": "Setting Timeline Asset properties Use the Inspector window to set the frame rate, the duration mode, and a fixed length for the selected Timeline Asset. From the Project window, select a Timeline Asset to view its properties. Inspector window when selecting a Timeline Asset in the Project window Property Description Frame Rate Sets the reference frame rate for the Timeline Asset and its Timeline instances. Change the Frame Rate to align clips at precise frames but changing the Frame Rate is only visual and has no effect on play speed, keys, tracks, or clips. Timeline supports the following standard frame rates: 24 (PAL), 25 (NTSC), 30, 50, and 60. Timeline also supports custom frame rates from 1e-6 to 1000. To set a custom frame rate, enter a non-standard frame rate for the Frame Rate property. In the Timeline Settings menu, the Custom menu item is enabled and automatically selected for the Timeline instance. The Custom menu item shows the custom frame rate in parentheses. Duration Mode Choose whether the duration of the Timeline Asset extends to the end of the last clip or ends at a specific time or frame. Based On Clips Sets the length of the Timeline Asset based on the end of the last clip. Fixed Length Sets the length of the Timeline Asset to a specific number of seconds or frames. Duration Shows the length of the Timeline Asset in seconds and frames when the Duration Mode is set to Based on Clips. Sets the length of the Timeline Asset to a specific number of seconds or frames when the Duration Mode is set to Fixed Length."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk.html",
    "title": "Setting track properties | ModularUIPack",
    "summary": "Setting track properties Use the Inspector window to change the name of a track and its properties. The available properties depend on the type of track selected. For example, select an Animation Track to set how track offsets are applied, to apply an avatar mask, and to select which transforms are modified when matching offsets between Animation clips. Inspector window when selecting an Animation track in the Timeline window Not all tracks have properties. See the following sections for tracks with properties: Activation Track properties Animation Track properties"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_act.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_act.html",
    "title": "Activation track properties | ModularUIPack",
    "summary": "Activation track properties Use the Inspector window to change the name of an Activation track and set the state of its bound GameObject when the Timeline Asset finishes playing. Inspector window when selecting an Activation track in the Timeline window Property Description Display Name The name of the Activation track shown in the Timeline window and Playable Director component. The Display Name applies to the Timeline Asset and all of its Timeline instances. Post-playback state Sets the activation state for the bound GameObject when the Timeline Asset stops playing. The Post-playback state applies to the Timeline Asset and all of its Timeline instances. Active Activates the bound GameObject when the Timeline Asset finishes playing. Inactive Deactivates the bound GameObject when the Timeline Asset finishes playing. Revert Reverts the bound GameObject to its activation state before the Timeline Asset began playing. For example, if the Timeline Asset finishes playing with the GameObject set to inactive, and the GameObject was active before the Timeline Asset began playing, then the GameObject reverts to active. Leave As Is Sets the activation state of the bound GameObject to the state the Timeline Asset is at when it finishes playing. For example, if the Timeline Asset finishes playing with the GameObject set to inactive, the GameObject remains inactive."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_anim.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_anim.html",
    "title": "Animation track properties | ModularUIPack",
    "summary": "Animation track properties Use the Inspector window to change the name of an Animation track, set how track offsets are applied, apply an avatar mask, and set which transforms are modified by default when you match clip offsets. Inspector window when selecting an Animation track in the Timeline window Property Description Display Name The name of the Animation track shown in the Timeline window and in the Playable Director component. The Display Name applies to the Timeline Asset and all of its Timeline instances. Track Offsets Applies a position and rotation offset to the start of each Animation clip on the selected Animation track. The position and rotation offset starts from a specific position and rotation or from the position and rotation relative to a state machine or another Timeline instance. Apply Transform Offsets Starts the animation in each Animation clip from a specific position and rotation offset. Use the Move and Rotate tools, and the Position and Rotation fields, to set the starting position and rotation. Apply Scene Offsets Starts the animated GameObject from its current position and rotation in the Scene. Use this mode to build a Timeline instance that transitions to and from a state machine or to and from another Timeline instance. Auto (deprecated) If you load a Scene or Project that was built before 2018.3, Track Offsets is automatically set to Auto (deprecated). This is a special mode for backwards compatibility. After opening an old Project, choose another Track Offsets mode because the Auto (deprecated) offset disables key animation recording. Move tool Enable the Move tool to show the Move Gizmo in the Scene view. Use the Move Gizmo to visually position the transform offset. Positioning the Move Gizmo changes the Position properties. The Move tool only appears when Track Offsets is set to Apply Transform Offsets. Rotate tool Enable the Rotate tool to show the Rotate Gizmo in the Scene view. Use the Rotate Gizmo to visually rotate the track offset. Rotating the Rotate Gizmo changes the Rotation properties. The Rotate tool only appears when Track Offsets is set to Apply Transform Offsets. Position Sets the track position offset in X, Y, and Z coordinates. The Position fields only appears when Track Offsets is set to Apply Transform Offsets. Rotation Sets the track rotation offset in X, Y, and Z coordinates. The Rotation fields appear when Track Offsets is set to Apply Transform Offsets. Apply Avatar Mask Enables Avatar masking. When enabled, Timeline applies the animation of all Animation clips on the track based on the selected Avatar Mask. Avatar Mask Selects the Avatar Mask applied to all Animation clips on the Animation track. An Avatar Mask defines which humanoid body parts are animated by Animation clips on the selected Animation track. The body parts that are masked are animated by other Animation tracks in the Timeline Asset. For example, you can use an Avatar Mask to combine the lower-body animation on an Animation track with the upper body animation on an Override Animation track. Default Offset Match Fields Expand to display a series of checkboxes that choose which transforms are matched when matching clip offsets between Animation clips. The Default Offset Match Fields set the default matching options for all Animation clips on the same track. Use the Animation Playable Asset properties to override these defaults for each Animation clip."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/play_director.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/play_director.html",
    "title": "Playable Director component | ModularUIPack",
    "summary": "Playable Director component The Playable Director component stores the link between a Timeline instance and a Timeline Asset. The Playable Director component controls when the Timeline instance plays, how the Timeline instance updates its clock, and what happens when the Timeline instance finishes playing. Playable Director component added to the GameObject named Ground. The GameObject is associated with the GroundCTL Timeline Asset. The Playable Director component also shows the list of tracks from the associated Timeline Asset (Playable property) that animate GameObjects in the Scene. The link between Timeline Asset tracks and GameObjects in the Scene is referred to as binding or Track binding. For more on binding and the relationship between Timeline Assets and Timeline instances, see Timeline overview. Property Description Playable Associates a Timeline Asset with a GameObject in the Scene. When you make this association, you create a Timeline instance for the selected Timeline Asset. After you create a Timeline instance, you can use the other properties in the Playable Director component to control the instance and choose which GameObjects in the Scene are animated by the Timeline Asset. Update Method Sets the clock source that the Timeline instance uses to update its timing. DSP Select for sample accurate audio scheduling. When selected, the Timeline instance uses the same clock source that processes audio. DSP stands for digital signal processing. Game Time Select to use the same clock source as the game clock. This clock source is affected by time scaling. Unscaled Game Time Select to use the same clock source as the game clock, but without being affected by time scaling. Manual Select to not use a clock source and to manually set the clock time through scripting. Play on Awake Whether the Timeline instance is played when game play is initiated. By default, a Timeline instance is set to begin as soon as the Scene begins playback. To disable the default behaviour, disable the Play on Awake option in the Playable Director component. Wrap Mode The behaviour when the Timeline instance ends playback. Hold Plays the Timeline instance once and holds on the last frame until playback is interrupted. Loop Plays the Timeline instance repeatedly until playback is interrupted. None Plays the Timeline instance once. Initial Time The time (in seconds) at which the Timeline instance begins playing. The Initial Time adds a delay in seconds before the Timeline instance actually begins. For example, when Play On Awake is enabled and Initial Time is set to five seconds, if you click the Play button in the Unity Toolbar, Play Mode starts and the Timeline instance begins five seconds later. Current Time Views the progression of time according to the Timeline instance in the Timeline window. The Current Time field matches the Playhead Location field. Use the Current Time field when the Timeline window is hidden. The Current Time field appears in the Playable Director Component when in Timeline Playback mode or when Unity is in Game Mode. Bindings Shows the link between GameObjects in the Scene with tracks from the associated Timeline Asset (Playable property). The Bindings area is split into two columns: The first column lists the tracks from the Timeline Asset. Each track is identified by an icon and its track type. The second column lists the GameObject linked (or bound) to each track. The Bindings area does not list Track groups, Track sub-groups, or tracks that do not animate GameObjects. The Timeline window shows the same bindings in the Track list."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_about.html",
    "title": "Samples | ModularUIPack",
    "summary": "Samples Gameplay Sequence Demo This sample demonstrates how Timeline can be used to create a small in-game moment, using built-in tracks. Overview In this example, we have a Player character jogging and then colliding with another character. The Player character represents our gameplay character and is using a looping jog animation. The Timeline then takes control of the player character, collides with the other character, then returns to his original gameplay animation (jog) once the Timeline has finished. Note that the gameplay animation is driven by an Animator and will only play at runtime. The character will be in a T-Stance pose for the runtime portion when using the Timeline preview. Timeline Structure This sample uses the following tracks: Activation, Animation, Audio, Control and Marker track. The GameplaySequence timeline has been organized in the following groups: Building, Lights, Cameras, Characters, Audio and Props. Building group This group contains two Control tracks: Building Spawn which spawns the building prefab, and Building Particles that controls two particle systems in the scene (ElectricalSparks and SandSwirlsEffect). Lights group This group contains two Animation tracks; one for the Sun light, and the other for the flickering light. Both tracks where animated in Unity and the curves can be seen by enabling the curves icon or double clicking on the track to open the Animation window. Sun light is animated in Rotation (sunrise) and the Point light has a spiked Intensity curve. Cameras group This group contains two cameras: Main camera using an Animation track, and Follow camera using an Activation track. Main Camera has an animation curve for the continuous movement (which can be seen by enabling the curves icon) and two override tracks, one for each character. The clips on the override tracks have static values for a fixed camera shot. Follow camera is simply parented child of the Player character's root and activated for the follow-cam shots. Characters group The first track is an Animation track for the Playercharacter. Notice that clip pre and post extrapolations are set to None, meaning the character will not be influenced by the timeline during these gaps. At runtime, these gaps mean the Player character will be using his Animator state, jog. The second track is an Activation track for the second character, making his appear in the scene. The third and last track is an Animation track for the second character. On this track, the second character blends from one clip to another creating a cinematic sequence. Audio group This group contains four Audio tracks; Player, crickets, neon-light & character2. The Player track has a jog/breathing and bump clip. The crickets track has pan and volume animation curves (can be seen by enabling the curves icon). The neon-light sound is for the flickering Point light. The Character2 tracks contains all audio clips for this second character. Props group This group animates Table and Can. The first Activation track makes Table appear in the scene. The second Activation track makes a static version of Can appear in the scene. The third track is an Animation track that animates the table bump animation. The last track is a Control track with a sub-timeline for the can animation. The static version of the can is disabled and replaced with the animated version when the Control clip starts. Double-clicking the Control track clip will enter the Can sub-timeline. Can Sub-Timeline This sub-timeline contains an Animation track for the can rolling off the table and bouncing on the ground, an Audio track for the sounds effects and a Control track for the liquid particles splashing out of the can. Marker track In the Timeline window, under the time ruler, there is a Marker track with one Signal at frame 1200. This is the Signal marker that triggers the jog audio clip on Player once the timeline finishes the gameplay jog. Customization samples This sample includes tracks, clips, markers and actions that demonstrate how to extend and customize timeline in different ways. Annotation: provides a marker that can be used as a bookmark. Video track: provides a track capable of playing video clips. Time dilation track: provides a track that can be used to adjust Unity's global Time.timeScale. Tween track: provides a track that can be used for simple transform movements. Text track: provides a track that can be used to display different messages to the screen using a TextMeshPro Text component. Demo Included is a demo timeline that showcases all the of the above samples."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_annotation.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_annotation.html",
    "title": "Annotation marker sample | ModularUIPack",
    "summary": "Annotation marker sample The Annotation sample provides a marker that can be used as a bookmark for your timeline. Here are the options available on an annotation: Field | Description --- | --- Title | The annotation's title. This will be displayed as a tooltip, when hovering the mouse on the annotation. Color | The annotation's color in the Timeline window. Show line overlay | Use this option to show a vertical line that spans the full height of the Timeline window. Custom marker workflow example This example will demonstrate how to: create a custom marker; customize a marker with MarkerEditor; use a custom USS style to draw a marker; add additional commands with Actions; 1. Create an annotation marker A marker is an item that can be added to a Timeline Asset and is used to represent a point in time. Markers also have a specialization, just like clips (Activation clip, Audio clip, Animation clip, etc). In order to add a new type of marker, all we need to do is to create a class that inherits the Marker class: public class AnnotationMarker : UnityEngine.Timeline.Marker {} This custom marker can now be added to any track or on the timeline marker area: We can add a title, description and color to the annotation: public class AnnotationMarker : Marker { public string title; public Color color; public string description; public bool showLineOverlay; } The annotation marker itself is now complete. But the customization work is not done yet. Timeline offers many customization abilities. 2. Customize the marker's appearance A marker's appearance can be customized using a USS style or with MarkerEditor. Both paths have their advantages and drawbacks. Custom USS style A marker can use a USS style to specify its appearance. For more information on how to create custom USS styles, see how to define custom USS styles. The CustomStyle attribute can be used to specify a style for a given marker: [CustomStyle(\"AnnotationStyle\")] public class AnnotationMarker : Marker { //... } AnnotationStyle is defined in a USS stylesheet and will be used when a marker is displayed on screen: USS styles are useful if the desired appearance is simple (i.e. when only using a texture icon). For more complex stuff (i.e. dynamically changing a marker's color), a MarkerEditor will be needed. Custom editor MarkerEditor can be used to augment the capabilities of a marker in the editor. It works like a custom Inspector; the CustomTimelineEditor attribute is used to tell Timeline that a MarkerEditor class should be associated to a given marker. [CustomTimelineEditor(typeof(AnnotationMarker))] public class AnnotationMarkerEditor : MarkerEditor { //... } Marker information MarkerEditor lets us provide information about the marker by overriding the GetMarkerOptions method. public override MarkerDrawOptions GetMarkerOptions(IMarker marker) { var annotation = marker as AnnotationMarker; if (annotation != null) { return new MarkerDrawOptions { tooltip = annotation.title }; } return base.GetMarkerOptions(marker); } Here the tooltip of an Annotation has been set to use the annotation's title variable. MarkerDrawOptions can also set the error text on a marker, which can be useful if a variable has been incorrectly set and needs attention. Overlay An overlay can be drawn on top of a marker by overriding the DrawOverlay method: public override void DrawOverlay(IMarker marker, MarkerUIStates uiState, MarkerOverlayRegion region) { var annotation = marker as AnnotationMarker; if (annotation != null) { //Draw overlay code... } } An overlay is drawn on top of the marker; the USS style is drawn first and DrawOverlay is called afterwards. For an Annotation, we can use DrawOverlay to change the color of the marker and to draw a line that spans the full Timeline window's height. To do this, we can use the information given in region. Along with the visible time range, MarkerOverlayRegion provides two rectangles that can be used to know where to draw: markerRegion markerRegion is the rectangle that encompasses the marker. This is useful to draw something directly on the marker itself. For Annotation, this rectangle is used to draw the color overlay. timelineRegion timelineRegion is the rectangle that encompasses the clips and markers region of the timeline window. This is useful to draw something out of the marker's region, like the Annotation's line overlay. const float k_LineOverlayWidth = 6.0f; float markerRegionCenter = markerRegion.xMin + (markerRegion.width - k_LineOverlayWidth) / 2.0f; Rect lineRect = new Rect(markerRegionCenter, timelineRegion.y, k_LineOverlayWidth, timelineRegion.height); 3. Create custom Actions Timeline Action Actions can be used to add new menu entries in Timeline's context menus. For an Annotation, we want to add a menu item available in all context menus to create an Annotation with the clipboard's contents. To do this, a TimelineAction is needed, along with the MenuEntry attribute. [MenuEntry(\"Create Annotation from clipboard contents\")] public class CreateAnnotationFromClipboardContents : TimelineAction { //... } MenuEntry lets Timeline know that this action can be added in context menus. Classes inheriting from TimelineAction need to override two methods: Execute and Validate. Validate Validate is used to specify that the action's prerequisites are fulfilled. In the case of CreateAnnotationFromClipboardContents, the action is only valid if there actually is contents in the clipboard. ActionValidity is used to describe the validity state of an action: public override ActionValidity Validate(ActionContext context) { if (!markers.All(marker => marker is AnnotationMarker)) return ActionValidity.NotApplicable; string buffer = EditorGUIUtility.systemCopyBuffer; return buffer.Length == 0 ? ActionValidity.Invalid : ActionValidity.Valid; } ActionValidity.Valid : The action can be executed. ActionValidity.Invalid : The action cannot be executed given the current context and will appear grayed out in context menus. ActionValidity.NotApplicable : The action does not apply to the current context and will not show up in menus. Execute Execute should run the code necessary to execute the action's purpose. public override bool Execute(ActionContext context) { string buffer = EditorGUIUtility.systemCopyBuffer; TrackAsset track = context.tracks.FirstOrDefault(); if (buffer.Length != 0) { // Create the new annotation and add it to the track //... return true; } return false; } The return value should specify if the execution succeeded or not. Marker Action It is also possible to write custom actions that apply only to markers, instead of all Timeline items. This is the purpose of the MarkerEditor class. It works just like TimelineAction, except that action applies to a list of markers. A shortcut can also be assigned to an action. A static method with the TimelineShortcut attribute is needed. Invoker can be used to easily execute a given action: [TimelineShortcut(\"Replace annotation description with clipboard\", KeyCode.G)] public static void InvokeAction() { Invoker.InvokeWithSelectedMarkers<ReplaceAnnotationDescriptionAction>(); } Notes Runtime considerations AnnotationMarker is available at runtime; it can be queried using, for example, TrackAsset.GetMarkers(). However, AnnotationMarkerEditor and custom actions are not available at runtime, since it depends on classes that are not part of the runtime assembly."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_text.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_text.html",
    "title": "Text Track sample | ModularUIPack",
    "summary": "Text Track sample This track requires the TextMeshPro package to be installed in the project. This type of track can be used to display different messages to the screen using a TextMeshPro Text Component. It is ideal for things like subtitles. It demonstrates the following: Registering custom previewable properties in a custom track. Perform custom blending of clips using a mixer PlayableBehaviour. Provide custom clip data that can be animated using the inline curve editor using a PlayableBehaviour template. Using a ClipEditor to react to changes in a clip. Usage To use this custom track, drag a TextMeshPro Text Component into the hierarchy view of the Timeline. A TextTrack will be created, and use the track context menu to create clips. Clip properties such as Message, FontSize and Color can be modified in the inspector by selecting the clip. Clips can be overlapped to create transitions."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_time.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_time.html",
    "title": "Time Dilation Track sample | ModularUIPack",
    "summary": "Time Dilation Track sample This type of track can be used to adjust Unity's global Time.timeScale for the duration of the clip. The most common use would be to create bullet-time style effects. The sample demonstrates the following: Creating a custom TrackMixer PlayableBehaviour that performs custom blending of clip values. Setting and restoring Unity global values in a PlayableBehaviour. How to support blending and extrapolation on custom clips. Provide custom clip data that can be animated using the inline curve editor using a PlayableBehaviour template. Usage Create a TimeDilationTrack in timeline using the Add Track menu, found under the Timeline.Samples submenu. Add clips to the track, and use the inspector to set scale values for the clip, or use the inline curve editor to animate the scale values. Clips can also be overlapped to create transitions between clips."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_tween.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_tween.html",
    "title": "Transform Tween track sample | ModularUIPack",
    "summary": "Transform Tween track sample This track can be used for simple transform movements between two points. Usage This track can be used for simple transform movements. All translation happens in a straight line but the speed can be controlled with an animation curve. The Tween track binds to the scene Transform you wish to move. Field Description Start Location This is a reference to a Transform in the scene that marks the position and/or rotation of the moving Transform when the playable starts. If it is left null the position/rotation of the moving Transform when the playable starts will be used. End Location This is a reference to a Transform in the scene that marks the position and/or rotation of the moving Transform when the playable finishes. Tween Position Whether or not the position of the Transform should change. Tween Rotation Whether or not the rotation of the Transform should change. Custom clip workflow example This example will demonstrate how to: create a custom clip, track and mixer; use the PlayableGraph API to animate an object's transform; customize a clip with ClipEditor; 1. Custom clip when a Timeline begins playing, nodes called Playables are created. They are organized in a tree-like structure called the PlayableGraph. For each frame, Timeline samples this graph to read and mix multiple data sources (animation, audio and more). The first step to create a custom clip is to define a new PlayableBehaviour that will be added to a graph. It will need to store the data needed to implement the transform tween: public class TweenBehaviour : PlayableBehaviour { public Transform startLocation; public Transform endLocation; public bool shouldTweenPosition; public bool shouldTweenRotation; public AnimationCurve curve; } The PlayableBehaviour's data is not serialized and will be lost once its parent graph is destroyed. To save this data, the next step is to define a new PlayableAsset: [Serializable] public class TweenClip : PlayableAsset { public ExposedReference<Transform> startLocation; public ExposedReference<Transform> endLocation; public bool shouldTweenPosition = true; public bool shouldTweenRotation = true; public AnimationCurve curve; //... } Note: The clip needs to store a start and an end location. Since an asset cannot directly reference a scene object, it cannot store a transform object directly. This is why an ExposedReference<Transform> is used. A PlayableAsset's main purpose is to build a PlayableBehaviour. This is done with the CreatePlayable method: public class TweenClip : PlayableAsset { //... public override Playable CreatePlayable(PlayableGraph graph, GameObject owner) { // create a new TweenBehaviour ScriptPlayable<TweenBehaviour> playable = ScriptPlayable<TweenBehaviour>.Create(graph); TweenBehaviour tween = playable.GetBehaviour(); // set the behaviour's data tween.startLocation = startLocation.Resolve(graph.GetResolver()); tween.endLocation = endLocation.Resolve(graph.GetResolver()); tween.curve = curve; tween.shouldTweenPosition = shouldTweenPosition; tween.shouldTweenRotation = shouldTweenRotation; return playable; } } CreatePlayable will initialize a new TweenBehaviour using TweenClip's data. 2. Custom track A custom track is created by defining a TrackAsset subclass. The following attributes can be added to a TrackAsset: TrackBindingType: defines which type of object should be bound to a track; TrackClipType: defines which type of clip should be associated to a track. For this example, the track needs a Transform object binding and can only accepts clips of type TweenClip, which was previously defined in step 1: [TrackBindingType(typeof(Transform))] [TrackClipType(typeof(TweenClip))] public class TweenTrack : TrackAsset { // ... } The data setup is complete; TweenTrack and TweenClip can now be added to a timeline: However, no transform tween has been implemented yet. To do this, a track mixer is needed. 3. Define a track mixer To properly handle blending, or crossfading, between two clips, a track mixer is needed. A track mixer is a PlayableBehaviour that will have access to all clips data and will blend those together. Track mixer setup By default, when a track is added to a timeline, an empty playable is generated and is connected to each clip's playable. For example, this track: will generate the following playable graph: Timeline: this playable is the root playable; all playables related to tracks are connected to this node. Playable: this playable represents the track mixer. Since no track mixer is defined, an empty one is generated. TweenBehaviour: this playable represents a clip. One per clip is generated. All clip playables are connected to the track mixer. In order to define a custom track mixer, a new PlayableBehaviour needs to be defined: public class TweenMixerBehaviour : PlayableBehaviour {} then, in TrackAsset, the CreateTrackMixer method can be used to specify a custom track mixer: public class TweenTrack : TrackAsset { public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount) { return ScriptPlayable<TweenMixerBehaviour>.Create(graph, inputCount); } } Now the playable graph looks like this: The empty playable that used to connect clip playables together is now replaced by TweenMixerBehaviour. Transform tween implementation The implementation of the transform tween resides in the ProcessFrame method from TweenMixerBehaviour. Here are the main steps of that implementation: Initialization: When the timeline is first played, the initial transform of the track binding is fetched. If the start or end transform is null, the initial transform will be used instead. Get clip behaviours & weights: to appropriately blend, the mixer needs to ask information for all of its inputs (clips): // Iterate on all the playable's (mixer) inputs (ie each clip on the track) int inputCount = playable.GetInputCount(); for (int i = 0; i < inputCount; i++) { // get the input connected to the mixer Playable input = playable.GetInput(i); // get the weight of the connection float inputWeight = playable.GetInputWeight(i); // get the clip's behaviour TweenBehaviour tweenInput = GetTweenBehaviour(input); } Calculate and blend: A linear interpolation is used to calculate a transform between two points. Apply result: Once the calculation is done, the transform is written in the track binding object: // Apply the final position and rotation values in the track binding trackBinding.position = accumPosition + m_InitialPosition * (1.0f - totalPositionWeight); trackBinding.rotation = accumRotation.Blend(m_InitialRotation, 1.0f - totalRotationWeight); 4. Customize a clip's appearance ClipEditor can be used to augment the capabilities of a clip in the editor. It works like a custom Inspector; the CustomTimelineEditor attribute is used to tell Timeline that a ClipEditor class should be associated to a given clip. [CustomTimelineEditor(typeof(TweenClip))] public class TweenClipEditor : ClipEditor { //... } It is possible to customize the appearance of a clip with the DrawBackground method: public override void DrawBackground(TimelineClip clip, ClipBackgroundRegion region) { TweenClip asset = clip.asset as TweenClip; if (asset == null) return; // Drawing code here... } Notes Only the portion between (0,1) of the curve will be used. When a clip ends, the object bound to the track will return to its original position."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_video.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_video.html",
    "title": "VideoTrack sample | ModularUIPack",
    "summary": "VideoTrack sample The Video Track sample provides a track capable of playing video clips in Timeline. It demonstrates how to do the following: Using built-in blending, speed and clip-in capabilities in custom clips. Using ClipEditors to customize clip drawing. Using a mixer PlayableBehaviour to perform look-ahead operations. Managing UnityEngine.Object lifetime (VideoPlayer) with a PlayableBehaviour. Using ExposedReferences to reference components in the scene from a PlayableAsset. Usage Drag and drop an imported video from the project window onto a timeline. The video track and clip will be created. The video clip has several playback options, including the option to specify the camera to render to video to, and an audio source to redirect the audio. If no camera is specified, the main camera in the scene will be used. If no audio source is specified, the audio will play directly (i.e. no 3D audio). Known Issues The video track supports ease-in and ease-out of a video, but blending between videos will not give expected results. Editing a timeline containing video clips may cause the clip to flicker or change unexpectedly. Looping a timeline with video clips may cause the video to be de-synchronized."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_about.html",
    "title": "Timeline overview | ModularUIPack",
    "summary": "Timeline overview Use the Timeline window to create cut-scenes, cinematics, and game-play sequences by visually arranging tracks and clips linked to GameObjects in your Scene. A cinematic sequence in the Timeline window. For each cut-scene, cinematic, or game-play sequence, the Timeline window saves the following: Timeline Asset: Stores the tracks, clips, and recorded animations without links to the specific GameObjects being animated. The Timeline Asset is saved to the Project. Timeline instance: Stores links to the specific GameObjects being animated or affected by the Timeline Asset. These links, referred to as bindings, are saved to the Scene. Timeline Asset The Timeline window saves track and clip definitions as a Timeline Asset. If you record key animations while creating your cinematic, cut-scene, or game-play sequence, the Timeline window saves the recorded clips as children of the Timeline Asset. The Timeline Asset saves tracks and clips (red). Timeline saves recorded clips (blue) as children of the Timeline Asset. Timeline instance To animate a GameObject in your Scene with a Timeline Asset, you must create a Timeline instance. A Timeline instance associates a Timeline Asset with the GameObject in the Scene, through a Playable Director component. When you select a GameObject in a Scene that has a Playable Director component, the Timeline instance appears in the Timeline window. The bindings appear in the Timeline window and in the Playable Director component (Inspector window). The Playable Director component shows the Timeline Asset (blue) with its bound GameObjects (red). The Timeline window shows the same bindings (red) in the Track list. The Timeline window provides an automated method of creating a Timeline instance while creating a Timeline Asset. Reusing Timeline Assets Because Timeline Assets and Timeline instances are separate, you can reuse the same Timeline Asset with many Timeline instances. For example, you could create a Timeline Asset named VictoryTL with the animation, music, and particle effects that play when the main game character (Player) wins. To reuse the VictoryTL Timeline Asset to animate another game character (Enemy) in the same Scene, you can create another Timeline instance for the secondary game character. The Player GameObject (red) is attached to the VictoryTL Timeline Asset] The Enemy GameObject (blue) is also attached to the VictoryTL Timeline Asset] Because you are reusing the Timeline Asset, any modification to the Timeline Asset in the Timeline window results in changes to all Timeline instances. For example, in the previous example, if you delete the Audio track while modifying the Player Timeline instance, the Timeline window removes the track from the VictoryTL Timeline Asset. The Timeline window also removes the Audio track from all instances of the VictoryTL Timeline Asset, including the Enemy Timeline instance."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_gloss.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_gloss.html",
    "title": "Timeline glossary | ModularUIPack",
    "summary": "Timeline glossary This topic provides an alphabetical list of the terminology used throughout the Timeline documentation. animatable property: A property belonging to a GameObject, or belonging to a component added to a GameObject, that can have different values over time. animation: The result of adding two different keys, at two different times, for the same animatable property. animation curve: The curve drawn between keys set for the same animatable property, at different frames or seconds. The position of the tangents and the selected interpolation mode for each key determines the shape of the animation curve. binding or Track binding: Refers to the link between Timeline Asset tracks and the GameObjects in the scene. When you link a GameObject to a track, the track animates the GameObject. Bindings are stored as part of the Timeline instance. blend and blend area: The area where two Animation clips, Audio clips, or Control clips overlap. The overlap creates a transition that is referred to as a blend. The duration of the overlap is referred to as the blend area. The blend area sets the duration of the transition. Blend In curve: In a blend between two Animation clips, Audio clips, or Control clips, there are two blend curves. The blend curve for the incoming clip is referred to as the Blend In curve. Blend Out curve: In a blend between two Animation clips, Audio clips, or Control clips, there are two blend curves. The blend curve for the out-going clip is referred to as the Blend Out curve. clip: A generic term that refers to any clip within the Clips view of the Timeline window. Clips view: The area in the Timeline window where you add, position, and manipulate clips. Control/Command: This term is used when instructing the user to press or hold down the Control key on Windows, or the Command key on Mac. Curves view: The area in the Timeline window that shows the animation curves for Infinite clips or for Animation clips that have been converted from Infinite clips. The Curves view is similar to Curves mode in the Animation window. Gap extrapolation: How an Animation track approximates animation data in the gaps before and after an Animation clip. field: A generic term that describes an editable box that the user clicks and types-in a value. A field is also referred to as a property. incoming clip: The second clip in a blend between two clips. The first clip, the out-going clip, transitions to the second clip, the incoming clip. Infinite clip: A special animation clip that contains basic key animation recorded directly to an Animation track within the Timeline window. An Infinite clip cannot be positioned, trimmed, or split because it does not have a defined duration: it spans the entirety of an Animation track. interpolation: The estimation of values that determine the shape of an animation curve between two keys. interpolation mode: The interpolation algorithm that draws the animation curve between two keys. The interpolation mode also joins or breaks left and right tangents. key: The value of an animatable property, set at a specific point in time. Setting at least two keys for the same property creates an animation. out-going clip: The first clip in a blend between two clips. The first clip, the out-going clip, transitions to the second clip, the incoming clip. Playhead Location field: The field that expresses the location of the Timeline Playhead in either frames or seconds, depending on the Timeline Settings. property: A generic term for the editable fields, buttons, checkboxes, or menus that comprise a component. An editable field is also referred to as a field. tangent: One of two handles that controls the shape of the animation curve before and after a key. Tangents appear when a key is selected in the Curves view, or when a key is selected in the Curve Editor. tangent mode: The selected interpolation mode used by the left tangent, right tangent, or both tangents. Timeline or Unity's Timeline: Generic terms that refer to all features, windows, editors, and components related to creating, modifying, or reusing cut-scenes, cinematics, and game-play sequences. Timeline Asset: Refers to the tracks, clips, and recorded animation that comprise a cinematic, cut-scene, game-play sequence, or other effect created with the Timeline window. A Timeline Asset does not include bindings to the GameObjects animated by the Timeline Asset. The bindings to scene GameObjects are stored in the Timeline instance. The Timeline Asset is project-based. Timeline window: The official name of the window where you create, modify, and preview a Timeline instance. Modifications to a Timeline instance also affects the Timeline Asset. Timeline instance: Refers to the link between a Timeline Asset and the GameObjects that the Timeline Asset animates in the scene. You create a Timeline instance by associating a Timeline Asset to a GameObject through a Playable Director component. The Timeline instance is scene-based. Timeline Playback Controls: The row of buttons and fields in the Timeline window that controls playback of the Timeline instance. The Timeline Playback Controls affect the location of the Timeline Playhead. Timeline Playback mode: The mode that previews the Timeline instance in the Timeline window. Timeline Playback mode is a simulation of Play mode. Timeline Playback mode does not support audio playback. Timeline Playhead: The white marker and line that indicates the exact point in time being previewed in the Timeline window. Timeline Selector: The name of the menu in the Timeline window that selects the Timeline instance to be previewed or modified. track: A generic term that refers to any track within the Track list of the Timeline window. Track groups: The term for a series of tracks organized in an expandable and collapse collection of tracks. Track list: The area in the Timeline window where you add, group, and modify tracks."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_play_cntrls.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_play_cntrls.html",
    "title": "Timeline Playback Controls | ModularUIPack",
    "summary": "Timeline Playback Controls To play the Timeline instance and to control the location of the Timeline Playhead, use the Timeline Playback Controls. Timeline Playback Controls Timeline Start button To move the Timeline Playhead to the start of the Timeline instance, click the Timeline Start button, or hold Shift and press Comma (,). Previous Frame button To move the Timeline Playhead to the previous frame, click the Previous Frame button, or press Comma (,). Timeline Play button To preview the Timeline instance in Timeline Playback mode, click the Timeline Play button, or press the Spacebar. Timeline Playback mode does the following: Begins playback at the current location of the Timeline Playhead and continues to the end of the Timeline instance. If the Play Range button is enabled, playback is restricted to a specified time range. The Timeline Playhead position moves along the Timeline instance. The Playhead Location field shows the position of the Timeline Playhead in either frames, timecode or seconds, depending on the Timeline settings. To pause playback, click the Timeline Play button again, or press the Spacebar. When playback reaches the end of the Timeline instance, the Wrap Mode determines whether playback should hold, repeat, or do nothing. The Wrap Mode setting is a Playable Director component property. Timeline Playback mode provides a preview of the Timeline instance while in the Timeline window. Timeline Playback mode is only a simulation of Play Mode in the Game View. The Timeline Playback mode does not support audio playback. To preview a Timeline instance with audio, enable the Play on Awake option in the Playable Director component and preview game play in Play Mode. Next Frame button To move the Timeline Playhead to the next frame, click the Next Frame button, or press Period (.). Timeline End button To move the Timeline Playhead to the end of the Timeline instance, click the Timeline End button, or hold Shift and press Period (.). Play Range button Enable the Play Range button to restrict playback to a specific range of seconds or frames. You can only set a play range when previewing a Timeline instance within the Timeline window. Unity ignores the play range in Play Mode. The Timeline ruler highlights the play range and indicates its start and end with white markers. To modify the play range, drag either marker. Play Range (red circle) enabled with while markers and highlighted area defining range Timeline Playhead and Playhead Location field The Timeline Playhead indicates the exact point in time being previewed in the Timeline window. The Playhead Location field expresses the location of the Timeline Playhead in either frames or seconds. Playhead Location field and Timeline Playhead (red). The Timeline Playhead also appears on the Zoombar (red arrow). Use the Zoombar to navigate, scroll, and zoom the Clips view. A white line indicates the location of the Timeline Playhead in relation to the entire Timeline instance. To jump the Timeline Playhead to a specific time, click the Timeline ruler. You can also enter the time value in the Playhead Location field and press Enter. When entering a value, frames are converted to seconds or seconds are converted to frames, based on the Timeline settings. For example, if the Timeline ruler is expressed as seconds with a frame rate of 30 frames per second, entering 180 in the Playhead Location field converts 180 frames to seconds and moves the Timeline Playhead to 6:00. To set the time format that the Timeline window uses, configure the Timeline Settings. Switching between Local and Global Use the Local or Global button to change the Timeline ruler from local time to global time. Local time and global time are only relevant when editing a nested Timeline instance. To create a nested Timeline instance, drag a GameObject associated with a Timeline instance into another Timeline instance. The Timeline instance you are dragging into becomes the master Timeline instance. The Timeline instance associated with the GameObject becomes a nested Timeline instance. A nested Timeline instance appears as a Control clip on a Control track (red arrow) To edit a nested Timeline instance, double-click the Control clip that contains the nested Timeline instance. The Timeline window switches to the nested Timeline instance, indicated by the Timeline title which shows the name and GameObject of the master Timeline instance, followed by the name and GameObject of the nested Timeline instance. The Timeline title indicates that you are editing a nested Timeline instance (red outline). The Global button (red arrow) indicates that the nested Timeline instance is shown using global time. When editing a nested Timeline instance, click Global to switch the Timeline ruler to Local time. Local time is relative to the nested Timeline. This means that the Timeline ruler starts at zero. A nested Timeline instance in Local time. Click Local to view the Timeline ruler in relation to the placement of the nested Timeline in the master Timeline instance. This means that if, for example, if the Control clip is placed at frame 70 of the master Timeline then the Timeline ruler starts at 70 at the beginning of the nested Timeline instance. A nested Timeline instance in Global time."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_selector.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_selector.html",
    "title": "Timeline Preview and Timeline Selector | ModularUIPack",
    "summary": "Timeline Preview and Timeline Selector Use the Timeline Selector to select the Timeline instance to view, modify, or preview in the Timeline window. The Timeline Preview button enables or disables previewing the effect that the selected Timeline instance has on your Scene. Timeline Preview button with Timeline Selector and menu. Selecting a Timeline instance automatically enables the Timeline Preview button. To select a Timeline instance, click the Timeline Selector and choose from the list of Timeline instances in the current Scene. Each menu item displays the name of the Timeline Asset and its associated GameObject in the current Scene. For example, the Timeline Asset named GroundATL that is associated with the Ground GameObject, displays as \"GroundATL (Ground).\""
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_settings.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_settings.html",
    "title": "Timeline Settings | ModularUIPack",
    "summary": "Timeline Settings Use the Timeline Settings to choose the Timeline window and Timeline Asset settings such as the unit of measurement, the duration mode, audio waveform, and window snap settings. Click the Cog icon in the Timeline window to view the Timeline Settings menu Time Unit Select either Frames, Timecode or Seconds to set the Timeline window to display time in that format. Timecode will display the time in seconds with sub-second values displayed in frames. Duration Mode Use the Duration Mode to set whether the duration of the Timeline Asset extends to the end of the last clip (Based On Clips), or ends at a specific time or frame (Fixed Length). When the Duration Mode is set to Fixed Length, use one of the following methods to change the length of the Timeline Asset: Select the Timeline Asset in the Project window and use the Inspector window to set the Duration in seconds or frames. In the Timeline window, drag the blue marker on the timeline. The blue marker indicates the end of the Timeline Asset. A blue line indicates the duration of the Timeline Asset. Timeline Asset duration (red rectangle) and end marker (green circle) Frame Rate Select one of the options under Frame Rate to set the unit of measurement for the Timeline ruler. Change the Frame Rate to align clips at precise frames but changing the Frame Rate is only visual and has no effect on play speed, keys, tracks, or clips. The following standard frame rates are listed: Film (24 fps), PAL (25 fps), NTSC (29.97 fps), 30, 50, or 60. Timeline supports custom frame rates from 1e-6 to 1000. To set a custom frame rate, you must use the Frame Rate property in the Timeline Asset settings. When the Timeline Asset is set to a custom frame rate, the Custom menu item is enabled and is automatically selected for the Timeline instance. The Custom menu item shows the custom frame rate in parentheses. Show Audio Waveforms Enable Show Audio Waveforms to draw the waveforms for all audio clips on all audio tracks. For example, use an audio waveform as a guide when manually positioning an Audio clip of footsteps with the Animation clip of a humanoid walking. Disable Show Audio Waveform to hide audio waveforms. Show Audio Waveforms is enabled by default. Enable Audio Scrubbing Enable Audio Scrubbing to play audio while dragging the Timeline Playhead. Disable Enable Audio Scrubbing to stop playing audio while dragging the Timeline Playhead. When disabled, Timeline only plays audio when in Timeline Playback mode. Snap to Frame Enable Snap to Frame to manipulate clips, preview Timeline instances, drag the Timeline Playhead, and position the Timeline Playhead using frames. Disable Snap to Frame to use subframes. Snap to Frame is enabled by default. Disable Snap to Frame to position clips and drag the playhead between frames For example, when Snap to Frame is disabled and you drag the Timeline Playhead, it moves the playhead between frames. The format of Playhead Location displays differently depending on whether the Timeline window is set to Seconds, Timecode or Frames: When the Timeline window is set to Frames, the Playhead Location shows frames and subframes. For example, 8 frames and 34 subframes displays as 8.34. When the Timeline window is set to Timecode, the Playhead Location shows seconds, frames, and subframes. For example, 6 seconds, 17 frames, and 59 subframes displays as 6:17 [.59]. When the Timeline window is set to Seconds, the Playhead Location shows seconds. For example, 6.5 seconds displays as 6:50. Manipulating clips, previewing Timeline instances, and positioning the playhead at the subframes level is useful when attempting to synchronize animation and effects with audio. Many high-end audio processing software products create audio waveforms with subframe accuracy. Edge Snap Enable the Edge Snap option to snap clips when you position, trim, and create blends. When enabled, the Timeline window snaps the start or end of a clip when dragged within 10 pixels of the Timeline Playhead, the start or end of a clip on the same track, the start or end of a clip on another track, or the start or end of the entire Timeline instance. The start guide or end guide is redrawn in white to indicate that the clip has snapped to the edge of another clip or the Timeline Playhead. Disable Edge Snap to create more accurate blends, ease-ins, or ease-outs. Edge Snap is enabled by default."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_window.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_window.html",
    "title": "Timeline window | ModularUIPack",
    "summary": "Timeline window To access the Timeline window, select Sequencing > Timeline from the Window menu. What the Timeline window shows depends on what you select in either the Project window or the Scene view. For example, if you select a GameObject that is associated with a Timeline Asset, the Timeline window shows the tracks and clips from the Timeline Asset and the GameObject bindings from the Timeline instance. Selecting a GameObject associated with a Timeline Asset displays its tracks and clips, and the bindings from the Timeline instance If you haven’t selected a GameObject, the Timeline window informs you that the first step for creating a Timeline Asset and a Timeline instance is to select a GameObject. With no GameObject selected, the Timeline window provides instructions If a GameObject is selected and it is not associated with a Timeline Asset, the Timeline window provides the option for creating a new Timeline Asset, adding the necessary components to the selected GameObject, and creating a Timeline instance. Select a GameObject that is not associated with a Timeline Asset to create a new Timeline Asset, add components, and create a Timeline instance To use the Timeline window to view a previously created Timeline Asset, select the Timeline Asset in the Project window and open the Timeline window. The Timeline window shows the tracks and clips associated with the Timeline Asset, but without the track bindings to GameObjects in the Scene. In addition, the Timeline Playback Controls are disabled and there is no Timeline Playhead. Timeline Asset selected in the Project window shows its tracks and clips, but with no track bindings. The Timeline Playback Controls are disabled. Timeline saves the track bindings to GameObjects in the Scene with the Timeline instance, not the Timeline Asset. For details on the relationship between the Project, Scene, Timeline Assets, and Timeline instances, see Timeline overview."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_add.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_add.html",
    "title": "Adding tracks | ModularUIPack",
    "summary": "Adding tracks The Timeline window supports many different methods of adding tracks to the Track list. Depending on the method you choose, the Timeline window may also add track bindings to the Track header, clips to tracks, and components to GameObjects. Add Track menu The simplest method to add a track is to click the Add button and select the type of track from the Add Track drop-down menu. You can also right-click an empty area of the Track list to make the Add Track menu appear. The Timeline window also supports dragging a GameObject into the Track list. Drag a GameObject into an empty area in the Track list and select the type of track to add from the context menu. Depending on the type of track selected, the Timeline window performs different actions: Select Animation Track and the Timeline window binds the GameObject to the Animation track. If the GameObject doesn't already have an Animator component, the Timeline window creates an Animator component for the GameObject. Select Activation Track and the Timeline window binds the GameObject to the Activation track. There are some limitations when creating an Activation track when dragging a GameObject. For example, the main GameObject with the Playable Directory component should not be bound to an Activation track. Because this is the same GameObject that links the Timeline Asset to the Scene, activating and disabling the GameObject affects the length of Timeline instance. Select Audio Track and the Timeline window adds an Audio Source component to the GameObject and binds this Audio Source component to the Audio track."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_delete.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_delete.html",
    "title": "Deleting tracks | ModularUIPack",
    "summary": "Deleting tracks Delete a track to remove the track, its clips, blends, and properties from the Timeline window. This is a destructive action that modifies a Timeline Asset and affects all Timeline instances based on the Timeline Asset. There are many ways to delete tracks: Select a track and press the Delete key (or hold Command and press Delete). Select a track. Right-click an empty area in the Track list and select Delete from the context menu. Right-click a track and select Delete from the context menu. Deleting an Animation track also deletes the recorded Infinite clips for Animation clips that were converted from Infinite clips. The Project window may still show recorded Infinite clips as children of a Timeline Asset because it is not updated until you save the Scene or Project. You cannot delete a locked track."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_dup.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_dup.html",
    "title": "Duplicating tracks | ModularUIPack",
    "summary": "Duplicating tracks Duplicating a track copies its clips, blends, and Inspector properties. If the duplicated track is bound to a GameObject, the binding is reset to None. Track binding for a duplicated track is reset to None There are many ways to duplicate tracks: Select a track. Right-click an empty area in the Track list and select Duplicate from the context menu. Select a track. Hold Command/Control and press D. Select a track. Hold Command/Control and press C, for copy, then press V, for paste. Right-click a track and either select Duplicate from the context menu or hold Command/Control and press D."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_list_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_list_about.html",
    "title": "Track list and Track headers | ModularUIPack",
    "summary": "Track list and Track headers Use the Track list to add, select, duplicate, delete, lock, mute, and reorder the tracks that comprise a Timeline Asset. You can also organize tracks into Track groups. Track list and Track headers for the Timeline instance named GroundETL Each track has two areas: Track list: Shows a Track header for each track. Clips view: Shows the clips for each track. The Track header contains the name of the track or its binding information. Track bindings are saved to the Playable Director component associated with the GameObject that is linked to the Timeline Asset. This association is referred to as a Timeline instance (see Timeline overview). Each Track header has a colored accent that identifies the track type and its clips: Activation tracks are green. Use Activation tracks to add Activation clips which set when the bound GameObject is active (shown). The GameObject is bound to the Activation track. Animation tracks are blue. Use Animation tracks to add Animation clips that animate the bound GameObject. Use an Animation track and its Animation clips to record basic animation or animate a humanoid. Audio tracks are orange. Use Audio tracks to add Audio clips for playing background music or sound effects. Each Audio clip is bound to an audio waveform. The audio source, that plays each waveform, is bound to the Audio track. Control tracks are turquoise. Use Control tracks to add Control clips which are special clips that control a nested Timeline instance, Particle System, Prefab instance, or ITimeControl Script. How the Control clip is created determines what it controls. Playable tracks are white. Use Playable tracks to add Playable clips. Each Playable clip is bound to a script that uses the Playables API to create custom animation tools, effects or gameplay mechanisms. Each Track header is also identified by an icon. If a track has a binding error or if the bound GameObject is disabled, the icon representing a track changes to an alert icon. For example, if an Animation track is bound to a GameObject that is disabled at the location of the Playhead, the icon switches to an alert icon. An alert icon indicates that the RedCube bound GameObject is disabled at the start of the Timeline instance"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_lock.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_lock.html",
    "title": "Locking tracks | ModularUIPack",
    "summary": "Locking tracks Lock a track to prevent editing of the track and any of the clips used by the track. Use lock when you have finished animating a track and you want to avoid inadvertently modifying the track. You cannot edit or delete a locked track, or select its clips. The Lock icon identifies a locked track. Selected and locked track with Lock icon (red circle) To lock a track, right-click on the track and select Lock from the context menu. You can also select a track and press L. You can select and lock multiple tracks at a time. A track can be both locked and muted. To unlock a track, click the Lock icon. You can also select a locked track and press L, or right-click and select Unlock."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_mute.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_mute.html",
    "title": "Muting tracks | ModularUIPack",
    "summary": "Muting tracks Mute a track to disable its clips and their effect on the Scene. You can also use mute when your Timeline instance includes many tracks with animations and you want to focus on the animation of one or a few tracks. The Mute icon identifies a muted track. Selected and muted track with Mute icon (red circle) To mute a track, right-click on the track and select Mute from the context menu. You can also select a track and press M. You can select and mute multiple tracks at a time. A track can be both muted and locked. To unmute a track, click the Mute icon. You can also select a muted track and press M, or right-click and select Unmute. Note: Muted tracks can be deleted."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_reorder.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_reorder.html",
    "title": "Reordering tracks and rendering priority | ModularUIPack",
    "summary": "Reordering tracks and rendering priority In the Timeline window, the rendering and animation priority is from the last track to the first track, where the last track takes priority. You can reorder tracks to change their rendering or animation priority. For example, a Timeline instance has four Animation tracks, where the second and fourth Animation tracks animate the same GameObject. The fourth track overrides the animation on any of the preceding tracks. This animation priority is the reason why Animation Override tracks are added as child tracks, under Animation tracks. The second track (red arrow) and fourth track (selected, green arrow) animate the same GameObject (GreenCube). The fourth track has priority and overrides the second track.) To reorder tracks, select one or more tracks and drag until a white insert line appears between tracks in the Track list. The white insert line indicates the destination of the tracks you are dragging. The last selected track type displays beside the cursor. Release the mouse button to reorder tracks. For example, the white insert line indicates that the Control track (Storm) will be placed between the first track (Ground) and second track (Audio Src) An Animation Override track is bound to the same GameObject as its parent Animation track. Reordering an Animation Override track converts it to an Animation track and resets its binding to none."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_select.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_select.html",
    "title": "Selecting tracks | ModularUIPack",
    "summary": "Selecting tracks To select a single track, click its Track header in the Track list. You can also click an empty area in the Clips view. When you select a track, Timeline highlights its Track header and Clips view. Selecting a track deselects all other tracks or clips. Selecting a track shows its properties in the Inspector window. The track properties change depending on the type of track and how many tracks you select. See Timeline Inspector for details. To select contiguous tracks, select the first track and then hold Shift and click the last track in the series. For example, to select three contiguous tracks, click the first track, then hold Shift and click the third track. All three tracks are selected. Click to select the first track Hold Shift and click to select contiguous tracks Hold Command/Control and click to select discontiguous tracks. Hold Command/Control and click to deselect a selected track. There are many other ways to select tracks: Hold down Shift and press the Up arrow or Down arrow keys to add and remove tracks from the selection. To deselect all tracks or clips, click on an empty area in the Track list. When a clip is selected on a track, press Tab to select the track. Use the arrow keys to change the selected track. The Up and Down arrow keys select the previous or next track. The Right arrow key selects the first clip on the track. If a Track group is already selected, the Left arrow and Right arrow keys collapse and expand the Track group."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/uss_styles.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/uss_styles.html",
    "title": "Defining custom USS styles | ModularUIPack",
    "summary": "Defining custom USS styles The first step to define a USS style is to create a new stylesheet. Stylesheets can be used to extend the Editor’s visual appearance. This can be done by adding a file named common.uss in an Editor folder in a StyleSheets/Extensions folder hierarchy. For example, the following locations are valid: Assets/Editor/Stylesheets/Extensions/common.uss Assets/Editor/MyFolder/Stylesheets/Extensions/common.uss Assets/Editor/MyFolder1/MyFolder2/Stylesheets/Extensions/common.uss USS files (for Unity Style Sheet) use a CSS-like syntax to describe new styles. Here is an example: myStyle { width:18px; height:18px; background-image: resource(\"Assets/Editor/icon.png\"); } In this style, we specified that we wish to use a custom icon along with size properties. USS styles also support pseudo-states, which works like pseudo-classes in CSS. Timeline markers support the following pseudo-states: Collapsed: .myStyle Normal: .myStyle:checked Selected: .myStyle:hover:focus:checked USS stylesheets also support Unity's light and dark themes. Styles in files named dark.uss and light.uss will be used as an override of the style in common.uss. For example: common.uss myStyle { width:18px; height:18px; color: rgb(125, 125, 125); } dark.uss myStyle { color: rgb(0, 0, 0); background-image: resource(\"icon_dark.png\"); } light.uss myStyle { color: rgb(255, 255, 255); background-image: resource(\"icon_light.png\"); } In the dark theme, myStyle will be resolved to: myStyle { width:18px; height:18px; color: rgb(0, 0, 0); background-image: resource(\"icon_dark.png\"); } and in the light theme: myStyle { width:18px; height:18px; color: rgb(255, 255, 255); background-image: resource(\"icon_light.png\"); }"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_about.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_about.html",
    "title": "Using the Timeline window | ModularUIPack",
    "summary": "Using the Timeline window Use the Timeline window to create Timeline Assets and Timeline instances, record animation, schedule animation, and create cinematic content. This section shows you how to do the following tasks: Create a Timeline Asset and Timeline instance Record basic animation with an Infinite clip Convert an Infinite clip to an Animation clip Animate a humanoid Use Animation Override tracks and Avatar Masking Nest Timeline Instances"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_char_anim.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_char_anim.html",
    "title": "Animating a humanoid | ModularUIPack",
    "summary": "Animating a humanoid This task demonstrates how to use a Timeline instance to animate a humanoid with external motion clips. This workflow also demonstrates how to match clip offsets, manually adjust clip offsets, and create blends between clips to minimize jumping and sliding. Although this workflow uses a humanoid, you can use this animation method for any GameObject. This workflow assumes that you have already created a Timeline instance with an empty Animation track bound to a humanoid. For example, the DefaultMale humanoid is bound to an empty Animation track: DefaultMale humanoid bound to an empty Animation track. From your Project, drag a motion clip into the Animation track to create a new Animation clip. For example, drag an idle pose as the first clip to start the humanoid from an idle stance. To position, resize, or trim your Animation clip in the Clips view, select Mix mode as the Clip Edit mode. There are three different Clip Edit modes that change the editing behaviour of the Timeline window. When the Timeline window is in Mix mode, you can drag and trim clips to create blends. Animation track, bound to the DefaultMale humanoid, with an idle pose (Idle) as its Animation clip. The Mix mode (red circle) is the selected Clip Edit mode. Add a second Animation clip. This example adds a run and turn left clip (named Run_Left) to the Animation track, and then resizes the clip to include one loop, so the DefaultMale runs and turns 180 degrees. Animation track with an Idle clip and a Run_Left clip Play the Timeline instance. In this example, the DefaultMale humanoid jumps between each Animation clip because the position of the humanoid at the end of the first Animation clip (Idle) does not match the position of the humanoid at the start of the next Animation clip (RunLeft). The humanoid jumps between the first Animation clip, which ends at frame 29 (red arrow and box), and the second Animation clip, which starts at frame 30 (ghost with green arrow and box) Matching clips To fix the animation jump between clips, match the offset of each Animation clip. The Timeline window provides different methods for matching offsets. In this example, Timeline matches the second Animation clip with the previous clip. To do this, select the Run_Left clip, right-click and select Match Offsets to Previous Clip. Right-click and select Match Offsets to Previous Clip to match the offsets of the selected Animation clip with the preceding Animation clip After matching offsets, the position and rotation of the humanoid at the start of the second Animation clip (frame 30, ghost with green arrow) matches the position and rotation of the humanoid at the end of the first Animation clip (frame 29, red arrow) Play the Timeline instance again. Although the position and rotation of the humanoid matches, there is still a jump between the two Animation clips because the humanoid is in different poses. At the end of the first Animation clip, the humanoid is standing upright with its feet together. At the start of the second Animation clip, the humanoid is bent forward with its feet apart. Blending clips Create a blend to remove the jump and transition between the two poses. Adjust the size of the clips, the Blend Area, the Clip In, and the shape of each Blend Curve to create a transition between the two poses. For example, in the transition between the Idle clip and the Run_Left clip, the Idle clip was resized to 36 frames and the Run_Left clip was repositioned to start at frame 25. The rest of the clip properties are unchanged from their default values. With Mix mode selected, you can create a blend (red circle) between two clips to create a smooth transition between two animations. As the Idle clip transitions to the Run_Left clip, the blend removes the obvious jump between poses. The transition between most body parts appears natural, however in this example, the blend between the different positions of the foot results in an unnatural foot slide. Reducing foot slide To reduce foot sliding, manually adjust the offset of an Animation clip so that the position of the foot changes less drastically. To manually adjust the offset, select the Animation clip in the Timeline window. In the Inspector window, expand Animation Playable Asset. Select an Animation clip. In the Inspector window, expand Animation Playable Asset (red) to view the Clip Transform Offsets. The rotation and position Clip Transform Offsets are not zero because performing Match Offsets to Previous Clip already set these values to match the root (hips) of the humanoid at the end of the previous Animation clip. Under Clip Transform Offsets, enable the Move tool. The Move Gizmo appears in the Scene view, at the root of the Animation clip. Enable the Move tool (Inspector window, red arrow) to show the Move Gizmo (green arrow) in the Scene view Use one of the following methods to manually adjust the offset position of the Animation clip: In the Scene view, drag the Move Gizmo. In the Inspector window, under Clip Transform Offsets, change the value of the appropriate Position property."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_conv_infinite.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_conv_infinite.html",
    "title": "Converting an Infinite clip to an Animation clip | ModularUIPack",
    "summary": "Converting an Infinite clip to an Animation clip An Infinite clip appears as a dope sheet. An Infinite clip cannot be positioned, trimmed, or split because it does not have a defined duration. To position, trim, split, or perform other clip manipulations on an Infinite clip, you must first convert it to an Animation clip. You cannot convert an Animation clip back to an Infinite clip. To convert an Infinite clip to an Animation clip, click the Track menu icon and select Convert to Clip Track: The Track menu (circled) converts an Infinite clip to an Animation clip. You can also right-click the track and select Convert to Clip Track from the context menu. The Track menu and context menu are the same. An infinite clip after it has been converted to an Animation clip"
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_instance.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_instance.html",
    "title": "Creating a Timeline Asset and Timeline instance | ModularUIPack",
    "summary": "Creating a Timeline Asset and Timeline instance To use a Timeline Asset in your Scene, associate the Timeline Asset with a GameObject using a Playable Director component. Associating a Timeline Asset with a Playable Director component creates a Timeline instance and allows you to specify which objects in the Scene are animated by the Timeline Asset. To animate a GameObject, it must also have an Animator component. The Timeline window automatically creates a Timeline instance while creating a new Timeline Asset. The Timeline window also creates the necessary components. To create a new Timeline Asset and Timeline instance, follow these steps: In your Scene, select the GameObject that you want to use as the focus of your cinematic or other gameplay-based sequence. Open the Timeline window (menu: Window > Sequencing > Timeline). If the GameObject does not yet have a Playable Director component attached to a Timeline Asset, a message in the Timeline window prompts you to click the Create button. Click Create. A dialog box prompts you for the name and location of the Timeline Asset you are creating. You can also specify tags to identify the Timeline Asset. Click Save. The Timeline window does the following: Saves a new Timeline Asset to the Assets directory of your Project. If you did not change the name and location of the Timeline Asset you are creating, the Timeline window creates a name based on the selected GameObject with the \"Timeline\" suffix. For example, selecting the GameObject called \"Enemy\" names the Asset \"EnemyTimeline\". Adds an empty Animation track to the Timeline Asset. Adds a Playable Director component to the selected GameObject, and sets the Playable property to the Timeline Asset. This creates a Timeline instance. Sets the binding on the Animation track in the Playable Director component to the selected GameObject. The Animation track does not have any clips, so the selected GameObject is not animated. Adds an Animator component to the selected GameObject. The Animator component animates the GameObject through the Timeline instance. The GameObject cannot be animated without an Animator component."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_mask.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_mask.html",
    "title": "Using an Animation Override track and an Avatar Mask | ModularUIPack",
    "summary": "Using an Animation Override track and an Avatar Mask This task demonstrates how to use an Animation Override track and an Avatar Mask to replace the upper-body animation of an Animation track. Use this technique to animate a humanoid to, for example, run and carry an object. For information on creating an Avatar mask, see Avatar Mask window. This task assumes that you have already created a Timeline instance with a simple Animation clip on an Animation track bound to a humanoid: This example uses a humanoid bound to a simple run cycle animation (RunForward) that loops once Right-click the Animation track and select Add Override Track from the context menu. An Animation Override track, named Override 0, is linked to the selected Animation track. Notice that the Animation Override track is not bound to a GameObject. Because the Override track is linked to the Animation track above, the Override track is bound to the same GameObject, in this case, the DefaultMale humanoid. To add an Override track, right-click the Animation track and select Add Override Track from the context menu] From your Project, drag an Animation Clip with upper-body animation into the Override track. For example, drag an animation of a humanoid standing still and waving their arms. Position and resize the clip to match the Animation clip that you want to override. The Animation Override track contains an Animation clip of a humanoid standing still, waving their arms (WavingArms). This clip was resized to match the Animation clip (RunForward) of the parent Animation track. Play the Timeline instance. In this example, the WavingArms clip completely overrides the RunForward clip. To combine the lower-body animation from one Animation clip with upper-body animation from another Animation clip, specify an Avatar Mask for the Animation Override track. To specify an Avatar Mask, select the Override track to view its properties in the Inspector window From the Project, drag an Avatar Mask, that masks the lower body animation, into the Avatar Mask property in the Inspector window. Enable the Apply Avatar Mask checkbox. An Avatar Mask icon appears beside the track name. An Avatar Mask, that masks the lower body animation, is specified for the Animation Overview clip in the Inspector window. This allows the upper body animation to pass through. The Avatar Mask icon (red) indicates that the Animation Override track uses an Avatar Mask. Play the Timeline instance. In this example, the DefaultMale humanoid uses upper-body animation from the WavingArms clip and lower-body animation from the RunForward clip. To temporarily disable the Avatar Mask, click the Avatar Mask icon. The Avatar Mask icon (red) is gray when disabled. The WavingArms clip completely overrides the RunForward clip."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_nested.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_nested.html",
    "title": "Nesting Timeline instances | ModularUIPack",
    "summary": "Nesting Timeline instances Timeline supports nesting Timeline instances. A nested Timeline instance refers to a Timeline instance that is added within another Timeline instance. The master Timeline instance refers to the main or parent Timeline instance that includes other Timeline instances. Nesting Timeline instances is useful if you have a large team working on different aspects of a Project and you want them to collaborate on the same cinematic or cut-scene. For example, you are developing a puzzle game that starts with a cinematic of the character walking into frame while the pieces on the game board move into position. You could create a master Timeline instance for the character walking into frame. You could create another Timeline instance for the game board animation. You could then nest the game board animation into the master Timeline instance of the character walking into frame. The master NestTL Timeline instance has a character walking and theme music. A Control track nests the BoardTL Timeline instance for the game board animation. By creating a master Timeline instance with nested Timeline instances, different teams can work on different animations and then combine the animations into one master Timeline. In the puzzle game example, one team could work on the character Timeline instance, and another team could work on the game board animation. When you have two Timeline instances, and you want to nest one instance into the other, open the Timeline instance that you want to be the master Timeline instance. To ensure that the Timeline window does not switch while you select GameObjects, click the lock icon (red arrow): The master NestTL Timeline instance has a character walking and theme music. Find the GameObject in your Scene that is associated with the Timeline instance that you want to nest inside the master Timeline instance. Drag the GameObject into the Clips view of the Timeline window. The Board GameObject is associated with the BoardTL Timeline instance. Drag the Board GameObject into the NestTL master Timeline to nest the BoardTL Timeline instance in the NestTL Timeline instance. The Timeline window creates a Control track and places the Control clip where you drop the GameObject. The Control clip is set to the same size as the Timeline instance. When a Control clip contains a nested Timeline instance, a downward arrow appears beside its name. To edit a nested Timeline instance from the master timeline, double-click its Control clip. Double-click the Control clip to edit the nested BoardTL Timeline instance from within the master A warning icon appears beside the name of the nested Timeline instance because the Timeline Playhead is outside the range of the nested Timeline. Timeline also disables the Timeline Playhead controls. When you edit a nested Timeline instance, you cannot change the duration of the nested Timeline instance. You must return to the master Timeline instance and change the duration of the Control clip to change the duration of the nested Timeline instance. To return to the master, click the name of the master Timeline instance (red arrow): Warning icon (red circle) means the Timeline Playhead Controls are disabled. The Timeline window is in this state because, by default, the size of the Control clip in the master Timeline instance determines when the nested Timeline instance is active. Use one of the following methods to change this state and edit the nested Timeline instance: Click the Timeline ruler to move the Timeline Playhead into the nested Timeline. This enables editing and the Timeline Playback Controls. In the master Timeline instance, move the Timeline Playhead to within the Control clip before you double-click the Control clip. In the master Timeline instance, select the Control clip, and disable the Control Activation property in the Inspector window. Disable the Control Activation property (red outline) to have the nested Timeline instance active throughout the duration of the master Timeline instance."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_rec_anim.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_rec_anim.html",
    "title": "Recording basic animation with an Infinite clip | ModularUIPack",
    "summary": "Recording basic animation with an Infinite clip You can record animation directly to an Animation track. When you record directly to an empty Animation track, you create an Infinite clip. An Infinite clip is a clip that contains basic key animation recorded through the Timeline window. An Infinite clip cannot be positioned, trimmed, or split because it does not have a defined size: it spans the entirety of an Animation track. Before creating an Infinite clip, you must add an empty Animation track for the GameObject that you want to animate. In the Track list, click the red circular Record button for the empty Animation track to enable Record mode. Click the Record button on an empty track to enable Record mode When a track is in Record mode, the clip area of the track is drawn in red with the \"Recording...\" message, and the Record button blinks on and off. Timeline window in Record mode When in Record mode, any modification to an animatable property of the GameObject sets a key at the location of the Timeline Playhead. To start creating an animation, move the Timeline Playhead to the location of the first key, and do one of the following: In the Inspector window, right-click the name of the property and choose Add Key. This adds an animation key for the property without changing its value. A diamond appears in the Infinite clip to show the position of the key. In the Inspector window, change the value of the animatable property of the GameObject. This adds an animation key for the property with its changed value. A diamond appears in the Infinite clip. In the Scene view, either move, rotate, or scale the GameObject. This automatically adds a key for the properties you change. A diamond appears in the Infinite clip. Red background indicates that you’ve added an animation curve for the property to the clip Setting a key adds a diamond to the Infinite clip Move the playhead to a different position on the Timeline and change the animatable properties of the GameObject. At each position, the Timeline window adds a diamond to the Infinite clip for any changed properties and adds a key to its associated animation curves. While in Record mode, you can right-click the name of an animatable property name to perform keying operations such as setting a key without changing its value, jumping to the next or previous keys, and removing keys. For example, to set a key for the position of a GameObject without changing its value, right-click Position and select Add Key from the context menu. Right-click the name of an animatable property to perform keying operations When you finish the animation, click the blinking Record button to disable Record mode. An Infinite clip appears as a dope sheet in the Timeline window, but you cannot edit the keys in this view. Use the Curves view to edit keys. You can also double-click the Infinite clip and edit the keys with the Animation window. An Infinite clip appears as a dope sheet Save the Scene or Project to save the Timeline Asset and the Infinite clip. The Timeline window saves the key animation from the Infinite clip as a source asset. The source asset is named \"Recorded\" and saved as a child of the Timeline Asset in the Project. Recorded clips are saved under the Timeline Asset in the Project For every additional recorded Infinite clip, the Timeline window numbers each clip sequentially, starting at \"(1)\". For example, a Timeline Asset with three recorded Infinite clips are named \"Recorded\", \"Recorded (1)\", and \"Recorded (2)\". If you delete a Timeline Asset, its recorded clips are also removed."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "Timeline copyright © 2022 Unity Technologies Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.timeline@1.7.6/README.html": {
    "href": "Library/PackageCache/com.unity.timeline@1.7.6/README.html",
    "title": "About Timeline | ModularUIPack",
    "summary": "About Timeline Use Unity’s Timeline to create cinematic content, game-play sequences, audio sequences, and complex particle effects. Installing Timeline To install this package, follow the instructions in the Package Manager documentation. Using Timeline The Timeline Manual can be found here Technical details Requirements This version of Timeline is compatible with the following versions of the Unity Editor: 2019.3 and later (recommended)"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog [1.0.0] - 2019-01-08 This is the first release of Unity UI as a built in package."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystem.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystem.html",
    "title": "Event System | ModularUIPack",
    "summary": "Event System The Event System is a way of sending events to objects in the application based on input, be it keyboard, mouse, touch, or custom input. The Event System consists of a few components that work together to send events. When you add an Event System component to a GameObject you will notice that it does not have much functionality exposed, this is because the Event System itself is designed as a manager and facilitator of communication between Event System modules. The primary roles of the Event System are as follows: Manage which GameObject is considered selected Manage which Input Module is in use Manage Raycasting (if required) Updating all Input Modules as required Input Modules An Input Module is where the main logic of how you want the Event System to behave lives, they are used for: Handling Input Managing event state Sending events to scene objects. Only one Input Module can be active in the Event System at a time, and they must be components on the same GameObject as the Event System component. If you want to write a custom Input Module, send events supported by existing UI components in Unity. To extend and write your own events, see the Messaging System documentation. Raycasters Raycasters are used for figuring out what the pointer is over. It is common for Input Modules to use the Raycasters configured in the Scene to calculate what the pointing device is over. There are 3 provided Raycasters that exist by default: Graphic Raycaster - Used for UI elements Physics 2D Raycaster - Used for 2D physics elements Physics Raycaster - Used for 3D physics elements If you have a 2d / 3d Raycaster configured in your Scene, it is easy to make non-UI elements receive messages from the Input Module. Simply attach a script that implements one of the event interfaces. For examples of this, see the IPointerEnterHandler and IPointerClickHandler Scripting Reference pages."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystemReference.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystemReference.html",
    "title": "Event System Reference | ModularUIPack",
    "summary": "Event System Reference This section provides details about the following parts of the event system: Event System Manager Graphic Raycaster Physics Raycaster Physics2D Raycaster Standalone Input Module Touch Input Module Event Trigger"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UICreateFromScripting.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UICreateFromScripting.html",
    "title": "Creating UI elements from scripting | ModularUIPack",
    "summary": "Creating UI elements from scripting If you are creating a dynamic UI where UI elements appear, disappear, or change based on user actions or other actions in the game, you may need to make a script that instantiates new UI elements based on custom logic. Creating a prefab of the UI element In order to be able to easily instantiate UI elements dynamically, the first step is to create a prefab for the type of UI element that you want to be able to instantiate. Set up the UI element the way you want it to look in the Scene, and then drag the element into the Project View to make it into a prefab. For example, a prefab for a button could be a Game Object with a Image component and a Button component, and a child Game Object with a Text component. Your setup might be different depending on your needs. You might wonder why we don't have a API methods to create the various types of controls, including visuals and everything. The reason is that there are an infinite number of way e.g. a button could be setup. Does it use an image, text, or both? Maybe even multiple images? What is the text font, color, font size, and alignment? What sprite or sprites should the image use? By letting you make a prefab and instantiate that, you can set it up exactly the way you want. And if you later want to change the look and feel of your UI you can just change the prefab and then it will be reflected in your UI, including the dynamically created UI. Instantiating the UI element Prefabs of UI elements are instantiated as normal using the Instantiate method. When setting the parent of the instantiated UI element, it's recommended to do it using the Transform.SetParent method with the worldPositionStays parameter set to false. Positioning the UI element A UI Element is normally positioned using its Rect Transform. If the UI Element is a child of a Layout Group it will be automatically positioned and the positioning step can be skipped. When positioning a Rect Transform it's useful to first determine it has or should have any stretching behavior or not. Stretching behavior happens when the anchorMin and anchorMax properties are not identical. For a non-stretching Rect Transform, the position is set most easily by setting the anchoredPosition and the sizeDelta properties. The anchoredPosition specifies the position of the pivot relative to the anchors. The sizeDelta is just the same as the size when there's no stretching. For a stretching Rect Transform, it can be simpler to set the position using the offsetMin and offsetMax properties. The offsetMin property specifies the corner of the lower left corner of the rect relative to the lower left anchor. The offsetMax property specifies the corner of the upper right corner of the rect relative to the upper right anchor. Customizing the UI Element If you are instantiating multiple UI elements dynamically, it's unlikely that you'll want them all to look the same and do the same. Whether it's buttons in a menu, items in an inventory, or something else, you'll likely want the individual items to have different text or images and to do different things when interacted with. This is done by getting the various components and changing their properties. See the scripting reference for the Image and Text components, and for how to work with UnityEvents from scripting."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIFitContentSize.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIFitContentSize.html",
    "title": "Making UI elements fit the size of their content | ModularUIPack",
    "summary": "Making UI elements fit the size of their content Normally when positioning a UI element with its Rect Transform, its position and size is specified manually (optionally including behavior to stretch with the parent Rect Transform). However, sometimes you may want the rectangle to be automatically sized to fit the content of the UI element. This can be done by adding a component called Content Size Fitter. Fit to size of Text In order to make a Rect Transform with a Text component on it fit the text content, add a Content Size Fitter component to the same Game Object which has the Text component. Then set both the Horizontal Fit and Vertical Fit dropdowns to the Preferred setting. How does it work? What happens here is that the Text component functions as a Layout Element that can provide information about how big its minimum and preferred size is. In a manual layout this information is not used. A Content Size Fitter is a type of Layout Controller, which listens to layout information provided by Layout Elements and control the size of the Rect Transform according to this. Remember the pivot When UI elements are automatically resized to fit their content, you should pay extra attention to the pivot of the Rect Transform. The pivot will stay in place when the element is resized, so by setting the pivot position you can control in which direction the element will expand or shrink. For example, if the pivot is in the center, then the element will expand equally in all directions, and if the pivot is in the upper left corner, then the element will expand to the right and down. Fit to size of UI element with child Text If you have a UI element, such as a Button, that has a background image and a child Game Object with a Text component on it, you probably want the whole UI element to fit the size of the text - maybe with some padding. In order to do this, first add a Horizontal Layout Group to the UI element, then add a Content Size Fitter too. Set the Horizontal Fit, the Vertical Fit, or both to the Preferred setting. You can add and tweak padding using the padding property in the Horizontal Layout Group. Why use a Horizontal Layout Group? Well, it could have been a Vertical Layout Group as well - as long as there is only a single child, they produce the same result. How does it work? The Horizontal (or Vertical) Layout Group functions both as a Layout Controller and as a Layout Element. First it listens to the layout information provided by the children in the group - in this case the child Text. Then it determines how large the group must be (at minimum, and preferably) in order to be able to contain all the children, and it functions as a Layout Element that provides this information about its minimum and preferred size. The Content Size Fitter listens to layout information provided by any Layout Element on the same Game Object - in this case provided by the Horizontal (or Vertical) Layout Group. Depending on its settings, it then controls the size of the Rect Transform based on this information. Once the size of the Rect Transform has been set, the Horizontal (or Vertical) Layout Group makes sure to position and size its children according to the available space. See the page about the Horizontal Layout Group for more information about how it controls the positions and sizes of its children. Make children of a Layout Group fit their respective sizes If you have a Layout Group (horizontal or vertical) and want each of the UI elements in the group to fit their respective content, what do you do? You can't put a Content Size Fitter on each child. The reason is that the Content Size Fitter wants control over its own Rect Transform, but the parent Layout Group also wants control over the child Rect Transform. This creates a conflict and the result is undefined behavior. However, it isn't necessary either. The parent Layout Group can already make each child fit the size of the content. What you need to do is to disable the Child Force Expand toggles on the Layout Group. If the children are themselves Layout Groups too, you may need to disable the Child Force Expand toggles on those too. Once the children no longer expand with flexible width, their alignment can be specified in the Layout Group using the Child Alignment setting. What if you want some of the children to expand to fill additional available space, but not the other children? You can easily control this by adding a Layout Element component to the children you want to expand and enabling the Flexible Width or Flexible Height properties on those Layout Elements. The parent Layout Group should still have the Child Force Expand toggles disabled, otherwise all the children will expand flexibly. How does it work? A Game Object can have multiple components that each provide layout information about minimum, preferred and flexible sizes. A priority system determines which values take effect over others. The Layout Element component has a higher priority than the Text, Image, and Layout Group components, so it can be used to override any layout information values they provide. When the Layout Group listens to the layout information provided by the children, it will take the overridden flexible sizes into account. Then, when controlling the sizes of the children, it will not make them any bigger than their preferred sizes. However, if the Layout Group has the Child Force Expand option enabled, it will always make the flexible sizes of all the children be at least 1. More information This page has explained solutions to a few common use cases. For a more in depth explanation of the auto layout system, see the UI Auto Layout page."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIMultiResolution.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIMultiResolution.html",
    "title": "Designing UI for Multiple Resolutions | ModularUIPack",
    "summary": "Designing UI for Multiple Resolutions Modern games and applications often need to support a wide variety of different screen resolutions and particularly UI layouts need to be able to adapt to that. The UI System in Unity includes a variety of tools for this purpose that can be combined in various ways. In this how-to we're going to use a simple case study and look at and compare the different tools in the context of that. In our case study we have three buttons in the corners of the screen as shown below, and the goal is to adapt this layout to various resolutions. For this how-to we're going to consider four screen resolutions: Phone HD in portrait (640 x 960) and landscape (960 x 640) and Phone SD in portrait (320 x 480) and landscape (480 x 320). The layout is initially setup in the Phone HD Portrait resolution. Using anchors to adapt to different aspect ratios UI elements are by default anchored to the center of the parent rectangle. This means that they keep a constant offset from the center. If the resolution is changed to a landscape aspect ratio with this setup, the buttons may not even be inside the rectangle of the screen anymore. One way to keep the buttons inside the screen is to change the layout such that the locations of the buttons are tied to their respective corners of the screen. The anchors of the top left button can be set to the upper left corner using the Anchors Preset drop down in the Inspector, or by dragging the triangular anchor handles in the Scene View. It's best to do this while the current screen resolution set in the Game View is the one the layout is initially designed for, where the button placement looks correct. (See the UI Basic Layout page for more information on anchors.) Similarly, the anchors for the lower left and lower right buttons can be set to the lower left corner and lower right corner, respectively. Once the buttons have been anchored to their respective corners, they stick to them when changing the resolution to a different aspect ratio. When the screen size is changed to a larger or smaller resolution, the buttons will also remain anchored to their respective corners. However, since they keep their original size as specified in pixels, they may take up a larger or smaller proportion of the screen. This may or may not be desirable, depending on how you would like your layout to behave on screens of different resolutions. In this how-to, we know that the smaller resolutions of Phone SD Portrait and Landscape don't correspond to screens that are physically smaller, but rather just screens with a lower pixel density. On these lower-density screens the buttons shouldn't appear larger than on the high-density screens - they should instead appear with the same size. This means that the buttons should become smaller by the same percentage as the screen is smaller. In other words, the scale of the buttons should follow the screen size. This is where the Canvas Scaler component can help. Scaling with Screen Size The Canvas Scaler component can be added to a root Canvas - a Game Object with a Canvas component on it, which all the UI elements are children of. It is also added by default when creating a new Canvas through the GameObject menu. In the Canvas Scaler component, you can set its UI Scale Mode to Scale With Screen Size. With this scale mode you can specify a resolution to use as reference. If the current screen resolution is smaller or larger than this reference resolution, the scale factor of the Canvas is set accordingly, so all the UI elements are scaled up or down together with the screen resolution. In our case, we set the Canvas Scaler to be the Phone HD portrait resolution of 640 x 960. Now, when setting the screen resolution to the Phone SD portrait resolution of 320 x 480, the entire layout is scaled down so it appears proportionally the same as in full resolution. Everything is scaled down: The button sizes, their distances to the edges of the screen, the button graphics, and the text elements. This means that the layout will appear the same in the Phone SD portrait resolution as in Phone HD portrait; only with a lower pixel density. One thing to be aware of: After adding a Canvas Scaler component, it's important to also check how the layout looks at other aspect ratios. By setting the resolution back to Phone HD landscape, we can see that the buttons now appear bigger than they should (and used to). The reason for the larger buttons in landscape aspect ratio comes down to how the Canvas Scaler setting works. By default it compares the width or the current resolution with the width of the Canvas Scaler and the result is used as the scale factor to scale everything with. Since the current landscape resolution of 960 x 640 has a 1.5 times larger width than the portrait Canvas Scaler of 640 x 960, the layout is scaled up by 1.5. The component has a property called Match which can be 0 (Width), 1 (Height) or a value in between. By default it's set to 0, which compares the current screen width with the Canvas Scaler width as described. If the Match property is set to 0.5 instead, it will compare both the current width to the reference width and the current height to the reference height, and choose a scale factor that's in between the two. Since in this case the landscape resolution is 1.5 times wider but also 1.5 times shorter, those two factor even out and produce a final scale factor of 1, which means the buttons keep their original size. At this point the layout supports all the four screen resolutions using a combination of appropriate anchoring and the Canvas Scaler component on the Canvas. See the Canvas Scaler reference page for more information on different ways to scale UI elements in relation to different screen sizes."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIScreenTransition.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIScreenTransition.html",
    "title": "Creating Screen Transitions | ModularUIPack",
    "summary": "Creating Screen Transitions The need to transition between multiple UI screens is fairly common. In this page we will explore a simple way to create and manage those transitions using animation and State Machines to drive and control each screen. Overview The high-level idea is that each of our screens will have an Animator Controller with two states (Open and Closed) and a boolean Parameter (Open). To transition between screens you will only need to close the currently open Screen and open the desired one. To make this process easier we will create a small Class ScreenManager that will keep track and take care of closing any already open Screen for us. The button that triggers the transition will only have to ask the ScreenManager to open the desired screen. Thinking about Navigation If you plan to support controller/keyboard navigation of UI elements, then it's important to have a few things in mind. It's important to avoid having Selectable elements outside the screen since that would enable players to select offscreen elements, we can do that by deactivating any off-screen hierarchy. We also need to make sure when a new screen is shown we set a element from it as selected, otherwise the player would not be able to navigate to the new screen. We will take care of all that in the ScreenManager class below. Setting up the Animator Controller Let's take a look at the most common and minimal setup for the Animation Controller to do a Screen transition. The controller will need a boolean parameter (Open) and two states (Open and Closed), each state should have an animation with only one keyframe, this way we let the State Machine do the transition blending for us. Now we need to create the transition between both states, let's start with the transition from Open to Closed and let's set the condition properly, we want to go from Open to Closed when the parameter Open is set to false. Now we create the transition from Closed to Open and set the condition to go from Closed to Open when the parameter Open is true. Managing the screens With all the above set up, the only thing missing is for us to set the parameter Open to true on the screens Animator we want to transition to and Open to false on the currently open screens Animator. To do that, we will create a small script: using UnityEngine; using UnityEngine.UI; using UnityEngine.EventSystems; using System.Collections; using System.Collections.Generic; public class ScreenManager : MonoBehaviour { //Screen to open automatically at the start of the Scene public Animator initiallyOpen; //Currently Open Screen private Animator m_Open; //Hash of the parameter we use to control the transitions. private int m_OpenParameterId; //The GameObject Selected before we opened the current Screen. //Used when closing a Screen, so we can go back to the button that opened it. private GameObject m_PreviouslySelected; //Animator State and Transition names we need to check against. const string k_OpenTransitionName = \"Open\"; const string k_ClosedStateName = \"Closed\"; public void OnEnable() { //We cache the Hash to the \"Open\" Parameter, so we can feed to Animator.SetBool. m_OpenParameterId = Animator.StringToHash (k_OpenTransitionName); //If set, open the initial Screen now. if (initiallyOpen == null) return; OpenPanel(initiallyOpen); } //Closes the currently open panel and opens the provided one. //It also takes care of handling the navigation, setting the new Selected element. public void OpenPanel (Animator anim) { if (m_Open == anim) return; //Activate the new Screen hierarchy so we can animate it. anim.gameObject.SetActive(true); //Save the currently selected button that was used to open this Screen. (CloseCurrent will modify it) var newPreviouslySelected = EventSystem.current.currentSelectedGameObject; //Move the Screen to front. anim.transform.SetAsLastSibling(); CloseCurrent(); m_PreviouslySelected = newPreviouslySelected; //Set the new Screen as then open one. m_Open = anim; //Start the open animation m_Open.SetBool(m_OpenParameterId, true); //Set an element in the new screen as the new Selected one. GameObject go = FindFirstEnabledSelectable(anim.gameObject); SetSelected(go); } //Finds the first Selectable element in the providade hierarchy. static GameObject FindFirstEnabledSelectable (GameObject gameObject) { GameObject go = null; var selectables = gameObject.GetComponentsInChildren<Selectable> (true); foreach (var selectable in selectables) { if (selectable.IsActive () && selectable.IsInteractable ()) { go = selectable.gameObject; break; } } return go; } //Closes the currently open Screen //It also takes care of navigation. //Reverting selection to the Selectable used before opening the current screen. public void CloseCurrent() { if (m_Open == null) return; //Start the close animation. m_Open.SetBool(m_OpenParameterId, false); //Reverting selection to the Selectable used before opening the current screen. SetSelected(m_PreviouslySelected); //Start Coroutine to disable the hierarchy when closing animation finishes. StartCoroutine(DisablePanelDeleyed(m_Open)); //No screen open. m_Open = null; } //Coroutine that will detect when the Closing animation is finished and it will deactivate the //hierarchy. IEnumerator DisablePanelDeleyed(Animator anim) { bool closedStateReached = false; bool wantToClose = true; while (!closedStateReached && wantToClose) { if (!anim.IsInTransition(0)) closedStateReached = anim.GetCurrentAnimatorStateInfo(0).IsName(k_ClosedStateName); wantToClose = !anim.GetBool(m_OpenParameterId); yield return new WaitForEndOfFrame(); } if (wantToClose) anim.gameObject.SetActive(false); } //Make the provided GameObject selected //When using the mouse/touch we actually want to set it as the previously selected and //set nothing as selected for now. private void SetSelected(GameObject go) { //Select the GameObject. EventSystem.current.SetSelectedGameObject(go); //If we are using the keyboard right now, that's all we need to do. var standaloneInputModule = EventSystem.current.currentInputModule as StandaloneInputModule; if (standaloneInputModule != null) return; //Since we are using a pointer device, we don't want anything selected. //But if the user switches to the keyboard, we want to start the navigation from the provided game object. //So here we set the current Selected to null, so the provided gameObject becomes the Last Selected in the EventSystem. EventSystem.current.SetSelectedGameObject(null); } } Let's hook up this script, we do this by creating a new GameObject, we can rename it \"ScreenManager\" for instance, and add the component above to it. You can assign an initial screen to it, this screen will be open at the start of your scene. Now for the final part, let's make the UI buttons work. Select the button that should trigger the screen transition and add a new action under the On Click () list in the Inspector. Drag the ScreenManager GameObject we just created to the ObjectField, on the dropdown select ScreenManager->OpenPanel (Animator) and drag and drop the panel you want to open when the user clicks the button to the las ObjectField. Notes This technique only requires each screen to have an AnimatorController with an Open parameter and a Closed state to work - it doesn't matter how your screen or State Machine are constructed. This technique also works well with nested screens, meaning you only need one ScreenManager for each nested level. The State Machine we set up above has the default state of Closed, so all of the screens that use this controller start as closed. The ScreenManager provides an initiallyOpen property so you can specify which screen is shown first."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIWorldSpace.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIWorldSpace.html",
    "title": "Creating a World Space UI | ModularUIPack",
    "summary": "Creating a World Space UI The UI system makes it easy to create UI that is positioned in the world among other 2D or 3D objects in the Scene. Start by creating a UI element (such as an Image) if you don't already have one in your scene by using GameObject > UI > Image. This will also create a Canvas for you. Set the Canvas to World Space Select your Canvas and change the Render Mode to World Space. Now your Canvas is already positioned in the World and can be seen by all cameras if they are pointed at it, but it is probably huge compared to other objects in your Scene. We'll get back to that. Decide on a resolution First you need to decide what the resolution of the Canvas should be. If it was an image, what should the pixel resolution of the image be? Something like 800x600 might be a good starting point. You enter the resolution in the Width and Height values of the Rect Transform of the Canvas. It's probably a good idea to set the position to 0,0 at the same time. Specify the size of the Canvas in the world Now you should consider how big the Canvas should be in the world. You can use the Scale tool to simply scale it down until it has a size that looks good, or you can decide how big it should be in meters. If you want it to have a specific width in meters, you can can calculate the needed scale by using meter_size / canvas_width. For example, if you want it to be 2 meters wide and the Canvas width is 800, you would have 2 / 800 = 0.0025. You then set the Scale property of the Rect Transform on the Canvas to 0.0025 for both X, Y, and Z in order to ensure that it's uniformly scaled. Another way to think of it is that you are controlling the size of one pixel in the Canvas. If the Canvas is scaled by 0.0025, then that is also the size in the world of each pixel in the Canvas. Position the Canvas Unlike a Canvas set to Screen Space, a World Space Canvas can be freely positioned and rotated in the Scene. You can put a Canvas on any wall, floor, ceiling, or slanted surface (or hanging freely in the air of course). Just use the normal Translate and Rotate tools in the toolbar. Create the UI Now you can begin setting up your UI elements and layouts the same way you would with a Screen Space Canvas."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/InputModules.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/InputModules.html",
    "title": "Input Modules | ModularUIPack",
    "summary": "Input Modules An Input Module is where the main logic of an event system can be configured and customized. Out of the box there are two provided Input Modules, one designed for Standalone, and one designed for Touch input. Each module receives and dispatches events as you would expect on the given configuration. Input modules are where the 'business logic' of the Event System take place. When the Event System is enabled it looks at what Input Modules are attached and passes update handling to the specific module. Input modules are designed to be extended or modified based on the input systems that you wish to support. Their purpose is to map hardware specific input (such as touch, joystick, mouse, motion controller) into events that are sent via the messaging system. The built in Input Modules are designed to support common game configurations such as touch input, controller input, keyboard input, and mouse input. They send a variety of events to controls in the application, if you implement the specific interfaces on your MonoBehaviours. All of the UI components implement the interfaces that make sense for the given component."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/MessagingSystem.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/MessagingSystem.html",
    "title": "Messaging System | ModularUIPack",
    "summary": "Messaging System The new UI system uses a messaging system designed to replace SendMessage. The system is pure C# and aims to address some of the issues present with SendMessage. The system works using custom interfaces that can be implemented on a MonoBehaviour to indicate that the component is capable of receiving a callback from the messaging system. When the call is made a target GameObject is specified; the call will be issued on all components of the GameObject that implement the specified interface that the call is to be issued against. The messaging system allows for custom user data to be passed, as well as how far through the GameObject hierarchy the event should propagate; that is should it just execute for the specified GameObject, or should it also execute on children and parents. In addition to this the messaging framework provides helper functions to search for and find GameObjects that implement a given messaging interface. The messaging system is generic and designed for use not just by the UI system but also by general game code. It is relatively trivial to add custom messaging events and they will work using the same framework that the UI system uses for all event handling. Defining A Custom Message If you wish to define a custom message it is relatively simple. In the UnityEngine.EventSystems namespace there is a base interface called 'IEventSystemHandler'. Anything that extends from this can be considered as a target for receiving events via the messaging system. public interface ICustomMessageTarget : IEventSystemHandler { // functions that can be called via the messaging system void Message1(); void Message2(); } Once this interface is defined then it can be implemented by a MonoBehaviour. When implemented it defines the functions that will be executed if the given message is issued against this MonoBehaviours GameObject. public class CustomMessageTarget : MonoBehaviour, ICustomMessageTarget { public void Message1() { Debug.Log (\"Message 1 received\"); } public void Message2() { Debug.Log (\"Message 2 received\"); } } Now that a script exists that can receive the message we need to issue the message. Normally this would be in response to some loosely coupled event that occurs. For example, in the UI system we issue events for such things as PointerEnter and PointerExit, as well as a variety of other things that can happen in response to user input into the application. To send a message a static helper class exists to do this. As arguments it requires a target object for the message, some user specific data, and a functor that maps to the specific function in the message interface you wish to target. ExecuteEvents.Execute<ICustomMessageTarget>(target, null, (x,y)=>x.Message1()); This code will execute the function Message1 on any components on the GameObject target that implement the ICustomMessageTarget interface. The scripting documentation for the ExecuteEvents class covers other forms of the Execute functions, such as Executing in children or in parents."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/Raycasters.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/Raycasters.html",
    "title": "Raycasters | ModularUIPack",
    "summary": "Raycasters The Event System needs a method for detecting where current input events need to be sent to, and this is provided by the Raycasters. Given a screen space position they will collect all potential targets, figure out if they are under the given position, and then return the object that is closest to the screen. There are a few types of Raycasters that are provided: Graphic Raycaster - Used for UI elements, lives on a Canvas and searches within the canvas Physics 2D Raycaster - Used for 2D physics elements Physics Raycaster - Used for 3D physics elements When a Raycaster is present and enabled in the scene it will be used by the Event System whenever a query is issued from an Input Module. If multiple Raycasters are used then they will all have casting happen against them and the results will be sorted based on distance to the elements."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/StyledText.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/StyledText.html",
    "title": "Rich Text | ModularUIPack",
    "summary": "Rich Text The text for UI elements and text meshes can incorporate multiple font styles and sizes. Rich text is supported both for the UI System and the legacy GUI system. The Text, GUIStyle, GUIText and TextMesh classes have a Rich Text setting which instructs Unity to look for markup tags within the text. The Debug.Log function can also use these markup tags to enhance error reports from code. The tags are not displayed but indicate style changes to be applied to the text. Markup format The markup system is inspired by HTML but isn't intended to be strictly compatible with standard HTML. The basic idea is that a section of text can be enclosed inside a pair of matching tags:- We are <b>not</b> amused. As the example shows, the tags are just pieces of text inside the \"angle bracket\" characters, < and >. You place the opening tag at the beginning of the section. The text inside the tag denotes its name (which in this case is just b). You place another tag at the end of the section. This is the closing tag. It has the same name as the opening tag, but the name is prefixed with a slash / character. Every opening tag must have a corresponding closing tag. If you don't close an opening tag, it is rendered as regular text. The tags are not displayed to the user directly but are interpreted as instructions for styling the text they enclose. The b tag used in the example above applies boldface to the word \"not\", so the text appears ons creen as:- We are not amused A marked up section of text (including the tags that enclose it) is referred to as an element. Nested elements It is possible to apply more than one style to a section of text by \"nesting\" one element inside another We are <b><i>definitely not</i></b> amused The <i> tag applies italic style, so this would be presented onscreen as We are definitely not amused Note the ordering of the closing tags, which is in reverse to that of the opening tags. The reason for this is perhaps clearer when you consider that the inner tags need not span the whole text of the outermost element We are <b>absolutely <i>definitely</i> not</b> amused which gives We are absolutely definitely not amused Tag parameters Some tags have a simple all-or-nothing effect on the text but others might allow for variations. For example, the color tag needs to know which color to apply. Information like this is added to tags by the use of parameters:- We are <color=green>green</color> with envy Which produces this result: Note that the ending tag doesn't include the parameter value. Optionally, the value can be surrounded by quotation marks but this isn't required. Tag parameters cannot include blank spaces. For example: We are <color = green>green</color> with envy does not work because of the spaces to either side of the = character. Supported tags The following list describes all the styling tags supported by Unity. Tag Description Example Notes b Renders the text in boldface. We are <b>not</b> amused. i Renders the text in italics. We are <i>usually</i> not amused. size Sets the size of the text according to the parameter value, given in pixels. We are <size=50>largely</size> unaffected. Although this tag is available for Debug.Log, you will find that the line spacing in the window bar and Console looks strange if the size is set too large. color Sets the color of the text according to the parameter value. The color can be specified in the traditional HTML format. #rrggbbaa ...where the letters correspond to pairs of hexadecimal digits denoting the red, green, blue and alpha (transparency) values for the color. For example, cyan at full opacity would be specified by color=#00ffffff... You can specify hexadecimal values in uppercase or lowercase; #FF0000 is equivalent to #ff0000. We are <color=#ff0000ff>colorfully</color> amused Another option is to use the name of the color. This is easier to understand but naturally, the range of colors is limited and full opacity is always assumed. <color=cyan>some text</color> The available color names are given in the table below. material This is only useful for text meshes and renders a section of text with a material specified by the parameter. The value is an index into the text mesh's array of materials as shown by the inspector. We are <material=2>texturally</material> amused quad This is only useful for text meshes and renders an image inline with the text. It takes parameters that specify the material to use for the image, the image height in pixels, and a further four that denote a rectangular area of the image to display. Unlike the other tags, quad does not surround a piece of text and so there is no ending tag - the slash character is placed at the end of the initial tag to indicate that it is \"self-closing\". <quad material=1 size=20 x=0.1 y=0.1 width=0.5 height=0.5> This selects the material at position in the renderer's material array and sets the height of the image to 20 pixels. The rectangular area of image starts at given by the x, y, width and height values, which are all given as a fraction of the unscaled width and height of the texture. Supported colors The following table lists colors for which you can use a name instead of a hexadecimal tag in the <color> rich text tag. Color name Hex value Swatch aqua (same as cyan) #00ffffff black #000000ff blue #0000ffff brown #a52a2aff cyan (same as aqua) #00ffffff darkblue #0000a0ff fuchsia (same as magenta) #ff00ffff green #008000ff grey #808080ff lightblue #add8e6ff lime #00ff00ff magenta (same as fuchsia) #ff00ffff maroon #800000ff navy #000080ff olive #808000ff orange #ffa500ff purple #800080ff red #ff0000ff silver #c0c0c0ff teal #008080ff white #ffffffff yellow #ffff00ff Editor GUI Rich text is disabled by default in the editor GUI system but it can be enabled explicitly using a custom GUIStyle. The richText property should be set to true and the style passed to the GUI function in question: GUIStyle style = new GUIStyle (); style.richText = true; GUILayout.Label(\"<size=30>Some <color=yellow>RICH</color> text</size>\",style);"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/SupportedEvents.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/SupportedEvents.html",
    "title": "Supported Events | ModularUIPack",
    "summary": "Supported Events The Event System supports a number of events, and they can be customized further in user custom user written Input Modules. The events that are supported by the Standalone Input Module and Touch Input Module are provided by interface and can be implemented on a MonoBehaviour by implementing the interface. If you have a valid Event System configured the events will be called at the correct time. IPointerEnterHandler - OnPointerEnter - Called when a pointer enters the object IPointerExitHandler - OnPointerExit - Called when a pointer exits the object IPointerDownHandler - OnPointerDown - Called when a pointer is pressed on the object IPointerUpHandler- OnPointerUp - Called when a pointer is released (called on the GameObject that the pointer is clicking) IPointerClickHandler - OnPointerClick - Called when a pointer is pressed and released on the same object IInitializePotentialDragHandler - OnInitializePotentialDrag - Called when a drag target is found, can be used to initialize values IBeginDragHandler - OnBeginDrag - Called on the drag object when dragging is about to begin IDragHandler - OnDrag - Called on the drag object when a drag is happening IEndDragHandler - OnEndDrag - Called on the drag object when a drag finishes IDropHandler - OnDrop - Called on the object where a drag finishes IScrollHandler - OnScroll - Called when a mouse wheel scrolls IUpdateSelectedHandler - OnUpdateSelected - Called on the selected object each tick ISelectHandler - OnSelect - Called when the object becomes the selected object IDeselectHandler - OnDeselect - Called on the selected object becomes deselected IMoveHandler - OnMove - Called when a move event occurs (left, right, up, down) ISubmitHandler - OnSubmit - Called when the submit button is pressed ICancelHandler - OnCancel - Called when the cancel button is pressed"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "Unity UI: Unity User Interface Canvas Basic Layout Visual Components Interaction Components Animation Integration Auto Layout Rich Text Events MessagingSystem InputModules SupportedEvents Raycasters Reference Rect Transform Canvas Components Canvas Canvas Scaler Canvas Group Canvas Renderer Visual UIInteractionComponents Text Image Raw Image Mask RectMask2D UI Effect Components Shadow Outline Position as UV1 Interaction Components Selectable Base Class Transition Options Navigation Options Button Toggle Toggle Group Slider Scrollbar Dropdown Input Field Scroll Rect Auto Layout Layout Element Content Size Fitter Aspect Ratio Fitter Horizontal Layout Group Vertical Layout Group Grid Layout Group Events script-EventSystem script-GraphicRaycaster script-PhysicsRaycaster script-Physics2DRaycaster script-StandaloneInputModule script-TouchInputModule script-EventTrigger UI How Tos Designing UI for Multiple Resolutions Making UI elements fit the size of their content Creating a World Space UI Creating UI elements from scripting Creating Screen Transitions"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAnimationIntegration.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAnimationIntegration.html",
    "title": "Animation Integration | ModularUIPack",
    "summary": "Animation Integration Animation allows for each transition between control states to be fully animated using Unity's animation system. This is the most powerful of the transition modes due to the number of properties that can be animated simultaneously. To use the Animation transition mode, an Animator Component needs to be attached to the controller element. This can be done automatically by clicking \"Auto Generate Animation\". This also generates an Animator Controller with states already set up, which will need to be saved. The new Animator controller is ready to use straight away. Unlike most Animator Controllers, this controller also stores the animations for the controller's transitions and these can be customised, if desired. For example, if a Button element with an Animator controller attached is selected, the animations for each of the button's states can be edited by opening the Animation window (Window>Animation). There is an Animation Clip pop-up menu to select the desired clip. Choose from \"Normal\", \"Highlighted\", \"Pressed\" and \"Disabled\". The Normal State is set by the values on button element itself and can be left empty. On all other states, the most common configuration is a single keyframe at the start of the timeline. The transition animation between states will be handled by the Animator. As an example, the width of the button in the Highlighted State could be changed by selecting the Highlighted state from the Animation Clip pop up menu and with the playhead at the start of the time line: Select the record Button Change the width of the Button in the inspector Exit the record mode. Change to play mode to see how the button grows when highlighted. Any number of properties can have their parameters set in this one keyframe. Several buttons can share the same behaviour by sharing Animator Controllers. The UI Animation transition mode is not compatible with Unity's legacy animation system. You should only use the Animator Component."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAutoLayout.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAutoLayout.html",
    "title": "Auto Layout | ModularUIPack",
    "summary": "Auto Layout The Rect Transform layout system is flexible enough to handle a lot of different types of layouts and it also allows placing elements in a complete freeform fashion. However, sometimes something a bit more structured can be needed. The auto layout system provides ways to place elements in nested layout groups such as horizontal groups, vertical groups, or grids. It also allows elements to automatically be sized according to the contained content. For example a button can be dynamically resized to exactly fit its text content plus some padding. The auto layout system is a system built on top of the basic Rect Transform layout system. It can optionally be used on some or all elements. Understanding Layout Elements The auto layout system is based on a concept of layout elements and layout controllers. A layout element is an Game Object with a Rect Transform and optionally other components as well. The layout element has certain knowledge about which size it should have. Layout elements don't directly set their own size, but other components that function as layout controllers can use the information they provide in order to calculate a size to use for them. A layout element has properties that defines its own: Minimum width Minimum height Preferred width Preferred height Flexible width Flexible height Examples of layout controller components that use the information provided by layout elements are Content Size Fitter and the various Layout Group components. The basic principles for how layout elements in a layout group are sized is as follows: First minimum sizes are allocated. If there is sufficient available space, preferred sizes are allocated. If there is additional available space, flexible size is allocated. Any Game Object with a Rect Transform on it can function as a layout element. They will by default have minimum, preferred, and flexible sizes of 0. Certain components will change these layout properties when added to the Game Object. The Image and Text components are two examples of components that provide layout element properties. They change the preferred width and height to match the sprite or text content. Layout Element Component If you want to override the minimum, preferred, or flexible size, you can do that by adding a Layout Element component to the Game Object. The Layout Element component lets you override the values for one or more of the layout properties. Enable the checkbox for a property you want to override and then specify the value you want to override with. See the reference page for Layout Element for more information. Understanding Layout Controllers Layout controllers are components that control the sizes and possibly positions of one or more layout elements, meaning Game Objects with Rect Transforms on. A layout controller may control its own layout element (the same Game Object it is on itself) or it may control child layout elements. A component that functions as a layout controller may also itself function as a layout element at the same time. Content Size Fitter The Content Size Fitter functions as a layout controller that controls the size of its own layout element. The simplest way to see the auto layout system in action is to add a Content Size Fitter component to a Game Object with a Text component. If you set either the Horizontal Fit or Vertical Fit to Preferred, the Rect Transform will adjust its width and/or height to fit the Text content. See the reference page for Content Size Fitter for more information. Aspect Ratio Fitter The Aspect Ratio Fitter functions as a layout controller that controls the size of its own layout element. It can adjust the height to fit the width or vice versa, or it can make the element fit inside its parent or envelope its parent. The Aspect Ratio Fitter does not take layout information into account such as minimum size and preferred size. See the reference page for Aspect Ratio Fitter for more information. Layout Groups A layout group functions as a layout controller that controls the sizes and positions of its child layout elements. For example, a Horizontal Layout Group places its children next to each other, and a Grid Layout Group places its children in a grid. A layout group doesn't control its own size. Instead it functions as a layout element itself which may be controlled by other layout controllers or be set manually. Whatever size a layout group is allocated, it will in most cases try to allocate an appropriate amount of space for each of its child layout elements based on the minimum, preferred, and flexible sizes they reported. Layout groups can also be nested arbitrarily this way. See the reference pages for Horizontal Layout Group, Vertical Layout Group and Grid Layout Group for more information. Driven Rect Transform properties Since a layout controller in the auto layout system can automatically control the sizes and placement of certain UI elements, those sizes and positions should not be manually edited at the same time through the Inspector or Scene View. Such changed values would just get reset by the layout controller on the next layout calculation anyway. The Rect Transform has a concept of driven properties to address this. For example, a Content Size Fitter which has the Horizontal Fit property set to Minimum or Preferred will drive the width of the Rect Transform on the same Game Object. The width will appear as read-only and a small info box at the top of the Rect Transform will inform that one or more properties are driven by Conten Size Fitter. The driven Rect Transforms properties have other reasons beside preventing manual editing. A layout can be changed just by changing the resolution or size of the Game View. This in turn can change the size or placement of layout elements, which changes the values of driven properties. But it wouldn't be desirable that the Scene is marked as having unsaved changes just because the Game View was resized. To prevent this, the values of driven properties are not saved as part of the Scene and changes to them do not mark the scene as changed. Technical Details The auto layout system comes with certain components built-in, but it is also possible to create new components that controls layouts in custom ways. This is done by having a component implement specific interfaces which are recognized by the auto layout system. Layout Interfaces A component is treated as a layout element by the auto layout system if it implements the interface ILayoutElement. A component is expected to drive the Rect Transforms of its children if it implements the interface ILayoutGroup. A component is expected to drive its own RectTransform if it implements the interface ILayoutSelfController. Layout Calculations The auto layout system evaluates and executes layouts in the following order: The minimum, preferred, and flexible widths of layout elements are calculated by calling CalculateLayoutInputHorizontal on ILayoutElement components. This is performed in bottom-up order, where children are calculated before their parents, such that the parents may take the information in their children into account in their own calculations. The effective widths of layout elements are calculated and set by calling SetLayoutHorizontal on ILayoutController components. This is performed in top-down order, where children are calculated after their parents, since allocation of child widths needs to be based on the full width available in the parent. After this step the Rect Transforms of the layout elements have their new widths. The minimum, preferred, and flexible heights of layout elements are calculated by calling CalculateLayoutInputVertical on ILayoutElement components. This is performed in bottom-up order, where children are calculated before their parents, such that the parents may take the information in their children into account in their own calculations. The effective heights of layout elements are calculated and set by calling SetLayoutVertical on ILayoutController components. This is performed in top-down order, where children are calculated after their parents, since allocation of child heights needs to be based on the full height available in the parent. After this step the Rect Transforms of the layout elements have their new heights. As can be seen from the above, the auto layout system evaluates widths first and then evaluates heights afterwards. Thus, calculated heights may depend on widths, but calculated widths can never depend on heights. Triggering Layout Rebuild When a property on a component changes which can cause the current layout to no longer be valid, a layout recalculation is needed. This can be triggered using the call: LayoutRebuilder.MarkLayoutForRebuild (transform as RectTransform); The rebuild will not happen immediately, but at the end of the current frame, just before rendering happens. The reason it is not immediate is that this would cause layouts to be potentially rebuild many times during the same frame, which would be bad for performance. Guidelines for when a rebuild should be triggered: In setters for properties that can change the layout. In these callbacks: OnEnable OnDisable OnRectTransformDimensionsChange OnValidate (only needed in the editor, not at runtime) OnDidApplyAnimationProperties"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIBasicLayout.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIBasicLayout.html",
    "title": "Basic Layout | ModularUIPack",
    "summary": "Basic Layout In this section we'll look at how you can position UI elements relative to the Canvas and each other. If you want to test yourself while reading, you can create an Image using the menu GameObject -> UI -> Image. The Rect Tool Every UI element is represented as a rectangle for layout purposes. This rectangle can be manipulated in the Scene View using the Rect Tool in the toolbar. The Rect Tool is used both for Unity's 2D features and for UI, and in fact can be used even for 3D objects as well. The Rect Tool can be used to move, resize and rotate UI elements. Once you have selected a UI element, you can move it by clicking anywhere inside the rectangle and dragging. You can resize it by clicking on the edges or corners and dragging. The element can be rotated by hovering the cursor slightly away from the corners until the mouse cursor looks like a rotation symbol. You can then click and drag in either direction to rotate. Just like the other tools, the Rect Tool uses the current pivot mode and space, set in the toolbar. When working with UI it's usually a good idea to keep those set to Pivot and Local. Rect Transform The Rect Transform is a new transform component that is used for all UI elements instead of the regular Transform component. Rect Transforms have position, rotation, and scale just like regular Transforms, but it also has a width and height, used to specify the dimensions of the rectangle. Resizing Versus Scaling When the Rect Tool is used to change the size of an object, normally for Sprites in the 2D system and for 3D objects it will change the local scale of the object. However, when it's used on an object with a Rect Transform on it, it will instead change the width and the height, keeping the local scale unchanged. This resizing will not affect font sizes, border on sliced images, and so on. Pivot Rotations, size, and scale modifications occur around the pivot so the position of the pivot affects the outcome of a rotation, resizing, or scaling. When the toolbar Pivot button is set to Pivot mode, the pivot of a Rect Transform can be moved in the Scene View. Anchors Rect Transforms include a layout concept called anchors. Anchors are shown as four small triangular handles in the Scene View and anchor information is also shown in the Inspector. If the parent of a Rect Transform is also a Rect Transform, the child Rect Transform can be anchored to the parent Rect Transform in various ways. For example, the child can be anchored to the center of the parent, or to one of the corners. The anchoring also allows the child to stretch together with the width or height of the parent. Each corner of the rectangle has a fixed offset to its corresponding anchor, i.e. the top left corner of the rectangle has a fixed offset to the top left anchor, etc. This way the different corners of the rectangle can be anchored to different points in the parent rectangle. The positions of the anchors are defined in fractions (or percentages) of the parent rectangle width and height. 0.0 (0%) corresponds to the left or bottom side, 0.5 (50%) to the middle, and 1.0 (100%) to the right or top side. But anchors are not limited to the sides and middle; they can be anchored to any point within the parent rectangle. You can drag each of the anchors individually, or if they are together, you can drag them together by clicking in the middle in between them and dragging. If you hold down Shift key while dragging an anchor, the corresponding corner of the rectangle will move together with the anchor. A useful feature of the anchor handles is that they automatically snap to the anchors of sibling rectangles to allow for precise positioning. Anchor presets In the Inspector, the Anchor Preset button can be found in the upper left corner of the Rect Transform component. Clicking the button brings up the Anchor Presets dropdown. From here you can quickly select from some of the most common anchoring options. You can anchor the UI element to the sides or middle of the parent, or stretch together with the parent size. The horizontal and vertical anchoring is independent. The Anchor Presets buttons displays the currently selected preset option if there is one. If the anchors on either the horizontal or vertical axis are set to different positions than any of the presets, the custom options is shown. Anchor and position fields in the Inspector You can click the Anchors expansion arrow to reveal the anchor number fields if they are not already visible. Anchor Min corresponds to the lower left anchor handle in the Scene View, and Anchor Max corresponds to the upper right handle. The position fields of rectangle are shown differently depending on whether the anchors are together (which produces a fixed width and height) or separated (which causes the rectangle to stretch together with the parent rectangle). When all the anchor handles are together the fields displayed are Pos X, Pos Y, Width and Height. The Pos X and Pos Y values indicate the position of the pivot relative to the anchors. When the anchors are separated the fields can change partially or completely to Left, Right, Top and Bottom. These fields define the padding inside the rectangle defined by the anchors. The Left and Right fields are used if the anchors are separated horizontally and the Top and Bottom fields are used if they are separated vertically. Note that changing the values in the anchor or pivot fields will normally counter-adjust the positioning values in order to make the rectangle stay in place. In cases where this is not desired, enable Raw edit mode by clicking the R button in the Inspector. This causes the anchor and pivot value to be able to be changed without any other values changing as a result. This will likely cause the rectangle to be visually moved or resized, since its position and size is dependent on the anchor and pivot values."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UICanvas.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UICanvas.html",
    "title": "Canvas | ModularUIPack",
    "summary": "Canvas The Canvas is the area that all UI elements should be inside. The Canvas is a Game Object with a Canvas component on it, and all UI elements must be children of such a Canvas. Creating a new UI element, such as an Image using the menu GameObject > UI > Image, automatically creates a Canvas, if there isn't already a Canvas in the scene. The UI element is created as a child to this Canvas. The Canvas area is shown as a rectangle in the Scene View. This makes it easy to position UI elements without needing to have the Game View visible at all times. Canvas uses the EventSystem object to help the Messaging System. Draw order of elements UI elements in the Canvas are drawn in the same order they appear in the Hierarchy. The first child is drawn first, the second child next, and so on. If two UI elements overlap, the later one will appear on top of the earlier one. To change which element appear on top of other elements, simply reorder the elements in the Hierarchy by dragging them. The order can also be controlled from scripting by using these methods on the Transform component: SetAsFirstSibling, SetAsLastSibling, and SetSiblingIndex. Render Modes The Canvas has a Render Mode setting which can be used to make it render in screen space or world space. Screen Space - Overlay This render mode places UI elements on the screen rendered on top of the scene. If the screen is resized or changes resolution, the Canvas will automatically change size to match this. Screen Space - Camera This is similar to Screen Space - Overlay, but in this render mode the Canvas is placed a given distance in front of a specified Camera. The UI elements are rendered by this camera, which means that the Camera settings affect the appearance of the UI. If the Camera is set to Perspective, the UI elements will be rendered with perspective, and the amount of perspective distortion can be controlled by the Camera Field of View. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well. World Space In this render mode, the Canvas will behave as any other object in the scene. The size of the Canvas can be set manually using its Rect Transform, and UI elements will render in front of or behind other objects in the scene based on 3D placement. This is useful for UIs that are meant to be a part of the world. This is also known as a \"diegetic interface\"."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIHowTos.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIHowTos.html",
    "title": "UI How Tos | ModularUIPack",
    "summary": "UI How Tos In this section you can learn about solutions to common UI tasks."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIInteractionComponents.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIInteractionComponents.html",
    "title": "Interaction Components | ModularUIPack",
    "summary": "Interaction Components This section covers components in the UI system that handles interaction, such as mouse or touch events and interaction using a keyboard or controller. The interaction components are not visible on their own, and must be combined with one or more visual components in order to work correctly. Common Functionality Most of the interaction components have some things in common. They are selectables, which means they have shared built-in functionality for visualising transitions between states (normal, highlighted, pressed, disabled), and for navigation to other selectables using keyboard or controller. This shared functionality is described on the Selectable page. The interaction components have at least one UnityEvent that is invoked when user interacts with the component in specific way. The UI system catches and logs any exceptions that propagate out of code attached to UnityEvent. Button A Button has an OnClick UnityEvent to define what it will do when clicked. See the Button page for details on using the Button component. Toggle A Toggle has an Is On checkbox that determines whether the Toggle is currently on or off. This value is flipped when the user clicks the Toggle, and a visual checkmark can be turned on or off accordingly. It also has an OnValueChanged UnityEvent to define what it will do when the value is changed. See the Toggle page for details on using the Toggle component. Toggle Group A Toggle Group can be used to group a set of Toggles that are mutually exclusive. Toggles that belong to the same group are constrained so that only one of them can be selected at a time - selecting one of them automatically deselects all the others. See the Toggle Group page for details on using the Toggle Group component. Slider A Slider has a decimal number Value that the user can drag between a minimum and maximum value. It can be either horizontal or vertical. It also has a OnValueChanged UnityEvent to define what it will do when the value is changed. See the Slider page for details on using the Slider component. Scrollbar A Scrollbar has a decimal number Value between 0 and 1. When the user drags the scrollbar, the value changes accordingly. Scrollbars are often used together with a Scroll Rect and a Mask to create a scroll view. The Scrollbar has a Size value between 0 and 1 that determines how big the handle is as a fraction of the entire scrollbar length. This is often controlled from another component to indicate how big a proportion of the content in a scroll view is visible. The Scroll Rect component can automatically do this. The Scrollbar can be either horizontal or vertical. It also has a OnValueChanged UnityEvent to define what it will do when the value is changed. See the Scrollbar page for details on using the Scrollbar component. Dropdown A Dropdown has a list of options to choose from. A text string and optionally an image can be specified for each option, and can be set either in the Inspector or dynamically from code. It has a OnValueChanged UnityEvent to define what it will do when the currently chosen option is changed. See the Dropdown page for details on using the Dropdown component. Input Field An Input Field is used to make the text of a Text Element editable by the user. It has a UnityEvent to define what it will do when the text content is changed, and an another to define what it will do when the user has finished editing it. See the Input Field page for details on using the Input Field component. Scroll Rect (Scroll View) A Scroll Rect can be used when content that takes up a lot of space needs to be displayed in a small area. The Scroll Rect provides functionality to scroll over this content. Usually a Scroll Rect is combined with a Mask in order to create a scroll view, where only the scrollable content inside the Scroll Rect is visible. It can also additionally be combined with one or two Scrollbars that can be dragged to scroll horizontally or vertically. See the Scroll Rect page for details on using the Scroll Rect component."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIReference.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIReference.html",
    "title": "UI Reference | ModularUIPack",
    "summary": "UI Reference This section goes into more depth about Unity’s UI features."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIVisualComponents.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIVisualComponents.html",
    "title": "Visual Components | ModularUIPack",
    "summary": "Visual Components With the introduction of the UI system, new Components have been added that will help you create GUI specific functionality. This section will cover the basics of the new Components that can be created. Text The Text component, which is also known as a Label, has a Text area for entering the text that will be displayed. It is possible to set the font, font style, font size and whether or not the text has rich text capability. There are options to set the alignment of the text, settings for horizontal and vertical overflow which control what happens if the text is larger than the width or height of the rectangle, and a Best Fit option that makes the text resize to fit the available space. Image An Image has a Rect Transform component and an Image component. A sprite can be applied to the Image component under the Target Graphic field, and its colour can be set in the Color field. A material can also be applied to the Image component. The Image Type field defines how the applied sprite will appear, the options are: Simple - Scales the whole sprite equally. Sliced - Utilises the 3x3 sprite division so that resizing does not distort corners and only the center part is stretched. Tiled - Similar to Sliced, but tiles (repeats) the center part rather than stretching it. For sprites with no borders at all, the entire sprite is tiled. Filled - Shows the sprite in the same way as Simple does except that it fills in the sprite from an origin in a defined direction, method and amount. The option to Set Native Size, which is shown when Simple or Filled is selected, resets the image to the original sprite size. Images can be imported as UI sprites by selecting Sprite( 2D / UI) from the 'Texture Type' settings. Sprites have extra import settings compared to the old GUI sprites, the biggest difference is the addition of the sprite editor. The sprite editor provides the option of 9-slicing the image, this splits the image into 9 areas so that if the sprite is resized the corners are not stretched or distorted. Raw Image The Image component takes a sprite but Raw Image takes a texture (no borders etc). Raw Image should only be used if necessary otherwise Image will be suitable in the majority of cases. Mask A Mask is not a visible UI control but rather a way to modify the appearance of a control’s child elements. The mask restricts (ie, “masks”) the child elements to the shape of the parent. So, if the child is larger than the parent then only the part of the child that fits within the parent will be visible. Effects Visual components can also have various simple effects applied, such as a simple drop shadow or outline. See the UI Effects reference page for more information."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-Canvas.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-Canvas.html",
    "title": "Canvas | ModularUIPack",
    "summary": "Canvas The Canvas component represents the abstract space in which the UI is laid out and rendered. All UI elements must be children of a GameObject that has a Canvas component attached. When you create a UI element object from the menu (GameObject > Create UI), a Canvas object will be created automatically if there isn't one in the scene already. Properties Property: Function: Render Mode The way the UI is rendered to the screen or as an object in 3D space (see below). The options are Screen Space - Overlay, Screen Space - Camera and World Space. Pixel Perfect (Screen Space modes only) Should the UI be rendered without antialiasing for precision? Render Camera (Screen Space - Camera mode only) The camera to which the UI should be rendered (see below). Plane Distance (Screen Space - Camera mode only) The distance at which the UI plane should be placed in front of the camera. Event Camera (World Space mode only) The camera that will be used to process UI events. Receives Events Are UI events processed by this Canvas? Details A single Canvas for all UI elements is sufficient but multiple Canvases in the scene is possible. It is also possible use nested Canvases, where one Canvas is placed as a child of another for optimization purposes. A nested Canvas uses the same Render Mode as its parent. Traditionally, UIs are rendered as if they were simple graphic designs drawn directly on the screen. That is to say, they have no concept of a 3D space being viewed by a camera. Unity supports this kind of screen space rendering but also allows UIs to rendered as objects in the scene, depending on the value of the Render Mode property. The modes available are Screen Space - Overlay, Screen Space - Camera and World Space. Screen Space - Overlay In this mode, the Canvas is scaled to fit the screen and then rendered directly without reference to the scene or a camera (the UI will be rendered even if there is no camera in the scene at all). If the screen's size or resolution are changed then the UI will automatically rescale to fit. The UI will be drawn over any other graphics such as the camera view. Note: The Screen Space - Overlay canvas needs to be stored at the top level of the hierarchy. If this is not used then the UI may disappear from the view. This is a built-in limitation. Keep the Screen Space - Overlay canvas at the top level of the hierarchy to get expected results. Screen Space - Camera In this mode, the Canvas is rendered as if it were drawn on a plane object some distance in front of a given camera. The onscreen size of the UI does not vary with the distance since it is always rescaled to fit exactly within the camera frustum. If the screen's size or resolution or the camera frustum are changed then the UI will automatically rescale to fit. Any 3D objects in the scene that are closer to the camera than the UI plane will be rendered in front of the UI, while objects behind the plane will be obscured. World Space This mode renders the UI as if it were a plane object in the scene. Unlike Screen Space - Camera mode, however, the plane need not face the camera and can be oriented however you like. The size of the Canvas can be set using its Rect Transform but its onscreen size will depend on the viewing angle and distance of the camera. Other scene objects can pass behind, through or in front of the Canvas. Hints Read more about setting up a World Space Canvas on the Creating a World Space UI page. For information about making your Canvas and UI scale to different resolutions or aspect ratios, see the Designing UI for Multiple Resolutions page as well as the Canvas Scaler page."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasGroup.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasGroup.html",
    "title": "Canvas Group | ModularUIPack",
    "summary": "Canvas Group The Canvas Group can be used to control certain aspects of a whole group of UI elements from one place without needing to handle them each individually. The properties of the Canvas Group affect the GameObject it is on as well as all children. Properties Property: Function: Alpha The opacity of the UI elements in this group. The value is between 0 and 1 where 0 is fully transparent and 1 is fully opaque. Note that elements retain their own transparency as well, so the Canvas Group alpha and the alpha values of the individual UI elements are multiplied with each other. Interactable Determines if this component will accept input. When it is set to false interaction is disabled. Block Raycasts Will this component act as a collider for Raycasts? You will need to call the RayCast function on the graphic raycaster attached to the Canvas. This does not apply to Physics.Raycast. Ignore Parent Groups Will this group also be affected by the settings in Canvas Group components further up in the Game Object hierarchy, or will it ignore those and hence override them? Details Typical uses of Canvas Group are: Fading in or out a whole window by adding a Canvas Group on the GameObject of the Window and control its Alpha property. Making a whole set of controls non-interactable (\"grayed out\") by adding a Canvas Group to a parent GameObject and setting its Interactable property to false. Making one or more UI elements not block mouse events by placing a Canvas Group component on the element or one of its parents and setting its Block Raycasts property to false."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasRenderer.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasRenderer.html",
    "title": "Canvas Renderer | ModularUIPack",
    "summary": "Canvas Renderer The Canvas Renderer component renders a graphical UI object contained within a Canvas. Properties The Canvas Renderer has no properties exposed in the inspector. Details The standard UI objects available from the menu (GameObject > Create UI) all have Canvas Renderers attached wherever they are required but you may need to add this component manually for custom UI objects. Although there are no properties exposed in the inspector, a few properties and function can be accessed from scripts - see the CanvasRenderer page in the Script Reference for full details."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-RectTransform.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-RectTransform.html",
    "title": "Rect Transform | ModularUIPack",
    "summary": "Rect Transform The Rect Transform component is the 2D layout counterpart of the Transform component. Where Transform represents a single point, Rect Transform represent a rectangle that a UI element can be placed inside. If the parent of a Rect Transform is also a Rect Transform, the child Rect Transform can also specify how it should be positioned and sized relative to the parent rectangle. Properties Property: Function: Pos (X, Y, Z) Position of the rectangle's pivot point relative to the anchors. The pivot point is the location around which the rectangle rotates. Width/Height Width and height of the rectangle. Left, Top, Right, Bottom Positions of the rectangle's edges relative to their anchors. This can be thought of as padding inside the rectangle defined by the anchors. Shown in place of Pos and Width/Height when the anchors are separated (see below). To access these options click the square Anchor Presets box at the top left of the RectTransform component. Anchors The anchor points for the lower left corner and the upper right corner of the rectangle. Min The anchor point for the lower left corner of the rectangle defined as a fraction of the size of the parent rectangle. 0,0 corresponds to anchoring to the lower left corner of the parent, while 1,1 corresponds to anchoring to the upper right corner of the parent. Max The anchor point for the upper right corner of the rectangle defined as a fraction of the size of the parent rectangle. 0,0 corresponds to anchoring to the lower left corner of the parent, while 1,1 corresponds to anchoring to the upper right corner of the parent. Pivot Location of the pivot point around which the rectangle rotates, defined as a fraction of the size of the rectangle itself. 0,0 corresponds to the lower left corner while 1,1 corresponds to the upper right corner. Rotation Angle of rotation (in degrees) of the object around its pivot point along the X, Y and Z axis. Scale Scale factor applied to the object in the X, Y and Z dimensions. Blueprint Mode Edit RectTransforms as if they were not rotated and scaled. This enabled snapping too. Raw Edit Mode When enabled, editing pivot and anchor values will not counter adjust the position and size of the rectangle in order to make it stay in one place. Details Note that some RectTransform calculations are performed at the end of a frame, just before calculating UI vertices, in order to ensure that they are up to date with all the latest changes performed throughout the frame. This means that they haven't yet been calculated for the first time in the Start callback and first Update callback. You can work around this by creating a Start() callback and adding Canvas.ForceUpdateCanvases() method to it. This will force Canvas to be updated not at the end of the frame, but when that method is called. See the Basic Layout page for a full introduction and overview of how to use the Rect Transform."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-CanvasComponents.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-CanvasComponents.html",
    "title": "Canvas Components | ModularUIPack",
    "summary": "Canvas Components All UI Components are placed within a Canvas. Canvas Canvas Scaler Canvas Group Canvas Renderer"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIAutoLayout.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIAutoLayout.html",
    "title": "Auto Layout | ModularUIPack",
    "summary": "Auto Layout The auto layout system provides ways to place elements in nested layout groups such as horizontal groups, vertical groups, or grids. It also allows elements to automatically be sized according to the contained content. Content Size Fitter Layout Element Horizontal Layout Group Vertical Layout Group Grid Layout Group"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIEffects.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIEffects.html",
    "title": "UI Effect Components | ModularUIPack",
    "summary": "UI Effect Components The effects components allow adding simple effects to Text and Image graphics, such as shadow and outline. Shadow Outline Position as UV1"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIInteraction.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIInteraction.html",
    "title": "Interaction Components | ModularUIPack",
    "summary": "Interaction Components The interaction components in the UI system handle interaction, such as mouse or touch events and interaction using a keyboard or controller. Selectable Base Class Button Toggle Toggle Group Slider Scrollbar Scroll Rect InputField"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIVisual.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIVisual.html",
    "title": "Visual Components | ModularUIPack",
    "summary": "Visual Components The visual components allow for ease of creation and GUI specific functionality. Text Image Raw Image Mask"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/index.html",
    "title": "Unity UI: Unity User Interface | ModularUIPack",
    "summary": "Unity UI: Unity User Interface Unity UI is a UI toolkit for developing user interfaces for games and applications. It is a GameObject-based UI system that uses Components and the Game View to arrange, position, and style user interfaces. ​ You cannot use Unity UI to create or change user interfaces in the Unity Editor. This documentation describes Unity UI features such as creating a Canvas, positioning and animating elements, defining user interactions, and sizing layouts automatically."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-AspectRatioFitter.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-AspectRatioFitter.html",
    "title": "Aspect Ratio Fitter | ModularUIPack",
    "summary": "Aspect Ratio Fitter Properties Property: Function: Aspect Mode How the rectangle is resized to enforce the aspect ratio. None Do not make the rect fit the aspect ratio. Width Controls Height The height is automatically adjusted based on the width. Height Controls Width The width is automatically adjusted based on the height. Fit In Parent The width, height, position, and anchors are automatically adjusted to make the rect fit inside the rect of the parent while keeping the aspect ratio. The may be some space inside the parent rect which is not covered by this rect. Envelope Parent The width, height, position, and anchors are automatically adjusted to make the rect cover the entire area of the parent while keeping the aspect ratio. This rect may extend further out than the parent rect. Aspect Ratio The aspect ratio to enforce. This is the width divided by the height. Description The Aspect Ratio Fitter functions as a layout controller that controls the size of its own layout element. It can adjust the height to fit the width or vice versa, or it can make the element fit inside its parent or envelope its parent. The Aspect Ratio Fitter does not take layout information into account such as minimum size and preferred size. It's worth keeping in mind that when a Rect Transform is resized - whether by an Aspect Ratio Fitter or something else - the resizing is around the pivot. This means that the pivot can be used to control the alignment of the rectangle. For example, a pivot placed at the top center will make the rectangle grow evenly to both sides, and only grow downwards while the top edge remain at its position."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Button.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Button.html",
    "title": "Button | ModularUIPack",
    "summary": "Button The Button control responds to a click from the user and is used to initiate or confirm an action. Familiar examples include the Submit and Cancel buttons used on web forms. Properties Property: Function: Interactable Enable Interactable if you want this button to accept input. See API documentation on Interactable for more details. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Events Property: Function: On Click A UnityEvent that Unity invokes when a user clicks the button and releases it. Details The button is designed to initiate an action when the user clicks and releases it. If the mouse is moved off the button control before the click is released, the action does not take place. The button has a single event called On Click that responds when the user completes a click. Typical use cases include: Confirming a decision (eg, starting gameplay or saving a game) Moving to a sub-menu in a GUI Cancelling an action in progress (eg, downloading a new scene)"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-CanvasScaler.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-CanvasScaler.html",
    "title": "Canvas Scaler | ModularUIPack",
    "summary": "Canvas Scaler The Canvas Scaler component is used for controlling the overall scale and pixel density of UI elements in the Canvas. This scaling affects everything under the Canvas, including font sizes and image borders. Properties Property: Function: UI Scale Mode Determines how UI elements in the Canvas are scaled. Constant Pixel Size Makes UI elements retain the same size in pixels regardless of screen size. Scale With Screen Size Makes UI elements bigger the bigger the screen is. Constant Physical Size Makes UI elements retain the same physical size regardless of screen size and resolution. Settings for Constant Pixel Size: Property: Function: Scale Factor Scales all UI elements in the Canvas by this factor. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI. Settings for Scale With Screen Size: Property: Function: Reference Resolution The resolution the UI layout is designed for. If the screen resolution is larger, the UI will be scaled up, and if it's smaller, the UI will be scaled down. Screen Match Mode A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution. Match Width or Height Scale the canvas area with the width as reference, the height as reference, or something in between. Expand Expand the canvas area either horizontally or vertically, so the size of the canvas will never be smaller than the reference. Shrink Crop the canvas area either horizontally or vertically, so the size of the canvas will never be larger than the reference. Match Determines if the scaling is using the width or height as reference, or a mix in between. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI. Settings for Constant Physical Size: Property: Function: Physical Unit The physical unit to specify positions and sizes in. Fallback Screen DPI The DPI to assume if the screen DPI is not known. Default Sprite DPI The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then its DPI will match the 'Default Sprite DPI' setting. Settings for World Space Canvas (shown when Canvas component is set to World Space): Property: Function: Dynamic Pixels Per Unit The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the world. If the 'Reference Pixels Per Unit' is set to 1, then the 'Pixels Per Unit' setting in the sprite will be used as-is. Details For a Canvas set to 'Screen Space - Overlay' or 'Screen Space - Camera', the Canvas Scaler UI Scale Mode can be set to Constant Pixel Size, Scale With Screen Size, or Constant Physical Size. Constant Pixel Size Using the Constant Pixel Size mode, positions and sizes of UI elements are specified in pixels on the screen. This is also the default functionality of the Canvas when no Canvas Scaler is attached. However, With the Scale Factor setting in the Canvas Scaler, a constant scaling can be applied to all UI elements in the Canvas. Scale With Screen Size Using the Scale With Screen Size mode, positions and sizes can be specified according to the pixels of a specified reference resolution. If the current screen resolution is larger than the reference resolution, the Canvas will keep having only the resolution of the reference resolution, but will scale up in order to fit the screen. If the current screen resolution is smaller than the reference resolution, the Canvas will similarly be scaled down to fit. If the current screen resolution has a different aspect ratio than the reference resolution, scaling each axis individually to fit the screen would result in non-uniform scaling, which is generally undesirable. Instead of this, the ReferenceResolution component will make the Canvas resolution deviate from the reference resolution in order to respect the aspect ratio of the screen. It is possible to control how this deviation should behave using the Screen Match Mode setting. Constant Physical Size Using the Constant Physical Size mode, positions and sizes of UI elements are specified in physical units, such as millimeters, points, or picas. This mode relies on the device reporting its screen DPI correctly. You can specify a fallback DPI to use for devices that do not report a DPI. World Space For a Canvas set to 'World Space' the Canvas Scaler can be used to control the pixel density of UI elements in the Canvas. Hints See the page Designing UI for Multiple Resolutions for a step by step explanation of how Rect Transform anchoring and Canvas Scaler can be used in conjunction to make UI layouts that adapt to different resolutions and aspect ratios."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ContentSizeFitter.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ContentSizeFitter.html",
    "title": "Content Size Fitter | ModularUIPack",
    "summary": "Content Size Fitter Properties Property: Function: Horizontal Fit How the width is controlled. Unconstrained Do not drive the width based on the layout element. Min Size Drive the width based on the minimum width of the layout element. Preferred Size Drive the width based on the preferred width of the layout element. Vertical Fit How the height is controlled. Unconstrained Do not drive the height based on the layout element. Min Size Drive the height based on the minimum height of the layout element. Preferred Size Drive the height based on the preferred height of the layout element. Description The Content Size Fitter functions as a layout controller that controls the size of its own layout element. The size is determined by the minimum or preferred sizes provided by layout element components on the Game Object. Such layout elements can be Image or Text components, layout groups, or a Layout Element component. It's worth keeping in mind that when a Rect Transform is resized - whether by a Content Size Fitter or something else - the resizing is around the pivot. This means that the direction of the resizing can be controlled using the pivot. For example, when the pivot is in the center, the Content Size Fitter will expand the Rect Transform out equally in all directions. And when the pivot is in the upper left corner, the Content Size Fitter will expand the Rect Transform down and to the right."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Dropdown.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Dropdown.html",
    "title": "Dropdown | ModularUIPack",
    "summary": "Dropdown The Dropdown can be used to let the user choose a single option from a list of options. The control shows the currently chosen option. Once clicked, it opens up the list of options so a new option can be chosen. Upon choosing a new option, the list of closed again, and the control shows the new selected option. The list is also closed if the user clicks on the control itself, or anywhere else inside the Canvas. Properties Property: Function: Interactable Will this component will accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Template The Rect Transform of the template for the dropdown list. See instructions below. Caption Text The Text component to hold the text of the currently selected option. (Optional) Caption Image The Image component to hold the image of the currently selected option. (Optional) Item Text The Text component to hold the text of the item. (Optional) Item Image The Image component to hold the image of the item. (Optional) Value The index of the currently selected option. 0 is the first option, 1 is the second, and so on. Options The list of possible options. A text string and an image can be specified for each option. Events Property: Function: On Value Changed A UnityEvent that is invoked when a user has clicked one of the options in the dropdown list. Details The list of options is specified in the Inspector or can be assigned from code. For each option a text string can be specified, and optionally an image as well, if the Dropdown is setup to support it. The button has a single event called On Value Changed that responds when the user completes a click on one of the options in the list. It supports sending an integer number value that is the index of the selected option. 0 is the first option, 1 is the second, and so on. The template system The Dropdown control is designed to have a child GameObject which serves as a template for the dropdown list that is shown when clicking the dropdown control. The template GameObject is inactive by default, but can be made active while editing the template to better see what's going on. A reference to the template object must be specified in the Template property of the Dropdown component. The template must have a single item in it with a Toggle component on. When the actual dropdown list is created upon clicking the dropdown control, this item is duplicated multiple times, with one copy used for each option in the list. The parent of the item is automatically resized so it can fit all the items inside. The template can be setup in many different ways. The setup used by the GameObject > UI > Dropdown menu item includes a scroll view, such that if there are too many options to show at once, a scrollbar will appear and the user can scroll through the options. This is however not a mandatory part of the template setup. (See the ScrollRect page for more information about setup of Scroll Views.) Setup of text and image support The dropdown supports one text content and one image content for each option. Both text and image is optional. They can only be used if the Dropdown is setup to support it. The dropdown supports text for each option when the Caption Text and Item Text properties are both setup. These are setup by default when using the GameObject > UI > Dropdown menu item. The Caption Text is the Text component to hold the text for the currently selected option. It is typically a child to the Dropdown GameObject. The Item Text is the Text component to hold the text for each option. It is typically a child to the Item GameObject. The dropdown supports an image for each option when the Caption Image and Item Image properties are both setup. These are not setup by default. The Caption Image is the Image component to hold the image for the currently selected option. It is typically a child to the Dropdown GameObject. The Item Image is the Image component to hold the image for each option. It is typically a child to the Item GameObject. The actual text and images used for the dropdowns are specified in the Options property of the Dropdown component, or can be set from code. Placement of the dropdown list The placement of the dropdown list in relation to the dropdown control is determined by the anchoring and pivot of the Rect Transform of the Template. By default, the list will appear below the control. This is achieved by anchoring the template to the bottom of the control. The pivot of the template also needs to be at the top, so that as the template is expanded to accommodate a variable number of option items, it only expands downwards. The Dropdown control has simple logic to prevent that the dropdown is displayed outside the bounds of the Canvas, since this would make it impossible to select certain options. If the dropdown at its default position is not fully within the Canvas rectangle, its position in relation to the control is reversed. For example, a list that is shown below the control by default will be shown above it instead. This logic is quite simple and has certain limitations. The dropdown template needs to be no larger than half the Canvas size minus the size of the dropdown control, otherwise there may not be room for the list at either position if the dropdown control is placed in the middle of the Canvas."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventSystem.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventSystem.html",
    "title": "Event System Manager | ModularUIPack",
    "summary": "Event System Manager This subsystem is responsible for controlling all the other elements that make up eventing. It coordinates which Input Module is currently active, which GameObject is currently considered 'selected', and a host of other high level Event System concepts. Each 'Update' the Event System receives the call, looks through its Input Modules and figures out which is the Input Module that should be used for this tick. It then delegates the processing to the modules. Properties Property: Function: First Selected The GameObject that was selected first. Send Navigation Events Should the EventSystem allow navigation events (move / submit / cancel). Drag Threshold The soft area for dragging in pixels. Beneath the Properties table is the \"Add Default Input Modules\" button."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventTrigger.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventTrigger.html",
    "title": "Event Trigger | ModularUIPack",
    "summary": "Event Trigger The Event Trigger receives events from the Event System and calls registered functions for each event. The Event Trigger can be used to specify functions you wish to be called for each Event System event. You can assign multiple functions to a single event and whenever the Event Trigger receives that event it will call those functions. Note that attaching an Event Trigger component to a GameObject will make that object intercept all events, and no event bubbling will occur from this object! Events Each of the Supported Events can optionally be included in the Event Trigger by clicking the Add New Event Type button."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GraphicRaycaster.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GraphicRaycaster.html",
    "title": "Graphic Raycaster | ModularUIPack",
    "summary": "Graphic Raycaster The Graphic Raycaster is used to raycast against a Canvas. The Raycaster looks at all Graphics on the canvas and determines if any of them have been hit. The Graphic Raycaster can be configured to ignore backfacing Graphics as well as be blocked by 2D or 3D objects that exist in front of it. A manual priority can also be applied if you want processing of this element to be forced to the front or back of the Raycasting. Properties Property: Function: Ignore Reversed Graphics Should graphics facing away from the raycaster be considered? Blocked Objects Type of objects that will block graphic raycasts. Blocking Mask Type of objects that will block graphic raycasts."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GridLayoutGroup.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GridLayoutGroup.html",
    "title": "Grid Layout Group | ModularUIPack",
    "summary": "Grid Layout Group The Grid Layout Group component places its child layout elements in a grid. Properties Property: Function: Padding The padding inside the edges of the layout group. Cell Size The size to use for each layout element in the group. Spacing The spacing between the layout elements. Start Corner The corner where the first element is located. Start Axis Which primary axis to place elements along. Horizontal will fill an entire row before a new row is started. Vertical will fill an entire column before a new column is started. Child Alignment The alignment to use for the layout elements if they don't fill out all the available space. Constraint Constraint the grid to a fixed number of rows or columns to aid the auto layout system. Description Unlike other layout groups, the Grid Layout Group ignores the minimum, preferred, and flexible size properties of its contained layout elements and instead assigns a fixed size to all of them which is defined with the Cell Size property of the Grid Layout Group itself. Grid Layout Group and auto layout There are special considerations to be aware of when using the Grid Layout Group as part of an auto layout setup, such as using it with a Content Size Fitter. The auto layout system calculates the horizontal and vertical sizes independently. This can be at odds with the Grid Layout Group, where the number of rows depends on the number of columns and vice versa. For any given number of cells, there are different combinations of row count and column count that can make the grid fit its content. In order to aid the layout system, you can specify that you intent the table to have a fixed number of columns or rows by using the Constraint property. Here are suggested ways of using the Layout System with a Content Size Fitter: Flexible width and fixed height To setup a grid with a flexible width and fixed height, where the grid expands horizontally as more elements are added, you can set these properties as follows: Grid Layout Group Constraint: Fixed Row Count Content Size Fitter Horizontal Fit: Preferred Size Content Size Fitter Vertical Fit: Preferred Size or Unconstrained If unconstrained Vertical Fit is used, it's up to you to give the grid a height that is big enough to fit the specified row count of cells. Fixed width and flexible height To setup a grid with a fixed width and flexible height, where the grid expands vertically as more elements are added, you can set these properties as follows: Grid Layout Group Constraint: Fixed Column Count Content Size Fitter Horizontal Fit: Preferred Size or Unconstrained Content Size Fitter Vertical Fit: Preferred Size If unconstrained Horizontal Fit is used, it's up to you to give the grid a width that is big enough to fit the specified column count of cells. Both flexible width and height If you want a grid with both a flexible width and height you can do that, but you will have no control over the specific number of rows and columns. The grid will attempt to make the row and column count approximately the same. You can set these properties as follows: Grid Layout Group Constraint: Flexible Content Size Fitter Horizontal Fit: Preferred Size Content Size Fitter Vertical Fit: Preferred Size"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-HorizontalLayoutGroup.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-HorizontalLayoutGroup.html",
    "title": "Horizontal Layout Group | ModularUIPack",
    "summary": "Horizontal Layout Group The Horizontal Layout Group component places its child layout elements next to each other, side by side. Their widths are determined by their respective minimum, preferred, and flexible widths according to the following model: The minimum widths of all the child layout elements are added together and the spacing between them is added as well. The result is the mimimum width of the Horizontal Layout Group. The preferred widths of all the child layout elements are added together and the spacing between them is added as well. The result is the preferred width of the Horizontal Layout Group. If the Horizontal Layout Group is at its minimum width or smaller, all the child layout elements will also have their minimum width. The closer the Horizontal Layout group is to its preferred width, the closer each child layout element will also get to their preferred width. If the Horizontal Layout Group is wider than its preferred width, it will distribute the extra available space proportionally to the child layout elements according to their respective flexible widths. For more information about minimum, preferred, and flexible width, see the documentation on Auto Layout. Properties Property: Function: Padding The padding inside the edges of the layout group. Spacing The spacing between the layout elements. Child Alignment The alignment to use for the child layout elements if they don't fill out all the available space. Control Child Size Whether the Layout Group controls the width and height of its child layout elements. Use Child Scale Whether the Layout Group considers the scale of its child layout elements when sizing and laying out elements. Width and Height correspond to the Scale > X and Scale > Y values in each child layout element's Rect Transform component. You cannot animate the Scale values using the Animator Controller Child Force Expand Whether to force the child layout elements to expand to fill additional available space."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Image.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Image.html",
    "title": "Image | ModularUIPack",
    "summary": "Image The Image control displays a non-interactive image to the user. You can use this for purposes such as decorations or icons, and you can change the image from a script to reflect changes in other controls. The control is similar to the Raw Image control, but offers more options for animating the image and accurately filling the control rectangle. However, the Image control requires its Texture to be a Sprite, while the Raw Image can accept any Texture. Properties Property: Function: Source Image The Texture that represents the image to display (which must be imported as a Sprite). Color The color to apply to the image. Material The Material to use for rendering the image. Raycast Target Enable Raycast Target if you want Unity to consider the image a target for raycasting. Preserve Aspect Ensure the image retains its existing dimension. Set Native Size Set the dimensions of the image box to the original pixel size of the Texture. You must import the image to display as a Sprite to work with the Image control."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-InputField.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-InputField.html",
    "title": "Input Field | ModularUIPack",
    "summary": "Input Field An Input Field is a way to make the text of a Text Control editable. Like the other interaction controls, it's not a visible UI element in itself and must be combined with one or more visual UI elements in order to be visible. Properties Property: Function: Interactable A boolean that determines if the Input Field can be interacted with or not. |Transition ||Transitions are used to set how the input field transitions when Normal, Highlighted, Pressed or Disabled. | |Navigation || Properties that determine the sequence of controls. See Navigation Options.| |TextComponent ||A reference to the Text element used as the contents of the Input Field| |Text ||Starting Value. The initial text placed in the field before editing begins. | |Character Limit ||The value of the maximum number of characters that can be entered into the input field.| |Content Type ||Define the type(s) of characters that your input field accepts| | |Standard |Any character can be entered.| | |Autocorrected |The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action.| | |Integer Number |Allow only whole numbers to be entered.| | |Decimal Number |Allow only numbers and a single decimal point to be entered.| | |Alphanumeric |Allow both letters and numbers. Symbols cannot be entered.| | |Name |Automatically capitalizes the first letter of each word. Note that the user can circumvent the capitalization rules using the Delete key.| | |Email Address |Allows you to enter an Alphanumeric string consisting of a maximum of one @ sign. periods/baseline dots cannot be entered next to each other. | | |Password* |Conceals the characters inputed with an asterisk. Allows symbols.| | |Pin |Conceals the characters inputed with an asterisk. Only allows only whole numbers to be entered.| | |Custom |Allows you to customise the Line Type, Input Type, Keyboard Type and Character Validation.| |Line Type ||Defines how text is formatted inside the text field.| | |Single Line |Only allows text to be on a single line.| | |Multi Line Submit |Allows text to use multiple lines. Only uses a new line when needed.| | |Multi Line Newline |Allows text to use multiple lines. User can use a newline by pressing the return key.| |Placeholder ||This is an optional ‘empty’ Graphic to show that the Input Field is empty of text. Note that this ‘empty' graphic still displays even when the Input Field is selected (that is; when there is focus on it). eg; \"Enter text...\".| |Caret Blink Rate ||Defines the blink rate for the mark placed on the line to indicate a proposed insertion of text.| |Selection Color ||The background color of the selected portion of text.| Hide Mobile Input Hides the native input field attached to the onscreen keyboard on mobile devices. Note that this only works on iOS and Android devices. Events Property: Function: On Value Change A UnityEvent that is invoked when the text content of the Input Field changes. The event can send the current text content as a string type dynamic argument. End Edit A UnityEvent that is invoked when the user finishes editing the text content either by submitting or by clicking somewhere that removes the focus from the Input Field. The event can send the current text content as a string type dynamic argument. Details The Input Field script can be added to any existing Text control object from the menu (Component > UI > Input Field). Having done this, you should also drag the object to the Input Field's Text property to enable editing. The Text property of the Text control itself will change as the user types and the value can be retrieved from a script after editing. Note that Rich Text is intentionally not supported for editable Text controls; the field will apply any Rich Text markup instantly when typed but the markup essentially \"disappears\" and there is no subsequent way to change or remove the styling. Hints To obtain the text of the Input Field, use the text property on the InputField component itself, not the text property of the Text component that displays the text. The text property of the Text component may be cropped or may consist of asterisks for passwords. Limitations On iOS when an external keyboard is connected, the onscreen keyboard will be hidden by the OS but the caret will not appear in the InputField. This is due to a lack of external keyboard support on iOS 13 and older."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-LayoutElement.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-LayoutElement.html",
    "title": "Layout Element | ModularUIPack",
    "summary": "Layout Element If you want to override the minimum, preferred, or flexible size of a layout element, you can do that by adding a Layout Element component to the GameObject. A layout controller allocates width or height to a layout element in the following order: First, the layout controller allocates the minimum size properties (Min Width, Min Height). If there is sufficient available space, the layout controller allocates the preferred size properties (Preferred Width, Preferred Height). If there is additional available space, the layout controller allocates the flexible size properties (Flexible Width, Flexible Height). For more information about minimum, preferred, and flexible size, see documentation on Auto Layout. Properties When you enable a width or height property, a value field appears next to it. Use this value field to enter the exact value for the width or height. Min and Preferred sizes are in regular units, while the Flexible sizes are in relative units. Property: Function: Ignore Layout When enabled, the layout system ignores this layout element. Min Width The minimum width this layout element should have. Min Height The minimum height this layout element should have. Preferred Width The preferred width this layout element should have before additional available width is allocated. Preferred Height The preferred height this layout element should have before additional available height is allocated. Flexible Width The relative amount of additional available width this layout element should fill out relative to its siblings. Flexible Height The relative amount of additional available height this layout element should fill out relative to its siblings. Layout Priority The layout priority for this component. If a GameObject has more than one component with layout properties (for example, an Image component and a LayoutElement component), the layout system uses the property values from the component with the highest Layout Priority. If the components have the same Layout Priority, the layout system uses the highest value for each property, regardless of which component it comes from. Description The Layout Element component lets you override the values for one or more of the layout properties. Enable the checkbox for a property you want to override and then specify the value you want to override with. Minimum and preferred sizes are defined in regular units, while the flexible sizes are defined in relative units. If any layout element has flexible size greater than zero, it means that all the available space will be filled out. The relative flexible size values of the siblings determines how big a proportion of the available space each sibling fills out. Most commonly, flexible width and height is set to just 0 or 1. Specifying both a preferred size and a flexible size can make sense in certain cases. Flexible sizes are only allocated after all preferred sizes have been fully allocated. Thus, a layout element which has a flexible size specified but no preferred size will keep its minimum size until other layout elements have grown to their full preferred size, and only then begin to grow based on additional available space. By also specifying a flexible size, this can be avoided and the element can grow to its preferred size in tandem with the other layout elements that have preferred sizes, and then grow further once all flexible sizes have been allocated."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Mask.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Mask.html",
    "title": "Mask | ModularUIPack",
    "summary": "Mask A Mask is not a visible UI control but rather a way to modify the appearance of a control's child elements. The mask restricts (ie, \"masks\") the child elements to the shape of the parent. So, if the child is larger than the parent then only the part of the child that fits within the parent will be visible. Properties Property: Function: Show Graphic Should the graphic of the masking (parent) object be drawn with alpha over the child object? Description A common use of a Mask is to show a small section of a large Image, using say a Panel object (menu: GameObject > Create UI > Panel) as a \"frame\". You can achieve this by firstly making the Image a child of the Panel object. You should position the Image so that the area that should be visible is directly behind the Panel area. Then, add a Mask component to the Panel. The areas of the child Image outside the panel will become invisible since they are masked by the shape of the Panel. If the image is then moved around then only the part revealed by the Panel will be visible. The movement could be controlled by Scrollbars to create a scrollable viewer for a map, say. Implementation Masking is implemented using the stencil buffer of the GPU. *The first Mask element writes a 1 to the stencil buffer *All elements below the mask check when rendering, and only render to areas where there is a 1 in the stencil buffer *Nested Masks will write incremental bit masks into the buffer, this means that renderable children need to have the logical & of the stencil values to be rendered."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Outline.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Outline.html",
    "title": "Outline | ModularUIPack",
    "summary": "Outline The Outline component adds a simple outline effect to graphic components such as Text or Image. It must be on the same GameObject as the graphic component. Properties Property: Function: Effect Color The color of the outline. Effect Distance The distance of the outline effect horizontally and vertically. Use Graphic Alpha Multiplies the color of the graphic onto the color of the effect."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Physics2DRaycaster.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Physics2DRaycaster.html",
    "title": "Physics 2D Raycaster | ModularUIPack",
    "summary": "Physics 2D Raycaster The 2D Raycaster raycasts against 2D objects in the scene. This allows messages to be sent to 2D physics objects that implement event interfaces. The Camera GameObject needs to be used and will be added to the GameObject if the Physics 3D Raycaster is not added to the Camera GameObject. For more Raycaster information see Raycasters. Properties Property: Function: Event Camera The camera that will generate rays for this raycaster. Priority Priority of the caster relative to other casters. Sort Order Priority Priority of the raycaster based upon sort order. Render Order Priority Priority of the raycaster based upon render order."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PhysicsRaycaster.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PhysicsRaycaster.html",
    "title": "Physics Raycaster | ModularUIPack",
    "summary": "Physics Raycaster The Raycaster raycasts against 3D objects in the scene. This allows messages to be sent to 3D physics objects that implement event interfaces. Properties Property: Function: Depth Get the depth of the configured camera. Event Camera Get the camera that is used for this module. Event Mask Logical and of Camera mask and eventMask. Final Event Mask Logical and of Camera mask and eventMask."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PositionAsUV1.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PositionAsUV1.html",
    "title": "Position as UV1 | ModularUIPack",
    "summary": "Position as UV1 This adds a simple Position as UV1 effect to text and image graphics. Properties Property: Function: Script"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RawImage.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RawImage.html",
    "title": "Raw Image | ModularUIPack",
    "summary": "Raw Image The Raw Image control displays a non-interactive image to the user. You can use this for purposes such as decorations or icons, and you can change the image from a script to reflect changes in other controls. The control is similar to the Image control, but offers more options for animating the image and accurately filling the control rectangle. However, the Image control requires its Texture to be a Sprite, while the Raw Image can accept any Texture. Properties Property: Function: Texture The texture that represents the image to display. Color The color to apply to the image. Material The Material to use for rendering the image. Raycast Target Enable Raycast Target if you want Unity to consider the image a target for raycasting. UV Rectangle The image's offset and size within the control rectangle, given in normalized coordinates (range 0.0 to 1.0). The edges of the image are stretched to fill the space around the UV rectangle. Details Since the Raw Image does not require a sprite texture, you can use it to display any texture available to the Unity player. For example, you might show an image downloaded from a URL using the WWW class or a texture from an object in a game. The UV Rectangle properties allow you to display a small section of a larger image. The X and Y coordinates specify which part of the image is aligned with the bottom left corner of the control. For example, an X coordinate of 0.25 will cut off the leftmost quarter of the image. The W and H (ie, width and height) properties indicate the width and height of the section of image that will be scaled to fit the control rectangle. For example, a width and height of 0.5 will scale a quarter of the image area up to the control rectangle. By changing these properties, you can zoom and scale the image as desired (see also the Scrollbar control)."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RectMask2D.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RectMask2D.html",
    "title": "RectMask2D | ModularUIPack",
    "summary": "RectMask2D A RectMask2D is a masking control similar to the Mask control. The mask restricts the child elements to the rectangle of the parent element. Unlike the standard Mask control it has some limitations, but it also has a number of performance benefits. Description A common use of a RectMask2D is to show small sections of a larger area. Using the RectMask2D to frame this area. The limitations of RectMask2D control are: It only works in 2D space It will not properly mask elements that are not coplanar The advantages of RectMask2D are: It does not use the stencil buffer No extra draw calls No material changes Fast performance"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ScrollRect.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ScrollRect.html",
    "title": "Scroll Rect | ModularUIPack",
    "summary": "Scroll Rect A Scroll Rect can be used when content that takes up a lot of space needs to be displayed in a small area. The Scroll Rect provides functionality to scroll over this content. Usually a Scroll Rect is combined with a Mask in order to create a scroll view, where only the scrollable content inside the Scroll Rect is visible. It can also additionally be combined with one or two Scrollbars that can be dragged to scroll horizontally or vertically. Properties Property: Function: Content This is a reference to the Rect Transform of the UI element to be scrolled, for example a large image. Horizontal Enables horizontal scrolling Vertical Enables vertical scrolling Movement Type Unrestricted, Elastic or Clamped. Use Elastic or Clamped to force the content to remain within the bounds of the Scroll Rect. Elastic mode bounces the content when it reaches the edge of the Scroll Rect Elasticity This is the amount of bounce used in the elasticity mode. Inertia When Inertia is set the content will continue to move when the pointer is released after a drag. When Inertia is not set the content will only move when dragged. Deceleration Rate When Inertia is set the deceleration rate determines how quickly the contents stop moving. A rate of 0 will stop the movement immediately. A value of 1 means the movement will never slow down. Scroll Sensitivity The sensitivity to scroll wheel and track pad scroll events. Viewport Reference to the viewport Rect Transform that is the parent of the content Rect Transform. Horizontal Scrollbar Optional reference to a horizontal scrollbar element. Visibility Whether the scrollbar should automatically be hidden when it isn't needed, and optionally expand the viewport as well. Spacing The space between the scrollbar and the viewport. Vertical Scrollbar Optional reference to a vertical scrollbar element. Visibility Whether the scrollbar should automatically be hidden when it isn't needed, and optionally expand the viewport as well. Spacing The space between the scrollbar and the viewport. Events Property: Function: On Value Changed A UnityEvent that is invoked when the scroll position of the Scroll Rect changes. The event can send the current scroll position as a Vector2 type dynamic argument. Details The important elements in a scroll view are the viewport, the scrolling content, and optionally one or two scrollbars. The root GameObject has the Scroll Rect component. The viewport has a Mask component. The viewport can either be the root GameObject, or a separate GameObject that's a child to the root. If auto-hiding scrollbars are used, it must be a child. The viewport Rect Transform needs to be referenced in the Viewport property of the Scroll Rect. All the scrolling content must be children of a single content GameObject that is a child to the viewport. The content Rect Transform needs to be referenced in the Content property of the Scroll Rect. The scrollbars - if used - are children to the root GameObject. See the Scrollbar page for more details on the setup of a scrollbar and see the section Scrollbar setup below for information about setup of scrollbars with a scroll view. This image shows a setup where the viewport is a child to the scroll view root. This is the default used when using the GameObject > UI > Scroll View menu option. To scroll content, the input must be received from inside the bounds of the ScrollRect, not on the content itself. Take care when using Unrestricted scrolling movement as it is possible to lose control of the content in an irretrievable way. When using Elastic or Constrained movement it is best to position the content so that it starts within the bounds of the ScrollRect, or undesirable behaviour may occur as the RectTransform tries to bring the content back within its bounds. Scrollbar setup Optionally, the Scroll Rect can be linked to a horizontal and/or a vertical Scrollbar. These are typically placed in the hierarchy as siblings to the viewport, and when present, should be dragged into the Horizontal Scrollbar and Vertical Scrollbar properties of the Scroll Rect, respectively. Note that the Direction property on such a horizontal Scrollbar should be set to Left To Right, and on the vertical Scrollbar to Bottom To Top. The scrollbars can optionally have auto-hiding behaviour that hides the scrollbars if the content doesn't need to scroll because it isn't larger than the viewport. Note that the auto-hiding only ever happens in Play Mode. In Edit Mode the scrollbars are always shown. This prevents marking the scene as dirty when it shouldn't be, and also help authoring content with proportions that there's room for even when the scrollbars are shown. If one or both scrollbars have their visibility behaviour set to Auto Hide And Expand View, the viewport is automatically expanded when the scrollbars are hidden in order to take up the extra room where the scrollbars would otherwise have been. With this setup, the position and size of the view is driven by the Scroll Rect, and the width of the horizontal scrollbar as well as the height of the vertical scrollbar is driven as well. With this setup the viewport as well as the scrollbars must be children to the Scroll Rect root GameObject. Hints The pivot and anchors of the content RectTransform can be used to determine how the content is aligned inside the scroll view if the content grows or shrinks. If the content should stay aligned with the top, set the anchors to the top of the parent, and set the pivot to the top position. See the page Making UI elements fit the size of their content for information about how to make the content Rect Transform automatically resize to fit the content."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Scrollbar.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Scrollbar.html",
    "title": "Scrollbar | ModularUIPack",
    "summary": "Scrollbar The Scrollbar control allows the user to scroll an image or other view that is too large to see completely. Note that the similar Slider control is used for selecting numeric values rather than scrolling. Familiar examples include the vertical Scrollbar at the side of a text editor and the vertical and horizontal pair of bars for viewing a section of a large image or map. Properties Property: Function: Interactable Will this component accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Fill Rect The graphic used for the background area of the control. Handle Rect The graphic used for the sliding \"handle\" part of the control Direction The direction in which the Scrollbar's value will increase when the handle is dragged. The options are Left To Right, Right To Left, Bottom To Top and Top To Bottom. Value Initial position value of the Scrollbar, in the range 0.0 to 1.0. Size Fractional size of the handle within the Scrollbar, in the range 0.0 to 1.0. Number Of Steps The number of distinct scroll positions allowed by the Scrollbar. Events Property: Function: On Value Changed A UnityEvent that is invoked when the current value of the Scrollbar changes. The event can send the value as a float type dynamic argument. Details The value of a Scrollbar is determined by the position of the handle along its length with the value being reported as a fraction between the extreme ends. For example, the default left-to-right bar has a value of 0.0 at the left end, 1.0 at the right end and 0.5 indicates the halfway point. A scrollbar can be oriented vertically by choosing Top To Bottom or Bottom To Top for the Direction property. A significant difference between the Scrollbar and the similar Slider control is that the Scrollbar's handle can change in size to represent the distance of scrolling available; when the view can scroll only a short way, the handle will fill up most of the bar and only allow a slight shift either direction. The Scrollbar has a single event called On Value Changed that responds as the user drags the handle. The current value is passed to the even function as a float parameter. Typical use cases for a scrollbar include: Scrolling a piece of text vertically. Scrolling a timeline horizontally. Used as a pair, scrolling a large image both horizontally and vertically to view a zoomed section. The size of the handle changes to indicate the degree of zooming and therefore the available distance for scrolling."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Selectable.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Selectable.html",
    "title": "Selectable Base Class | ModularUIPack",
    "summary": "Selectable Base Class The Selectable Class is the base class for all the interaction components and it handles the items that are in common. Property: Function: Interactable This determines if this component will accept input. When it is set to false interaction is disabled and the transition state will be set to the disabled state. Transition Within a selectable component there are several Transition Options depending on what state the selectable is currently in. The different states are: normal, highlighted, pressed and disabled. Navigation There are also a number of Navigation Options to control how keyboard navigation of the controls is implemented."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableNavigation.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableNavigation.html",
    "title": "Navigation Options | ModularUIPack",
    "summary": "Navigation Options Property: Function: Navigation The Navigation options refers to how the navigation of UI elements in play mode will be controlled. None No keyboard navigation. Also ensures that it does not receive focus from clicking/tapping on it. Horizontal Navigates Horizontally. Vertical Navigates Vertically. Automatic Automatic Navigation. Explicit In this mode you can explicitly specify where the control navigates to for different arrow keys. Visualize Selecting Visualize gives you a visual representation of the navigation you have set up in the scene window. See below. In the above visualization mode, the arrows indicate how the change of focus is set up for the collection of controls as a group. That means - for each individual UI control - you can see which UI control will get focus next, if the user presses an arrow key when the given control has focus. So in the example shown above, If the \"button\" has focus and the user presses the right arrow key, the first (left-hand) vertical slider will then become focused. Note that the vertical sliders can't be focused-away-from using up or down keys, because they control the value of the slider. The same is true of the horizontal sliders and the left/right arrow keys."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableTransition.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableTransition.html",
    "title": "Transition Options | ModularUIPack",
    "summary": "Transition Options Within a selectable component there are several transition options depending on what state the selectable is currently in. The different states are: normal, highlighted, pressed and disabled. Transition Options: Function: None This option is for the button to have no state effects at all. Color Tint Changes the colour of the button depending on what state it is in. It is possible to select the colour for each individual state. It is also possible to set the Fade Duration between the different states. The higher the number is, the slower the fade between colors will be. Sprite Swap Allows different sprites to display depending on what state the button is currently in, the sprites can be customised. Animation Allows animations to occur depending on the state of the button, an animator component must exist in order to use animation transition. It’s important to make sure root motion is disabled. To create an animation controller click on generate animation (or create your own) and make sure that an animation controller has been added to the animator component of the button. Each Transition option (except None) provides additional options for controlling the transitions. We'll go into details with those in each of the sections below. Color Tint Property: Function: Target Graphic The graphic used for the interaction component. Normal Color The normal color of the control Highlighted Color The color of the control when it is highlighted Pressed Color The color of the control when it is pressed Disabled Color The color of the control when it is disabled Color Multiplier This multiplies the tint color for each transition by its value. With this you can create colors greater than 1 to brighten the colors (or alpha channel) on graphic elements whose base color is less than white (or less then full alpha). Fade Duration The time taken, in seconds, to fade from one state to another Sprite Swap Property: Function: Target Graphic The normal sprite to use Highlighted Sprite Sprite to use when the control is highlighted Pressed Sprite Sprite to use when the control is pressed Disabled Sprite Sprite to use when the control is disabled Animation Property: Function: Normal Trigger The normal animation trigger to use Highlighted Trigger Trigger to use when the control is highlighted Pressed Trigger Trigger to use when the control is pressed Disabled Trigger Trigger to use when the control is disabled"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Shadow.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Shadow.html",
    "title": "Shadow | ModularUIPack",
    "summary": "Shadow The Shadow component adds a simple outline effect to graphic components such as Text or Image. It must be on the same GameObject as the graphic component. Properties Property: Function: Effect Color The color of the shadow. Effect Distance The offset of the shadow expressed as a vector. Use Graphic Alpha Multiplies the color of the graphic onto the color of the effect."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Slider.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Slider.html",
    "title": "Slider | ModularUIPack",
    "summary": "Slider The Slider control allows the user to select a numeric value from a predetermined range by dragging the mouse. Note that the similar ScrollBar control is used for scrolling rather than selecting numeric values. Familiar examples include difficulty settings in games and brightness settings in image editors. Properties Property: Function: Interactable Will this component accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Fill Rect The graphic used for the fill area of the control. Handle Rect The graphic used for the sliding \"handle\" part of the control Direction The direction in which the slider's value will increase when the handle is dragged. The options are Left To Right, Right To Left, Bottom To Top and Top To Bottom. Min Value The value of the slider when the handle is at its extreme lower end (determined by the Direction property). Max Value The value of the slider when the handle is at its extreme upper end (determined by the Direction property). Whole Numbers Should the slider be constrained to integer values? Value Current numeric value of the slider. If the value is set in the inspector it will be used as the initial value, but this will change at runtime when the value changes. Events Property: Function: On Value Changed A UnityEvent that is invoked when the current value of the Slider has changed. The event can send the current value as a float type dynamic argument. The value is passed as a float type regardless of whether the Whole Numbers property is enabled. Details The value of a Slider is determined by the position of the handle along its length. The value increases from the Min Value up to the Max Value in proportion to the distance the handle is dragged. The default behaviour is for the slider to increase from left to right but it is also possible to reverse this behavior using the Direction property. You can also set the slider to increase vertically by selecting Bottom To Top or Top To Bottom for the Direction property. The slider has a single event called On Value Changed that responds as the user drags the handle. The current numeric value of the slider is passed to the function as a float parameter. Typical use cases include: Choosing a level of difficulty in a game, brightness of a light, etc. Setting a distance, size, time or angle."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-StandaloneInputModule.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-StandaloneInputModule.html",
    "title": "Standalone Input Module | ModularUIPack",
    "summary": "Standalone Input Module The module is designed to work as you would expect a controller / mouse input to work. Events for button presses, dragging, and similar are sent in response to input. The module sends pointer events to components as a mouse / input device is moved around, and uses the Graphics Raycaster and Physics Raycaster to calculate which element is currently pointed at by a given pointer device. You can configure these raycasters to detect or ignore parts of your Scene, to suit your requirements. The module sends move events and submit / cancel events in response to Input tracked via the Input window. This works for both keyboard and controller input. The tracked axis and keys can be configured in the module's inspector. Properties Property: Function: Horizontal Axis Type the desired manager name for the horizontal axis button. Vertical Axis Type the desired manager name for the vertical axis. Submit Button Type the desired manager name for the Submit button. Cancel Button Type the desired manager name for the Cancel button. Input Actions Per Second Number of keyboard/controller inputs allowed per second. Repeat Delay Delay in seconds before the input actions per second repeat rate takes effect. Force Module Active Enable this property to force this Standalone Input Module to be active. Details The module uses: Vertical / Horizontal axis for keyboard and controller navigation Submit / Cancel button for sending submit and cancel events Has a timeout between events to only allow a maximum number of events a second. The flow for the module is as follows Send a Move event to the selected object if a valid axis from the Input window is entered Send a submit or cancel event to the selected object if a submit or cancel button is pressed Process Mouse input If it is a new press Send PointerEnter event (sent to every object up the hierarchy that can handle it) Send PointerPress event Cache the drag handler (first element in the hierarchy that can handle it) Send BeginDrag event to the drag handler Set the 'Pressed' object as Selected in the event system If this is a continuing press Process movment Send DragEvent to the cached drag handler Handle PointerEnter and PointerExit events if touch moves between objects If this is a release Send PointerUp event to the object that received the PointerPress If the current hover object is the same as the PointerPress object send a PointerClick event Send a Drop event if there was a drag handler cached Send a EndDrag event to the cached drag handler Process scroll wheel events"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Text.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Text.html",
    "title": "Text | ModularUIPack",
    "summary": "Text The Text control displays a non-interactive piece of text to the user. This can be used to provide captions or labels for other GUI controls or to display instructions or other text. Properties Property: Function: Text The text displayed by the control. Character Font The Font used to display the text. Font Style The style applied to the text. The options are Normal, Bold, Italic and Bold And Italic. Font Size The size of the displayed text. Line Spacing The vertical separation between lines of text. Rich Text Should markup elements in the text be interpreted as Rich Text styling? Paragraph Alignment The horizontal and vertical alignment of the text. Align by Geometry Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics. Horizontal Overflow The method used to handle the situation where the text is too wide to fit in the rectangle. The options are Wrap and Overflow. Vertical Overflow The method used to handle the situation where wrapped text is too tall to fit in the rectangle. The options are Truncate and Overflow. Best Fit Should Unity ignore the size properties and simply try to fit the text to the control's rectangle? Color The color used to render the text. Material The Material used to render the text. A default text element looks like this: Details Some controls (such as Buttons and Toggles) have textual descriptions built-in. For controls that have no implicit text (such as Sliders), you can indicate the purpose using a label created with a Text control. Text is also useful for lists of instructions, story text, conversations and legal disclaimers. The Text control offers the usual parameters for font size, style, etc, and text alignment. When the Rich Text option is enabled, markup elements within the text will be treated as styling information, so you can have just a single word or short section in boldface or in a different color, say (see the page about Rich Text for details of the markup scheme). Hints See the Effects page for how to apply a simple shadow or outline effect to the text."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Toggle.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Toggle.html",
    "title": "Toggle | ModularUIPack",
    "summary": "Toggle The Toggle control is a checkbox that allows the user to switch an option on or off. Properties Property: Function: Interactable Will this component will accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Is On Is the toggle switched on from the beginning? Toggle Transition The way the toggle reacts graphically when its value is changed. The options are None (ie, the checkmark simply appears or disappears) and Fade (ie, the checkmark fades in or out). Graphic The image used for the checkmark. Group The Toggle Group (if any) that this Toggle belongs to. Events Property: Function: On Value Changed A UnityEvent that is invoked when the Toggle is clicked. The event can send the current state as a bool type dynamic argument. Details The Toggle control allows the user to switch an option on or off. You can also combine several toggles into a Toggle Group in cases where only one of a set of options should be on at once. The Toggle has a single event called On Value Changed that responds when the user changes the current value. The new value is passed to the event function as a boolean parameter. Typical use cases for Toggles include: Switching an option on or off (eg, playing music during a game). Letting the user confirm they have read a legal disclaimer. Choosing one of a set of options (eg, a day of the week) when used in a Toggle Group. Note that the Toggle is a parent that provides a clickable area to children. If the Toggle has no children (or they are disabled) then it is not clickable."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ToggleGroup.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ToggleGroup.html",
    "title": "Toggle Group | ModularUIPack",
    "summary": "Toggle Group A Toggle Group is not a visible UI control but rather a way to modify the behavior of a set of Toggles. Toggles that belong to the same group are constrained so that only one of them can switched on at a time - pressing one of them to switch it on automatically switches the others off. Properties Property: Function: Allow Switch Off Is it allowed that no toggle is switched on? If this setting is enabled, pressing the toggle that is currently switched on will switch it off, so that no toggle is switched on. If this setting is disabled, pressing the toggle that is currently switched on will not change its state. Description The Toggle Group is setup by dragging the Toggle Group object to the Group property of each of the Toggles in the group. Toggle Groups are useful anywhere the user must make a choice from a mutually exclusive set of options. Common examples include selecting player character types, speed settings (slow, medium, fast, etc), preset colors and days of the week. You can have more than one Toggle Group object in the scene at a time, so you can create several separate groups if necessary. Unlike other UI elements, an object with a Toggle Group component does not need to be a child of a Canvas object, although the Toggles themselves still do. Note that the Toggle Group will not enforce its constraint right away if multiple toggles in the group are switched on when the scene is loaded or when the group is instantiated. Only when a new toggle is swicthed on are the others switched off. This means it's up to you to ensure that only one toggle is switched on from the beginning."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-TouchInputModule.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-TouchInputModule.html",
    "title": "Touch Input Module | ModularUIPack",
    "summary": "Touch Input Module Note: TouchInputModule is obsolete. Touch input is now handled in StandaloneInputModule. This module is designed to work with touch devices. It sends pointer events for touching and dragging in response to user input. The module supports multitouch. The module uses the scene configured Raycasters to calculate what element is currently being touched over. A raycast is issued for each current touch. Properties Property: Function: Force Module Active Forces this module to be active. Details The flow for the module is as follows: For each touch event If it is a new press Send PointerEnter event (sent to every object up the hierarchy that can handle it) Send PointerPress event Cache the drag handler (first element in the hierarchy that can handle it) Send BeginDrag event to the drag handler Set the 'Pressed' object as Selected in the event system If this is a continuing press Process movement Send DragEvent to the cached drag handler Handle PointerEnter and PointerExit events if touch moves between objects If this is a release Send PointerUp event to the object that received the PointerPress If the current hover object is the same as the PointerPress object send a PointerClick event Send a Drop event if there was a drag handler cached Send a EndDrag event to the cached drag handler"
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-VerticalLayoutGroup.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-VerticalLayoutGroup.html",
    "title": "Vertical Layout Group | ModularUIPack",
    "summary": "Vertical Layout Group The Vertical Layout Group component places its child layout elements on top of each other. Their heights are determined by their respective minimum, preferred, and flexible heights according to the following model: The minimum heights of all the child layout elements are added together and the spacing between them is added as well. The result is the mimimum height of the Vertical Layout Group. The preferred heights of all the child layout elements are added together and the spacing between them is added as well. The result is the preferred height of the Vertical Layout Group. If the Vertical Layout Group is at its minimum height or smaller, all the child layout elements will also have their minimum height. The closer the Vertical Layout group is to its preferred height, the closer each child layout element will also get to their preferred height. If the Vertical Layout Group is taller than its preferred height, it will distribute the extra available space proportionally to the child layout elements according to their respective flexible heights. For more information about minimum, preferred, and flexible height, see the documentation on Auto Layout. Properties Property: Function: Padding The padding inside the edges of the layout group. Spacing The spacing between the layout elements. Child Alignment The alignment to use for the child layout elements if they don't fill out all the available space. Control Child Size Whether the Layout Group controls the width and height of its child layout elements. Use Child Scale Whether the Layout Group considers the scale of its child layout elements when sizing and laying out elements. Width and Height correspond to the Scale > X and Scale > Y values in each child layout element's Rect Transform component. You cannot animate the Scale values using the Animator Controller Child Force Expand Whether to force the child layout elements to expand to fill additional available space."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/ugui.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/ugui.html",
    "title": "About Unity UI | ModularUIPack",
    "summary": "About Unity UI Unity UI is a UI toolkit for developing user interfaces for games and applications. It is a GameObject-based UI system that uses Components and the Game View to arrange, position, and style user interfaces. You cannot use Unity UI to create or change user interfaces within the Unity Editor. Installing Unity UI Unity UI is a core package. A version of it is included in each Unity release. To remove this package, or reinstall it after removal, follow the instructions in the Package Manager documentation. Getting documentation User documentation The Unity UI user documentation is in the Unity Manual. It provides a basic overview of the available components, and a few how-tos. API documentation You can find Class descriptions and API compatibility information in the Scripting API section of this documentation. Getting support For questions and assistance, visit the Unity UI section of the Unity Forum."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "Unity UI Copyright © 2015-2020 Unity Technologies ApS (\"Unity\") Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). _Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.ugui@1.0.0/README.html": {
    "href": "Library/PackageCache/com.unity.ugui@1.0.0/README.html",
    "title": "Unity UI | ModularUIPack",
    "summary": "Unity UI The Unity UI package allows you to create in-game user interfaces fast and intuitively. Prerequisites Unity 2019.2 This package is in development, and requires Unity 2019.2. Getting Started The Unity UI user manual can be found here."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/CHANGELOG.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog [1.9.4] - 2024-04-08 Fixed Fixed sqlite dll changes not being recognized correctly by the 2022.3 Unity Editor [1.9.3] - 2024-03-19 Fixed Fixed errors related to the sqlite dll when using the Windows ARM64 Editor Favorites are now kept when entering play mode UVSB-2519 Fixed continuous input when using an OnInputSystemEventVector2 node with OnHold UVSB-2518 [1.9.2] - 2023-10-30 Fixed Fixed a bug where the second player input device controlled all objects when using InputSystem event nodes UVSB-2499 Documentation links have been fixed for Visual Scripting MonoBehaviours UVSB-2475 UVSB-2496 Changed AnimationEvent and NamedAnimationEvent Nodes icon changed in favor of the AnimationClip icon instead of the Animation Component icon. [1.9.1] - 2023-08-15 Fixed Reverted a breaking change where LudiqScriptableObject._data was marked as private Reverted a breaking change related to IGraphEventListener [1.9.0] - 2023-08-01 Fixed Fixed code for custom nodes being stripped in AOT builds when Managed Stripping Level is set to High UVSB-2439 Fixed OnInputSystemEvent doesn't trigger until Input Vector variates from 0.5 UVSB-2435 Fixed assembly disappearing from Node Library after domain reload. UVSB-2459 Fixed custom inspectors not being generated UVSB-2466 Fixed error when trying to load exceptions for TryCatch node dropdown UVSB-2463 Fixed infinite amount of GameObjects created in Prefab mode when performing a null check of a scene variable in editor with an OnDrawGizmos event UVSB-2453 Removed corrupt mdb which caused the ScriptUpdater to fail UVSB-2360 Fixed Gradient graph variables resetting when entering PlayMode UVSB-2334 Fixed Memory leak after destroying object UVSB-2427 Fixed migration deserialization bug introduced in 1.8.0 UVSB-2492 Added Added a warning icon next to assemblies in Project Settings that reference Editor assemblies UVSB-2382 Changed Script Graph Asset string data is unloaded after deserialization UVSB-2366 AOT Prebuild should take less memory and be faster (Added an optimization to AssetUtility.GetAllAssetsOfType<T>) UVSB-2417 [1.8.0] - 2022-11-03 Fixed Fixed graphs being corrupted on deserialization if containing a node whose type cannot be found. UVSB-2332 For nodes that support a default parameter for each of their inputs, detect and fix parameter renames UVSB-1885 Fixed the problem that was preventing link.xml creation when building for Mono backend UVSB-2348 Moved Events/MessageListeners files to a Listeners folder to avoid to exceed some OS path limit Fixed Grandient.mode serialization. Fix available for Unity 2021.3.9f1 or newer UVSB-2356 Fixed Visual Scripting settings now only save to disk when modified Fixed sub graphs being shown with broken connections on first load as of Unity 2021.2 UVSB-2345 Fixed documentation links for Script Graph and State Graphs assets UVSB-2422 Added Added confirmation popup when resetting project settings and editor preferences. UVSB-2353 Added confirmation popup when resetting assemblies/types in project settings. Added Sticky Note for ScriptGraph and StateGraph. Nodes may now have a button which triggers a custom action in their inspector description. Nodes whose type cannot be found are now temporarily converted to dummy nodes until either their original type is defined again or the user replaces them. Support for parameter renaming in code used by API nodes Changed AOTStubs are now generated for all nodes regardless of whether they represent a runtime or editor member UVS-2381 Increased zoom out distance in graphs. [1.7.8] - 2022-02-22 Fixed Handle ReflectionTypeLoadException for TypeUtility to remove warning BOLT-1900 Fixed drag inconsistency in Graph Variables BOLT-2113 Fixed exception after creating a graph from the Welcome Window on Linux BOLT-1828 Fixed the Cooldown node not becoming \"Ready\" when the \"Reset\" port is triggered Fixed exception thrown after changing Hierarchy selection after removing Saved variable BOLT-1919 Fixed old Bolt saved variables not loading when using a build created using a newer version of Visual Scripting BOLT-2052 Fixed a performance issue when using lots of Get/Set Scene variable nodes in an open graph Fixed zooming out in the Graph to be relative to the mouse cursor BOLT-1667 Fixed a compilation error when migrating from Visual Scripting 1.7.6 to 1.7.7 with InputSystem-1.1.1 or below installed. Fixed a performance issue when using lots of Get/Set Scene variable nodes in an open graph Fixed default inspectors for nodes not appearing in the correct position after a connected node is deleted BOLT-1457 Fixed Scene variables drag and drop in graph having wrong scope BOLT-2247 OnDestroy events are now properly triggered in script graphs BOLT-1783 Changed Small optimization of load times involving generic types. Renamed ContinuousNumberDrawer.cs.cs to ContinuousNumberDrawer.cs BOLT-2288 Added TextMeshPro assembly is now added by default in Project Settings/Visual Scripting/Node Library Added highlight to new VS graph drop down items BOLT-2205 Added margins to the UI for project settings and editor preferences [1.7.7] - 2021-11-23 Fixed Fix an NullException error that occurs when creating a Variable right after project initialization. Fix Visual scripting naming in Project Settings and listener. Scene is marked as dirty when a graph is created on a new or exiting GameObject BOLT-1860 Fix Flow Variables missing icon Improved node regeneration speed Fix null texture error when switching platform after a build failure Fix null texture error when entering play mode Fix Linux build failing when run from command line Fix Editor Assemblies not detected correctly at Codebase initialization Fix Wait nodes naming inconsistency BOLT-1886 Fix constant being stripped in IL2CPP builds BOLT-1638 TryConvert now returns true when the conversion was successful BOLT-2105 Fix Input system by using correct Input API BOLT-2078 [1.7.6] - 2021-11-05 Fixed Fixed a regression where AOT Stubs were not being generated correctly, causing AOT builds to fail when run. [1.7.5] - 2021-08-30 Changed Removed unused Preferences Renamed preference \"Update Units Automatically\" to \"Update Nodes Automatically\" Reduced domain reload performance cost of visual scripting to 1ms or less when not actively used by a project Fixed Fixed an issue where uncaught exceptions were thrown in Debug builds of the Windows editor Fixed the missing arrow when the \"Transition End Arrow\" is on. BOLT-1535 Fixed wrong graph is showed after creating script graph form selected object in \"Welcome Screen\" Fixed duplicate variable error. BOLT-1569 Fixed 'ReadOnlySpan<>' does not exist in the namespace 'System'\" error with AOT build. BOLT-1648 Fixed jitter when the fuzzy window is on the bottom of the screen and the user scrolls BOLT-1530 Fixed missing AOT prebuild step when building an IL2CPP project in batchmode BOLT-1649 Restored a public icon set API in UnitPortDescription.cs that was by mistake Fixed il2cpp crash caused by a recursion of the machine states in itself when AOTstubs is generating.BOLT-1656 [1.7.3] - 2021-06-30 Changed Removed unused Preferences Renamed preference \"Update Units Automatically\" to \"Update Nodes Automatically\" Fixed Fixed an issue where uncaught exceptions were thrown in Debug builds of the Windows editor Fixed custom units not appearing in the finder [1.7.2] - 2021-05-17 Changed NotEquals node in non-scalar mode is now consistent with Equals Fixed Fixed long values not preserved in literal nodes. Fixed root icons in breadcrumbs in the graph editor window. BOLT-1290 Fixed graph nodes icons Fixed project settings will not show when looking for graphs Fixed exception when user double clicks on a graph Raise warnings at edit time when a MouseEvent node is used when targeting handheld devices instead of build time. [1.7.1] - 2021-05-07 Removed For performance reasons, the BackgroundWorker attribute is now obsolete and won't have any effect. Use BackgroundWorker.Schedule() directly Changed Renamed the VSSettingsProvider assembly to Unity.VisualScripting.SettingsProvider.Editor Variables Saver GameObject no longer appears until a variable is created or changed. BOLT-1343 Renamed Singleton GameObjects created by Visual Scripting to use \"VisualScripting ---\" names. All internal plugin and product versions have been normalized to use the package version. NotEquals node in non-scalar mode is now consistent with Equals SuperUnits have been renamed into Subgraphs No longer have a hard dependency on any of the following built-in modules: ai, animation, particlesystem, physics, physics2d ScriptMachine is now displayed as \"Script Machine\" instead of \"Flow Machine\" in the Gizmo window. Update, Start, Fixed Update and Late Update nodes have been renamed into On Update, On Start, On Fixed Update and On Late Update. Moved project settings from Assets directory to the ProjectSettings directory in Unity projects Renamed control schemes to Default/Alternate The UI references to 'Unit' were changed to 'Node' without any change to the underlying types Nodes from Timeline, Cinemachine and InputSystem packages are now automatically included, with their assemblies part of the default assemblyOptions. Progress bar titles for initial node generation have been tweaked to better indicate that it is a one-time process Various optimizations to reduce the duration of domain reloads Added Added workflows to create new graphs directly from the Graph Window SetScriptGraph node SetStateGraph node Support for RenamedFrom attribute on enum members GetStateGraphs node GetScriptGraphs node GetScriptGraph node GetStateGraph node HasStateGraph node HasScriptGraph node Fixed Fixed the problem were on Linux the fuzzy window would remains above all others. BOLT-1197 There is no more crash when the user navigates quickly between fuzzy finder levels on Linux BOLT-1197 Fixed variable type turns to null when clicked outside of the graph Fixed rearranging variables, if type is not set, it sets to the type that is bellow it Lots of miscellaneous migration fixes and quality of life changes Fixed unexpected error when exceptions are thrown by flow graph units and caught by the TryCatch unit BOLT-1392 [1.6.1] - 2021-03-30 Fixed Fixed bug caused by Editor API transitioning from private to public [1.6.0] - 2021-03-23 Changed Updated graph migration process [1.5.2] - 2021-03-05 Changed User interface updated Names in different UI elements made to be more consistent with new naming schemes [1.5.1] - 2021-02-23 Added Warn the user when an Input System Package event is referencing an action of the wrong type for that event A warning is raised when adding more than one Input unit in a SuperUnit \"Open\" inspector button and double clicking a graph in the project browser now opens the visual scripting editor A warning is raised when the step's default value of the For unit is set to 0. Fixed Fixed \"Restore to Defaults\" buttons in the Project Settings window Fixed ThreadAbortException when entering Play Mode while searching in the Fuzzy Finder Fixed Visual Scripting Preferences being searchable BOLT-1218 Fixed ScalarAdd unit migration from 1.4.13 to 1.4.14 and above Fixed Open the graph window no longer causes Unity UI to stop processing mouse clicks\" BOLT-1159, Fixed Fuzzy finder no longer blinks when trying to add a node BOLT-1157, Fixed Fuzzy search no longer drops keyboard inputs and respond slowly BOLT-1214, Fixed Fuzzy finder search window no longer remains above all other windows BOLT-1197\" Fixed Dropdown icon is not clipped with TextField under \"Get Variable\" Fixed Scale groups when zoom is not at 1x Fixed graph getting corrupted when adding \"Get Action Map\" unit Fixed node description being sometimes clipped Fixed warnings overflow in the console when deleting and adding a boolean variable in the blackboard Fixed warnings when entering play mode when the \"Script Changes While Playing\" is set to Recompile And Continue Playing Fixed resize cursor rect on group when graph window is zoomed Fixed VisualScripting.Generated folder is removed when removing the VisualScripting package. Fixed error when executing \"Fix Missing Scripts\" in a HDRP project Visual Scripting Preferences spacing has been adjusted to avoid overlaps Fixed rendering of inactive ObjectFields Fixed sidebar (graph inspector/blackboard) resize when a vertical scrollbar is needed Fixed variable type reset to Enum when changing from Enum to GameObject when both Blackbaord and Variables inspector are displayed Help button in the visual scripting Assets and Behaviours inspector now link to the package documentation. FlowMachine type is now back in usable types. Fixed GraphPointerException occurs when nesting graph within itself BOLT-1257 Fixed RenamedFrom attribute does not function correctly on array references to a renamed type BOLT-1149 Fixed error message when custom inspectors are generated Fixed missing succession for Cooldown. Output of Cooldown completed is treated as unentered. BOLT-725 Fixed infinite loop when setting the For unit's step's default value to 0. Instead, the unit won't be executed and the exit output will be triggered directly. Fixed Object Variables tabs not updated when creating a Prefab Fixed console errors when deleting a Prefab with a Visual Script Fixed console errors when editing nested graphs during Play Mode Fixed console errors when opening the standalone profiler window [1.5.1-pre.5] - 2021-01-20 Changed Removed code referring to an unused SceneManagement.PrefabStage API [1.5.1-pre.3] - 2020-12-07 Added Added Visual Scripting as built-in package as of Unity 2021.1 Added New Input System Support. You can import the Input System package, activate the back-end and regenerate units to use. Added AOT Pre-Compile to automatically run when building AOT platforms Improved UI for deprecated built-in nodes Added automatic unit generation the first time the graph window is opened Changed Switched to delivering source instead of pre-built .NET 3/4 assemblies Updated Documentation Renamed assemblies to match Unity.VisualScripting naming scheme (Ex: Bolt.Core -> Unity.VisualScripting.Core) Merged Ludiq.Core and Ludiq.Graphs into Unity.VisualScripting.Core Moved Setup Wizard contents from pop-up on Editor startup to Player Settings. You can change the default settings from \"Player Settings > Visual Scripting\" Renamed \"Assembly Options\" to \"Node Library\" Renamed \"Flow Graph\" to \"Script Graph\" Renamed \"Flow Machine\" to \"Script Machine\" Renamed \"Macro\" graphs to \"Graph\" in machine source configuration and \"GraphAsset\" in Assets Renamed \"Control Input/Output\" to \"Trigger Input/Output\" Renamed \"Value Input/Output\" to \"Data Input/Output\" Updated built-in nodes. The Fuzzy Finder still accepts earlier version names of nodes. Renamed \"Branch\" node to \"If\" Renamed \"Self\" node to \"This\" Deprecated the previous Add unit. The Sum unit has been renamed to Add. Updated Window Naming Changed \"Variables\" window to \"Blackboard\" Changed \"Graph\" window to \"Script Graph\" and \"State Graph\" Updated Bolt Preferences Renamed Bolt Preferences to \"Visual Scripting\" Removed BoltEx Moved settings previously accessed from \"Window > Bolt\" to preferences Renamed Control Schemes from \"Unity/Unreal\" to \"Default/Alternate\" (Neither control scheme currently matches their respective editors' controls and will be updated in a future release) Consolidated Graph editor, Blackboard and Graph Inspector into a single window Updated Third-Party Notices Plugin version information has been removed from the Visual Scripting settings window. This information can be retrieved from the Package Manager. Fixed Corrected UGUI event management to trickle down correctly when the hierarchy contains a Unity Message Listener BOLT-2 Fixed backup failures with large projects BOLT-10 Fixed \"Null Reference\" when opening the Graph Window for the first time BOLT-996 Fixed IL2CPP build crash on startup BOLT-1036 Fixed IL2CPP issue around converting certain managed types BOLT-8 Fixed deserialization issues when undoing graphs with Wait nodes BOLT-679 Fixed \"SelectOnEnum\" node behavior enums containing non-unique values e.g. \"RuntimePlatform\" BOLT-688"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/TableOfContents.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/TableOfContents.html",
    "title": "| ModularUIPack",
    "summary": "About Visual Scripting *Configure project settings *[Add or remove available nodes](vs-add-remove-node-library.md) *[Add or remove types](vs-add-remove-type-options.md) *[Create or restore a backup](vs-create-restore-backups.md) *Choose a control scheme *Configure your preferences *Update Visual Scripting *Version control systems *Use Visual Scripting with Unity Cloud Build Basic concepts in Visual Scripting *The interface *Nodes *Graphs *[Subgraphs and State Units](vs-nesting-subgraphs-state-units.md) *[Transitions](vs-transitions.md) *Script Machines and State Machines *Object types *[Custom types](vs-custom-types.md) *Variables Develop application logic with Script Graphs *Create a new graph file *[Create a new blank graph with the Project window](vs-create-graph-project-window.md) *[Create a new unassigned graph with the empty graph creation flow](vs-create-graph-unassigned-flow.md) *[Create and assign a graph to an existing GameObject](vs-create-graph-assign-existing-gameobject.md) *[Create and assign a graph to a new GameObject](vs-create-graph-assign-new-gameobject.md) *[Create a graph on a Script Machine or State Machine](vs-create-graph-on-machine.md) *Attach a graph file to a Script Machine or State Machine *Open a graph file *[Add a node to a Script Graph](vs-add-node-to-graph.md) *[Connect nodes in a Script Graph](vs-creating-connections.md) *[Create and add a variable to a Script Graph](vs-add-variable-graph.md) *[Create node groups](vs-groups.md) *[Add comments to a graph](vs-sticky-notes.md) *Add a Subgraph to a Script Graph *[Add a Trigger or Data port to a Script Graph](vs-nesting-add-triggers-data-graph.md) *Add a State Unit to a Script Graph *Custom Events *[Add a Custom Event node](vs-add-custom-event-node.md) *[Add a Trigger Custom Event node](vs-add-custom-event-node-trigger.md) *Capture user input in an application *[Capture input using the Input Manager](vs-capturing-player-inputs-old.md) *[Add and configure a Player Input component](vs-capture-player-input-add-component.md) *[Capture input using the Input System package](vs-capturing-player-inputs-new.md) *Use relations to debug *[Predictive and live debugging](vs-debugging.md) *[Working with debug messages](vs-debug-messages.md) *Live edit *[Live edit during runtime](vs-live-edit-runtime.md) Develop logic transitions with state graphs *Create a new state *Create a transition between states Advanced customization and development *Refactor a C# script with Visual Scripting *[Add the RenamedFrom attribute to a C# script](vs-refactor-add-attribute.md) *Custom C# nodes *[Create a new simple Custom C# node](vs-create-custom-node-empty.md) *[Add ports to your Custom C# node](vs-create-custom-node-add-ports.md) *[Add logic to your Custom C# node](vs-create-custom-node-add-logic.md) *[Add relations to your Custom C# node](vs-create-custom-node-add-relations.md) *[Add documentation to your Custom C# node](vs-create-custom-node-add-docs.md) *[Custom C# node attributes reference](vs-create-custom-node-attributes-reference.md) *Create a Custom Scripting Event node *[Create a Custom Scripting Event Sender node](vs-create-own-custom-event-send-node.md) *[Trigger a Custom Scripting Event from a C# script](vs-create-own-custom-event-node-trigger-code.md) *[Listen to a Custom Scripting Event from a C# script](vs-create-own-custom-event-listen-code.md) *Use a custom type *[Add the Inspectable attribute to a custom type](vs-add-inspectable-attribute-custom-types.md) *[Create a custom PropertyDrawer for a custom type](vs-create-custom-drawer.md) Node reference *This node *Control node *Time node *Events *[Event nodes](vs-events-reference.md) *[Input Event nodes](vs-input-nodes.md) *[On Input System Event Button](vs-nodes-events-input-system-button.md) *[On Input System Event Float](vs-nodes-events-input-system-float.md) *[On Input System Event Vector 2](vs-nodes-events-input-system-vector2.md) *[On Button Input](vs-nodes-events-on-button-input.md) *[On Keyboard Input](vs-nodes-events-on-keyboard-input.md) *[On Mouse Down](vs-nodes-events-on-mouse-down.md) *[On Mouse Drag](vs-nodes-events-on-mouse-drag.md) *[On Mouse Enter](vs-nodes-events-on-mouse-enter.md) *[On Mouse Exit](vs-nodes-events-on-mouse-exit.md) *[On Mouse Input](vs-nodes-events-on-mouse-input.md) *[On Mouse Over](vs-nodes-events-on-mouse-over.md) *[On Mouse Up As Button](vs-nodes-events-on-mouse-up-button.md) *[On Mouse Up](vs-nodes-events-on-mouse-up.md) *Variable node *Nulls node *Formula node *Nesting *[Input node](vs-nesting-input-node.md) *[Output node](vs-nesting-output-node.md) *[State Unit node](vs-nesting-state-unit-node.md) *[Subgraph node](vs-nesting-subgraph-node.md) *Script graph nodes *State graph nodes Developer's guide Known Issues"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/index.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/index.html",
    "title": "About Visual Scripting | ModularUIPack",
    "summary": "About Visual Scripting Use Visual Scripting to create logic for games or applications without hand-coded C# scripts. Visual Scripting uses visual, node-based graphs, which both programmers and non-programmers use to design final logic or create prototypes. Visual Scripting also has an API that programmers can use for more advanced tasks, or to create custom nodes for other team members. Visual Scripting nodes can represent functions, operators, and variables. Connect these nodes from their ports with edges to design your logic visually. Installation From Unity Editor version 2021.1 onward, Visual Scripting is installed by default as a package. For more information on packages, see the Packages section in the Unity User Manual. For earlier versions of Unity, including 2019 LTS and 2020 LTS, you must install the Visual Scripting package from the Unity Asset Store. Configure Visual Scripting Note To use Visual Scripting in a project for the first time, you must initialize it from the Editor's Project Settings window. To get started with Visual Scripting, configure your project settings and configure your preferences. Choose a control scheme Learn the common keyboard shortcuts and choose a control scheme that suits your needs. Update Visual Scripting Learn how to update Visual Scripting and create and restore backups. System requirements Visual Scripting has no external dependencies."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/custom-c-nodes/vs-ff-add-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/custom-c-nodes/vs-ff-add-node.html",
    "title": "ff-add-node | ModularUIPack",
    "summary": "Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/custom-c-nodes/vs-open-graph-w-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/custom-c-nodes/vs-open-graph-w-node.html",
    "title": "open-graph-w-node | ModularUIPack",
    "summary": "Open a Script Graph where you've already added your node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/custom-c-nodes/vs-tasks-note-end.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/custom-c-nodes/vs-tasks-note-end.html",
    "title": "vs-tasks-note-end | ModularUIPack",
    "summary": "The examples below are based on the previous examples for a Custom C# node. For more information, see Create a new simple Custom C# node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/custom-events/vs-right-click-project.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/custom-events/vs-right-click-project.html",
    "title": "right-click-project | ModularUIPack",
    "summary": "Right-click a folder in the Project window's folder list or anywhere in the Project window's preview pane."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/custom-events/vs-tasks-note-end.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/custom-events/vs-tasks-note-end.html",
    "title": "tasks-note-end | ModularUIPack",
    "summary": "The examples below are based on the previous example to create a Custom Scripting Event node. For more information, see Create a Custom Scripting Event node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-manager/nodes-desc-end.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-manager/nodes-desc-end.html",
    "title": "nodes-desc-end | ModularUIPack",
    "summary": "It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-manager/nodes-input-output-trigger.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-manager/nodes-input-output-trigger.html",
    "title": "nodes-input-output-trigger | ModularUIPack",
    "summary": "Trigger Output Trigger The control output port. Make a connection to specify what Visual Scripting should do after the configured Input event occurs in your application."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-manager/nodes-note-manual.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-manager/nodes-note-manual.html",
    "title": "nodes-note-manual | ModularUIPack",
    "summary": "node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-system/nodes-input-action-change.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-system/nodes-input-action-change.html",
    "title": "nodes-input-action-change | ModularUIPack",
    "summary": "Name Type Description Input Action Change Type Input Action Change Option Set an Input Action Change Type to choose the interaction type that triggers the node. On Pressed The node triggers when a user presses the button from the selected Input Action input asset. On Hold The node triggers when a user holds the button from the selected Input Action input asset. On Released The node triggers when a user releases the button from the selected Input Action input asset."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-system/nodes-input-system-output-trigger-port.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-system/nodes-input-system-output-trigger-port.html",
    "title": "nodes-input-system-output-trigger-port | ModularUIPack",
    "summary": "Trigger Output Trigger The control output port. Make a connection to specify what Visual Scripting does after the configured Player Input event, such as a button press, occurs in the application."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-system/nodes-input-system-ports.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-system/nodes-input-system-ports.html",
    "title": "nodes-input-system-ports | ModularUIPack",
    "summary": "Name Type Description Target Player Input The Player Input component that Visual Scripting uses to display a list of input actions. The default is This, which is the Player Input component attached to the GameObject where Visual Scripting runs the Script Graph. You can also connect a node that outputs a Player Input component. Input Action Input Action An input action. Use the dropdown to select an input action from the Player Input component specified in Player Input, or connect a node that outputs an input action."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-system/nodes-note-package.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/input-system/nodes-note-package.html",
    "title": "nodes-note-package | ModularUIPack",
    "summary": "is an Input System package node. For more information about how to use the Input System package in Visual Scripting, see Capture user input in an application."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-additional-settings.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-additional-settings.html",
    "title": "nodes-additional-settings | ModularUIPack",
    "summary": "node has additional settings. Access these settings from the Graph Inspector:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-controls.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-controls.html",
    "title": "nodes-controls | ModularUIPack",
    "summary": "node has the following controls:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-coroutine.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-coroutine.html",
    "title": "nodes-coroutine | ModularUIPack",
    "summary": "Coroutine Toggle Enable Coroutine if you want Visual Scripting to run this node and any of its connected nodes as a coroutine. Coroutine nodes don't execute all their code in a single frame, so they can spread an effect over several frames. Coroutines can also help optimize your code. For more information on coroutines, see the Unity User Manual section on Coroutines."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-inputs.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-inputs.html",
    "title": "nodes-inputs | ModularUIPack",
    "summary": "node has the following input ports:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-outputs.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-outputs.html",
    "title": "nodes-outputs | ModularUIPack",
    "summary": "node has the following output ports:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-related.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-related.html",
    "title": "nodes-related | ModularUIPack",
    "summary": "The following nodes are related or similar to the"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-single-control.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-single-control.html",
    "title": "nodes-single-control | ModularUIPack",
    "summary": "node has one control:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-single-input.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-single-input.html",
    "title": "nodes-single-input | ModularUIPack",
    "summary": "node has one input port:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-single-output.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/nodes-single-output.html",
    "title": "nodes-single-output | ModularUIPack",
    "summary": "node has one output port:"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-blackboard-tip.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-blackboard-tip.html",
    "title": "blackboard-tip | ModularUIPack",
    "summary": "Tip If the Blackboard isn't visible in the Graph window, select Blackboard () from the toolbar."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-create-c-script-project.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-create-c-script-project.html",
    "title": "create-c-script | ModularUIPack",
    "summary": "Go to Create > C# Script."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-graph-inspector-tip-html.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-graph-inspector-tip-html.html",
    "title": "graph-inspector-tip-html | ModularUIPack",
    "summary": "TIP If the Graph Inspector isn't visible in the Graph window, select Graph Inspector () from the toolbar."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-graph-inspector-tip.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-graph-inspector-tip.html",
    "title": "graph-inspector-tip | ModularUIPack",
    "summary": "Tip If the Graph Inspector isn't visible in the Graph window, select Graph Inspector () from the toolbar."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-existing-external-code.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-existing-external-code.html",
    "title": "open-existing-external-code | ModularUIPack",
    "summary": "Double-click the C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-fuzzy-finder.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-fuzzy-finder.html",
    "title": "open-fuzzy-finder | ModularUIPack",
    "summary": "Right-click anywhere in the Graph Editor to open the fuzzy finder."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-graph-inspector.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-graph-inspector.html",
    "title": "open-graph-inspector | ModularUIPack",
    "summary": "Select Graph Inspector () from the toolbar."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-graph.html",
    "title": "open-graph | ModularUIPack",
    "summary": "Open a graph file in the Graph window."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-hierarchy-window.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-hierarchy-window.html",
    "title": "open-hierarchy-window | ModularUIPack",
    "summary": "Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-inspector-window.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-inspector-window.html",
    "title": "open-inspector-window | ModularUIPack",
    "summary": "With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-new-external-code.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-new-external-code.html",
    "title": "open-new-external-code | ModularUIPack",
    "summary": "Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-project-settings.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-project-settings.html",
    "title": "open-project-settings | ModularUIPack",
    "summary": "Go to Edit > Project Settings."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-project-window.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-project-window.html",
    "title": "open-project-window | ModularUIPack",
    "summary": "Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-state-menu.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-open-state-menu.html",
    "title": "open-state-menu | ModularUIPack",
    "summary": "With a State Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the context menu."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-regen-node-library.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-regen-node-library.html",
    "title": "regen-node-library | ModularUIPack",
    "summary": "Follow the process described in Configure project settings to regenerate your Node Library."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-return-unity.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-return-unity.html",
    "title": "return-unity | ModularUIPack",
    "summary": "Return to the Unity Editor."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-save-script.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-save-script.html",
    "title": "save-script | ModularUIPack",
    "summary": "Save your script file."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-visual-scripting-window.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-visual-scripting-window.html",
    "title": "visual-scripting-window | ModularUIPack",
    "summary": "Go to Window > Visual Scripting > Visual Scripting Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-with-graph-open-ff.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/snippets/vs-with-graph-open-ff.html",
    "title": "with-graph-open-ff | ModularUIPack",
    "summary": "With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-custom-event-node-trigger.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-custom-event-node-trigger.html",
    "title": "Add a Custom Event Trigger node | ModularUIPack",
    "summary": "Add a Custom Event Trigger node You can use a Custom Event Trigger node to trigger a matching Custom Event node in your application. For more information on custom Events, see Custom Events. Note Before you add a Custom Event Trigger node, you must add and configure a Custom Event node in a Script Graph. For more information, see Add a Custom Event node. To add a Custom Event Trigger node to a Script Graph: Open the Script Graph where you want to add a Custom Event Trigger node. This can be the same graph or a different graph from where you added a Custom Event node. Right-click anywhere in the Graph Editor to open the fuzzy finder.. Go to Events. Select the Custom Event Trigger node to add it to the graph. In the Name input port's field, enter the name of the Custom Event node you want to trigger, exactly as it appears on the Custom Event node, through one of the following methods: Enter the name in the field next to the Name input port. Attach a node that outputs the name as a string value to the Name input port. In the GameObject field, indicated by the GameObject icon on the node, specify the GameObject that you want to trigger your Event. This doesn't have to be the same GameObject as the Custom Event node. Do one of the following: Select the object picker (circle icon) and select the GameObject. Attach a node to the field's data input port that outputs the GameObject. Leave the field as the default value of This to use the GameObject from your currently open Script Graph's Script Machine. In the Arguments field, enter the number from your Custom Event node's Arguments field. Note All arguments on a Custom Event Trigger node must receive input values, even if the Custom Event node doesn't use those arguments. Otherwise, Visual Scripting displays an error in the Graph Inspector for the Custom Event Trigger node. Next steps You can add more nodes and connect them to create the trigger logic for your Custom Event node in the graph. You can also create a Custom Scripting Event node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-custom-event-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-custom-event-node.html",
    "title": "Add a Custom Event node | ModularUIPack",
    "summary": "Add a Custom Event node You can add a Custom Event node to a Script Graph to trigger specific logic after an Event occurs. For more information about custom Events, see Custom Events. Note To use a Custom Event node, you must configure the node with the following instructions, then add a Custom Event Trigger node to your graph. For more information on how to add a Custom Event Trigger node, see Add a Custom Event Trigger node To add a Custom Event node to a Script Graph: Open the Script Graph where you want to add a Custom Event node. Right-click anywhere in the Graph Editor to open the fuzzy finder.. Go to Events. Select the Custom Event node to add it to your graph. In the GameObject field, indicated by the GameObject icon on the node, choose the GameObject where you want to create the Event. Do one of the following: Select the object picker (circle icon), and select a GameObject. Attach a node to the field's data input port that outputs a GameObject. Leave the field as the default value of This to use the GameObject where you attached your Script Graph to a Script Machine. In the Arguments field, enter the number of arguments you want the custom Event to receive and pass to other nodes in your graph. The default value is 0. If you enter a number greater than 0, Visual Scripting adds the corresponding number of Output ports to the Custom Event node. Note Visual Scripting labels your first argument as Arg. 0. Enter a unique name for the custom Event through one of the following methods: Enter a name in the field next to the Name input port. Attach a node that outputs a string value to the Name input port. In the following example, a custom Event called On Damage returns a single argument when it's triggered in a Script Graph. Next steps After you add a Custom Event node to your graph, add more nodes to your graph or connect nodes to specify what happens after your Event triggers. Then, add a Custom Event Trigger node to specify when to trigger the custom Event in your graph. To create more complex logic for your custom Event, you can also create a Custom Scripting Event node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-inspectable-attribute-custom-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-inspectable-attribute-custom-types.html",
    "title": "Add the Inspectable attribute to a custom type | ModularUIPack",
    "summary": "Add the Inspectable attribute to a custom type If you have access to the source code for a custom type, add the [Inspectable] attribute to its fields and classes. The [Inspectable] attribute makes these fields and classes accessible to the Inspector window in the Unity Editor. You don't need to create a custom PropertyDrawer as Unity generates a basic UI for the custom type. For more information about how to use custom types in Visual Scripting, see Use a custom type or Custom types To add the [Inspectable] attribute to the source code for a custom type: Double-click the C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, on a line above your public class definition, add the [Inspectable] attribute. On a line above the properties you want to have available in the Unity Inspector, add the [Inspectable] attribute. Follow the process described in Configure project settings to regenerate your Node Library. The following is an example of a public class, with fields name and amount that are accessible and can be modified through Unity's Inspector window. ```csharp using System; using UnityEngine; using Unity.VisualScripting; [Inspectable] public class MyClass { [Inspectable] public string name; [Inspectable] public int amount; public string dontShowThis; } ```"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-node-to-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-node-to-graph.html",
    "title": "Add a node to a Script Graph | ModularUIPack",
    "summary": "Add a node to a Script Graph All logic in a Script Graph starts with a node. Tip Depending on the method you used to create your Script Graph, you might already have two Event nodes in your graph: Start and Update. For more information on these nodes, see Events node. To add a node to a Script Graph: With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder. In the fuzzy finder, enter a search term into the Search bar or select a category from the list to find related nodes. Categories have an arrow (>) at the end of their entry in the fuzzy finder. Select an entry in the fuzzy finder to add that node to your Script Graph. Visual Scripting adds the node to your Script Graph at the location where you opened the fuzzy finder. Next steps After you've added a node to a graph, you can add additional nodes and connect nodes in a Script Graph to create logic for your application. You can also add a Sticky Note to add comments to a graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-remove-node-library.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-remove-node-library.html",
    "title": "Add or remove available nodes | ModularUIPack",
    "summary": "Add or remove available nodes Visual Scripting has a set of default assemblies and generated nodes for Unity features. Add more assemblies through the Visual Scripting Node Library in your Project Settings. Assemblies are special files that contain the code for the feature you want to use. Visual Scripting can generate nodes from assemblies in packages and third-party assets. To use a new package or third-party asset in Visual Scripting, you must import it into Unity. For more information on how to add packages to Unity, see Adding and removing in the Unity User Manual. For more information on how to add third-party assets to Unity, see Importing assets in the User Manual. Add assemblies and nodes to the Node Library To add a new assembly and its nodes to the Node Library: Go to Edit > Project Settings. Select Visual Scripting. Expand Node Library. At the end of the assemblies list, select Add (+). In the new assembly entry, select (No Assembly) to open the Assembly menu. Select an available assembly from the Assembly menu. Visual Scripting adds the assembly and its nodes to the Node Library. To use the nodes in your project, add their types to your Type Options and regenerate the Node Library. Remove assemblies and nodes from the Node Library To remove an assembly and its nodes from your Node Library: Go to Edit > Project Settings. Select Visual Scripting. Expand Node Library. In the assemblies list, locate the entry for the assembly you want to remove. Select Remove (-). Visual Scripting removes the assembly and its nodes from the Node Library. To remove the nodes from the fuzzy finder and your project, regenerate the Node Library. You might also want to remove their types from your Type Options."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-remove-type-options.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-remove-type-options.html",
    "title": "Add or remove types | ModularUIPack",
    "summary": "Add or remove types Type Options specify which node inputs and outputs Visual Scripting supports. After you add a new assembly, you must add types specific to those nodes to your Type Options. Add types to make the nodes and their types accessible in the fuzzy finder and the Blackboard. You can't use a node that has an input or output type that isn't listed in your Type Options. Add a type to your Type Options To add a new type to your Type Options list: Go to Edit > Project Settings. Select Visual Scripting. Expand Type Options. At the end of the types list, select Add (+). In the new type entry, select (No Type) to open the Type menu. Select an available type from the Type menu. Visual Scripting adds the new type to your Type Options. To use nodes with the type in your project, regenerate your Node Library. Remove a type from your Type Options To remove a type from your Type Options list: Go to Edit > Project Settings. Select Visual Scripting. Expand Type Options. In the types list, locate the entry for the type you want to remove. Select Remove (-). Visual Scripting removes the type from your Type Options. To make sure that your change appears in your project, regenerate your Node Library."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-subgraph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-subgraph.html",
    "title": "Add a Subgraph to a Script Graph | ModularUIPack",
    "summary": "Add a Subgraph to a Script Graph A Subgraph is a Script Graph nested inside of another Script Graph. A Subgraph appears as a single node inside the parent Script Graph. You can add a Subgraph to a Script Graph in two ways: create an entirely new Script Graph, or add an existing Script Graph file. Add a new Subgraph to a Script Graph To add a new blank Subgraph to an existing Script Graph: With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder.. Go to Nesting and select Subgraph. In the Graph Inspector, choose the Source for your Subgraph: Embed: The Subgraph only exists on the Subgraph node. You can only modify the Subgraph from the node in its parent graph. Graph: The Subgraph exists in a separate file. You can modify the Subgraph outside of its parent graph and reuse the graph in other areas of your application. Tip If the Graph Inspector isn't visible in the Graph window, select Graph Inspector () from the toolbar. If you chose Graph, select New, enter a name for your graph file, and choose where you want to save it. Select Save. Add an existing Script Graph as a Subgraph To add an existing graph file as a Subgraph in a Script Graph: Note You can't nest a Script Graph as a Subgraph in its own graph file. With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder.. Go to Nesting and select Subgraph. In the Graph Inspector, set your Source to Graph. Tip If the Graph Inspector isn't visible in the Graph window, select Graph Inspector () from the toolbar. In the Graph field, select the object picker (circle icon) and choose a compatible Script Graph from your project. You can also click and drag a Script Graph file from your Project window and drop it into the Graph field. Tip For a faster way to add a Script Graph as a Subgraph, click and drag the Script Graph from your Project window into the Graph Editor to automatically create a Subgraph node. Next steps To open your new Subgraph for editing, select Edit Graph. Once you've added a Subgraph to your Script Graph, define its Input and Output Triggers and Input and Output Data. For more information, see Add a Trigger or Data port to a Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-triggers-data-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-triggers-data-graph.html",
    "title": "Add a Trigger or Data port to a Script Graph | ModularUIPack",
    "summary": "Add a Trigger or Data port to a Script Graph When you use a Script Graph as a Subgraph, you can pass data and logic to it from its parent graph. Add and define ports on your graph to determine which logic and data you can pass to it. To add a Trigger Input, Trigger Output, Data Input, or Data Output port to a Script Graph: If you haven't already, open the Script Graph you want to edit in the Graph window. With no nodes selected, in the Graph Inspector, select Add (+) under the port type you want to add to your Script Graph: Trigger Inputs, Trigger Outputs, Data Inputs, or Data Outputs. Tip If the Graph Inspector isn't visible in the Graph window, select Graph Inspector () from the toolbar. In the Key field, enter a unique key name for your port. This name can't be the same as any existing ports on your currently selected Script Graph. (Optional) In the Label field, enter any text you want to appear as a label for the port on a Subgraph, Input, or Output node for your current Script Graph. Otherwise, Visual Scripting uses the value in the Key field as a label. (Optional) In the Summary field, enter any text that you want to appear as a brief summary of the port in the Graph Inspector when you select a Subgraph, Input, or Output node for your current Script Graph. (Optional) Select Hide Label to hide the label for the port on any Subgraph, Input, or Output node for your current Script Graph. (Data Inputs and Data Outputs Only) Select the Type list to open the Type menu and select a type for the data your port should accept. (Data Inputs Only) Select Has Default Value to enable the Default Value field and specify a default value for your Script Graph's Data Input, if your graph doesn't receive another input while it runs. Next steps You can now specify triggers and data for your Script Graph when you use it as a Subgraph in another Script Graph. For more information on each port type, see Subgraph inputs and outputs. For more information on adding a Script Graph as a Subgraph, see Add a Subgraph to a Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-variable-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-add-variable-graph.html",
    "title": "Create and add a variable to a Script Graph | ModularUIPack",
    "summary": "Create and add a variable to a Script Graph You can create and add a variable to a Script Graph in one of two ways: use the Graph window's Blackboard, or add a node to a graph. Note You can't add a Flow variable to a graph from the Blackboard. For more information on Flow variables, see Variables. Create and add a new variable through the Blackboard To create a new variable in the Blackboard and add it to a graph: With a graph open in the Graph window, open the Blackboard. In the Blackboard, select the scope for the variable you want to add: Graph, Object, Scene, App, or Saved. For more information on variable scopes and when you can use each scope in your graph, see Variables. In the (New Variable Name) field, enter a name for the new variable. Do one of the following: Press Enter. Select the Add Variable (+) button. In the Type list, select the data type for your variable. For more information on types, see Object types. In the Value field, enter or modify the default value for your variable. To add the node to your graph, click and drag from the Handle (=) on the variable's definition in the Blackboard into the Graph Editor. Visual Scripting adds a new Get Variable node for your variable to your graph. Create and add a new variable through the Graph Editor To create a Flow variable or another new variable directly in a graph: With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder. Select the Variables category. Select the scope for the variable you want to add: Flow, Graph, Object, Scene, Application, or Saved. For more information on variable scopes and when you can use each scope in a graph, see Variables. Select the Set <Scope> Variable node, where <Scope> is the scope you selected in the previous step. Visual Scripting adds a new Set Variable node to the graph. In the Name field, enter a name for the new variable. (Object variables only) In the GameObject field, indicated by a GameObject icon on the node, specify the GameObject where you want to create the variable. Do one of the following: Select the object picker (circle icon) and select a GameObject. Attach a node to the field's data input port that outputs a GameObject. Leave the field as the default value of This to use the GameObject where you attached the Script Graph to a Script Machine. To set a default value for your variable, connect another node that outputs the value you want to the Set Variable node's data input port. Next steps After you've added a variable to your graph, you can add nodes, create node groups, or add a Subgraph. You can also add a Sticky Note to add comments to a graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-advanced-topics-intro.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-advanced-topics-intro.html",
    "title": "Advanced customization and development | ModularUIPack",
    "summary": "Advanced customization and development Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. You can customize and extend the basic functionality of Visual Scripting using C# code. Create a Script Graph node With a C# script, you can create your own Custom C# node and add more functionality to your Visual Scripting graphs. Create a custom event node You can trigger logic in your application with a custom event node. Add custom types to Visual Scripting Add your own custom classes and types in Visual Scripting to store information more efficiently."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-aot.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-aot.html",
    "title": "Use Visual Scripting with Unity Cloud Build | ModularUIPack",
    "summary": "Use Visual Scripting with Unity Cloud Build At build time, Unity removes any code that isn't used by a project to reduce build size. This can cause problems with Visual Scripting because Unity can remove code that's necessary for Script Graphs to run in a project. For versions 1.7.x, Visual Scripting generates an AotStubs.cs file, which stores the Unity APIs that graphs use. With the AotStubs.cs file, Unity doesn't remove any Unity APIs used in a graph from a build. You can generate this file when you create a build of a project. Builds through Unity Cloud Build can fail because Cloud Build prevents domain reload between the prebuild and build phases of the project. Without a domain reload, the build doesn't include the generated AotStubs.cs file. For more information about domain reload, see Domain Reloading in the Unity User Manual. To build a Visual Scripting project with Cloud Build, do the following: Build the project locally for your desired platform. For more information on how to build a project, see the relevant section for each platform in Platform development in the User Manual. After the build, do one of the following: Open the project files in the system file explorer. Open the Project window in the Unity Editor. In the project files, go to Assets > Unity.VisualScripting.Generated > VisualScripting.Core. Locate the AotStubs.cs file. Add the AotStubs.cs file to your source control system. Your Cloud Build settings might automatically trigger a new build of the project after you commit the AotStubs.cs file. For more information about version control systems and Cloud Build, see Unity Cloud Build in the User Manual."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-attach-graph-machine.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-attach-graph-machine.html",
    "title": "Attach a graph file to a Script Machine or State Machine | ModularUIPack",
    "summary": "Attach a graph file to a Script Machine or State Machine To use a Script Graph or State Graph file in your project, you must attach it to a Script Machine or State Machine. A Script Machine or State Machine is a component. Components attach to GameObjects, and help define their behavior. For more information on components and GameObjects, see Using components or GameObjects in the Unity User Manual. Add a Script Machine or State Machine component to a GameObject Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select a GameObject where you'd like to add a Script Machine or State Machine. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. In the GameObject's Inspector window, select Add Component. The Components menu opens. Do one of the following: To add a Script Machine or State Machine, in the Components menu, go to Visual Scripting and select Script Machine or State Machine. Use the search bar to find the Script Machine or State Machine component. The new Script Machine or State Machine component appears in the Inspector window for the GameObject: Attach a graph file to the Script Machine or State Machine In the Inspector window, locate your Script Machine or State Machine component. Set the Source to Graph. Do one of the following: In the Graph field, select the object picker (circle icon) and choose a compatible graph file from your project. Click and drag a file from your Project window and drop it into the Graph field. For more information on how to create Script or State Graphs, see Create a new graph file. Next steps After you attach a graph to a Script Machine or State Machine, you can open the graph and edit. For more information, see Open a graph file."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-basic-concepts.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-basic-concepts.html",
    "title": "Basic concepts in Visual Scripting | ModularUIPack",
    "summary": "Basic concepts in Visual Scripting Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. In this section, you can find information about basic concepts in Visual Scripting. These concepts will help you create logic for your application. The interface The Visual Scripting interface starts with the Graph window. For more information, see The interface. Nodes Nodes are the most basic part of creating scripts in Visual Scripting. For more information, see Nodes. Graphs and Machines Graphs contain the visual representations of logic in your application. To use a graph, you attach it to a Script Machine or State Machine on a GameObject. For more information about graphs, see Graphs. For more information about Script Machines and State Machines, see Script Machines and State Machines. Variables Variables act as a container for a piece of information that might change as your application runs. For more information, see Variables. Object types Variables, data, and objects in Visual Scripting all have a specific type. For more information, see Object types."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-capture-player-input-add-component.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-capture-player-input-add-component.html",
    "title": "Add and configure a Player Input component | ModularUIPack",
    "summary": "Add and configure a Player Input component To use the Input System package with Visual Scripting, add a Player Input component to the same GameObject as the Script Graph and create an Input Actions asset. You must add the Player Input component and create the Input Actions asset before you create the Script Graph. Note If the Input System package isn't installed in your project, follow the Input System documentation's Installation guide to install the package. Go to Window > Package Manager to check your installed packages. To add a Player Input component to a GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject that you want to move with the Script Graph. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. Select Add Component. The Components menu opens. In the Components menu, do one of the following: Go to Input. In the Search bar, enter Player Input. Select the Player Input component to add it to the GameObject. Add an Input Actions asset to the Player Input component. Do one of the following: Create a new Input Actions asset. Use an existing Input Actions asset. Create a new Input Actions asset Select Create Actions. Choose a location in your project to save the Input Actions asset. Select Save. Use an existing Input Actions asset Do one of the following: Click the Actions field's object picker (circle icon) and in the SelectInputActionAsset window, select the asset. Click and drag a file from your Project window and drop it into the Actions field. Next steps To configure the available options on a Player Input component, see GameObject components for input in the Input System package documentation. To configure an Input Actions asset, see Input Action Assets in the Input System package documentation. To create a simple Script Graph to capture input with Visual Scripting, see Capture input with the Input System package. Additional resources Capture user input in an application Capture input with the Input System package Input event nodes"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-capture-player-input.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-capture-player-input.html",
    "title": "Capture user input in an application | ModularUIPack",
    "summary": "Capture user input in an application You can capture input from a user's input device to make your application interactive. Visual Scripting can use either the Input Manager or the Input System package to capture input data in a Script Graph. Use the Input System package The Input System package captures input in Unity applications. It uses any input device and replaces Unity's Input Manager. To install the Input System package, see the Installation guide in the Input System package documentation. To check if the Input System package is installed, go to Window > Package Manager. For more information on the Package Manager and managing packages in projects, see the Packages section in the Unity User Manual. Input System package prerequisites To use the Input System package in a project, do the following: Install the package. For more information, see the Packages section in the User Manual. Regenerate your Node Library to include the Input System package nodes. For more information, Configure project settings. In your Player Project Settings, set Active Input Handling to Input System Package (New) or Both. For more information on this setting, see Standalone Player settings in the User Manual. Create an Input System settings asset. Go to Edit > Project Settings and select Input System Package, then select Create Settings Asset. For more information on the available input settings, see Input Settings in the Input System package documentation. Create a GameObject with a PlayerInput component and an Input Actions asset. For more information, see Add and configure a PlayerInput component. After you've configured your project, create a graph to Capture input with the Input System package. Use the Input Manager The Input Manager is Unity's built-in system for input. Change the Input Manager's settings to change how a project receives input. Go to Edit > Project Settings and select Input Manager. For more information on the available settings, see the Input Manager documentation in the User Manual. Input Manager prerequisites To use the Input Manager in a project, in your Player Project Settings, set Active Input Handling to Input Manager (Old) or Both. For more information on this setting, see Standalone Player settings in the User Manual. After you’ve configured your Player Project Settings, create a graph to Capture input with the Input Manager. Additional resources Add and configure a Player Input component Capture input with the Input System package Capture input with the Input Manager Input event nodes"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-capturing-player-inputs-new.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-capturing-player-inputs-new.html",
    "title": "Capture input with the Input System package | ModularUIPack",
    "summary": "Capture input with the Input System package Important If you don't complete the prerequisite configuration for your project, you can't use the Input System package with Visual Scripting. For more information, see Input System package prerequisites. To use the Input System package with Visual Scripting to capture input in your project: Open or create a Script Graph attached to the GameObject that you want your users to move. Right-click anywhere in the Graph Editor to open the fuzzy finder. Go to Events > Input or search for On Input System Event. Select an Input System Event node. In this example, select the On Input System Event Vector 2 node to add it to the graph. Set the On Input System Event Vector 2 node's Input Action Change Type control to On Hold: In the Input Action list on the On Input System Event Vector 2 node, select an Input Action to trigger the node. In this example, select Move. Note By default, Visual Scripting displays all Input Actions from the Input Action asset attached to your current GameObject's Player Input component. Right-click anywhere in the Graph Editor to open the fuzzy finder. Tip If a context menu appears when you right-click, select Add Node to open the fuzzy finder. Go to Codebase > Unity Engine > Vector 3 or search for Vector 3 Get X. Select Get X to add the Vector 3 Get X node to the graph. Right-click anywhere in the Graph Editor to open the fuzzy finder. Go to Codebase > Unity Engine > Vector 3 or search for Vector 3 Get Z. Select Get Z to add the Vector 3 Get Z node to the graph. Select the Vector 2 Value output port on the On Input System Event Vector 2 node. Make a connection to the Target input port on the Vector 3 Get X node: Select the Vector 2 Value output port. Make a connection to the Target port on the Vector 3 Get Z node. Right-click anywhere in the Graph Editor to open the fuzzy finder. Go to Codebase > Unity Engine > Transform or search for Translate. Select Transform: Translate (X, Y, Z) to add the Translate node to the graph. Select the Value: Float output port on the Vector 3 Get X node. Make a connection to the X float input port on the Translate node. Select the Value: Float output port on the Vector 3 Get X node. Make a connection to the Z float input port on the Translate node. The finished graph looks similar to the following image: To enter Play mode, select Play from the Unity Editor's Toolbar. While in the Game view, press a key defined under the Input Actions asset for Move in the Player Action Map. The GameObject moves along the X or Z axis in the Game view, based on the key pressed and the Input Actions asset. For more information on how to define Input Actions, see Input Action Assets in the Input System package documentation. Additional resources Capture user input in an application Add and configure a Player Input component On Input System Event Button node On Input System Event Float node On Input System Event Vector 2 node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-capturing-player-inputs-old.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-capturing-player-inputs-old.html",
    "title": "Capture input with the Input Manager | ModularUIPack",
    "summary": "Capture input with the Input Manager Note You must configure your Project Settings to use the Input Manager with Visual Scripting. For more information, see Input Manager prerequisites. To create a basic Script Graph that uses the Input Manager to capture input: Open or create a Script Graph attached to the GameObject that you want your users to move. If there isn't an On Update or similar Event node in your graph: [!include[open-fuzzy-finder](./snippets/vs-open-fuzzy-finder.md)] Go to Events > Lifecycle, or enter On Update in the search field. Select the On Update Event node to add it to the graph. [!include[open-fuzzy-finder](./snippets/vs-open-fuzzy-finder.md)] TIP If you right-click and the context menu appears, select Add Node to open the fuzzy finder. Go to Codebase > Unity Engine > Input, or enter Get Axis in the search field. Select Get Axis (Axis Name) to add the Get Axis node to the graph. Repeat Steps 3 through 5 to create a second Get Axis (Axis Name) node. On the first Get Axis node, in the Axis Name input field, enter Horizontal. On the second Get Axis node, in the Axis Name input field, enter Vertical. NOTE If an Axis Name doesn't match the name in the Input Manager's Project Settings, Visual Scripting displays an error in the Graph Inspector. When you enter Play mode, the Unity Editor also displays an error in the Console window. [!include[open-fuzzy-finder](./snippets/vs-open-fuzzy-finder.md)] Go to Codebase > Unity Engine > Transform or search for Translate. Select Translate (X, Y, Z) to add a Translate node to the graph. Select the Result float output port on the Horizontal Get Axis node. Make a connection to the X input port on the Translate node. Select the Result float output port on the Vertical Get Axis node. Make a connection to the Z input port on the Translate node. The finished graph looks similar to the following image: To enter Play mode, select Play from the Unity Editor's Toolbar. While in the Game view, press a key mapped as a Negative Button or Positive Button from the Input Manager's virtual axes. The GameObject moves along the X or Z axis in the Game view, based on the key pressed and the Input Manager Project Settings. Additional resources Capture user input in an application Capture input with the Input System package On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up As Button node On Mouse Up node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-configuration.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-configuration.html",
    "title": "Configure project settings | ModularUIPack",
    "summary": "Configure project settings Note To use Visual Scripting in a project for the first time, you must initialize it from the Editor's Project Settings window. Use the Project Settings window with Visual Scripting to manage backups, node assemblies, type options, and regenerate your Node Library. To open your Project Settings: Go to Edit > Project Settings. Select Visual Scripting. You can find the following configuration options in your Visual Scripting Project Settings. To use Visual Scripting in a project for the first time, you must regenerate your Node Library, as described in the table below. Option Description Initialize Visual Scripting You must select Initialize Visual Scripting the first time you use Visual Scripting in a project. Initialize Visual Scripting to parse all assemblies and types for the Visual Scripting Node Library. After you initialize Visual Scripting, regenerate your Node Library. See Regenerate Nodes, below. Type Options Use the Type Options list to add or remove types for your node inputs and outputs. After you add or remove a type, you must regenerate your Node Library. See Regenerate Nodes, below. For more information on how to add or remove types, see Add or remove types. Node Library Use the Node Library list to add or remove nodes and their assemblies in Visual Scripting. You must add any new types to your Type Options after you add new nodes to Visual Scripting. You must also regenerate your Node Library after you add or remove nodes. See Regenerate Nodes, below. For more information on how to add or remove nodes from your Node Library, see Add or remove available nodes. Regenerate Nodes Regenerate your Node Library to make all nodes available for use in a project. To use Visual Scripting for the first time in a project, you must Initialize Visual Scripting and regenerate your Node Library. To regenerate your Node Library: Select Regenerate Nodes. Select OK. NOTE You must regenerate your Node Library in the following circumstances: Before you use Visual Scripting in your project for the first time. After you add or remove nodes from your Node Library. After you add or remove types from your Type Options. After you change the inputs or outputs for a Custom C# node. Generate To generate required property provider scripts for custom drawers, select Generate. These scripts are necessary for Unity to use custom drawers for custom classes and script variables inside Visual Scripting. To assign a default value to a custom variable type through the Unity Editor’s Inspector, you must either have access to the source code for the class, or provide a custom PropertyDrawer. For more information, see Custom types. Create Backup To create a new backup of your Visual Scripting graphs and settings, select Create Backup. For more information about backups, see Create or restore a backup. Restore Backup To open the folder where Visual Scripting stores your backups, select Restore Backup. For more information about backups, see Create or restore a backup. Fix Missing Scripts To correct any issues that might occur after migration from the Unity Asset Store version of Visual Scripting to the package version, select Fix Missing Scripts. This resolves any missing references to Visual Scripting Script Graphs and State Graphs in Script Machine or State Machine components. Note If your settings don't apply after you make a change, report a bug through the Unity Editor."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-control-schemes.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-control-schemes.html",
    "title": "Choose a control scheme | ModularUIPack",
    "summary": "Choose a control scheme You can choose from two different control schemes in Visual Scripting. Each control scheme changes how you can interact with your graphs in the Graph Editor: Action Default Control Scheme Alternate Control Scheme Pan Middle-click and drag Middle-click and drag Pan Vertically Scroll N/A Zoom In/Zoom Out Ctrl+Scroll (macOS: Cmd+Scroll) Scroll Frame Selected Home Home Frame All Home Home Create Selection Click and drag Click and drag Select All Ctrl+A (macOS: Cmd+A) Ctrl+A (macOS: Cmd+A) Open Context Menu Right-click Ctrl+click (macOS) Ctrl+E (macOS: Cmd+E) Right-click Ctrl + click (MacOS) Ctrl+E (macOS: Cmd+E) Create Node Group Ctrl+click and drag (macOS: Cmd+click and drag) Ctrl+click and drag (macOS: Cmd+click and drag) Copy Selected Ctrl+C (macOS: Cmd+C) Ctrl+C (macOS: Cmd+C) Paste Selection Ctrl+V (macOS: Cmd+V) Ctrl+V (macOS: Cmd+V) Cut Selected Ctrl+X (macOS: Cmd+X) Ctrl+X (macOS: Cmd+X) Duplicate Selected Ctrl+D (macOS: Cmd+D) Ctrl+D (macOS: Cmd+D) Delete Selected Del Del Maximize Graph Window Shift+Space Double-click Shift+Space Double-click Move Group Without Child Nodes Alt+click and drag the group's Title bar Ctrl+click and drag the group's Title bar (macOS: Cmd+click and drag) Move Node on One Axis Shift+click and drag vertically or horizontally Shift+click and drag vertically or horizontally Pan Pan to move the viewable area in the Graph Editor to any part of your graph. Pan Vertically With the Default control scheme, pan the view in the Graph Editor vertically with the scroll wheel on your mouse. Zoom In/Zoom Out Change the zoom level in the Graph window to control how much of your graph is visible in the Graph Editor. You can also set your zoom level with the toolbar in the Graph window. For more information, see The interface. Frame Selected After you select a node or another item in your graph, press Home to center your selected item in the Graph Editor. Frame All With no nodes or items selected, press Home to center your entire graph in the Graph Editor. Your zoom level automatically adjusts to accommodate the size of your graph. Create Selection Click and drag to create a selection box around any nodes or items in your graph that you want to select. When you have multiple items selected, click and drag a single item to move the entire selection. Select All Press Ctrl+A (macOS: Cmd+A) to select all items in your current graph. Open Context Menu You can open the context menu to perform certain actions on State Graphs or manipulate a selection in a Script Graph. You can create new states and add transitions. Create Node Group Create a group of nodes to keep related sections of your graph together, or move multiple nodes at a time. For more information on node groups, see Create node groups. Copy Selected Copy your current selection to move it to another graph, or another location on your current graph. Paste Selection Paste the contents of a copied or cut selection into your graph. Cut Selected Cut your current selection to move it to another graph, or another location on your current graph. Duplicate Selected Duplicate a selection to instantly create a copy of your current selection to use elsewhere in your current graph. Delete Selected Delete your current selection to remove it from your graph. Maximize Graph Window After you dock the Graph window in the Unity Editor, press Shift+Space or double-click maximize your Graph window and take up the entire Editor window. Move Group Without Child Nodes You can move a group in your graph without any of the nodes contained inside that group. Move Node on One Axis Shift+click to move a node in only one direction at a time in the Graph Editor. The node can move either vertically or horizontally."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-control.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-control.html",
    "title": "Control nodes | ModularUIPack",
    "summary": "Control nodes Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Control nodes branch, loop and merge the flow. Branching Branching nodes split the control flow based on a value. If The common if node uses a boolean condition. Consider them as an \"if the condition is true, do something, otherwise, do something else.\" Switch Branch on the value of an enum, a string, or an integer. These nodes are called Switch nodes. To switch on an enum, decide on the type of the enum. The branch output ports appears. To switch on a string or number, create each branch option in the graph inspector. The node is updated with each output port. For strings, optionally choose to ignore the case of the selector. Note A Default port is always added. It is the path that the control flow should take if the input selector does not correspond to any other option. Select Select nodes are the opposite of switch nodes. You can select a single value from a set of options based on a selector. For example, a Select On Integer node that chooses a color based on a player number. Note In the above example predictive debugging warns of a crash if playerNo is not within 1, 2, 3, or 4, because the Default port is not connected. Looping Loops repeats logic for a certain number of iterations before moving on. The logic to be repeated is called the body of the loop. After the loop is over, the exit port is called. Note The body of every loop is called synchronously, not over the course of multiple frames. Co-routine-like behaviours are achieved by listening to the update event manually. While Loop The while loop is the simplest form of loop. It repeats its body while its condition remains true. Only when the condition becomes false does the loop terminate. For example, the following graph generates a new random name until the result isn't contained in the names application variable. Warning Do not create an infinite loop. If the condition is always true, the editor hangs. As loop bodies are synchronous, not parallel, there are few uses for while loops in visual scripting. For Each Loop For Each iterates over every element of a collection. It outputs the current index and item that is being looped over. For example, the following graph outputs four messages to the console: I love my cat I love my dog I love my bird I love my fish To access the key and value from dictionaries in the loop, check the Dictionary box. For Loop For is a numeric loop and requires three integers: a start index, an end index, and a step. The loop starts at the first index, then increments towards the last index via increments of the step. It outputs the current index. For example, this graph counts to ten by skipping odd numbers because of its step. In other words, its output is 0, 2, 4, 6, then 8. The For loop can also be very useful when combined with the Get List Item and Count Items nodes. For example, the following graph is very similar to the last graph as the output to the console is \"I like {animal}s\". Instead of using the For Each node that outputs each item, the graph outputs each item manually by its index in the list. This graph outputs the following messages: I like cats I like dogs I like birds I like horses Break Loop A loop can finish early by using the Break Loop node. As soon as this node is entered, the exit port of the loop is called, no matter how many more iterations remain. For example, even though this for loop is supposed to count to 10, it stops at 5 because of the break. Its output is 0, 1, 2, 3, then 4. Exception Handling Try Catch The Try Catch node handles Exceptions that occur. It prevents your game from crashing in case you suspect some code might fail. Anything that gets executed in the Try branch is considered \"safe\": the script continues from the Catch branch instead if it fails. The Exception port captures information about the failure when that happens. A common way of handling this is to log a warning with the exception message. Note By default, this node catches all exceptions. Be specific in your handling by changing the exception type in the dropdown. The Finally branch is optional. It is always called after Try or Catch, regardless of whether the operation succeeded or not. It is usually used to dispose or destroy any resources that must be freed. This port can be disconnected if there is no need to destroy any resources. Throw The Throw node allows you to raise your own exceptions that stop the flow. These are caught with Try Catch. It is good practice to \"fail early\" by throwing as soon as something unexpected happens. It helps catch bugs early in the chain, instead of letting them trickle down and have unexpected side effects that are hard to debug. For example, to ensure damage is positive before applying it: If the Custom checkbox is selected, you can pass a custom Exception object that contains more data than a simple message. Most often, this is not required. By default, the thrown exception is of type System.Exception. Toggles Toggle nodes are similar in principle to light-switches: they can be turned on and off to impact either the script or values. Think of them as \"gates\" that can be opened and closed. Toggle Flow The Toggle Flow node gates the flow of control. When on, the flow passes through; when off, the flow does not. There are many inputs and outputs that allow fine grained control over the logic. In the previous example, Toggle is used to show how the same event (a keypress) turns the toggle on and off. Instead you can use On and Off with two different events to get the same results. On the output side, the Is On boolean port indicates the toggle status, that is turned on or off. The control outputs are triggered according to the table below: Port Triggered When On Flow enters the toggle via the unmarked input while it is on. Off Flow enters the toggle via the unmarked input while it is off. Turned On The toggle gets turned on, either via the On or Toggle inputs. Turned Off The toggle gets turned off, either via the Off or Toggle inputs. Toggle Value The Toggle Value node selects between two different input values depending on whether it is on or off. Its ports work exactly like the Toggle Flow node. Another way of implementing the same logic as the previous example: clicking Space toggles the object to move up. This time a value of 1 or 0 is provided as the vertical velocity. Note Turn on relations in the toolbar as a means to visualize the flow between the toggle ports. Once The Once node executes different logic the first time it is traversed from any subsequent times. It can be reset by entering the Reset port. Cache The Cache node saves the result of an expensive operating and reuses it instead of fetching it again each time you need it. For example, using this graph, the formula is calculated twice: By using the Cache node, the result is saved and calculated only once, optimizing performance. Note It is important to note that caching only lasts within the scope of the current flow. The value of the cache is not shared or available from another event."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-drawer.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-drawer.html",
    "title": "Create a custom PropertyDrawer for a custom type | ModularUIPack",
    "summary": "Create a custom PropertyDrawer for a custom type If you want to use a custom type from a custom class in Visual Scripting, and you don't have access to its source code, you must create a custom PropertyDrawer. You can't assign a value to a custom type inside the Editor or initialize the value for a variable with a custom type if it doesn't have a PropertyDrawer. Note The class for your custom type must have the [Serializable] tag in its source code to create a custom PropertyDrawer. To create a custom PropertyDrawer: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Go to Create > C# Script. Enter a name, such as CounterDrawer, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. Remove the Start and Update functions and their comments from the script file. Above the line that defines your new public class, add a [CustomPropertyDrawer] attribute. In the parameters for the [CustomPropertyDrawer] attribute, specify a type of parameter with the name of the type you want to assign to this PropertyDrawer, exactly as it appears in Unity. Change the MonoBehaviour class at the end of your public class definition to PropertyDrawer. Note After you create a custom PropertyDrawer, you must generate the required property provider scripts from your Visual Scripting Project Settings. For more information, see Configure project settings. The following is an example of a finished PropertyDrawer script: using UnityEditor; using UnityEngine; [CustomPropertyDrawer(type of(<Counter>))] public class CounterDrawer : PropertyDrawer { // Draw the property inside the given rect public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) { // Using BeginProperty / EndProperty on the parent property means that // prefab override logic works on the entire property. EditorGUI.BeginProperty(position, label, property); // Draw label position = EditorGUI.PrefixLabel(position, GUIUtility.GetControlID(FocusType.Passive), label); // Don't indent child fields var indent = EditorGUI.indentLevel; EditorGUI.indentLevel = 0; // Calculate rects var amountRect = new Rect(position.x, position.y, 30, position.height); var unitRect = new Rect(position.x + 35, position.y, 50, position.height); var nameRect = new Rect(position.x + 90, position.y, position.width - 90, position.height); // Draw fields - passs GUIContent.none to each so they are drawn without labels EditorGUI.PropertyField(amountRect, property.FindPropertyRelative(\"amount\"), GUIContent.none); EditorGUI.PropertyField(unitRect, property.FindPropertyRelative(\"unit\"), GUIContent.none); EditorGUI.PropertyField(nameRect, property.FindPropertyRelative(\"name\"), GUIContent.none); // Set indent back to what it was EditorGUI.indentLevel = indent; EditorGUI.EndProperty(); } } To create the rest of your custom PropertyDrawer, you must decide what fields you must display, and how you want them to display in the Editor's interface. For example, you might want to use the UIElements module to create your PropertyDrawer, or decide to use Unity's IMGUI module. For more information on how to create and design a custom PropertyDrawer, see the PropertyDrawer class in the main Unity Scripting API and its related methods."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-add-docs.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-add-docs.html",
    "title": "Add documentation to a Custom C# node | ModularUIPack",
    "summary": "Add documentation to a Custom C# node You can also add Graph Inspector documentation to a Custom C# node. Visual Scripting displays the documentation in the Graph Inspector when you select a node in a Script Graph. The documentation isn't required to use the node, but can help your users understand the purpose and usage of a node. To add documentation to a node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Note If you already have an Editor folder in your project, you can skip Steps 2-3. Right-click your Assets folder or select Add (+), then select Folder. Name the folder Editor. Do one of the following: Right-click your Editor folder in the Project window's folder list. Right-click anywhere in the Project window's preview pane with your Editor folder selected. Go to Create > C# Script. Enter a name, such as MyNodeDescriptor for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into the C# script: using System; using Unity.VisualScripting; using UnityEngine; [Descriptor(typeof(MyNode))] public class MyNodeDescriptor : UnitDescriptor<MyNode> { public MyNodeDescriptor(MyNode unit) : base(unit) {} protected override void DefinedPort(IUnitPort port, UnitPortDescription description) { base.DefinedPort(port, description); switch (port.key) { case \"inputTrigger\": description.summary = \"Trigger the concatenation of two strings, myValueA and myValueB, and return the result string on the Result port.\"; break; case \"myValueA\": description.summary = \"First string value.\"; break; case \"myValueB\": description.summary = \"Second string value.\"; break; case \"outputTrigger\": description.summary = \"Execute the next action in the Script Graph after concatenating myValueA and myValueB.\"; break; case \"result\": description.summary = \"The result string obtained from concatenating myValueA and myValueB.\"; break; } } } You can modify the script to suit the specifics of your own node. Save your script file. Return to the Unity Editor. Do one of the following: Open a Script Graph where you've already added your node.. Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph. Select the node and open the Graph Inspector to view your documentation. Next steps After you add documentation to a node, you can choose to further customize the node with node class and port attributes."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-add-logic.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-add-logic.html",
    "title": "Add logic to a Custom C# node | ModularUIPack",
    "summary": "Add logic to a Custom C# node Note To add logic to a node, you must create a Custom C# node and add ports. The examples below are based on the previous examples for a Custom C# node. For more information, see Create a new simple Custom C# node. After you create a Custom C# node and add ports, you can add logic to a node. Add logic to tell Visual Scripting what the node does with any data it receives from its ports. To add logic to a node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Double-click the C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, add any logic for the node within the lambda expression that handles the assignment of the inputTrigger. For example, you can take the values of the two string input ports added in the previous example and concatenate them, as shown in the following code: using System; using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { [DoNotSerialize] public ControlInput inputTrigger; [DoNotSerialize] public ControlOutput outputTrigger; [DoNotSerialize] public ValueInput myValueA; [DoNotSerialize] public ValueInput myValueB; [DoNotSerialize] public ValueOutput result; private string resultValue; protected override void Definition() { //The lambda to execute our node action when the inputTrigger port is triggered. inputTrigger = ControlInput(\"inputTrigger\", (flow) => { //Making the resultValue equal to the input value from myValueA concatenating it with myValueB. resultValue = flow.GetValue<string>(myValueA) + flow.GetValue<string>(myValueB) + \"!!!\"; return outputTrigger; }); outputTrigger = ControlOutput(\"outputTrigger\"); myValueA = ValueInput<string>(\"myValueA\", \"Hello \"); myValueB = ValueInput<string>(\"myValueB\", String.Empty); result = ValueOutput<string>(\"result\", (flow) => resultValue); } } Save your script file. Return to the Unity Editor. Do one of the following: Open a Script Graph where you've already added your node.. Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph. Next steps After you add logic to a node, add relations to ensure that the node displays correctly in Visual Scripting."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-add-ports.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-add-ports.html",
    "title": "Add ports to a Custom C# node | ModularUIPack",
    "summary": "Add ports to a Custom C# node Note To add ports to your node, you must create the C# file for the node. The examples below are based on the previous examples for a Custom C# node. For more information, see Create a new simple Custom C# node. After you create a Custom C# node, add ports to allow the node to send and receive data or trigger other nodes in a Script Graph. To add ports to a node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Double-click the C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. Add control ports In your external editor, under the class definition for the node, add two public variables: one with a ControlInput type and one with a ControlOutput type. In the Definition method for the node, use the variables to define the control ports, as shown below: using System; using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { [DoNotSerialize] // No need to serialize ports. public ControlInput inputTrigger; //Adding the ControlInput port variable [DoNotSerialize] // No need to serialize ports. public ControlOutput outputTrigger;//Adding the ControlOutput port variable. protected override void Definition() { //Making the ControlInput port visible, setting its key and running the anonymous action method to pass the flow to the outputTrigger port. inputTrigger = ControlInput(\"inputTrigger\", (flow) => { return outputTrigger; }); //Making the ControlOutput port visible and setting its key. outputTrigger = ControlOutput(\"outputTrigger\"); } } Save your script file. Return to the Unity Editor. Do one of the following: Open a Script Graph where you've already added your node.. Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph. If you used the previous code sample, Visual Scripting adds input and output control ports to the node. Add value ports In your external editor, under the class definition for the node, add any number of variables with either a Generic or specific type value: Generic: The port can receive or output any data type. Corresponds to Unity's Object type. Specific Type Value: The port can only receive or output a specific data type. For example, string, float, or integer. For more information on types in Visual Scripting, see Object types. In the Definition method for the node, use the variables to define the value ports. In the example below, there are two input ports with a type value of string, and one string output port: using System; using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { [DoNotSerialize] public ControlInput inputTrigger; [DoNotSerialize] public ControlOutput outputTrigger; [DoNotSerialize] // No need to serialize ports public ValueInput myValueA; // Adding the ValueInput variable for myValueA [DoNotSerialize] // No need to serialize ports public ValueInput myValueB; // Adding the ValueInput variable for myValueB [DoNotSerialize] // No need to serialize ports public ValueOutput result; // Adding the ValueOutput variable for result private string resultValue; // Adding the string variable for the processed result value protected override void Definition() { inputTrigger = ControlInput(\"inputTrigger\", (flow) => { return outputTrigger; }); outputTrigger = ControlOutput(\"outputTrigger\"); //Making the myValueA input value port visible, setting the port label name to myValueA and setting its default value to Hello. myValueA = ValueInput<string>(\"myValueA\", \"Hello \"); //Making the myValueB input value port visible, setting the port label name to myValueB and setting its default value to an empty string. myValueB = ValueInput<string>(\"myValueB\", string.Empty); //Making the result output value port visible, setting the port label name to result and setting its default value to the resultValue variable. result = ValueOutput<string>(\"result\", (flow) => { return resultValue; }); } } Save your script file. Return to the Unity Editor. Do one of the following: Open a Script Graph where you've already added your node.. Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph. If you used the previous code sample, Visual Scripting adds two input ports, My Value A and My Value B, and one output port, Result to the node. Next steps After you add ports to a node, add logic to tell the node what to do with the data it receives."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-add-relations.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-add-relations.html",
    "title": "Add relations to a Custom C# node | ModularUIPack",
    "summary": "Add relations to a Custom C# node Note To add logic to a node, you must create a Custom C# node and add ports. The examples below are based on the previous examples for a Custom C# node. For more information, see Create a new simple Custom C# node. After you add ports and add logic to a node, relations help Visual Scripting correctly display a Custom C# node in a Script Graph. To add relations to a node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Double-click the C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, add relations in the format $RelationType$($Port1$, $Port2$), where $RelationType$ is the relation type you want to assign between the ports you specify as $Port1$ or $Port2$. For example, to assign relations to the previous example node: using System; using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { [DoNotSerialize] public ControlInput inputTrigger; [DoNotSerialize] public ControlOutput outputTrigger; [DoNotSerialize] public ValueInput myValueA; [DoNotSerialize] public ValueInput myValueB; [DoNotSerialize] public ValueOutput result; private string resultValue; protected override void Definition() { inputTrigger = ControlInput(\"inputTrigger\", (flow) => { resultValue = flow.GetValue<string>(myValueA) + flow.GetValue<string>(myValueB) + \"!!!\"; return outputTrigger; }); outputTrigger = ControlOutput(\"outputTrigger\"); myValueA = ValueInput<string>(\"myValueA\", \"Hello \"); myValueB = ValueInput<string>(\"myValueB\", String.Empty); result = ValueOutput<string>(\"result\", (flow) => resultValue); Requirement(myValueA, inputTrigger); //Specifies that we need the myValueA value to be set before the node can run. Requirement(myValueB, inputTrigger); //Specifies that we need the myValueB value to be set before the node can run. Succession(inputTrigger, outputTrigger); //Specifies that the input trigger port's input exits at the output trigger port. Not setting your succession also dims connected nodes, but the execution still completes. Assignment(inputTrigger,result);//Specifies that data is written to the result string output when the inputTrigger is triggered. } } For more information on relation types, see Custom C# nodes. Save your script file. Return to the Unity Editor. Do one of the following: Open a Script Graph where you've already added your node.. Right-click anywhere in the Graph Editor to open the fuzzy finder. Then, select your node in the fuzzy finder to add it to your graph. In the Graph toolbar, enable Relations. Visual Scripting displays the relations you assigned to the Custom C# node. If you used the previous code sample, the node's relations might look like the following image: Next steps After you add relations to a node, you can choose to add documentation or customize the node with attributes."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-attributes-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-attributes-reference.html",
    "title": "Custom C# node attributes reference | ModularUIPack",
    "summary": "Custom C# node attributes reference You can add attributes to a node class and port variable definitions to customize the look of a Custom C# node. Node class attributes You can customize the titles that appear on a node, where it appears in the fuzzy finder, and its icon. Node class attributes must be placed above the node class definition in a node's C# script. Visual Scripting has 5 node class attributes: UnitTitle UnitShortTitle UnitSubtitle UnitCategory TypeIcon Usually, Visual Scripting automatically applies any changes you make to a node's class attributes after you save the C# file. UnitTitle You can specify a [UnitTitle] to display a different title than the node's class name on the node when it appears in a Script Graph, and when you view details about the node in the Graph Inspector: using System; using Unity.VisualScripting; using UnityEngine; [UnitTitle(\"My New Title\")] public class MyNodeAfter : Unit { ... } } The [UnitTitle] attribute overrides the node's class name. UnitShortTitle You can specify a [UnitShortTitle] to display a different title on the node when it appears in a Script Graph: using System; using Unity.VisualScripting; using UnityEngine; [UnitShortTitle(\"Short Title\")] [UnitTitle(\"My New Title\")] public class MyNodeAfter : Unit { ... } } The [UnitShortTitle] only appears on the node in a Script Graph. The [UnitTitle] or node class name still displays in the Graph Inspector. UnitSubtitle You can add a [UnitSubtitle] to add a line of text below the [UnitTitle], [UnitShortTitle], or node class name when a node appears in a Script Graph: using System; using Unity.VisualScripting; using UnityEngine; [UnitSubtitle(\"It's a subtitle!\")] [UnitShortTitle(\"Short Title\")] [UnitTitle(\"My New Title\")] public class MyNodeAfter : Unit { ... } } The [UnitSubtitle] doesn't appear in the Graph Inspector. UnitCategory You can specify a [UnitCategory] to tell Visual Scripting where to place the node in the fuzzy finder: using System; using Unity.VisualScripting; using UnityEngine; [UnitCategory(\"FirstLevel/SecondLevel\")] public class MyNodeAfter : Unit { ... } } Replace FirstLevel with the name of the top-level category in the fuzzy finder where you want Visual Scripting to place the node. Replace SecondLevel with the name of a subcategory. Visual Scripting creates the categories if they don't already exist in the fuzzy finder. Note You must regenerate your Node Library for changes made to a node's [UnitCategory] to take effect. TypeIcon You can use the [TypeIcon] attribute to change the icon that appears on a node when it appears in a Script Graph: using System; using Unity.VisualScripting; using UnityEngine; [TypeIcon(typeof(ToggleValue))] public class MyNodeAfter : Unit { ... } } The icon for the node changes in the Graph Inspector, too. Note You can't point to your own custom icons from this attribute. You must use an icon from the Visual Scripting icons library, which includes all Unity types. Port attributes Custom nodes have one mandatory port attribute and one optional port attribute: DoNotSerialize and PortLabelHidden, respectively. Port attributes must be placed above your variable declarations for each port variable in the node. Visual Scripting automatically applies any changes you make to a node's port attributes after you save the script file. DoNotSerialize [DoNotSerialize] is a mandatory attribute for all ports on custom nodes. Add this attribute to avoid serialization of data that shouldn't be serialized: using System; using Unity.VisualScripting; using UnityEngine; [UnitShortTitle(\"Short Title\")] [UnitTitle(\"My New Title\")] [UnitCategory(\"My Nodes\")] [UnitSubtitle(\"It's a subtitle!\")] [TypeIcon(typeof(Color))] public class MyNodeAfter : Unit { [DoNotSerialize] public ControlInput inputTrigger; [DoNotSerialize] public ControlOutput outputTrigger; [DoNotSerialize] public ValueInput myValueA; [DoNotSerialize] public ValueInput myValueB; [DoNotSerialize] public ValueOutput result; private string resultValue; protected override void Definition() { ... } } PortLabelHidden You can add the [PortLabelHidden] attribute to hide the name label for any port on a node when it appears in a Script Graph: using System; using Unity.VisualScripting; using UnityEngine; [UnitShortTitle(\"Short Title\")] [UnitTitle(\"My New Title\")] [UnitCategory(\"My Nodes\")] [UnitSubtitle(\"It's a subtitle!\")] [TypeIcon(typeof(Color))] public class MyNodeAfter : Unit { [DoNotSerialize] [PortLabelHidden] public ControlInput inputTrigger; [DoNotSerialize] [PortLabelHidden] public ControlOutput outputTrigger; [DoNotSerialize] public ValueInput myValueA; [DoNotSerialize] public ValueInput myValueB; [DoNotSerialize] public ValueOutput result; private string resultValue; protected override void Definition() { ... } } The port's label is still visible in the Graph Inspector. Use the same name in a port's variable definition and the port's key in the Definition method for the node's class, as shown: using System; using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { ... [DoNotSerialize, PortLabelHidden] public ValueInput myValueA; [DoNotSerialize, PortLabelHidden] public ValueInput myValueB; ... protected override void Definition() { ... myValueA = ValueInput<string>(\"myValueA\", \"Hello \"); myValueB = ValueInput<string>(\"myValueB\", String.Empty); ... } }"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-empty.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node-empty.html",
    "title": "Create a new simple Custom C# node | ModularUIPack",
    "summary": "Create a new simple Custom C# node You can create a Custom C# node to run your own custom logic in a Script Graph. For more information on Custom C# nodes, see Custom C# nodes. To create a new simple Custom C# node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list, or anywhere in the Project window's preview pane, and go to Create > C# Script. Enter a name, such as MyNode, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into your C# script: using Unity.VisualScripting; using UnityEngine; public class MyNode : Unit { protected override void Definition() //The method to set what our node will be doing. { } } Save your script file. Return to the Unity Editor. Follow the process described in Configure project settings to regenerate your Node Library. Note If you don't regenerate your Node Library, the node won't appear in Visual Scripting's fuzzy finder. Open a Script Graph where you want to add your new node. Right-click anywhere in the Graph Editor to open the fuzzy finder. The node appears as My Node at the end of the fuzzy finder list. Select the node to add it to your graph. Next steps After you create the basic start to a node and add it to Visual Scripting's fuzzy finder, add ports so your node can send and receive data."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-custom-node.html",
    "title": "Custom C# nodes | ModularUIPack",
    "summary": "Custom C# nodes You can create your own Custom C# node with a C# script. Use your node in Script Graphs to run your own custom logic, and provide the script file to other users to let them use it in their own Visual Scripting projects. You can create nodes that change the flow of logic in your graph, nodes that manipulate data, or both. You can also create nodes for custom events. To create a Custom C# node, you must: Create a C# script. Add ports. Add logic. Add relations. Create the initial C# script All custom nodes start with a C# file. After you create a C# file, you must regenerate your Node Library through your project settings. This allows Visual Scripting to recognize your Custom C# node and add it to the fuzzy finder for use in your project's graphs. After you regenerate your Node Library the first time, you only need to regenerate your Node Library again if you change the location of a node in the fuzzy finder. You can change the location through the [UnitCategory] attribute. For more information on how to create your initial C# script, see Create a new simple Custom C# node. Add ports Add ports to a node to specify what triggers Visual Scripting to run logic in a node, and decide what data it sends or receives. For more information on ports and nodes, see Nodes. Port types Visual Scripting has four different port types that you can add to a node: ControlInput: Provides a connection to a previous node, which tells Visual Scripting when to start the logic in a node. ControlOutput: Provides a connection to another node, which tells Visual Scripting when to run the logic for the next connected node in a Script Graph. ValueInput: Provides a connection that allows you to pass data into a node for use in its logic. ValueOutput: Provides a connection that allows you to pass data out of a node for use in other nodes. You can add any number of ports to a node. You can also choose what data type the ValueInput or ValueOutput ports send and receive: Generic: The port can receive or output any data type. Corresponds to Unity's Object type. Type Value: The port can only receive or output a specific data type. For example, string, float, or integer. For more information on types in Visual Scripting, see Object types. For more information on how to add ports to your node, see Add ports to your Custom C# node. Add logic Add logic to a node to specify what it does when it runs in a Script Graph. If there isn't any internal logic written for a node, the node can't trigger another node, or modify any of the data it receives from other nodes in a Script Graph. For more information on how to add logic to a node, see Add logic to a Custom C# node. Add relations Relations help define how a node and its Play mode animations appear in Visual Scripting. Without relations, Visual Scripting doesn't know how to animate or display a node in the Graph Editor. Relation types You can add three types of relations to a node to help correctly display its internal flow of logic: Assignment: Assignment relations are usually between a control input port and a data output port. Set an Assignment relation to tell Visual Scripting that a specific port needs to run before the node sends data to a data output port. Succession: Succession relations are usually between a control input port and a control output port. Set a Succession relation to tell Visual Scripting that a control input port exits at a control output port. Requirement: Requirement relations are usually between a control input port and a data port or ports. Set a Requirement relation to let Visual Scripting know that a specific data port or ports must have a value before the node can run any logic. Note If you don't set any Succession relations in a node, and Dim is enabled in the Graph toolbar, Visual Scripting dims your Custom C# node and any of its connected nodes in the Graph Editor during Play mode. For more information on how to add relations to a node, see Add relations to a node. Optional steps and customization After you've added relations, you can choose to add documentation for a node. Visual Scripting displays documentation in the Graph Inspector when a user selects a node in a Script Graph. Add documentation to help other users understand the purpose of each part of a node. You can also choose to customize a node with node attributes. You can add specific node class attributes to customize the entire node, or add port attributes to only customize specific ports. The attribute type determines the location where you must place the attribute in the node's C# file. Node class attributes must be placed above a node class definition, while port attributes must be placed above the variable definition for each port."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph-assign-existing-gameobject.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph-assign-existing-gameobject.html",
    "title": "Create and assign a graph to an existing GameObject | ModularUIPack",
    "summary": "Create and assign a graph to an existing GameObject You can use the empty graph creation flow to create a new graph file and assign it to an existing GameObject in your project. For more information on other ways to create a graph file, see Create a new graph file. Create a Script Graph To create a new Script Graph and assign it to an existing GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject where you want to assign the new graph. Go to Window > Visual Scripting > Visual Scripting Graph. Expand Create new Script Graph. Select on selected game object. Choose a location to save the new graph file. Enter a name for the graph. Select Save. The new graph file automatically opens in a new window. Create a State Graph To create a new State Graph and assign it to an existing GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject where you want to assign the new graph. Go to Window > Visual Scripting > Visual Scripting Graph. Expand Create new State Graph. Select on selected game object. Choose a location to save the new graph file. Enter a name for the graph. Select Save. The new graph file automatically opens in a new window. Next steps After you create a new graph, attach it to a Script Machine or State Machine to use it in your application. For more information, see Attach a graph file to a Script Machine or State Machine."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph-assign-new-gameobject.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph-assign-new-gameobject.html",
    "title": "Create and assign a graph to a new GameObject | ModularUIPack",
    "summary": "Create and assign a graph to a new GameObject You can use the empty graph creation flow to create a new graph file and assign it to a new GameObject. Visual Scripting automatically creates a new GameObject with the required components for the new graph file. For more information on other ways to create a graph file, see Create a new graph file. To create a new graph and assign it to a new GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject where you want to assign the new graph. Go to Window > Visual Scripting > Visual Scripting Graph. Expand Create new Script Graph. Select on new game object. Choose a location to save the new graph file. Enter a name for the graph. Select Save. Note The GameObject you create with this method has the same name as the graph file. After you have named and saved the graph file, the GameObject appears in the Hierarchy. The new graph file automatically opens in a new window. Create a State Graph To create a new State Graph and assign it to a new GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject where you want to assign the new graph. Go to Window > Visual Scripting > Visual Scripting Graph. Expand Create new State Graph. Select on new game object. Choose a location to save the new graph file. Enter a name for the graph. Select Save. Note The GameObject you create with this method has the same name as the graph file. After you have named and saved the graph file, the GameObject appears in the Hierarchy. The new graph file automatically opens in a new window. Next steps After you create your new graph, attach it to a Script Machine or State Machine to use it in your application. For more information, see Attach a graph file to a Script Machine or State Machine."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph-on-machine.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph-on-machine.html",
    "title": "Create a graph on a Script Machine or State Machine | ModularUIPack",
    "summary": "Create a graph on a Script Machine or State Machine You can create a new graph file directly from a Script Machine or State Machine component on a GameObject. For more information on how to create a Script Machine or State Machine, see Attach a graph file to a Script Machine or State Machine. Create a new graph file from a Script Machine or State Machine To create a new graph file from an existing Script Machine or State Machine: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select a GameObject that has a Script Machine or State Machine. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. In the Inspector window, on your Script Machine or State Machine component, set the Source set to Graph. Select New. Enter a name for your new graph file. Choose a location for the file in your project. Select Save. Create a new embedded graph on a Script Machine or State Machine You can create an embedded graph on a Script Machine or State Machine component instead of an external graph file: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select a GameObject that has a Script Machine or State Machine. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. In the Inspector window, on your Script Machine or State Machine component, set the Source to Embed. (Optional) In the (Title) field, enter a descriptive title for the embedded graph. (Optional) In the (Summary) field, enter a brief summary of what the embedded graph does. (Optional) To open the new embedded graph and edit, select Edit Graph. Note Unity recommends you create a graph file rather than an embedded graph. In some situations, an embedded graph works best. For more information on how to choose the correct graph type, see Source types for Script Machines and State Machines. Next steps After you attach a graph to a Script Machine or State Machine, you can open the graph and edit. For more information, see Open a graph file."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph-project-window.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph-project-window.html",
    "title": "Create a new blank graph with the Project window | ModularUIPack",
    "summary": "Create a new blank graph with the Project window You can create a new blank graph through the Project window in the Unity Editor. Your graph contains no starter nodes, and isn't connected to any existing components in your project. For more information on other ways to create a new graph file, see Create a new graph file. To create a new blank graph: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list, or anywhere in the Project window's preview pane, and go to Create > Visual Scripting. Do one of the following: To create a new Script Graph, select Script Graph. To create a new State Graph, select State Graph. Enter a name for the new graph. Press Enter. When you open the new graph file, the graph might look similar to the following example. Next steps After you create a new graph, attach it to a Script Machine or State Machine to use it in your application. For more information, see Attach a graph file to a Script Machine or State Machine."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph-unassigned-flow.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph-unassigned-flow.html",
    "title": "Create a new unassigned graph with the empty graph creation flow | ModularUIPack",
    "summary": "Create a new unassigned graph with the empty graph creation flow You can use the empty graph creation flow to create a new unassigned graph for use in your project. Note To use the graph file, you must attach it to a Script Machine or State Machine. For more information on other ways to create a graph file, see Create a new graph file. To create a new unassigned graph: Go to Window > Visual Scripting > Visual Scripting Graph. In the new Visual Scripting window, select one of the following options: To create a new Script Graph, select Create new Script Graph. To create a new State Graph, select Create new State Graph. Choose a location to save the new graph file. Enter a name for the graph. Select Save. The new graph file automatically opens in a new window. The new graph file should look similar to the following image: Next steps After you create a new graph, attach it to a Script Machine or State Machine to use it in your application. For more information, see Attach a graph file to a Script Machine or State Machine."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-graph.html",
    "title": "Create a new graph file | ModularUIPack",
    "summary": "Create a new graph file To create a new Visual Scripting graph file, you can use the Unity Editor's Project window, Visual Scripting's empty graph creation flow, or create a graph from a Script Machine or State Machine component. Use the Project window If you create a graph with the Project window, the graph is blank. It contains no starter nodes, and isn't attached to any existing components in your project. For more information on the Unity Editor's Project window, see The Project window in the Unity User Manual. Use the empty graph creation flow If you use the empty graph creation flow, you have a few options for how to create your graph: You can choose to create an unassigned graph. The graph isn't assigned to a GameObject. You can choose to create a graph and assign it to an existing GameObject. Visual Scripting creates the required components on the GameObject for you to use your graph in your project. You can choose to create a graph and assign it to a new GameObject. Visual Scripting creates a new GameObject with the required components for you to use your graph in your project. For more information about GameObjects, see GameObjects in the User Manual. Any graph you create with the empty graph creation flow contains one or two initial nodes to help you get started with your graph. Tip To keep your project organized, place your Visual Scripting graphs in a Graphs folder inside your project's Assets folder. Use a Script Machine or State Machine You can also create a blank graph file directly on the Script Machine or State Machine component where you want to use it. For more information, see Create a graph on a Script Machine or State Machine."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-own-custom-event-listen-code.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-own-custom-event-listen-code.html",
    "title": "Listen to a Custom Scripting Event from a C# script | ModularUIPack",
    "summary": "Listen to a Custom Scripting Event from a C# script You can use a C# script to listen for or receive a Custom Scripting Event from a Script Graph. You can use an Event receiver script to execute additional logic in your application. Note Before you can create a listener for a Custom Scripting Event node, you must create a Custom Scripting Event node and its trigger. The examples below are based on the previous example to create a Custom Scripting Event node. For more information, see Create a Custom Scripting Event node and Create a Custom Scripting Event Sender node. To receive a Custom Scripting Event from a Script Graph: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list or anywhere in the Project window's preview pane. Go to Create > C# Script. Enter a name, such as EventReceiver, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into your C# script: using Unity.VisualScripting; using UnityEngine; public class EventReceiver : MonoBehaviour { void Start() { EventBus.Register<int>(EventNames.MyCustomEvent, i => { Debug.Log(\"RECEIVED \" + i); }); } } Save your script file. Return to the Unity Editor. Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. Do one of the following in the Hierarchy window: Select an existing GameObject where you want to attach the new script. Select Add New (+) and in the menu, select a new GameObject to add to your scene from any of the available options. You can also right-click anywhere in the Hierarchy window and select the same options in the context menu. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. Select Add Component. In the Component menu, enter the name of the script file. Select it to add it to the GameObject. Select Play from the Unity Editor's Toolbar to enter Play mode. If you have a Custom Scripting Event Sender node or a C# script to trigger your Event, you can trigger your Custom Scripting Event. The EventReceiver script logs the following message to the console every time the Event is triggered, as shown in the following image."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-own-custom-event-node-trigger-code.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-own-custom-event-node-trigger-code.html",
    "title": "Trigger a Custom Scripting Event from a C# script | ModularUIPack",
    "summary": "Trigger a Custom Scripting Event from a C# script You can send or trigger a Custom Scripting Event node in a Script Graph with a C# script instead of a Custom Scripting Event Sender node. For more information on how to create a Custom Scripting Event Sender node, see Create a Custom Scripting Event Sender node. Note Before you can trigger a Custom Scripting Event node, you must create your Custom Scripting Event node. The examples below are based on the previous example to create a Custom Scripting Event node. For more information, see Create a Custom Scripting Event node. To trigger an Event from a C# script: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list or anywhere in the Project window's preview pane. Go to Create > C# Script. Enter a name, such as CodeTriggerCustomEvent, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into your C# script: using Unity.VisualScripting; using UnityEngine; public class CodeTriggerCustomEvent : MonoBehaviour { void Update() { if (Input.anyKeyDown) { //Trigger the previously created Custom Scripting Event MyCustomEvent with the integer value 2. EventBus.Trigger(EventNames.MyCustomEvent, 2); } } } Save your script file. Return to the Unity Editor. Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. Do one of the following in the Hierarchy window: Select an existing GameObject where you want to attach the new script. Select Add New (+) and in the menu, select a new GameObject to add to your scene from any of the available options. You can also right-click anywhere in the Hierarchy window and select the same options in the context menu. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. Select Add Component. In the Component menu, enter the name of the script file. Select it to add it to the GameObject. Select Play from the Unity Editor's Toolbar to enter Play mode. Press any key on keyboard in the Game view. Visual Scripting triggers your Event in any Script Graph in the current scene that contains the Custom Scripting Event node. Next steps After you create the script, you can create a script to listen to your Event. You can also create an Event Sender node to trigger the Event from another Script Graph or location in the same Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-own-custom-event-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-own-custom-event-node.html",
    "title": "Create a Custom Scripting Event node | ModularUIPack",
    "summary": "Create a Custom Scripting Event node You can create a Custom Scripting Event node with a C# script. With C#, you can customize all aspects of your Custom Scripting Event, unlike a Visual Scripting custom Event. For more information on the different types of custom Events, see Custom Events. To create a Custom Scripting Event node: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list or anywhere in the Project window's preview pane. Go to Create > C# Script. Enter a name, such as MyEventNode, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into the C# script: using Unity.VisualScripting; using UnityEngine; //Register a string name for your Custom Scripting Event to hook it to an Event. You can save this class in a separate file and add multiple Events to it as public static strings. public static class EventNames { public static string MyCustomEvent = \"MyCustomEvent\"; } [UnitTitle(\"On my Custom Event\")]//The Custom Scripting Event node to receive the Event. Add \"On\" to the node title as an Event naming convention. [UnitCategory(\"Events\\\\MyEvents\")]//Set the path to find the node in the fuzzy finder as Events > My Events. public class MyCustomEvent : EventUnit<int> { [DoNotSerialize]// No need to serialize ports. public ValueOutput result { get; private set; }// The Event output data to return when the Event is triggered. protected override bool register => true; // Add an EventHook with the name of the Event to the list of Visual Scripting Events. public override EventHook GetHook(GraphReference reference) { return new EventHook(EventNames.MyCustomEvent); } protected override void Definition() { base.Definition(); // Setting the value on our port. result = ValueOutput<int>(nameof(result)); } // Setting the value on our port. protected override void AssignArguments(Flow flow, int data) { flow.SetValue(result, data); } } Save your script file. Return to the Unity Editor. Follow the process described in Configure project settings to regenerate your Node Library. Open a Script Graph where you want to add your new node. Right-click anywhere in the Graph Editor to open the fuzzy finder.. Go to Events > My Events. Select your On My Custom Event node to add it to the graph. Note If you change the UnitTitle or UnitCategory attributes for the node in your code, the node appears in the location in the fuzzy finder with the name that you specify. After you regenerate your Node Library, the Custom Scripting Event node appears in the fuzzy finder. If you didn't change the [UnitCategory] or [UnitTitle] from the sample code, then the fuzzy finder displays the node under Events > MyEvents, as the On my Custom Event node. For more information on the fuzzy finder, see The interface. Next steps After you create your Custom Scripting Event node, you can create a Custom Scripting Event Sender node to trigger your Event from another Script Graph or location in the same Script Graph. You can also create a script to trigger your Event from code or create a script to listen to your Event."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-own-custom-event-send-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-own-custom-event-send-node.html",
    "title": "Create a Custom Scripting Event Sender node | ModularUIPack",
    "summary": "Create a Custom Scripting Event Sender node Note Before you create a Custom Scripting Event Sender node, you must create a Custom Scripting Event node. The examples below are based on the previous example to create a Custom Scripting Event node. For more information, see Create a Custom Scripting Event node. After you create a Custom Scripting Event node, you can create a Custom Scripting Event Sender node to trigger the Event from any other Script Graph in the same scene, or the same Script Graph. You can also choose to create a separate script to trigger the Event from code. For more information, see Trigger a Custom Scripting Event from a C# script. Create a node and add it to the fuzzy finder To create a Custom Scripting Event Sender node and add it to the fuzzy finder: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Right-click a folder in the Project window's folder list or anywhere in the Project window's preview pane. Go to Create > C# Script. Enter a name, such as SendMyEventNode, for the new script file. Press Enter. Double-click the new C# file. Unity opens the file in the program you specified in your preferences, under External Script Editor. Note For more information on script editors in Unity, see the Integrated development environment (IDE) support in the Unity User Manual. In your external editor, copy and paste the following code into the C# script: using Unity.VisualScripting; using UnityEngine; //Custom node to send the Event [UnitTitle(\"Send My Custom Event\")] [UnitCategory(\"Events\\\\MyEvents\")]//Setting the path to find the node in the fuzzy finder as Events > My Events. public class SendMyEvent : Unit { [DoNotSerialize]// Mandatory attribute, to make sure we don’t serialize data that should never be serialized. [PortLabelHidden]// Hide the port label, as we normally hide the label for default Input and Output triggers. public ControlInput inputTrigger { get; private set; } [DoNotSerialize] public ValueInput myValue; [DoNotSerialize] [PortLabelHidden]// Hide the port label, as we normally hide the label for default Input and Output triggers. public ControlOutput outputTrigger { get; private set; } protected override void Definition() { inputTrigger = ControlInput(nameof(inputTrigger), Trigger); myValue = ValueInput<int>(nameof(myValue),1); outputTrigger = ControlOutput(nameof(outputTrigger)); Succession(inputTrigger, outputTrigger); } //Send the Event MyCustomEvent with the integer value from the ValueInput port myValueA. private ControlOutput Trigger(Flow flow) { EventBus.Trigger(EventNames.MyCustomEvent, flow.GetValue<int>(myValue)); return outputTrigger; } } Save your script file. Return to the Unity Editor. Follow the process described in Configure project settings to regenerate your Node Library. After you regenerate your Node Library, the Custom Scripting Event Sender node appears in the fuzzy finder. If you didn't change the [UnitCategory] or [UnitTitle] from the sample code, then the fuzzy finder displays the node under Events > MyEvents, as the Send My Custom Event node. For more information on the fuzzy finder, see The interface. Trigger your Custom Scripting Event node You might use your Send My Custom Event node to trigger your Event based on keyboard input: Open a Script Graph where you want to add the new node. This can be the same or a different Script Graph from the one that contains your Custom Scripting Event node. Right-click anywhere in the Graph Editor to open the fuzzy finder.. Go to Events > Input. Select the On Keyboard Input node to add it to the graph. Right-click again in the Graph Editor to open the fuzzy finder. Go to Events > My Events. Select your Send My Custom Event node to add it to the graph. Connect the On Keyboard Input node's Trigger output port to the Send My Custom Event node's Input Trigger input port, as shown in the following image. Select Play from the Unity Editor's Toolbar to enter Play mode. Press and release the Spacebar in the Game view. The Custom Scripting Event Sender node triggers the Custom Scripting Event in your graph and sends the Event the value from My Value A. Next steps After you create a Custom Scripting Event Sender node, you can create a script to trigger your Event from code or create a script to listen to your Event."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-restore-backups.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-restore-backups.html",
    "title": "Create or restore a backup | ModularUIPack",
    "summary": "Create or restore a backup If you don't use a version control system, such as Unity Collaborate, Git, or Subversion, it's a good practice to create backups of your Visual Scripting assets and settings. Create a backup at any time from your Project Settings. Back up your data before you update Visual Scripting to a new version. For more information on the update process, see Update Visual Scripting. Create a new backup To create a new backup of your Visual Scripting assets and settings: Go to Edit > Project Settings. Select Visual Scripting. Select Create Backup, then select OK. Visual Scripting creates a .zip file, with a name in the format Assets_YYYY_MM_DD_HH_MM_SS, in a Backups folder inside the Unity Project. Restore an existing backup To restore an existing backup of your Visual Scripting assets and settings: Go to Edit > Project Settings. Select Visual Scripting. Select Restore Backup. Visual Scripting opens your Backups folder in your system's file explorer. You can extract a .zip back-up file and import graphs and settings back into Unity. For more information on how to import assets into Unity, see Importing assets in the Unity User Manual."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-state.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-create-state.html",
    "title": "Create a new state | ModularUIPack",
    "summary": "Create a new state You can create three types of State nodes in a State Graph: Script States, Any States, and Super States. For more information on the types of State nodes, see State Graphs in Graphs. You can also add a Sticky Note to add comments to a graph. Create a Script State To create a new blank Script State: [!include[open-state-menu](./snippets/vs-open-state-menu.md)] Select Create Script State. Visual Scripting creates a new Script State node. Open the Graph Inspector. In the Graph Inspector, choose a source for the Script State node: Embed: The graph only exists on the Script State node. You can only modify the graph from the node in its parent State Graph. Graph: The graph exists in a separate file. You can modify the graph outside of its parent State Graph and reuse the graph in other areas of your application. If you chose Graph: Select New. Enter a name for the graph file. Choose where you want to save the new graph. Select Save. To create a Script State from an existing Script Graph: [!include[open-state-menu](./snippets/vs-open-state-menu.md)] Select Create Script State. Visual Scripting creates a new Script State node. Open the Graph Inspector. In the Graph Inspector, set the source for the Script State node to Graph. Do one of the following: Select the object picker (circle icon) and choose a compatible Script Graph from your project. Click and drag a Script Graph file from your Project window and release on the Graph field. Tip Click and drag the Script Graph from your Project window into the Graph Editor to automatically create a Script State node. Create an Any State To create a new Any State node: With a State Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the context menu. Select Create Any State. Create a Super State To create a new blank Super State: [!include[open-state-menu](./snippets/vs-open-state-menu.md)] Select Create Super State. Visual Scripting creates a new Super State node. Open the Graph Inspector. In the Graph Inspector, choose a source for the Super State node: Embed: The graph only exists on the Super State node. You can only modify the graph from the node in its parent State Graph. Graph: The graph exists in a separate file. You can modify the graph outside of its parent State Graph and reuse the graph in other areas of your application. If you chose Graph: Select New. Enter a name for the graph file. Choose where you want to save the new graph. Select Save. To create a Super State from an existing State Graph: [!include[open-state-menu](./snippets/vs-open-state-menu.md)] Select Create Super State. Visual Scripting creates a new Super State node. Open the Graph Inspector. In the Graph Inspector, set the source for the Super State node to Graph. Do one of the following: Select the object picker (circle icon) and choose a compatible State Graph from your project. Click and drag a State Graph file from your Project window and release on the Graph field. Tip Click and drag the State Graph from your Project window into the Graph Editor to automatically create a Super State node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-creating-connections.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-creating-connections.html",
    "title": "Connect nodes in a Script Graph | ModularUIPack",
    "summary": "Connect nodes in a Script Graph Connections control the flow of logic and data in a Script Graph's nodes. To connect nodes in a Script Graph: With a Script Graph open in the Graph window, either find an existing node where you want to make a connection, or add a new node to your Script Graph. Do one of the following: Connect to a new node. Connect to an existing node. Connect to a new node Select a port and point to a blank area in your graph to start the connection. Select again to open the fuzzy finder. Select an entry to automatically add that node at the end of your connection. Connect to an existing node Select a port and point to an existing port on another node. Select the port to make the connection. Delete a connection To delete a connection between two nodes: With a Script Graph open in the Graph window, right-click the port at either end of a connection. Visual Scripting deletes the connection. Next steps After you've connected nodes together, you can continue to add nodes to your Script Graph. You can also create and add variables, create node groups, or add a Subgraph. You can also add a Sticky Note to add comments to a graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-creating-transition.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-creating-transition.html",
    "title": "Create a transition between states | ModularUIPack",
    "summary": "Create a transition between states To switch between states in a State Graph, you must use a Script Graph called a transition. For more information on State Graphs, see State Graphs. Create a transition with an embedded Script Graph To create a new transition to another state with an embedded graph in a State Graph: With a State Graph open in the Graph window, do one of the following: Right-click on the state where you want to make a transition, then in the context menu, select Make Transition. Select the state where you want to make a transition, then press Ctrl+click and drag away from your selected state. Do one of the following: Select or release while on an existing state in your State Graph to connect the states with a transition. Select or release while on an empty space in the Graph Editor to automatically create a new blank Script State at the end of your transition. Select your transition node. Open the Graph Inspector. In the Graph Inspector, set the Source to Embed. In the (Title) field, enter a title for your transition's Script Graph. In the (Summary) field, enter a brief descriptive summary of your transition's Script Graph. Note If you choose to use an embedded transition Script Graph, Visual Scripting automatically provides the Trigger Transition node you need for the graph. Create a transition with an external Script Graph file To create a new transition with a graph asset file in a State Graph: With a State Graph open in the Graph window, do one of the following: Right-click on the state where you want to make a transition, then in the context menu, select Make Transition. Select the state where you want to make a transition, then press Ctrl+click and drag away from your selected state. Do one of the following: Select or release while on an existing state in your State Graph to connect the states with a transition. Select or release while on an empty space in the Graph Editor to automatically create a new blank Script State at the end of your transition. Select your transition node. Open the Graph Inspector. In the Graph Inspector, set the Source to Graph. Do one of the following: Select the object picker (circle icon). Select a Script Graph from your project. Click and drag a Script Graph file from your Project window and release on the Graph field. Select New and create a new Script Graph. Double-click the new transition node to open the transition Script Graph. Create a self transition with an embedded Script Graph To create a new self transition for a state in a State Graph: With a State Graph open in the Graph window, right-click on the state where you want to make the transition. In the context menu, select Make Self Transition. Visual Scripting attaches a new Self Transition node to the state in the State Graph automatically. Select your transition node. Open the Graph Inspector. In the Graph Inspector, set the Source to Embed. In the (Title) field, enter a title for your transition's Script Graph. In the (Summary) field, enter a brief descriptive summary of your transition's Script Graph. Double-click the new self transition to open the transition Script Graph. Note If you choose to use an embedded transition Script Graph, Visual Scripting automatically provides the Trigger Transition node you need for your graph. Create a transition with an external Script Graph file To create a new transition with a graph asset file in a State Graph: With a State Graph open in the Graph window, right-click on the state where you want to make the transition. In the context menu, select Make Self Transition. Visual Scripting attaches a new Self Transition node to the state in the State Graph automatically. Open the Graph Inspector. In the Graph Inspector, set the Source to Graph. Do one of the following: Select the object picker (circle icon). Select a Script Graph from your project. Click and drag a Script Graph file from your Project window and release on the Graph field. Select New and create a new Script Graph. Double-click the new transition node to open the transition Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-custom-events.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-custom-events.html",
    "title": "Custom Events | ModularUIPack",
    "summary": "Custom Events Events trigger, or start, a chain of logic in a Script Graph based on a specific occurrence in your application. Some Event types, such as On Start or On Update, exist by default in Visual Scripting. These Event nodes tell Visual Scripting to run the nodes they're connected to after the Script Graph starts, or on every frame while the Script Graph is active. You can also create your own custom Scripting Events to specify conditions for when a Script Graph's logic runs. Visual Scripting has two types of custom Events: Custom Event nodes: Use Custom Event nodes and Custom Event Trigger nodes to raise simple custom Events that don't require complex logic. Custom Scripting Events: Create your own Custom Scripting Event nodes to raise more complex Event logic. Custom Event nodes Custom Event nodes are always accessible from the fuzzy finder. You don't need to write your own code to use these custom Events in a Script Graph. They don't require an event listener. You can use the Custom Event node to create multiple custom Events, as long as you give each Event a unique name. You can also customize the number of arguments that the Custom Event node can send. To configure a Custom Event node, you need to provide: A unique name. A GameObject. The number of arguments the Custom Event receives. For more information on how to configure and use a Custom Event node, see Add a Custom Event node. To trigger a Custom Event, use a Custom Event Trigger node and provide the unique name of the Event. For more information, see Add a Custom Event Trigger node. Visual Scripting displays errors in the Graph Inspector if the Custom Event node and a Custom Event Trigger node have different values for: The name of the Event. The provided GameObject for the Event. The number of arguments for the Event. All arguments on a Custom Event Trigger node must have values, even if the Custom Event node doesn't give those values to another node. In the following example, Visual Scripting displays an error for both Arg. 0 and Arg. 1, even though Arg. 1 isn't used. Custom Scripting Events You can create a Custom Scripting Event node with a C# script. With C#, you can customize all aspects of your Custom Scripting Event, such as which category or categories to use for your node in the fuzzy finder. For more information, see Create a Custom Scripting Event node. To use and trigger the Event, code a Custom Scripting Event Sender node or another C# script: For more information on how to send or trigger an Event with a node in a Script Graph, see Create a Custom Scripting Event Sender node. For more information on how to send or trigger an Event with code, see Trigger a Custom Scripting Event from a C# script. You can also use a C# script to listen to or receive your Event after you trigger it in a Script Graph. You can use your receiver script to trigger more logic in your application. For more information, see Listen to a Custom Scripting Event from a C# script."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-custom-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-custom-types.html",
    "title": "Custom types | ModularUIPack",
    "summary": "Custom types Use a C# script file to create your own object types in Unity. These types are called classes. Classes are a blueprint for objects in your code. They decide what kind of data an object holds and what your code can do with that object. A class can hold multiple variables with different data types in a single object. Create a custom class to use it as a type for variables and other objects in a Visual Scripting Script graph. For more information on how to add and use your own custom types in Visual Scripting, see Use a custom type. The code you include in a C# script can also create new nodes to manipulate the data in your class. For example, you might write code to keep track of the characteristics of different player characters in your application. You can create a class, Player, and have different variables in that class for name, character type, favorite color, or player level: using System; using UnityEngine; using Unity.VisualScripting; [Serializable, Inspectable] public class PlayerCharacter { [Inspectable] public string name; [Inspectable] public string type; [Inspectable] public string color; [Inspectable] public int level; } Tip The variables in the example script above use the [Inspectable] attribute so they can display in Unity's Inspector window and the Visual Scripting Graph Inspector. Without the attribute, you can't assign a value to any variables that use the PlayerCharacter class in a Script Graph. For more information about the [Inspectable] attribute, see Use a custom type. These values can be different across different instances of Player objects in your code. Player1 can be Erin, a bard, who loves green and is level 5, and Player2 can be Sam, a mage, who loves black and is level 15. If you tried to represent the same data with basic variables, you must create a lot of nodes, as in the following example. With a custom class, you can create a single node to represent a player character's information, instead of four separate nodes."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-debug-messages.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-debug-messages.html",
    "title": "Working with debug messages | ModularUIPack",
    "summary": "Working with debug messages You can use debug nodes to see the result of a code segment inside the Unity console. For example, attaching a Debug node to a Variable node outputs the value of the variable. Tip Debugs are a useful tool when prototyping. To create a debug message Important Remove or disconnect the debugs from the graphs before producing the final executable. Add a Script Machine component to the GameObject. Select Edit Graph. Do one of the following: Use the starting events that are created with the script machine. Add an event node to the graph. Drag and release from the node port. The fuzzy finder appears. In the finder field, enter “Log”. A list of Debug nodes appears. Select the relevant debug message type you want to use (for example Log(Message), Log Error(Message) or Log Warning(Message)). The select Debug node is placed in the graph and linked to the event. Drag and release from the Debug green (output) port. The fuzzy finder appears. In the list, select the String node. A String node appears on the graph, connected to the Debug node.v Enter the debug message in the string node**.** Tip You can link variables or GameObjects other than a string to the port to see the value in the console. Whenever the graph is run and the Event is fired, the debug node executes and the text in the String appears in the console. Note The debug bar indicates the number of messages of each debug type (in the following order Message, Error, Warning)."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-debugging.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-debugging.html",
    "title": "Predictive and Live Debugging | ModularUIPack",
    "summary": "Predictive and Live Debugging Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Visual scripting can predict and indicate nodes in the script that can cause an error before entering play mode. It also analyzes your graphs to anticipate missing components or null references. If an error occurs at runtime, visual scripting pin-points the source of the error by highlighting it in the graph. Predictive Debugging When a node is not properly configured or may cause an error, it is colored yellow. When a node is certain to cause an error, it is colored orange. In both cases you should examine the node and make the required changes until it turns back to its normal color. Example: The Log node is colored orange because it's missing the Message that it should output to the console. If you connect the result of A + B to Message, the Log node goes back to normal. However, the Add node turns orange, because it's missing its first operand, A. If values are provided for both operands, all colors return to normal. The B input port does not need to be connected as it has a default inline value. Null References Null reference exceptions are very common. They happen when a parameter expects a value, but it receives \"nothing\", or in scripting lingo, \"null\". Visual scripting attempts to predict null references if the Predict Potential Null References option is checked in Unity > Preferences > Visual Scripting > Flow Graph. Example: Even though the Destroy node has an inline value, as it is set to \"None\" (null), it is colored orange. There are some rarer nodes that allow for null parameters. Unfortunately, because there is no way to know that from codebase analysis, visual scripting colors them orange as a false positive. If this is a recurring issue, turn off Predict Potential Null References. Missing Components When nodes are used that require components and pass a game object or a component that does not have the specified component, the node is colored yellow as a warning. For example, even though there are default values for each value input of the Add Force node, visual scripting detects that the owner game object does not have a rigidbody and provides a warning. Visual scripting does not color the node orange because it is possible to add components to game objects at runtime, so the node is not guaranteed to cause a crash if you add the required component before calling it. If this use case happens often in the project, you can disable Predict Potential Missing Components debugging from Unity > Preferences > Visual Scripting > Flow Graphs. Live Debugging When in play mode, the currently active nodes are highlighted in blue. If an error occurs, the node that caused it is highlighted in red. Example: The following is an example of a faulty graph. The result logs \"my 3rd third favorite fruit\" to the console when you press space. Here's what happens when play is selected and the object is clicked. All nodes are highlighted in blue as soon as you click because they were activated. However, there was an error in the console. Visual scripting highlights the faulty node in red. A common mistake is to assume array indices start at 1, whereas they actually start at 0. In scripting, indices are always zero-based; the first item is at index 0, the second at index 1, the third at index 2, etc. To get third item, write 2 in the field."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-developers-guide.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-developers-guide.html",
    "title": "Developer's guide | ModularUIPack",
    "summary": "Developer's guide _Misc Node Description Formula Outputs the result of the formula entered, which has a user specified number of input ports. Can create vector 2,3,4 and access all variables by name (object, graph, scene, application, saved). GetApplicationVariable Gets an application variable by name. GetGraphVariable Gets a graph variable by name. GetMember Invokes a getter via reflection (field or property, static or instance). GetObjectVariable Gets an object variable by name. GetSavedVariable Gets a saved variable by name. GetSceneVariable Gets a scene variable by name. GetVariable Gets a graph variable by name. InvokeMember Invokes a method via reflection (static or instance). IsApplicationVariableDefined Returns true if the variable is defined. IsGraphVariableDefined Returns true if the variable is defined. IsObjectVariableDefined Returns true if the variable is defined. IsSavedVariableDefined Returns true if the variable is defined. IsSceneVariableDefined Returns true if the variable is defined. IsVariableDefined Returns true if the variable is defined. This (formerly Self) Provides a reference to the GameObject that has the Machine Component running the graph. SetApplicationVariable Sets an application variable by name. SetGraphVariable Sets a graph variable by name. SetMember Invokes a setter via reflection (field or property, static or instance). SetObjectVariable Sets an object variable by name. SetSavedVariable Sets a saved variable by name. SetSceneVariable Sets a scene variable by name. SetVariable Sets a variable by name. Collections Node Description CountItems Provides a count of the number of items in the collection. FirstItem Gets a reference to the first item in the collections. LastItem Gets a reference to the last item in the collection. Collections, Dictionaries Node Description AddDictionaryItem Adds Key/Value pair into dictionary. ClearDictionary Removes all elements from the dictionary. CreateDictionary Creates a local dictionary. DictionaryContainsKey Returns true if the dictionary contains an entry with a matching key. GetDictionaryItem Return value for a dictionary entry with the provided keys. MergeDictionaries Combines the contents of two dictionaries into a single dictionary. RemoveDictionaryItem Removes an entry from the dictionary with the provided key. SetDictionaryItem Replaces the value of an existing entry with the provided key. Collections, Lists Node Description AddListItem Adds an item to the list. ClearList Removes all elements from the list. CreateList Creates a local list. GetListItem Gets the item in a list at the specified position provided by the index. InsertListItem Inserts an item into a list at the specified position provided by the index. ListContainsItem Returns true if the item is contained in the list. MergeLists Combines the contents of two lists into a single list. RemoveListItem Removes the item from the list (if it is present). RemoveListItemAt Removes the item from the list that is at the specified position provided by the index. SetListItem Replaces the item in the list with a new item at the specified position provided by the index. Control Node Description If (Formerly Branch) Executes the True branch if the provided input is true, otherwise executes the False branch. Break Immediately exits the current loop. Cache Flow node reads its input value whenever a value from any source is entered and outputs it when its output port is pulled. For A loop control. The Body branch is executed, providing an Index equal to First. If execution isn't interrupted (for example, by Break), the Index is incremented by Step. If the Index is less than Last, the Body branch is executed again. This process repeats until the Index is greater than Last, at which point the Exit branch is executed and the loop terminates. ForEach A loop control that executes Body once for every item (provided as Item) contained in the provided collection. Once completed, the Exit branch is executed. Once Flow node with an internal state that triggers its output only the first time it is entered. Entering a second time does not trigger the output flow. After a reset, the next time you enter, will trigger the output flow. SelectOnEnum Provides the object associated to the enum value provided as an input. SelectOnFlow Provides the object associated to the incoming flow branch that triggered the node. SelectOnInteger Data branching based on an input integer. SelectOnString Data branching based on an input string. SelectUnit Data branching based on an input enum. Sequence Executes a series of branches in order. To determine the order, specify the number of steps in the sequence, labelled with their order (e.g. 0, 1, 2, 3). SwitchOnEnum Executes the branch associated to the provided enum value. SwitchOnInteger Flow branching based on an input integer. SwitchOnString Flow branching based on an input string. Throw Causes an exception with the provided message. ToggleFlow Flow branching based on whether the node is On or Off, with inputs to set or toggle its On/Off state. ToggleValue Flow branching based on whether a value got set to its associated On/Off value. TryCatch Executes the Try branch. If an exception occurs in that branch, execute the Catch branch. Once the Try branch completes without exceptions or the Catch branch completes, the Finally branch is executed. While Executes the Body branch. Repeat this step as long as the provide condition is true. When that condition is no longer true, execute the Exit branch. Events Node Description TriggerCustomEvent Triggers a custom event by name. Logic Node Description And Logical AND (equivalent to &&) returns true if both operands are true and returns false otherwise. Comparison All comparisons in one node: inputs A/B, outputs < <= > >= == !=, and so on. Equal Logical AND (equivalent to &&) returns true if both operands are true and returns false otherwise. ExclusiveOr Exclusive OR (equivalent to ^) compares the first operand to the second operand and returns true only when inputs differ (one is true, the other is false). Greater Greater than (equivalent to >) returns false if the relationship in the expression is false; otherwise, returns true. GreaterOrEqual Greater than or equal to (equivalent to >=) returns false if the relationship in the expression is false; otherwise, returns true. Less Less than (equivalent to <) returns false if the relationship in the expression is false; otherwise, returns true. LessOrEqual Less than or equal to (equivalent to <=) returns false if the relationship in the expression is false; otherwise, returns true. Negate Negation (equivalent to !) reverses the meaning of its operand. NotEqual The not equal to operator (equivalent to. !=) returns true if the operands don't have the same value; otherwise, it returns false. Or Logical OR (equivalent to ||) returns true if either or both operands is true and returns false otherwise. Math, Generic Node Description Add Calls the + operator on inputs. Divide Calls the / operator on inputs. Modulo Calls the % operator on inputs. Multiply Call the * operator on inputs. Subtract Calls the - operator on inputs. Math, Scalar Node Description Absolute Absolute returns the absolute value of an integer. Add Sum of two floats. Average Average of all float inputs. Divide Divides the first float by the second float and returns the result. Exponentiate Raises the base to an exponent. Lerp Interpolates within a range based on a parameter. Maximum Computes the maximum values passed in its argument. Minimum Computes the minimum values passed in its argument. Modulo Returns the remainder of a float divided by another float. MoveTowards Returns the result of moving Current towards Target by up to Max Delta. Multiply Multiplies two floats. Normalize Equivalent to MathF.Sign. PerSecond Multiplies the value by the duration of the frame (for example, to move smoothly from frame to frame with a fixed speed). Root Calculates x to the root of n. Round Rounds a float - ceil, floor or closest integer. Subtract Subtracts the first float from the second float and returns the result. Sum Sum of multiple floats. Math, Vector2 Node Description Absolute Gives both the x and y values of a Vector2 a positive sign. Add Sum of two vectors. Angle Angle between two directional vectors. Average Average of a series of Vector2 value. Distance Distance between two Vector2 points. Divide Divide the components of one Vector2 by the corresponding components of a second Vector2. DotProduct Dot Product between two Vector2 values. Lerp Interpolates within a range based on a parameter. Maximum Computes the maximum values passed in its argument. Minimum Computes the minimum values passed in its argument. Modulo Returns a Vector2 where the components of the first vector are moduled by the corresponding components of the second vector. MoveTowards Returns the result of moving Current towards Target by up to Max Delta. Multiply Multiplies the corresponding components of two Vector2 values. Normalize Returns a Vector2 with a magnitude of 1 that retains the same direction. PerSecond Multiplies the value by the duration of the frame (for example, to move smoothly from frame to frame with a fixed speed). Project Projects one vector onto another vector. Round Rounds the components of a Vector2 to closest integer value. Subtract Subtracts one Vector2 value from another Vector2 value. Sum Adds two Vector2 values. Math, Vector3 Node Description Absolute Gives both the x and y values of a Vector3 a positive sign. Add Sum of two vectors. Angle Angle between two directional vectors. Average Average of a series of Vector3 value. Distance Distance between two Vector3 points. Divide Divide the components of one Vector3 by the corresponding components of a second Vector3. DotProduct Dot Product between two Vector3 values. Lerp Interpolates within a range based on a parameter. Maximum Computes the maximum values passed in its argument. Minimum Computes the minimum values passed in its argument. Modulo Returns a Vector3 where the components of the first vector are moduled by the corresponding components of the second vector. MoveTowards Returns the result of moving Current towards Target by up to Max Delta. Multiply Multiplies the corresponding components of two Vector3 values. Normalize Returns a Vector3 with a magnitude of 1 that retains the same direction. PerSecond Multiplies the value by the duration of the frame (for example, to move smoothly from frame to frame with a fixed speed). Project Projects one vector onto another vector. Round Rounds the components of a Vector3 to closest integer value. Subtract Subtracts one Vector3 value from another Vector3 value. Sum Adds two Vector3 values. Math, Vector4 Node Description Absolute Gives both the x and y values of a Vector4 a positive sign. Add Sum of two vectors. Angle Angle between two directional vectors. Average Average of a series of Vector4 value. Distance Distance between two Vector4 points. Divide Divide the components of one Vector4 by the corresponding components of a second Vector4. DotProduct Dot Product between two Vector4 values. Lerp Interpolates within a range based on a parameter. Maximum Computes the maximum values passed in its argument. Minimum Computes the minimum values passed in its argument. Modulo Returns a Vector4 where the components of the first vector are moduled by the corresponding components of the second vector. MoveTowards Returns the result of moving Current towards Target by up to Max Delta. Multiply Multiplies the corresponding components of two Vector4 values. Normalize Returns a Vector4 with a magnitude of 1 that retains the same direction. PerSecond Multiplies the value by the duration of the frame (for example, to move smoothly from frame to frame with a fixed speed). Project Projects one vector onto another vector. Round Rounds the components of a Vector4 to closest integer value. Subtract Subtracts one Vector4 value from another Vector4 value. Sum Adds two Vector4 values. Nesting Node Description GraphInput Gets the value of a graph input when the graph is used as a Subgraph. GraphOutput Gets the value of a graph output when the graph is used as a Subgraph. StateUnit References another state machine graph as a state in the current graph. Subgraph References another flow graph as a Subgraph in the current graph. TriggerStateTransition In a transition graph, triggers the transition to the target graph in the parent state machine graph. Nulls Node Description Null Null literal. NullCheck Branching based on the input value being null. NullCoalesce Returns the input value or a default value if the input value is null. Time Node Description Cooldown Coroutine node that can re-trigger its output only after a certain cooldown time interval. Timer Coroutine node that triggers its output after a time interval. WaitForEndOfFrameUnit Coroutine node that yields return new WaitForEndOfFrame(). WaitForFlow Coroutine node that waits until the input flow port is triggered. WaitForNextFrameUnit Coroutine node that returns null. WaitForSecondsUnit Coroutine node that returns new WaitForSeconds(). WaitUntilUnit Coroutine node that returns new WaitUntill(() => value). WaitWhileUnit Coroutine node that returns new WaitUntill(() => !value). Variables Node Description SaveVariables Forces saved variables to be saved to the PlayerPrefs (this is useful on platforms that do not support automatic save on quit). Events Node Description UnityEvent Called when a UnityEvent is pointed to TriggerUnityEvent. CustomEvent Bolt's custom events, defined by name. Events, Animation Node Description Animation Event Called when an animation event points to TriggerAnimationEvent. This version allows you to use the string parameter as the event name Named Animation Event Called when an animation event points to TriggerAnimationEvent. This version allows you to use the string parameter as the event name. OnAnimatorIK https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnAnimatorIK.html OnAnimatorMove https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnAnimatorMove.html Events, Application Node Description OnApplicationFocus https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnApplicationFocus.html OnApplicationLostFocus Implements https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnApplicationFocus.html OnApplicationPause https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnApplicationPause.html OnpplicationQuit https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnApplicationQuit.html OnApplicationResume Implements https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnApplicationPause.html Events, Editor Node Description OnDrawGizmos https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnDrawGizmos.html OnDrawGizmosSelected https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnDrawGizmosSelected.html Events, GUI Node Description OnBeginDrag Implements IBeginDragHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IBeginDragHandler.html OnButtonClick Registers to a Button's onClick event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.Button.html OnCancel Implements ICancelHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.ICancelHandler.html OnDeselect Implements IDeselectHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IDeselectHandler.html OnDrag Implements IDragHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IDragHandler.html OnDrop Implements IDropHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IDragHandler.html OnDropdownValueChanged Registers to a Dropdown's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.Dropdown.html OnEndDrag Implements IEndDragHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IEndDragHandler.html OnGUI Triggers on MonoBehaviour.OnGUI https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ MonoBehaviour.OnGUI.html OnInputFieldEndEdit Registers to an InputField's onEndEdit event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.InputField.html OnInputFieldValueChanged Registers to an InputField's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.InputField.html OnMove Implements IMoveHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IMoveHandler.html OnPointerClick Implements IPointerClickHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerClickHandler.html OnPointerDown Implements IPointerDownHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerDownHandler.html OnPointerEnter Implements IPointerEnterHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerEnterHandler.html OnPointerExit Implements IPointerExitHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerExitHandler.html OnPointerUp Implements IPointerUpHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerUpHandler.html OnScroll Implements IPointerScrollHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.IPointerScrollHandler.html OnScrollbarValueChanged Registers to a Scrollbar's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.Scrollbar.html OnScrollRectValueChanged Registers to a ScrollRect's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.ScrollRect.html OnSelect Implements ISelectHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.ISelectHandler.html OnSliderValueChanged Registers to a Sliders's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.Slider.html OnSubmit Implements ISubmitHandler https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ EventSystems.ISubmitHandler.html OnToggleValueChanged Registers to a Toggle's onValueChanged event https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ UI.Toggle.html Events, Hierarchy Node Description OnTransformChildrenChanged https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTransformChildrenChanged.html OnTransformParentChanged https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTransformParentChanged.html Events, Input Node Description OnButtonInput On Update, checks Input.GetButtonDown/GetButtonUp/GetButton based on the specified Action type https://docs.unity3d.com/2019.1/Documentation/ScriptReference/Input.html. OnKeyboardInput On Update, check Input.GetKeyDown/GetKeyUp/GetKey based on the specified action type https://docs.unity3d.com/2019.1/Documentation/ScriptReference/Input.html OnMouseDown https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseDown.html OnMouseDrag https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseDrag.html OnMouseEnter https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseEnter.html OnMouseExit https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseExit.html OnMouseInput https://docs.unity3d.com/ScriptReference/ Input.GetMouseButton.html OnMouseOver https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseOver.html OnMouseUp https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseUp.html OnMouseUpAsButton https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnMouseUpAsButton.html Events, Lifecycle Node Description FixedUpdate https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.FixedUpdate.html LateUpdate https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.LateUpdate.html OnDestroy https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnDestroy.html OnDisable https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnDisable.html OnEnable https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnEnable.html Start https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.Start.html Update https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.Update.html Events, Navigation Node Description OnDestinationReached Trigger if a NavMeshAgent's remaining distance to its target is less than the provided threshold and either has a current NavMeshPathStatus of PathComplete or requireSuccess is false. https://docs.unity3d.com/2019.1/Documentation/ScriptReference/ AI.NavMeshAgent.html. Events, Physics Node Description OnCollisionEnter https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionEnter.html OnCollisionExit https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionExit.html OnCollisionStay https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionStay.html OnControllerColliderHit https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnControllerColliderHit.html OnJointBreak https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnJointBreak.html OnParticleCollision https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnParticleCollision.html OnTriggerEnter https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerEnter.html OnTriggerExit https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerExit.html OnTriggerStay https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerStay.html Events, Physics 2D Node Description OnCollisionEnter2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionEnter2D.html OnCollisionExit2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionExit2D.html OnCollisionStay2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnCollisionStay2D.html OnControllerColliderHit2D https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnControllerColliderHit.html OnJointBreak2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnJointBreak2D.html OnParticleCollision2D https://docs.unity3d.com/ScriptReference/ MonoBehaviour.OnParticleCollision.html OnTriggerEnter2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerEnter2D.html OnTriggerExit2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerExit2D.html OnTriggerStay2D https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnTriggerStay2D.html Events, Rendering Node Description OnBecameInvisible https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnBecameInvisible.html OnBecameVisible https://docs.unity3d.com/2021.1/Documentation/ScriptReference/ MonoBehaviour.OnBecameVisible.html Events, State Node Description OnEnterState When a state is entered. OnExitState When a state is exited."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-editor-script-issues.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-editor-script-issues.html",
    "title": "Known Issues: Unity Editor script functions | ModularUIPack",
    "summary": "Known Issues: Unity Editor script functions If you use nodes that use Unity Editor script functions in any of the Visual Scripting graphs in your project, it causes errors when you try to build your project. Cause of the build errors Unity Visual Scripting (UVS) doesn't support preprocessor directives, so the use of Unity Editor script functions within graphs isn't possible. However, these functions can appear as node options within UVS because UVS uses C# reflection to generate nodes for your project based on your included assemblies. If you add one of these Unity Editor script nodes to a graph that's used in a build of your project, Unity generates an error when it attempts to build the project. An error message of the following format is displayed in the Unity Console: /<ProjectPath>/<CSharpFile>.cs: error CS0103: The name '<MissingApiName>' does not exist in the current context. The following code sample is an example of preprocessor directives for Unity Editor scripts : #if UNITY_EDITOR public static List<Type> GetAllVolumeComponents() { // TypeCache is only accessible in UnityEditor. // If you instantiate a GetAllVolumeComponents node in a graph // it prevents the project from being built. return TypeCache.GetTypesDerivedFrom<VolumeComponent>().ToList(); } #endif Find flagged packages Packages that contain editor scripts are flagged with a warning icon in the Node Library section of the Visual Scripting tab in the Project Settings window. To find the affected packages, do the following: Go to Edit > Project Settings. In the Project Settings window, select the Visual Scripting tab. On the Visual Scripting tab expand the Node Library section. A yellow warning flag is displayed next to any affected packages as shown in the following screenshot. Resolution To resolve this issue, go through your graphs and replace nodes that correspond to the API mentioned in the error message until you find the error no longer occurs."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-events-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-events-reference.html",
    "title": "Events node | ModularUIPack",
    "summary": "Events node Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Scripting nodes listen for events. They are the starting point for all scripts and appear as special green nodes in graphs. There are many kinds of events, grouped in sub-categories under the root Events category (fuzzy finder > Events). Two simple common events are Start and Update, both located under Lifecycle. Start is called once when the graph or event handler is first created. Update is called at every frame while the graph or event handler is active. New script machines start with both these events by default. Inputs & Outputs All events have a single Trigger control output that starts the script when they are triggered. Value inputs are options that influence when the event is triggered. For example, some events have a Target setting that determines which object is listening to the event. Most often, you'll leave this setting at its default value of Self. The value outputs on events are arguments that are passed from the event, giving you more information about what actually happened. For example, on the On Trigger Enter event, the other collider that is involved in the collision is an output. Custom Events There is a special type of event, the Custom Event that triggers custom events across graphs, along with their custom arguments. For example, to create a custom event called On Damage that gets called so the character loses health, the event should have one integer argument that indicates the amount of damage to inflict. Listen to the event by creating a Custom Event node (under Events). Set the name to On Damage. The set the argument count, below the name, to 1. Note Indices are zero-based, so the first argument is labeled Arg. 0. To trigger the event from elsewhere, use the Trigger Custom Event node, located right under the Custom Event node in the fuzzy finder. Enter the name of the event exactly as it is sensitive to case and whitespace. For example, to create a script machine on a boulder that could hit the player, use the force of the impact as the damage. The collider that hit with the boulder is the target of our trigger; the On Damage event is triggered on all machines attached to that collider. Use the damage value to subtract health from the receiver object. Custom events do not require a receiver and do not cause an error if there isn't a listener to handle them. Animation Events Use animation events to trigger Bolt graphs when you reach a certain point in your animation. Select an object with a machine and an animator. Then, from the animation window, add an animation event. With the event selected, choose TriggerAnimationEvent as the function from the inspector. Use any parameter from the inspector. In your script graph, add an Animation Event node (under Events >Animation). There are two types of events: a global animation event, and a named animation event. The difference is that the first type listens to all animation events on the object and return the string parameter. The second type's trigger is the string parameter that is equal to the specified name input. Unity Events Use Unity Events to trigger events that have been setup from the inspector. These are commonly found in GUI components like buttons, but they can also be created in your custom scripts. Configure them by selecting an object with a machine and select the Trigger Unity Event method. In the string field, type the event name to listen to in the graph and in the graph, add a UnityEvent node with a matching name. Additional arguments are not supported on Unity events. Events API Visual scripting provides a simple API to trigger custom events from C# script. Add the following usings to your C# script to access the API. using Unity.VisualScripting Triggering API A single method call is needed to trigger a custom event. Pass as many arguments as required. CustomEvent.Trigger(targetGameObject, argument1, argument2, ...) For example, this custom event node: Can be triggered with this line of code. CustomEvent.Trigger(enemy, \"Damage\", 30);"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-events.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-events.html",
    "title": "Events API | ModularUIPack",
    "summary": "Events API Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Visual scripting provides a simple API to trigger custom events from C# script. Usings Add the following usings to your C# script to access the API. using Unity.VisualScripting; Triggering A single method call is needed to trigger a custom event. Pass as many arguments as required. CustomEvent.Trigger(targetGameObject, argument1, argument2, ...) For example, this custom event node: Can be triggered with this line of code. CustomEvent.Trigger(enemy, \"On Damage\", 30);"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-formula.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-formula.html",
    "title": "Formula node | ModularUIPack",
    "summary": "Formula node Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Formula is a powerful node that evaluates logical and mathematical expressions directly via a textual Formula and a list of Arguments. Important Due to the binary tree traversal overhead (despite caching attempts), performance in using the formula node is significantly slower than using the operator nodes individually. It is preferable to avoid using this node at every frame. Although a formula can return either a boolean for logic, or a number for math, formulas can return any type of value. The first text field in the header is the formula itself. The second text field is the number of arguments. It's set to 2 by default, giving us A and B as inputs. Formulas can have up to 10 arguments, which are always ordered alphabetically. If more are required, they are called B, C, D, E, and so forth. For example, this formula returns a boolean indicating: whether, at a minimum, 10 seconds have elapsed since the start of the game and the current object's name is Player. Arguments Variable Names Variable names can be directly used in the formula. For example, a graph variable named health can return a boolean just by typing the formula health > 50. The argument names are evaluated in the following order of priority: Alphabetical argument names (a - z) Graph variable names Object variable names Scene variable names Application variable names Saved variable names Properties and Methods Retrieve the value of a property on an argument or variable by using the [arg.prop] notation. For example, if position is a Vector 3 object variable, check if it is equal to zero with: [position.x] = 0. Get the return value of parameterless methods with the [arg.Method()] notation. Note: Accessing properties and methods is not guaranteed to be compatible with AOT platforms, because the AOT pre-build cannot generate stubs for members that are only accessed by name. Literals Use the following literals for assigning fixed values. Literal Description Example Number An integer or float. 3.5 String A piece of text between apostrophes. \"Hello World!\" Boolean A boolean value. true, false Null The null constant. a != null Delta Time The Unity frame delta time. 30 * dt Invert Delta Time The inverse of the delta time. 30 / second Operators Every common logical and mathematical operator can be used in formulas, as well as the ones defined through custom operator overloading in script. Operator Operation Rank Result Example not, ! Logical Negation Unary The opposite of the operand. not true - Numerical Negation Unary The negative of the operand. -5 and, && Logical And Binary True if both operands are true. (a < 5) and (b > 3) or, || Logical Or Binary True if either operand is true (a < 5) or (b > 3) =, == Equality Binary True if the two operands are equal. a = b !=, <> Inequality Binary True if the two operands are not equal. a != b <, <=, >, >= Numeric Comparison Binary The result of a numeric comparison a >= 10 + Addition Binary The sum of the two operands. a + 5 - Subtraction Binary The difference between the two operands. b - 3 * Multiplication Binary The product of the two operands. 12 * a / Division Binary The quotient of the two operands. b / 2 % Modulo Binary The remainder of the division of the two operands. a % 2 ?: If Ternary The left operand if the condition is true, otherwise the right operand. (health > 0) ? \"Alive\" : \"Dead\" All common bitwise operators like ~ and >> are also supported. Functions You can also use any function from the following table. Name Result Example abs The absolute value of a specified number. abs(-1) acos The angle whose cosine is the specified number. acos(1) asin The angle whose sine is the specified number. asin(0) atan The angle whose tangent is the specified number. atan(0) ceiling The smallest integer greater than or equal to the specified number. ceiling(1.5) cos The cosine of the specified angle. cos(0) exp e raised to the specified power. exp(0) floor The largest integer less than or equal to the specified number. floor(1.5) log The logarithm of a specified number. log(1, 10) log10 The base 10 logarithm of a specified number. log10(1) max The larger of two specified numbers. max(1, 2) min The smaller of two numbers. min(1, 2) pow A specified number raised to the specified power. pow(3, 2) round Rounds a value to the nearest integer or specified number of decimal places. round(3.222, 2) sign 1 if the number is positive, -1 is if it negative. sign(-10) sin The sine of the specified angle. sin(0) sqrt The square root of a specified number. sqrt(4) tan The tangent of the specified angle. tan(0) truncate The integral part of a number. truncate(1.7) v2 Creates a 2D vector. v2(0, 0) v3 Creates a 3D vector. v3(0, 0, 0) v4 Creates a 4D vector. v4(0, 0, 0, 0)"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-graph-machine-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-graph-machine-types.html",
    "title": "Script Machines and State Machines | ModularUIPack",
    "summary": "Script Machines and State Machines A Script Machine is a GameObject component that lets you use a Script Graph in an application. You can't use a Script Graph unless it's attached to a Script Machine. For more information on components, see Introduction to components in the Unity User Manual. Script Machines can either link to a graph asset, or they can contain an embedded Script Graph asset. A State Machine is the same as a Script Machine, except it contains a State Graph. For more information on the difference between a Script Graph and a State Graph, see Graphs. Add a Script Machine or State Machine component to a GameObject and Visual Scripting automatically adds a Variables component. The Variables component holds any Object variables that you define in a Script Graph or State Graph attached to the GameObject. For more information on variables, see Variables. For more information on how to add a Script Machine or State Machine to a GameObject and attach a graph file, see Attach a graph file to a Script Machine or State Machine Source types Script Machines and State Machines have two options for their Source: a graph file (Graph), or an embedded asset (Embed). Set the Source for a Script Machine or State Machine at any time. If you switch the Source from Graph to Embed, the graph file still exists as a separate file from the State Machine or Script Machine inside of your project. Caution If you switch your Source from Embed to Graph, you will lose the embedded graph asset. You can copy the nodes from an embedded graph to a graph asset to avoid data loss. Other features of Visual Scripting, such as transitions, Super States, and Subgraphs, also have these source type options. The Graph source type Use the Graph source type to make your graphs faster to load and easier to maintain. Any changes made to a graph file apply to every Script Machine or State Machine that links to that graph file, even if those GameObjects don't use the same Prefab. To use the same graph across multiple GameObjects, use a Graph source type. You might encounter some situations where an embedded graph works best. The Embed source type An Embed graph exists only in the scene where it's created, if it isn't attached to a Prefab. This can cause problems with source control systems. If you delete a GameObject with an Embed graph asset, you will lose your graph. Changes made to an embedded graph aren't saved while the Editor is in Play mode. Use the Embed source type if: You need references to GameObjects from the current scene in the graph and the graph isn't on a Prefab. The graph is on a Prefab that you plan to instantiate in the application during runtime. You only need to use the logic in the graph once in the application. You can't reuse an embedded graph across multiple GameObjects unless the graph is on a Prefab. An embed graph only exists on the Script Machine or State Machine where you created it. This means you can share the graph across instances of a Prefab, but not on more than one GameObject. For more information about Prefabs, see Prefabs in the User Manual."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-graph-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-graph-types.html",
    "title": "Graphs | ModularUIPack",
    "summary": "Graphs A graph is a Visual Scripting asset that contains a visual representation of logic in an application. Visual Scripting has two different types of graphs: Script Graphs and State Graphs. You can use either graph type in specific situations to define and change how GameObjects in an application behave. Script Graphs and State Graphs must be attached to a Script Machine or State Machine to be used in a project. For more information on Script Machines and State Machines, see Script Machines and State Machines. Script Graphs Script Graphs control and connect specific actions and values. The actions in a Script Graph happen in a specific order. Actions can happen every frame, or when a specific event occurs. Visual Scripting represents the actions in a Script Graph through nodes. Connect nodes together with edges to tell your application what to do, and in what order. Script Graphs can access a large collection of nodes, which correspond to different features and functionality in the Unity Editor. Access these nodes through the fuzzy finder. Script Graphs define the specifics of what a GameObject does while your application runs. State Graphs A State Graph has states and gives the logic for when your application moves between states, through connections called transitions. Use State Graphs to design AI behavior or define scene and level structures. A state is any set of behaviors that you want a GameObject to perform, represented as a Script Graph. Visual Scripting represents states in State Graphs through State nodes. A State node can link to a Script Graph with logic for your application to follow, or give another State Graph with additional transitions and State nodes. States and transitions in a State Graph tell your application when to change its behavior, based on an event or after it fulfills a condition. For example, you might have an enemy character with Patrol and Chase states. The enemy character's actions can change from the actions in the Script Graph for the Patrol state to the actions for the Chase state after it detects the player character. The detection event for the enemy character triggers the transition between the two states. State Graphs don't use the fuzzy finder. They use a specific set of State nodes, which are in the Visual Scripting context menu: Script States contain a Script Graph. When an application triggers a Script State, Visual Scripting runs the logic in a Script State's attached Script Graph. Script States use On Enter State Event, On Update Event, and On Exit State Event nodes to control logic based on the current state. Super States contain another, nested State Graph. A Super State can help you better organize a State Graph, and reuse states and transitions across multiple graphs. Any States serve as a placeholder for any other state in a State Graph. You can use an Any State node and create a single transition to a new state, rather than create multiple transitions from other states. Transitions connect Script States, Any States, and Super States. Transitions contain Script Graphs that tell your application when to switch from one state to the next. For more information, see Transitions. You can set any Script State node or Super State node as a Start State. Any state marked as a Start State is automatically active when Visual Scripting runs a State Graph. You can also have multiple Start States in a single graph. The Super State, Start, and Script State nodes in the following example are all Start States."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-groups.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-groups.html",
    "title": "Create node groups | ModularUIPack",
    "summary": "Create node groups You can organize the nodes in your Script Graphs and State Graphs with node groups. Create a new group To create a new group: Open the graph where you want to create a new group. In an empty area of the Graph Editor, Ctrl+click (macOS: Cmd+click) and drag to create a selection. Release the mouse to create the group. After you create a group, you can: Change the group name Add a comment to the group Change the color of the group Resize the group Move the group Change a group name To change the name of the group in your graph: In the group header, click Group. Enter a new name for the group. Press Enter to save your changes. Add a comment to a group To add a comment to a group in a graph: Select the group where you want to add a comment. Open the Graph Inspector. In the (Comment) field in the Graph Inspector, enter comments or information about the group. Note Group comments are only visible in the Graph Inspector. To add comments to a graph that are always visible, use a Sticky Note. Change the color of a group To change the color of a group in a graph: Select the group you want to edit. Open the Graph Inspector. In the Graph Inspector, select the Color field. Select a new color for your group through one of the following methods: Use the color picker. Use the sliders or RGBA value fields. Enter a hexadecimal color value. Select the eyedropper icon and select a color from anywhere on your screen. Resize a group To resize a group in a graph: Click and drag from any edge or corner on the group. Move a group To move a group and its nodes: Click and drag the group's header to a new location in the Graph Editor. Note You can also move a group without moving any of the nodes inside, but the required input changes based on your chosen control scheme. For more information, see Choose a control scheme Next steps After you've created a node group, you can add nodes to your Script Graph, create and add variables, or add a Subgraph. You can also add a Sticky Note to add comments to a graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-input-nodes.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-input-nodes.html",
    "title": "Input Event nodes | ModularUIPack",
    "summary": "Input Event nodes Input nodes are an Event node type that can read input from Unity's Input Manager or Input System package for use in a Script Graph. For more information about how to read and capture input in Visual Scripting, see Capture user input in an application. Input System package nodes The following nodes read and interact with Events from the Input System package: Node Description On Input System Event Button The On Input System Event Button node listens for a specific Input Action from a Player Input component. It doesn't send or read any other data. On Input System Event Float The On Input System Event Float node listens for a specific Input Action from a Player Input component. The node can output a single float value. On Input System Event Vector 2 The On Input System Event Vector 2 node listens for a specific Input Action from a Player Input component. The node can output two values as a Vector 2. Input Manager nodes The following nodes read and interact with Events from Unity's Input Manager: Node Description On Button Input The On Button Input node listens for a specified action on a virtual button from your Input Manager configuration. On Keyboard Input The On Keyboard Input node listens for a specified action on a keyboard key. On Mouse Down The On Mouse Down node listens for a mouse click action on a specific GameObject in your application. On Mouse Drag The On Mouse Drag node listens for a mouse click and hold on a specific GameObject in your application. It triggers the next node connected to it as long as the mouse button is held down on that GameObject. On Mouse Enter The On Mouse Enter node listens for the user's mouse pointer location to enter the Collider of a specified GameObject. When the mouse enters the Collider or GUI element, the node triggers the next node connected to it. On Mouse Exit The On Mouse Exit node listens for the user's mouse pointer location to exit the Collider of a specified GameObject. When the mouse exits the Collider or GUI element, the node triggers the next node connected to it. On Mouse Input The On Mouse Input node listens for a specific action on a user's mouse. The action doesn't need to happen on a specific GameObject's Collider. On Mouse Over The On Mouse Over node listens for a user's mouse to land over a specified GameObject's Collider. While the user's mouse is over the Collider, it triggers the next node connected to it once every frame. On Mouse Up As Button The On Mouse Up As Button node listens for a user to release their mouse button after they click a Collider in your application. To trigger the On Mouse Up As Button node, the user must release their mouse button over the same Collider they clicked. On Mouse Up The On Mouse Up node listens for a user to release their mouse button after they click a Collider in your application. The user can release their mouse button anywhere in your application to trigger the On Mouse Up node. Additional resources Capturing input in your application Capture input using the Input System package Capture input using the Input Manager"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-interface-overview.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-interface-overview.html",
    "title": "The interface | ModularUIPack",
    "summary": "The interface Visual Scripting's main window is the Graph window. The Graph window has five main elements: The Graph Editor, where you create, arrange, and connect nodes. The fuzzy finder, which you can use to find nodes and add them to your graph. The Graph toolbar, where you can change settings specific to your view in the Graph Editor and perform some common layout operations. The Graph Inspector, where you can view detailed information about your nodes and configure additional settings for your graph. The Blackboard, where you can define and edit variables to use in your graphs. The Graph Editor The Graph Editor is the center editing area of the Graph window. You can use the Graph Editor to create your Visual Scripting graphs. You can create nodes and connect them with edges. You can change some default shortcuts and behaviors in the Graph Editor through your control scheme. For more information on the available control schemes in Visual Scripting, see Choose a control scheme. The fuzzy finder The fuzzy finder is a searchable menu that lists every node available in Visual Scripting. Right-click anywhere in the Graph Editor to open the fuzzy finder. Search for a node by name with the Search bar, or open a category from the list to view related nodes. For example, nodes related to the creation or manipulation of variables are in the Variables category. You can add new nodes to Visual Scripting from your own code, from other packages, or from other Unity features. For more information on how to add nodes to the fuzzy finder, see Configure project settings. The Graph toolbar The Graph toolbar lets you display or hide the Graph Inspector and Blackboard. The Graph toolbar also includes a breadcrumb trail for navigation through nested graphs that displays your current location. Select a graph from the trail to return to that graph file. You can also configure some additional settings that control how nodes display in the Graph Editor. Property Description Lock Lock the current Script Graph or State Graph to the Graph window. Visual Scripting keeps the current graph open, even if you select another GameObject with a graph file in the Hierarchy window. Graph Inspector Display or hide the Graph Inspector. Blackboard Display or hide the Blackboard. Breadcrumb Location Displays the name of the current graph. If you open a Subgraph or State Unit, or a State node inside a State Graph, use the breadcrumbs to navigate back to the parent graph. Zoom Set a zoom level for your view of the Graph Editor. Relations Enable Relations to display inner flow connections for Script Graph nodes. For example, on a standard Multiply node, the Relations setting draws a line from each input port that merges into a single line on the output port. The lines display the flow of data inside the node. Disable Relations to hide these inner connections. Values Enable Values to display the input and output values sent between nodes while the Unity Editor is in Play mode. This can make it easier to debug your scripts. Disable Values to hide input and output values while in Play mode. For more information on Play mode, see The Game view in the Unity User Manual. NOTE This setting corresponds to the Show Connection Values setting in the Preferences window for Visual Scripting. For more information on this preference, see Configure your preferences. Dim Enable Dim to dim any nodes in the Graph Editor that aren't yet connected to the control flow in your graph. The Dim setting provides you with a visual cue that a node isn't used in the current configuration of your graph. Disable Dim to display all nodes as active regardless of their connection state. NOTE This setting corresponds to the Dim Inactive Nodes setting in the Preferences window for Visual Scripting. For more information on this preference, see Configure your preferences. Carry Enable Carry to move all connected child nodes when you move a parent node. Disable Carry to only move the currently selected node. NOTE This setting corresponds to the Carry Children setting in the Preferences window for Visual Scripting. For more information on this preference, see Configure your preferences. Align Choose an alignment option to align any nodes in your current selection. Align Left Edges Align all nodes in the selection based on their left edge. Align Centers Align all nodes in the selection based on their vertical centers. Align Right Edges Align all nodes in the selection based on their right edges. Align Top Edges Align all nodes in the selection based on their top edges. Align Middles Align all nodes in the selection based on their horizontal middles. Align Bottom Edges Align all nodes in the selection based on their bottom edges. Distribute Choose a distribution option to evenly distribute space between any nodes in your current selection. Distribute Left Edges Distribute all nodes in the selection to leave an equal distance between the left edges of each node. Distribute Centers Distribute all nodes in the selection to leave an equal distance between the vertical centers of each node. Distribute Right Edges Distribute all nodes in the selection to leave an equal distance between the right edges of each node. Distribute Horizontal Gaps Distribute all nodes in the selection to leave an equal-sized horizontal gap between each node. This distribution affects the space between the left and right edges of nodes. Distribute Top Edges Distribute all nodes in the selection to leave an equal distance between the top edges of each node. Distribute Middles Distribute all nodes in the selection to leave an equal distance between the horizontal middles of each node. Distribute Bottom Edges Distribute all nodes in the selection to leave an equal distance between the bottom edges of each node. Distribute Vertical Gaps Distribute all nodes in the selection to leave an equal-sized vertical gap between each node. This distribution affects the space between the top and bottom edges of nodes. Overview Select Overview to automatically pan and zoom to fit all elements of your current graph within the Graph Editor. Full Screen Select Full Screen when the Graph window is docked in the Unity Editor to maximize the Graph window to the full size of the Editor window. Your Visual Scripting preferences can change some settings in the Graph toolbar or change how these settings behave. For example, you can control how fast the Graph Editor zooms in and out when you set a zoom level. For more information, see Configure your preferences. The Graph Inspector The Graph Inspector provides additional information about an open graph, or about any node you select in the Graph Editor. If a node requires additional configuration, you can use the Graph Inspector to set these values. To display or hide the Graph Inspector, select Graph Inspector () from the toolbar. To move the Graph Inspector to the other side of the Graph window, select either Dock Right () or Dock Left (). The Blackboard The Blackboard provides options to configure and manage variables in a graph. The Blackboard divides variables into five distinct scopes, across five tabs: Graph, Object, Scene, App, and Saved. For more information on the available variable scopes in Visual Scripting, see Variables. To display or hide the Blackboard, select Blackboard () from the toolbar. To move the Blackboard to the other side of the Graph window, select either Dock Right () or Dock Left ()."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-live-edit-runtime.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-live-edit-runtime.html",
    "title": "Live edit during runtime | ModularUIPack",
    "summary": "Live edit during runtime Live editing in visual scripting goes beyond adjusting values in real-time. Live editing also includes the ability to add and remove nodes as well as connectors; you can code while the game is playing and immediately affect the gameplay. Remember that: Changes you make to embed graphs are reverted when you exit play mode; they live inside components. Changes you make to graphs are saved when you exit play mode; they live inside assets. Graph variables are saved when not in an embed graph. The following variables are not saved: Object Scene App Saved Note If you’ve used an embed graph and do not want to lose your modifications, copy all the changes you made to the embed graph before exiting Play mode. Paste them back in when in edit mode. You can’t do this for any changed variables. As a visual aid, connectors in Live mode display their execution flow with animated directional droplets going in the direction of execution. The speed and number of droplets does not represent the frequency or speed of execution. To adjust the graph during runtime With a graph open do any or all of the following: In the Inspector, click in any field to change a component’s value. The values are not persistent and won’t save when you leave Play mode. Right-click in an empty spot in the graph and add a node. Connect nodes. Delete any connectors. Add an extension. Add and link Debug nodes. Change values directly in a node. Tip Select any GameObject that contains a script graph to see and work with the values of the selected GameObject during runtime. Note When you modify anything after a Start event during runtime you won’t get the update on the GameObject during that session. You need to restart the session for Unity to execute the new logic after the start event. The changes you make to a graph are instantly shared across all instances of that saved graph asset."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-live.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-live.html",
    "title": "Live edit | ModularUIPack",
    "summary": "Live edit Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Visual Scripting supports live editing. In live editing you can create and edit graphs while in play mode and see the Visual Scripting updates in real time. This provides a fast way to iterate and test ideas without the need to recompile project changes. Working in live edit Live editing is not limited to tweaking values — you can add and remove nodes, connections (edges), etc while live. Anything that can be done in a normal edit, can be done in a live edit. In accordance with the Unity convention: Changes made to embeds are reverted when you exit play mode - the changes live inside components. Changes made to graphs are saved when you exit play mode - the changes live inside assets Tip To preserve the changes made to a component graph, copy the modified nodes before exiting play mode. You'll then be able to paste back while in edit mode. When in live mode, Visual Scripting is displayed the flow as droplets on connections. To disable these animations on either the value connections, the control connections, or both, deselect the Animate Control Connections or the Animate Value Connections from the editor preferences window (Edit > Preferences > Visual Scripting > Script Graphs). Saving changes through persistence Visual Scripting graphs automatically save the changes made during play mode. Propagation across graphs Changes made to a graph are instantly shared across all instances of that graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-add-state-unit.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-add-state-unit.html",
    "title": "Add a State Unit to a Script Graph | ModularUIPack",
    "summary": "Add a State Unit to a Script Graph Add a State Unit to a Script Graph to trigger a change of state. A state is any set of behaviors that you want a GameObject to perform. For more information on state in Visual Scripting, see Graphs. You can add a new State Graph to a State Unit node, or use an existing State Graph from the project. For more information on the State Unit node, see State Unit node. Add a new State Graph as a State Unit node To add a new blank State Graph as a State Unit node to a Script Graph: [!include[with-graph-open-ff](./snippets/vs-with-graph-open-ff.md)] Go to Nesting. Select State Unit to add a State Unit node to the graph. Open the Graph Inspector. In the Graph Inspector, choose the source for the State Unit: Embed: The State Graph only exists on the State Unit node. You can only change the State Graph from the node in its parent graph. Graph: The State Graph exists in a separate file. You can change the State Graph outside of its parent graph and reuse the graph in other areas of an application. If you chose Graph: In the Graph Inspector, select New. Enter a name for the graph file. Choose where you want to save the graph file in the project. Select Save. Add an existing State Graph as a State Unit node To add an existing State Graph file as a State Unit node in a Script Graph: With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder. Go to Nesting. Select State Unit to add a State Unit node to the graph. Open the Graph Inspector. In the Graph Inspector, set the Source to Graph. Do one of the following: In the Graph field, select the object picker (circle icon) and choose a compatible State Graph from the project. Click and drag a State Graph file from the Project window and release on the Graph field. Tip For a faster way to add a State Graph as a State Unit node: Click and drag a State Graph asset from the Project window into the Graph Editor to automatically create a State Unit node. Right-click to open the fuzzy finder. Go to Graphs and select a graph file. Next steps Select Edit Graph in the Graph Inspector to edit the graph. For more information on how to create a State Graph, see Develop logic transitions with State Graphs."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-add-subgraph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-add-subgraph.html",
    "title": "Add a Subgraph to a Script Graph | ModularUIPack",
    "summary": "Add a Subgraph to a Script Graph A Subgraph is a Script Graph nested inside of another Script Graph. A Subgraph appears as a single node inside a parent Script Graph. For more information on the Subgraph node, see Subgraph node. You can add a Subgraph to a Script Graph in two ways: create a new Script Graph, or add an existing Script Graph file. Add a new Subgraph to a Script Graph To add a new blank Subgraph to an existing Script Graph: [!include[with-graph-open-ff](./snippets/vs-with-graph-open-ff.md)] Go to Nesting. Select Subgraph to add a Subgraph node to the graph. Open the Graph Inspector. In the Graph Inspector, choose the source for the Subgraph: Embed: The Subgraph only exists on the Subgraph node. You can only change the Subgraph from the node in its parent graph. Graph: The Subgraph exists in a separate file. You can change the Subgraph outside of its parent graph and reuse the graph in other areas of an application. If you chose Graph: In the Graph Inspector, select New. Enter a name for the graph file. Choose where you want to save the graph file in the project. Select Save. Add an existing Script Graph as a Subgraph To add an existing graph file as a Subgraph in a Script Graph: Note You can't nest a Script Graph as a Subgraph in its own graph file. With a Script Graph open in the Graph window, right-click on an empty space in the Graph Editor to open the fuzzy finder. Go to Nesting. Select Subgraph to add the Subgraph node to the graph. Open the Graph Inspector. In the Graph Inspector, set the Source to Graph. Do one of the following: In the Graph field, select the object picker (circle icon) and choose a compatible Script Graph from the project. Click and drag a Script Graph file from the Project window and release on the Graph field. Tip For a faster way to add a Script Graph as a Subgraph: Click and drag a Script Graph asset from the Project window into the Graph Editor to automatically create a Subgraph node. Right-click to open the fuzzy finder. Go to Graphs and select a graph file. Next steps To open the new Subgraph and edit the graph, select Edit Graph. After you've added a Subgraph to a Script Graph, define its ports. For more information, see Add a Trigger or Data port to a Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-add-triggers-data-graph.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-add-triggers-data-graph.html",
    "title": "Add a Trigger or Data port to a Script Graph | ModularUIPack",
    "summary": "Add a Trigger or Data port to a Script Graph A Script Graph used as a Subgraph can receive data and logic from its parent graph. Add and define ports on a graph to choose what data graphs can send and receive. For more information about Subgraphs, see Subgraphs and State Units. Add ports from a graph To add a Trigger Input, Trigger Output, Data Input, or Data Output port to a Script Graph: Open the Script Graph you want to edit in the Graph window. With no nodes or groups selected in the graph, open the Graph Inspector. Select Add (+) under the port type you want to add: Trigger Inputs Trigger Outputs Data Inputs Data Outputs In the Key field, enter a unique key name for the port. The Key value can't match the Key of any existing ports on the current Script Graph. NOTE If two Key values are the same on the same graph, Visual Scripting ignores the second port definition and displays a warning in the Graph Inspector. If you change the Key value for a port after you've made a connection to that port in a graph, the connections break and you must reconnect them. In the Label field, enter a label to display for the port. The label displays on the Subgraph node and its Input or Output node. NOTE If you don't set a Label, Visual Scripting uses the value from the Key field. In the Summary field, enter a brief summary of the port to display in the Graph Inspector when you select the Subgraph node, Input node, or Output node. Toggle Hide Label to do the following: Enable Hide Label to hide the port label on any Subgraph node, Input node, or Output node. Disable Hide Label to display the data from the Label field. (Data Inputs and Data Outputs Only) Set a data type for the port: Select the Type list to open the Type menu. Select a data type from the list to set the data type the port accepts. (Data Inputs Only) Enable Has Default Value to display the Default Value field. Disable Has Default Value to hide the Default Value field. In the Default Value field, enter the default value the port uses if it doesn't receive a data input while the Script Graph runs. Add ports with Input and Output nodes You can also use an Input node or an Output node to define ports on a Script Graph: Open the Script Graph you want to edit in the Graph window. [!include[open-fuzzy-finder](./snippets/vs-open-fuzzy-finder.md)] Go to Nesting. Do one of the following: To add a Trigger Input or Data Input port to the graph, select Input. To add a Trigger Output or Data Output port to the graph, select Output. Select the new Input or Output node in the graph. Open the Graph Inspector. In the Key field, enter a unique key name for the port. The Key value can't match the Key of any existing ports on the current Script Graph. NOTE If two Key values are the same on the same graph, Visual Scripting ignores the second port definition and displays a warning in the Graph Inspector. If you change the Key value for a port after you've made a connection to that port in a graph, the connections break and you must reconnect them. In the Label field, enter a label to display for the port. The label displays on the Subgraph node and its Input or Output node. NOTE If you don't set a Label, Visual Scripting uses the value from the Key field. In the Summary field, enter a brief summary of the port to display in the Graph Inspector when you select the Subgraph node, Input node, or Output node. Toggle Hide Label to do the following: Enable Hide Label to hide the port label on any Subgraph node, Input node, or Output node. Disable Hide Label to display the data from the Label field. (Data Inputs and Data Outputs Only) Set a data type for the port: Select the Type list to open the Type menu. Select a data type from the list to set the data type the port accepts. (Data Inputs Only) Enable Has Default Value to display the Default Value field. Disable Has Default Value to hide the Default Value field. In the Default Value field, enter the default value the port uses if it doesn't receive a data input while the Script Graph runs. Next steps Add the Script Graph as a Subgraph in another Script Graph. For more information on how to add a Script Graph as a Subgraph, see Add a Subgraph to a Script Graph. For more information on the port types on a Script Graph, see Subgraph node. The defined Trigger and Data ports affect the ports on the Input and Output nodes in a Script Graph. For more information, see Input node and Output node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-input-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-input-node.html",
    "title": "Input node | ModularUIPack",
    "summary": "Input node Use an Input node to control the flow of logic and data from a Script Graph's Subgraph node. An Input node takes data from a parent graph and makes it available to a Subgraph. For more information on Subgraphs, see Subgraphs and State Units and Subgraph node. For more information on Script Graphs, see Graphs. Fuzzy finder category The Input node is in the Nesting category in the fuzzy finder. Available outputs By default, an Input node has no ports. An Input node can only have output ports. Define the number and specific data type for the output ports with the Graph Inspector. For more information on how to define ports on a Script Graph, see Add a Trigger or Data port to a Script Graph. Port Type Description Trigger Input A control port. Make a connection to this port to tell Visual Scripting what node to run next in the graph. Visual Scripting triggers any node to this port after the matching Trigger Input port triggers on the Subgraph node in the parent Script Graph. Data Input A data port. Make a connection to this port to send a value or other data to another node in the graph. The data source is the matching Data Input port on the Subgraph node in a parent Script Graph. Example graph usage In the following example, the Character Move Subgraph uses an Input node to receive data from a parent graph. The Input node has one Trigger Input port and three Data Input ports. It uses the values from the parent graph and the values from two Input Get Axis nodes to create a new Vector 3 value that it sends back to its parent graph. The parent graph sends three values from the current GameObject's Transform component to the Input node. The Subgraph reduces the number of nodes in the parent graph. Related nodes Use an Input node with the following nodes: Subgraph node Output node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-nodes.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-nodes.html",
    "title": "Nesting nodes | ModularUIPack",
    "summary": "Nesting nodes Use the following nodes to work with nesting Subgraphs and State Units in a Script Graph. For more information on Subgraphs and State Units, see Subgraphs and State Units. Node Description Input node Use an Input node to control the flow of logic and data from a Script Graph's Subgraph node. An Input node takes data from a parent graph and makes it available to a Subgraph. Output node Use an Output node to control the flow of logic and data from a Script Graph's Subgraph node. An Output node sends data from a Subgraph and makes it available to a parent graph. State Unit node Use a State Unit node like a Subgraph. The node references and triggers a State Graph as a State Unit inside a Script Graph. Subgraph node Use a Subgraph node to reference and trigger another Script Graph's logic from inside a parent Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-output-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-output-node.html",
    "title": "Output node | ModularUIPack",
    "summary": "Output node Use an Output node to control the flow of logic and data from a Script Graph's Subgraph node. An Output node sends data from a Subgraph and makes it available to a parent graph. For more information on Subgraphs, see Subgraphs and State Units and Subgraph node. For more information on Script Graphs, see Graphs. Fuzzy finder category The Output node is in the Nesting category in the fuzzy finder. Available inputs By default, an Output node has no ports. The Output node can only have input ports. Define the number and specific data type for the input ports with the Graph Inspector. For more information on how to define ports on a Script Graph, see Add a Trigger or Data port to a Script Graph. Port Type Description Trigger Output A control port. Make a connection to this port to tell Visual Scripting which node triggers its exit from the Subgraph and the return to the logic in a parent graph. After the Output node runs, Visual Scripting starts any connections made to the matching Trigger Output port on the Subgraph node. Data Output A data port. Make a connection to this port to send data from a Subgraph to its parent graph. Visual Scripting returns any value from a node connected to this port to any node connected to the matching Data Output port on the Subgraph node. Example graph usage In the following example, the Character Move Subgraph uses an Input node to receive data from a parent graph. The Subgraph uses three values from the parent graph and the values from two Input Get Axis nodes to create a new Vector 3 value. The graph sends the new Vector 3 value to the Output node and back to the parent Script Graph. The Subgraph reduces the number of nodes in the parent graph. The parent graph receives the Vector 3 value from the Output node. The parent graph uses that value to set a new position on the current GameObject's Transform component. Related nodes Use an Output node with the following nodes: Subgraph node Input node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-state-unit-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-state-unit-node.html",
    "title": "State Unit node | ModularUIPack",
    "summary": "State Unit node Use a State Unit node like a Subgraph. The node references and triggers a State Graph inside a Script Graph. A State Unit node: Can't send or receive any data from ports. Can only trigger its associated State Graph or other nodes inside its parent Script Graph. Can't change its number or type of ports. For more information on Subgraphs and State Units, see Subgraphs and State Units. For more information on State Graphs and Script Graphs, see Graphs. Fuzzy finder category The State Unit node is in the Nesting category in the fuzzy finder. You can go to the Graphs category and select any State Graph to create a State Unit node. For more information on how to create a State Unit node, see Add a State Unit to a Script Graph. Inputs The State Unit node has the following input ports: Name Type Description Start Input Trigger The first execution Input Trigger for the node. The connection made to this port indicates when Visual Scripting runs the nested State Graph. Visual Scripting makes all states marked as Start States in the State Graph active. Stop Input Trigger The second execution Input Trigger for the node. The connection made to this port indicates when Visual Scripting stops the nested State Graph. Visual Scripting makes all states and transitions in the State Graph inactive. Outputs The State Unit node has the following output ports: Name Type Description Started Output Trigger The first execution Output Trigger for the node. The connection made to this port indicates what Visual Scripting runs after the nested State Graph starts. Stopped Output Trigger The second execution Output Trigger for the node. The connection made to this port indicates what Visual Scripting runs after the nested State Graph stops. Example graph usage Tip A State Unit node can use a new blank State Graph or an existing State Graph from a project. For more information, see Add a State Unit to a Script Graph. In the following example, a State Unit node triggers when the Script Graph's GameObject enters a specific Collider marked as a trigger. After the State Unit node starts, the Script Graph uses a Debug Log node to log Started new state! to the console. When the GameObject leaves the Collider, the State Unit node stops, and the Script Graph uses another Debug Log node to log Exited state to the console."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-subgraph-node.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-subgraph-node.html",
    "title": "Subgraph node | ModularUIPack",
    "summary": "Subgraph node Use a Subgraph node to reference and trigger another Script Graph's logic from inside a parent Script Graph. For more information on Subgraphs, see Subgraphs and State Units. For more information on Script Graphs, see Graphs. Fuzzy finder category The Subgraph node is in the Nesting category in the fuzzy finder. You can go to the Graphs category and select any Script Graph to create a Subgraph node. For more information on how to create a Subgraph, see Add a Subgraph to a Script Graph. Available ports By default, a Subgraph node has no ports. Use the Graph Inspector to specify the following on a Script Graph: Trigger Inputs. Trigger Outputs. Data Inputs. Data Outputs. These determine the type and number of ports available on its Subgraph node. For more information on how to define ports on a Script Graph, see Add a Trigger or Data port to a Script Graph. Port type Description Trigger Input Adds a control input port to the Subgraph node for the Script Graph. Use a Trigger Input to choose which node or nodes from a parent graph triggers Visual Scripting to run the logic in the Subgraph. Trigger Output Adds a control output port to the Subgraph node for the Script Graph. Use a Trigger Output to choose which node or nodes Visual Scripting triggers after the logic contained in the Subgraph finishes. Data Input Adds a data input port to the Subgraph node for the Script Graph. Use a Data Input to receive data from a parent graph. Data Output Adds a data output port to the Subgraph node for the Script Graph. Use a Data Output to send data back to a parent graph. Example graph usage Tip A Subgraph node can use a new blank Script Graph or an existing Script Graph from a project. For more information, see Add a Subgraph to a Script Graph. In the following example, the Subgraph node Character Move references a graph that makes a GameObject move based on a user's input. It has the following: One Trigger Input port. One Trigger Output port. Three Data Input ports. One Data Output port. After every Update Event in the application, the Character Move Subgraph node triggers and takes the X, Y, and Z coordinates of the current GameObject's Transform component. The Subgraph node then outputs a new Vector 3 value, which the parent graph assigns to the current GameObject with a Transform Set Position node. The Subgraph node reduces the number of nodes in the parent graph. Tip To see the Script Graph attached to the Subgraph node in this example, see either Input node or Output node. Related nodes Use a Subgraph node with the following nodes: Input node Output node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-subgraphs-state-units.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nesting-subgraphs-state-units.html",
    "title": "Subgraphs and State Units | ModularUIPack",
    "summary": "Subgraphs and State Units In a Script Graph, you can add a node that links directly to another Script Graph or State Graph. A nested Script Graph is a Subgraph. A nested State Graph is a State Unit. A nested Script Graph or State Graph helps you to organize and reuse logic across an application. A Subgraph or State Unit can exist as the node that adds it to a graph, or it can link to an external graph file. Subgraphs A Subgraph nests a Script Graph inside another Script Graph. Use a Subgraph node to reuse a set of logic across Script Graphs in an application. A Subgraph node can take inputs or send outputs back to its parent graph. Add ports to configure what data a Subgraph and its parent graph send to each other. Subgraph inputs and outputs With the Graph Inspector, you can choose and define the ports that appear when you use a Script Graph as a Subgraph. The port definitions for a Script Graph appear in the Graph Inspector when you have no other items selected in a graph. Defined ports appear on any Subgraph node that uses that Script Graph. In the following image, the Subgraph Rotate the Cube has: A Trigger Input port. An Data Input port. An Trigger Output port. An Data Output port. A port definition also changes the Input and Output nodes for a Subgraph. These nodes control the execution and flow between a Subgraph and its parent graph. In the following image, the Input and Output nodes have the same ports as the Rotate the Cube Subgraph node from the previous example. Note You can only use a single Input node and a single Output node in a Script Graph. If you add more Input or Output nodes, Visual Scripting only uses the first Input and Output nodes you added to the graph. For more information on how to add ports to a Script Graph, see Add a Trigger or Data port to a Script Graph. For more information on the different types of ports, see Subgraph node. For more information on how to use a Subgraph, see Add a Subgraph to a Script Graph. State Units A State Unit starts a State Graph from a Script Graph. You can't change the ports that appear on a State Unit node or send data between the State Graph and its parent Script Graph. The State Unit node starts different logic in a Script Graph, at different times in code execution: When the nested State Graph starts to run. While the nested State Graph runs. When the nested State Graph stops. After the nested State Graph stops. When you start a State Unit node's Start and Started ports in a parent graph, Visual Scripting marks all Start states inside the node's State Graph as active. When you start the Stop and Stopped ports, Visual Scripting marks all Start states as inactive. For more information on State Graphs and Start states, see State Graphs. For more information on the State Unit node, see State Unit node and Add a State Unit to a Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-input-system-button.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-input-system-button.html",
    "title": "On Input System Event Button node | ModularUIPack",
    "summary": "On Input System Event Button node Note The On Input System Event Button node is an Input System package node. For more information about how to use the Input System package in Visual Scripting, see Capture user input in an application. The On Input System Event Button node listens for a specific Input Action from a Player Input component. It doesn't send or read any other data. Use this node when you want to read user input but don't require any other data from an Input Action. Fuzzy finder category The On Input System Event Button node is in the Events > Input category in the fuzzy finder. Inputs The On Input System Event Button node has the following input ports: Name Type Description Target Player Input The Player Input component that Visual Scripting uses to display a list of input actions. The default is This, which is the Player Input component attached to the GameObject where Visual Scripting runs the Script Graph. You can also connect a node that outputs a Player Input component. Input Action Input Action An input action. Use the dropdown to select an input action from the Player Input component specified in Player Input, or connect a node that outputs an input action. Controls The On Input System Event Button node has the following controls: Name Type Description Input Action Change Type Input Action Change Option Set an Input Action Change Type to choose the interaction type that triggers the node. On Pressed The node triggers when a user presses the button from the selected Input Action input asset. On Hold The node triggers when a user holds the button from the selected Input Action input asset. On Released The node triggers when a user releases the button from the selected Input Action input asset. You can also set this control from the Graph Inspector. Additional node settings The On Input System Event Button node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Input System Event Button node has one output port: Name Type Description [!include[nodes-input-system-output-trigger-port](./snippets/input-system/nodes-input-system-output-trigger-port.md)] Example graph usage In the following example, an On Input System Event Button node counts how many times the user has pressed a button from the Fire Input Action and logs the result to the console. When a user presses a button associated with the Fire Input Action, Visual Scripting gets the current value of the Count Object variable with a Get Variable node. The Get Variable node sends Count's current value to an Add Inputs node's A port. Then, the Float literal node sends a value of 1 to the Add Inputs node's B port. The On Input System Event Button node triggers the Set Variable node and assigns the value from the Add Inputs node's Sum port as the New Value of Count. The Set Variable node logs the value of Count to the console with the Debug Log node: Related nodes The following nodes are related or similar to the On Input System Event Button node: On Input System Event Float node On Input System Event Vector 2 node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-input-system-float.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-input-system-float.html",
    "title": "On Input System Event Float node | ModularUIPack",
    "summary": "On Input System Event Float node Note The On Input System Event Float node is an Input System package node. For more information about how to use the Input System package in Visual Scripting, see Capture user input in an application. The On Input System Event Float node lists for a specific Input Action from a Player Input component. The node can output a single float value. Use this node when you want to read user input and return a single value, such as an axis value or input from a trigger on a controller. Fuzzy finder category The On Input System Event Float node is in the Events > Input category in the fuzzy finder. Inputs The On Input System Event Float node has the following input ports: Name Type Description Target Player Input The Player Input component that Visual Scripting uses to display a list of input actions. The default is This, which is the Player Input component attached to the GameObject where Visual Scripting runs the Script Graph. You can also connect a node that outputs a Player Input component. Input Action Input Action An input action. Use the dropdown to select an input action from the Player Input component specified in Player Input, or connect a node that outputs an input action. Controls The On Input System Event Float node has the following controls: Name Type Description Input Action Change Type Input Action Change Option Set an Input Action Change Type to choose the interaction type that triggers the node. On Pressed The node triggers when a user presses the button from the selected Input Action input asset. On Hold The node triggers when a user holds the button from the selected Input Action input asset. On Released The node triggers when a user releases the button from the selected Input Action input asset. You can also set this control from the Graph Inspector. Additional node settings The On Input System Event Float node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Input System Event Float node has the following output ports: Name Type Description [!include[nodes-input-system-output-trigger-port](./snippets/input-system/nodes-input-system-output-trigger-port.md)] Float Value Float A float output port. Visual Scripting uses your chosen Input Action and its configuration in your Input Actions asset to determine the float value returned by this port. See the Example graph usage section for an example. For more information about how to configure Input Action settings and use an Input Action asset, see Input Action Assets in the Input System package documentation. Example graph usage In the following example, an On Input System Event Float node uses the bindings assigned to the Lift Input Action. When a user presses any key from the Lift binding, Visual Scripting takes the float value it receives from the Input System and sends it as an input to the Vector 3 Create node's Y input port. At the same time, Visual Scripting triggers the Transform Set Position node and uses the output from the Vector 3 Create node to set a new position for the Script Machine's GameObject. For this example, Lift uses a Right Trigger from a Gamepad input device as a binding. When a user presses the Right Trigger, the Y value of the GameObject's transform increases, which makes the GameObject move upwards in the scene. Related nodes The following nodes are related or similar to the On Input System Event Float node: On Input System Event Button node On Input System Event Vector 2 node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-input-system-vector2.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-input-system-vector2.html",
    "title": "On Input System Event Vector 2 node | ModularUIPack",
    "summary": "On Input System Event Vector 2 node Note The On Input System Event Vector 2 node is an Input System package node. For more information about how to use the Input System package in Visual Scripting, see Capture user input in an application. The On Input System Event Vector 2 node listens for a specific Input Action from a Player Input component. The node can output two values as a Vector 2. Use this node when you want to read input and return two values, such as a joystick or mouse position. Fuzzy finder category The On Input System Event Vector 2 node is in the Events > Input category in the fuzzy finder. Inputs The On Input System Event Vector 2 node has the following input ports: Name Type Description Target Player Input The Player Input component that Visual Scripting uses to display a list of input actions. The default is This, which is the Player Input component attached to the GameObject where Visual Scripting runs the Script Graph. You can also connect a node that outputs a Player Input component. Input Action Input Action An input action. Use the dropdown to select an input action from the Player Input component specified in Player Input, or connect a node that outputs an input action. Controls The On Input System Event Vector 2 node has the following controls: Name Type Description Input Action Change Type Input Action Change Option Set an Input Action Change Type to choose the interaction type that triggers the node. On Pressed The node triggers when a user presses the button from the selected Input Action input asset. On Hold The node triggers when a user holds the button from the selected Input Action input asset. On Released The node triggers when a user releases the button from the selected Input Action input asset. You can also set this control from the Graph Inspector. Additional node settings The On Input System Event Vector 2 node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Input System Event Vector 2 node has the following output ports: Name Type Description [!include[nodes-input-system-output-trigger-port](./snippets/input-system/nodes-input-system-output-trigger-port.md)] Vector 2 Value Vector 2 A Vector 2 output port. Visual Scripting uses your chosen Input Action and its configuration in your Input Actions asset to determine the Vector 2 value returned by this port. See the Example graph usage section for an example. For more information about how to configure Input Action settings and use an Input Action asset, see Input Action Assets in the Input System package documentation. Example graph usage In the following example, an On Input System Event Vector 2 node uses the bindings assigned to the Move Input Action. When a user presses a button from the Move binding, Visual Scripting takes the Vector 2 value it receives from the Input System and sends it as an input to the Transform Set Position node's Value input port. The Vector 2 value changes the position of the GameObject associated with the Target transform. For this example, Move uses the W, A, S, and D keys. The GameObject moves up in the scene when the user presses W, moves down when the user presses S, and moves left or right when the user presses A or D. Related nodes The following nodes are related or similar to the On Input System Event Vector 2 node: On Input System Event Button node On Input System Event Float node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-button-input.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-button-input.html",
    "title": "On Button Input node | ModularUIPack",
    "summary": "On Button Input node Note The On Button Input node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Button Input node listens for a specified action on a virtual button from your Input Manager configuration. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. Fuzzy finder category The On Button Input node is in the Events > Input category in the fuzzy finder. Inputs The On Button Input node has the following input ports: Name Type Description Name String The name of the button the node listens to for an Input event, as it appears in the Input Manager. Action Press State The specific press state of the button that the node listens for. Hold The user holds down the button. Down The user presses the button. Up The user releases the button. Additional node settings The On Button Input node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Button Input node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Button Input node listens for the user to press the button or key assigned to the Jump axes in the Input Manager. When the user presses the button, the On Button Input node triggers the Rigidbody Add Force node, which adds an Impulse Force to the Rigidbody's Y axis: The Add Force node makes the Target Rigidbody lift into the air. Related nodes The following nodes are related or similar to the to the On Button Input node: On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-keyboard-input.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-keyboard-input.html",
    "title": "On Keyboard Input node | ModularUIPack",
    "summary": "On Keyboard Input node Note The On Keyboard Input node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Keyboard Input node listens for a specified action on a keyboard key. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. Fuzzy finder category The On Keyboard Input node is in the Events > Input category in the fuzzy finder. Inputs The On Keyboard Input node has the following input ports: Name Type Description Key Key Code The name of the keyboard key the node listens to for an Input event. For a list of all available keys, see the KeyCode page's Properties section in the Unity User manual. Action Press State The specific press state of the key that the node listens for. Hold The user holds down the key. Down The user presses the key. Up The user releases the key. Additional node settings The On Keyboard Input node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Keyboard Input node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Keyboard Input node listens for when the user presses the Space key. When the user presses Space, the On Keyboard Input triggers the Transform Translate node and lifts the GameObject along its Y coordinate by 5 units. This makes the GameObject jump. Related nodes The following nodes are related or similar to the the On Keyboard Input node: On Button Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-down.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-down.html",
    "title": "On Mouse Down node | ModularUIPack",
    "summary": "On Mouse Down node Note The On Mouse Down node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Down node listens for a mouse click action on a specific GameObject in your application. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Down node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Down node has one input port: Name Type Description Target GameObject The GameObject that the user needs to click with their mouse to trigger the On Mouse Down node. Additional node settings The On Mouse Down node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Down node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Down node listens for a click action on the GameObject where the graph runs. When a user clicks the GameObject, the On Mouse Down node triggers the GameObject Instantiate node. The Instantiate node creates a new GameObject, based on the Ball Prefab. It creates the Ball at a specific Position. It uses the Transform Get Local Rotation to match the new GameObject's Rotation to the GameObject where the Script Graph runs. Then, the graph adds a Rigidbody component to the new GameObject, and uses a Rigidbody Add Force node to add an Impulse force. When the user clicks the mouse button, the Script Graph creates a new Ball GameObject and sends it towards the camera. Related nodes The following nodes are related or similar to the On Mouse Down node: On Button Input node On Keyboard Input node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-drag.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-drag.html",
    "title": "On Mouse Drag node | ModularUIPack",
    "summary": "On Mouse Drag node Note The On Mouse Drag node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Drag node listens for a mouse click and hold on a specific GameObject in your application. It triggers the next node connected to it as long as the mouse button is held down on that GameObject. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Drag node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Drag node has one input port: Name Type Description Target GameObject The GameObject the user needs to click and hold with their mouse to trigger the On Mouse Drag node. Additional node settings The On Mouse Drag node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Drag node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Drag node triggers a Camera Screen To World Point node. When the user clicks and holds their mouse button over the Target GameObject from the On Mouse Drag node, the Script Graph gets the user's current mouse position with an Input Get Mouse Position node. The graph uses the X and Y values from the Get Mouse Position node's Vector 3 result to create a new Vector 3 value, with a fixed Z value. The Screen To World Point node uses the new Vector 3 and the camera saved in the Main Camera Scene variable to set the position of the Target GameObject's transform. The Script Graph allows the user to drag the Target GameObject around the scene when hold down their mouse button. Related nodes The following nodes are related or similar to the On Mouse Drag node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-enter.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-enter.html",
    "title": "On Mouse Enter node | ModularUIPack",
    "summary": "On Mouse Enter node Note The On Mouse Enter node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Enter node listens for the user's mouse pointer location to enter the Collider of a specified GameObject. When the mouse enters the Collider or GUI element, the node triggers the next node connected to it. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Enter node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Enter node has one input port: Name Type Description Target GameObject The GameObject with the Collider that triggers the On Mouse Enter node. Additional node settings The On Mouse Enter node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Enter node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Enter node triggers the Instantiate GameObject node when the user's mouse enters the Collider on the Script Machine's GameObject. The Instantiate node creates an instance of the Light Prefab, at the Prefab's Position and with the Prefab's Rotation. The graph saves the new instance of the GameObject to a Scene variable, Spotlight, so it can interact with the GameObject again later. The result is a spotlight that appears over the On Mouse Enter node's Target GameObject, when the user's mouse enters the Collider. Related nodes The following nodes are related or similar to the On Mouse Enter node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-exit.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-exit.html",
    "title": "On Mouse Exit node | ModularUIPack",
    "summary": "On Mouse Exit node Note The On Mouse Exit node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Exit node listens for the user's mouse pointer location to exit the Collider of a specified GameObject. When the mouse exits the Collider or GUI element, the node triggers the next node connected to it. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Exit node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Exit node has one input port: Name Type Description Target GameObject The GameObject with the Collider that triggers the On Mouse Exit node. Additional node settings The On Mouse Exit node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Exit node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, continued from the example from the On Mouse Enter node, the On Mouse Exit node triggers a Destroy GameObject node when the user's mouse exits the Collider on the Script Machine's GameObject. The Destroy GameObject node destroys the GameObject assigned to the Spotlight Scene variable. The GameObject was created and assigned to the variable elsewhere in the graph. When the user's mouse leaves the Collider, the Target GameObject no longer has a spotlight. Related nodes The following nodes are related or similar to the On Mouse Exit node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Input node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-input.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-input.html",
    "title": "On Mouse Input node | ModularUIPack",
    "summary": "On Mouse Input node Note The On Mouse Input node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Input node listens for a specific action on a user's mouse. The action doesn't need to happen on a specific GameObject's Collider. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Input node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Input node has the following input ports: Name Type Description Button Mouse Button The name of the mouse button that triggers the On Mouse Input node. Action Press State The specific state of the mouse button that the node listens for. Hold The user holds down the mouse button. Down The user presses the mouse button. Up The user releases the mouse button. Additional node settings The On Mouse Input node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Input node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Input node listens for the user to hold the right mouse button and triggers an Instantiate Camera node. The Instantiate node clones the camera saved as the Camera1 Scene variable and assigns it to the NewCamera Scene variable. It sets a new position for the cloned camera with a Transform Set Position node, before it switches which camera renders in the Game view with the Camera Render node. When the application runs, the default view in the Game view displays all three spheres in the scene. When the user holds the right mouse button and triggers the On Mouse Input node, the Game view changes to focus on the middle sphere. Related nodes The following nodes are related or similar to the On Mouse Input node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Over node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-over.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-over.html",
    "title": "On Mouse Over node | ModularUIPack",
    "summary": "On Mouse Over node Note The On Mouse Over node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Over node listens for a user's mouse to land over a specified GameObject's Collider. While the user's mouse is over the Collider, it triggers the next node connected to it once every frame. It doesn't send or receive any other data. Fuzzy finder category The On Mouse Over node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Over node has one input port: Name Type Description Target GameObject The GameObject with the Collider that triggers the On Mouse Over node. Additional node settings The On Mouse Over node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Over node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Over node triggers a Timer node when the user moves their mouse over the Target GameObject. The Timer runs for 2 seconds and triggers a Color Lerp node. For every Tick of the Timer node, the Color Lerp node uses the Elapsed value to calculate a new Color between Color A and Color B to make a smooth transition between colors. The Material Set Color node uses the Result from the Color Lerp node to set a new Color on the Object material. While the user's mouse is over the Target GameObject, the objects that use the Object material in the scene transition from red to blue over two seconds. The transition repeats until the user's mouse leaves the Target's Collider. Related nodes The following nodes are related or similar to the On Mouse Over node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Up node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-up-button.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-up-button.html",
    "title": "On Mouse Up As Button node | ModularUIPack",
    "summary": "On Mouse Up As Button node Note The On Mouse Up As Button node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Up As Button node listens for a user to release their mouse button after they click a Collider in your application. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. To trigger the On Mouse Up As Button node, the user must release their mouse button over the same Collider they clicked. If you want the user to trigger the node after they release their mouse button at any location in your application, use the On Mouse Up node instead. Fuzzy finder category The On Mouse Up As Button node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Up As Button node has one input port: Name Type Description Target GameObject The GameObject the user must click and release with their mouse button to trigger the node. Additional node settings The On Mouse Up As Button node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Up As Button node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Up As Button node runs as a coroutine to load a new scene after the user clicks and releases their mouse button over the Target GameObject. The Script Graph loads the scene, makes the graph wait until the scene loads, then sets the loaded scene as the active scene in the application. When the application starts, the active scene contains a plane with three spheres. After the Script Graph runs, the scene changes to a plane with a single cube. Related nodes The following nodes are related or similar to the On Mouse Up As Button node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-up.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-events-on-mouse-up.html",
    "title": "On Mouse Up node | ModularUIPack",
    "summary": "On Mouse Up node Note The On Mouse Up node is an Input Manager node. For more information about how to use the Input Manager with Visual Scripting, see Capture user input in an application. The On Mouse Up node listens for a user to release their mouse button after they click a Collider in your application. It triggers the next node connected to it after the action occurs in the application. It doesn't send or receive any other data. The user can release their mouse button anywhere in your application to trigger the On Mouse Up node. If you want the node to trigger after the user releases the mouse button over the same Collider specified in the node's Target, use the On Mouse Up As Button node instead. Fuzzy finder category The On Mouse Up node is in the Events > Input category in the fuzzy finder. Inputs The On Mouse Up node has one input port: Name Type Description Target GameObject The GameObject the user needs to click with their mouse button to have the On Mouse Up node listen for a mouse button release action. The user can release their mouse button anywhere to trigger the On Mouse Up node, but they must click the GameObject specified as the Target. Additional node settings The On Mouse Up node has additional settings. Access these settings from the Graph Inspector: Name Type Description [!include[nodes-coroutine](./snippets/nodes-coroutine.md)] Outputs The On Mouse Up node has one output port: Name Type Description [!include[nodes-input-output-trigger](./snippets/input-manager/nodes-input-output-trigger.md)] Example graph usage In the following example, the On Mouse Up node adds a force to a GameObject based on the user's mouse position when they release their mouse button. The On Mouse Up node triggers a Camera Screen To World Point node to get the user's mouse position, before it sends the X value of the mouse to a Rigidbody Add Force node to move the GameObject. When the user clicks on the sphere in the middle of the scene and releases their mouse button, the sphere moves towards their mouse location. Related nodes The following nodes are related or similar to the On Mouse Up node: On Button Input node On Keyboard Input node On Mouse Down node On Mouse Drag node On Mouse Enter node On Mouse Exit node On Mouse Input node On Mouse Over node On Mouse Up As Button node"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes-reference.html",
    "title": "Node reference | ModularUIPack",
    "summary": "Node reference Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Nodes are the most basic element of computation in visual scripting. Nodes display the required information as text, but editing is done via the Inspector. To edit them, select any node and edit its properties in the Inspector. This node The This node returns the game object that owns the machine in which the graph runs. Control nodes Control nodes branch, loop and merge the flow. Time nodes Time nodes include timer, cooldown and wait nodes. Events Scripting nodes listen for events. They are the starting point for all scripts and appear as special green nodes in graphs. Variables These nodes get, set, and check variables. Nulls Nodes that deal with the nulls, a.k.a. \"nothing\" value. Formulas Formula evaluates logical and mathematical expressions directly via a textual Formula and match with multiple arguments."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nodes.html",
    "title": "Nodes | ModularUIPack",
    "summary": "Nodes Nodes are the most basic part of scripts in Visual Scripting. A node can listen for events, get the value of a variable, modify a component on a GameObject, and more. Nodes appear as blocks in the Graph Editor. You can arrange and connect these blocks with edges to create logic for an application. Add nodes with the fuzzy finder. Click and drag a node to move it in the Graph Editor. Node anatomy Visual Scripting highlights nodes in your current selection. All nodes have a header, which displays the node's name. Some node headers might contain additional information or controls. Select a node in your graph, the Visual Scripting Graph Inspector displays the following information: The node's name and type icon. A brief description of what the node does, if available. The current warning messages or errors for the node. The additional settings for the node, if available. The required type for each input port and a brief description, if available. The type for each output port and a brief description, if available. Connections and ports Connect a port from one node to a compatible port on another node to create an edge. Edges form the logic flow in a Visual Scripting graph. Click any port to create a new edge. Edges are color-coded: edges that control the logic flow in your graph are white. Data edges are colored based on their type. For more information about types, see Object types. When you create a new edge, Visual Scripting highlights ports on any other nodes in a graph where you can make a valid connection. If you enable Dim Incompatible Nodes, Visual Scripting also dims any nodes or ports without a valid connection. Ports on the left side of a node are Input Ports. Ports on the right side of a node are Output Ports. An input port or output port can be a Control Port or a Data Port: Control Ports control the logical flow in a graph. They tell Visual Scripting what order to execute the nodes in a graph, from left to right. The icon for a control port is always an arrow. These arrows display the direction of the flow of logic in a graph. Data Ports send and receive data, such as number values or GameObjects, between nodes. They have colors that correspond to the specific type they expect to receive as inputs, or send as outputs. Their icons change based on their type. You can make multiple connections to or from the same port, with some restrictions: You can connect a single Data Output port to multiple Data Input ports. You can't connect multiple Data Output ports to a single Data Input port. Visual Scripting can't choose which value to use. You can connect multiple Control Output ports to a single Control Input port. You can't connect a single Control Output port to multiple Control Input ports. Visual Scripting can't choose which node to run first. For more information on how to connect nodes, see Connect nodes in a Script Graph. More complex nodes can have more complex or specialized ports, outside of the ports described here. Node controls and inline values A node might have additional controls that display on its header or in the Graph Inspector. Controls can change the available ports or behavior of a node. Some ports might also use inline values. Element Example Description Control A control appears as a dropdown option on the header of a node. For example, a Container Type control might tell a node to expect to receive a GameObject instead of a Script Machine. Inline Value An inline value appears as an object picker field next to a port. You can use an inline value instead of a node connection to specify a value for a node. Not all Visual Scripting types support inline values. ## Node overloads Variations of a Visual Scripting node are called overloads. Overloads change the input and output data that a node can accept, and can change the number of input or output data ports on a node. For example, the Add node has four overloads, as shown in the following image of the fuzzy finder after a search for Add. You can distinguish each overload through its subcategory in the fuzzy finder. The Add node is a part of the Math category, but each overload is a part of a different subcategory: Generic, Scalar, Vector 2, Vector 3, or Vector 4. The specific node overload changes what input and output data the Add node can accept. While a Generic Add node can input and output any object type in Visual Scripting, a Vector 3 Add node can only take 3D vectors as an input, and can only output a single 3D vector: The default type and number of ports on the Add node stays consistent across its overloads. For the Rotate node, the type and number of ports varies. Based on the Rotate node you select, you might be able to specify the angle of rotation as a vector, as separate float values, or as an angle relative to each axis. You can also choose whether the node rotates the GameObject relative to itself, or relative to the center of the scene's world space."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nulls.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-nulls.html",
    "title": "Nulls node | ModularUIPack",
    "summary": "Nulls node Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Null nodes deal with the null value, which is scripting lingo for \"nothing\". The null node The null node always returns null as a value. Leaving a Unity object reference field empty (\"None\") automatically means null. Null Check The null check is a shortcut for a branch on an equality comparison with null. It can be useful to direct the flow in different directions depending on whether a value is null. For example, it can be used to handle a situation differently whether a transform has a parent in the hierarchy or not. Null Coalesce The null coalesce node provides a fallback value in case the original input is null. For example, the null coalesce node defines a default fallback audio clip in case the one on the audio source is missing."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-open-graph-edit.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-open-graph-edit.html",
    "title": "Open a graph file | ModularUIPack",
    "summary": "Open a graph file You can open a graph file from multiple locations, based on the graph type and its source type. For information on how to create a new graph file, see Create a new graph file. From the Project window To open a graph from the Project window: Go to Window > General > Project, or press Ctrl+5 (macOS: Cmd+5) to open the Project window. Find the location in your Project window's folders where you saved the graph file you want to edit. Double-click the graph file to open it in the Graph window. From the Graph Inspector If you have a nested or embedded graph inside another graph file, you can open it from the Graph Inspector. In the Graph window, select the node that represents the graph you want to edit. This node could be a transition, Super State, Subgraph, or State Unit. Open the Graph Inspector. In the Graph Inspector, select Edit Graph. The graph opens in the same Graph window. From a Script Machine or State Machine If you've attached or embedded a graph in a Script Machine or State Machine on a GameObject, you can open the graph from the component on the GameObject: Go to Window > General > Hierarchy, or press Ctrl+4 (macOS: Cmd+4) to open the Hierarchy window. In the Hierarchy window, select the GameObject that has the Script Machine or State Machine with the graph you want to edit. With the GameObject selected in the Hierarchy window, go to Window > General > Inspector, or press Ctrl+3 (macOS: Cmd+3) to open the Inspector window. On the Script Machine or State Machine component, select Edit Graph. Next steps After you open a graph file, you can add a node to the graph. For more information on how to add a node to a Script Graph, see Add a node to a Script Graph. For more information on how to edit a State Graph, see Develop logic transitions with State Graphs. You can also add a Sticky Note to add comments to a graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-refactor-add-attribute.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-refactor-add-attribute.html",
    "title": "Add the RenamedFrom attribute to a C# script | ModularUIPack",
    "summary": "Add the RenamedFrom attribute to a C# script To use nodes generated from a custom C# script in a project after you rename a member, class, struct, type, or enum, add the [RenamedFrom] attribute to the relevant API element in the script file. For more information on the [RenamedFrom] attribute, see Refactor a C# script with Visual Scripting. To add the attribute to a C# script: [!include[open-project-window](./snippets/vs-open-project-window.md)] In the Project window, double-click the C# script file you want to refactor. Unity opens the file in the program you specified in your preferences, under External Script Editor. NOTE For more information on script editors in Unity, see Integrated development environment (IDE) support in the Unity User Manual. In your external editor, do the following: Add the [RenamedFrom] attribute above the definition of the part of the script you want to rename. Add the element's old name as a string to the [RenamedFrom] attribute, as its parameter. For example: using UnityEngine; using Unity.VisualScripting; [RenamedFrom(\"Character\")] public class Player : MonoBehaviour { [RenamedFrom(\"InflictDamage\")] public void TakeDamage(int damage) { //... } } [!include[save-script](./snippets/vs-save-script.md)] [!include[return-unity](./snippets/vs-return-unity.md)] [!include[regen-node-library](./snippets/vs-regen-node-library.md)] Note If you change the namespace or namespaces used in your script, you must include the old namespace or namespaces to use the [RenamedFrom] attribute. Next steps Unity recommends that you leave the attribute in the script file, even after a successful recompile. Nodes that use your C# script no longer have errors related to a missing member, class, struct, type, or enum. Additional resources Refactor a C# script with Visual Scripting Configure project settings Add or remove types from your Type Options Custom C# nodes Custom events"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-refactoring.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-refactoring.html",
    "title": "Refactor a C# script with Visual Scripting | ModularUIPack",
    "summary": "Refactor a C# script with Visual Scripting Visual Scripting creates nodes from methods, fields, and properties from C# script in your project. Visual Scripting creates these nodes after you regenerate your Node Library and add any relevant types to your Type Options. For example, Visual Scripting created the following Take Damage node from a custom C# script that defines the Player class. Visual Scripting generated the node with the following code, which creates a Player class with a TakeDamage member. using UnityEngine; public class Player : MonoBehaviour { public void TakeDamage(int damage) { //... } } Tip You can create your own custom node or create a custom event to customize the ports and information displayed on your nodes. If you change the name of the TakeDamage member in the C# script, Visual Scripting displays an error in Script Graphs that use the Take Damage node. To rename a member, type, class, struct, enum, or other API element that a Visual Scripting node uses in a project, add the [RenamedFrom] attribute to the relevant API element in the script file. To avoid issues with Unity's serialization, the [RenamedFrom] attribute tells Visual Scripting that an API or one of its elements has been renamed. For more information on how to add the [RenamedFrom] attribute to a C# script, see Add the RenamedFrom attribute to a C# script. Additional resources Add the RenamedFrom attribute to a C# script Configure project settings Add or remove types from your Type Options Custom C# nodes Custom events"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-relations.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-relations.html",
    "title": "Use relations to debug | ModularUIPack",
    "summary": "Use relations to debug Relations are a useful tool to understand the dependencies between each port of a node. For example, to get the result of A + B with the Add node, you need to provide a value for A and B. Likewise, before invoking the Log node, you should provide a value for its Message input port. Visual scripting uses this information in the background for Predictive Debugging. For example, if you tried to get the value of A + B without providing a value for A, the node would show up as orange to indicate that it fails in play mode. When that happens, you can use the warnings shown in the Graph Inspector to know what is missing. Relations can also help understand the ports that are required and which ports are optional. For example, in the Get Child node (under fuzzy finder Codebase > Unity Engine > Transform), there is no need to connect the control ports if the goal is to get the transform value output. Enable the Relations toggle in the toolbar for the inner connections of each node to be displayed. Note You cannot edit relations. They are predefined for each type of node."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-script-graphs-intro.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-script-graphs-intro.html",
    "title": "Develop application logic with Script Graphs | ModularUIPack",
    "summary": "Develop application logic with Script Graphs Use Script Graphs to create interactions and logic in your project. Create a graph file Create a graph file to get started. For more information, see Create a new graph file. Add and connect nodes After you have a graph file, add a node or connect nodes together to build logic. Create Subgraphs Reuse logic with Subgraphs. Debug your graphs You can use relations to help you debug your scripts, or use Visual Scripting's predictive debugging to help you catch problems."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-scripts-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-scripts-reference.html",
    "title": "Script Graph nodes | ModularUIPack",
    "summary": "Script Graph nodes Visual scripting has four nodes that you can use to identify and manipulate the Script Graphs assigned to a GameObject and its Script Machines: Set Script Graph Has Script Graph Get Script Graph Get Script Graphs Set Script Graph You can use the Set Script Graph node to assign a Script Graph to a specific Script Machine, or to the first Script Machine attached to a specific GameObject. Item Description Node Parameters Container Type Specifies whether the Target is a GameObject or Script Machine. Input Ports Enter (Input Trigger) The execution input trigger for the node. Target (GameObject or Script Machine) The GameObject or Script Machine where the node sets the Graph. Graph (Script Graph Asset) The Script Graph the node sets on the Target. Output Ports Exit (Output Trigger) The execution output trigger. Graph (Script Graph Asset; Optional) Outputs the Graph. Setting the required node parameters and inputs The Set Script Graph node has one required input parameter, called Container Type, which is set using the dropdown in the node's header. The Container Type specifies what component type the node should expect as an input for its Target: If you choose GameObject, the node expects to receive a GameObject, and assigns the graph to the first Script Machine attached to that GameObject. If you choose Script Machine, the node expects to receive a Script Machine, and you can specify the exact Script Machine where you want to set your Script Graph. Depending on which Container Type you select, the icon displayed next to the Target input port on the node changes: Container Type Target Icon GameObject Script Machine The node has three input ports, located on the left side. The first port, Enter, connects to the node that should start the execution of the Set Script Graph node. The other two ports collect the Set Script Graph node's required input data: The Target, or the GameObject or Script Machine where you want to set a Script Graph. The Graph, or the Script Graph to assign to the GameObject or Script Machine. Outputs The Set Script Graph node has two output ports, located on the right side. The first port, Exit, establishes the connection to the node that should execute after the Set Script Graph node has finished. The second port, Graph, can output the Script Graph that you assigned using the node. Has Script Graph The Has Script Graph node allows you to determine whether a GameObject or Script Machine has a specific Script Graph assigned to it. Item Description Node Parameters Container Type Specify whether the Target is a GameObject or Script Machine. Input Ports Enter (Input Trigger) The execution input trigger for the node. Target (GameObject or Script Machine) The GameObject or Script Machine where the node should check for the Graph. Graph (Script Graph Asset) The Script Graph to search for on the GameObject or Script Machine. Output Ports Exit (Output Trigger) The execution output trigger, which starts execution of the next node in the flow after checking for the specified Script Graph. Has Graph (Boolean) Outputs true if the node found the specified Script Graph, false if not. Setting the required node parameters and inputs The Has Script Graph node has one required input parameter, called Container Type, which is set using the dropdown in the node's header. The Container Type specifies what component type the node should expect as an input for its Target: If you choose GameObject, the node expects to receive a GameObject, and checks for the graph on the first Script Machine attached to that GameObject. If you choose Script Machine, the node expects to receive a Script Machine, and you can specify the exact Script Machine where you want to check for the Script Graph. Depending on which Container Type you select, the icon displayed next to the Target input port on the node changes: Container Type Target Icon GameObject Script Machine The node has three input ports, located on the left side. The first port, Enter, connects to the node that should start the execution of the Has Script Graph node. The other two ports collect the Has Script Graph node's required input data: The Target, or the GameObject or Script Machine where you want to check for a Script Graph. The Graph, or the Script Graph to search for on the GameObject or Script Machine. Outputs The Has Script Graph node returns true if it finds the specified Script Graph. Otherwise, it returns false. You can use a control node connected to the Has Script Graph's output port to change what your script does next, based on the result from Has Script Graph. For more information about control nodes, see Control nodes. Get Script Graph The Get Script Graph node returns the first Script Graph set on a GameObject. Item Description Input Ports GameObject (GameObject) The GameObject where the node should retrieve a set Script Graph. Output Ports Graph (Script Graph Asset) Outputs the first or only Script Graph set on the GameObject, or null if there is no set Script Graph. Setting the required node parameters and inputs The Get Script Graph node is a data node. It can't control any logic in your script, and is only used to return data. The node has a single input port, located on the left side, which collects the node's required input data: The GameObject where the node should retrieve the Script Graph. You can choose a specific GameObject, or leave the default selection as This to use the GameObject where your script is currently running. Outputs The Get Script Graph node has a single output port, located on the right side. The output port returns the GameObject's first set Script Graph, or null, if there is no set Script Graph. Note The Get Script Graph node returns only the first Script Graph set on a GameObject. To return all Script Graphs set on a GameObject, use the Get Script Graphs node. Get Script Graphs The Get Script Graphs node returns a list of all Script Graphs set on a GameObject. Item Description Input Ports GameObject (GameObject) The GameObject where the node should retrieve a list of set Script Graphs. Output Ports Graphs (List of Script Graph Assets) Outputs a list of all Script Graphs set on the GameObject, or an empty list if there are no set Script Graphs. Setting the required node parameters and inputs The Get Script Graphs node is a data node. It can't control any logic in your script, and is only used to return data. The node has a single input port, located on the left side, which collects the node's required input data: The GameObject where the node should retrieve a list of Script Graphs. You can choose a specific GameObject, or leave the default selection as This to use the GameObject where your script is currently running. Outputs The Get Script Graphs node has a single output port, located on the right side. The output port returns a list of all set Script Graphs for the GameObject, or an empty list, if there are no set Script Graphs."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-self.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-self.html",
    "title": "This node | ModularUIPack",
    "summary": "This node Use a This node to return a GameObject with a Script Machine component that has the Script Graph. If the Script Machine uses an Graph source and multiple GameObjects use the same graph, the returned GameObject can change. Many nodes default their target to This. For example, the following Transform nodes are the same: Not all nodes support the This inline value. Any node that doesn't support the This inline value displays None instead of This in the default value field. For example, the Destroy node displays None. In these cases, manually specify the connection if you want to use This. You can use the This node in a graph even if the graph isn't yet assigned to a GameObject. The This node represents the GameObject that owns the graph at runtime."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-set-preferences.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-set-preferences.html",
    "title": "Configure your preferences | ModularUIPack",
    "summary": "Configure your preferences You can configure specific preferences in Visual Scripting to control the behavior of the Graph window and your nodes. To configure your preferences for Visual Scripting: Go to Edit > Preferences. Select Visual Scripting. Core preferences The following preferences control general behaviors across all graph types in Visual Scripting. Preference Description Dim Inactive Nodes Enable Dim Inactive Nodes to dim any nodes in the Graph Editor that aren't connected to the logic flow in a graph. This provides you with a visual cue that a dimmed node isn't used in the graph in its current configuration. Disable Dim Inactive Nodes to display all nodes as active, regardless of their connection state. NOTE You can also control this preference from the Graph toolbar. For more information, see The interface. Dim Incompatible Nodes Enable Dim Incompatible Nodes to dim all nodes that don't have a compatible connection port when you create a new edge. Disable Dim Incompatible Nodes to display all nodes as active for a new edge. Show Variables Help Enable Show Variables Help to display a brief explanation of the selected variable scope in the Blackboard. Disable Show Variables Help to hide these explanations. Create Scene Variables Enable Create Scene Variables to automatically create a Scene Variables GameObject with a Variables component and a Scene Variables script component after you create a Scene variable. A GameObject with these components is required to use Scene variables in a project. Disable Create Scene Variables to create these components on a GameObject manually. Show Grid Enable Show Grid to display a grid on the background of the Graph Editor. Disable Show Grid to hide the grid. Snap to Grid Enable Snap to Grid to force nodes to stick or snap to points on a grid in the Graph Editor. Disable Snap to Grid to move nodes freely and disable the snap-to-point behavior. Pan Speed Set a Pan Speed to control how quickly the view in the Graph Editor moves when you pan vertically with the scroll wheel. Drag Pan Speed Set a Drag Pan Speed to control how quickly the view in the Graph Editor moves when you move a node to the edge of the Graph window. Zoom Speed Set a Zoom Speed to control how quickly the Graph Editor zooms in or zooms out while you change the zoom level in the Graph window. For more information on how to change the zoom level in the Graph Editor, see Choose a control scheme. Overview Smoothing Set an Overview Smoothing to control how gradually the Graph Editor zooms or pans after you select the Overview option in the Graph toolbar. Carry Children Enable Carry Children to move all connected child nodes when you move a parent node in the Graph Editor. Disable Carry Children to only move the currently selected node in the Graph Editor. NOTE You can also change this setting from the Graph toolbar in the Graph window. For more information, see The interface. Disable Playmode Tint Enable Disable Playmode Tint to display all nodes in the Graph window as normal while the Unity Editor is in Play mode. Disable Disable Playmode Tint to add a tint to all nodes in the Graph window while the Editor is in Play mode. For more information on Play mode, see The Game view in the Unity User Manual. Control Scheme Select a Visual Scripting control scheme. For more information, see Choose a control scheme. Default Use the Default Visual Scripting control scheme. Alternate Use the Alternate Visual Scripting control scheme. Clear Graph Selection Enable Clear Graph Selection to clear any graph displayed in the Graph window after you select a GameObject with no set graph or graphs. Disable Clear Graph Window to keep the last displayed graph if the selected GameObject has no set graph assets. NOTE Visual Scripting always updates the Graph window to display the set graph on a selected GameObject, regardless of your chosen Clear Graph Selection setting. Human Naming Enable Human Naming to convert all displayed method names from camel case to title case. For example, camelCase becomes Camel Case. Disable Human Naming to leave all names in camel case. Max Search Results Set a Max Search Results value to specify the maximum number of search results returned by the fuzzy finder after you use the search bar. Group Inherited Members Enable Group Inherited Members to group together inherited nodes from a parent or base class to your current search term in the fuzzy finder. For example, an Audio Source is a Component: it has its own specific methods and nodes, but you can interact with it as a Component with Component nodes. While you perform a search in the fuzzy finder, Visual Scripting groups the nodes inherited from Component and displays them in grey. Disable Group Inherited Members to display nodes in the search results without grouping these inherited nodes. Developer Mode Enable Developer Mode to display additional preferences in the Preferences window and add additional features in the Graph window and other areas of the Unity Editor. For more information on the additional Developer Mode preferences, see Additional Developer Mode preferences. AOT Safe Mode Enable AOT Safe Mode to exclude nodes from search results in the fuzzy finder that might cause problems for platforms that require ahead of time (AOT) compilation. For example, Visual Scripting excludes nodes that use the Generic type. Disable AOT Safe Mode to display all nodes and types in the fuzzy finder. Script Graphs preferences The following preferences change the behavior of Script Graphs in the Graph window. Preference Description Update Nodes Automatically NOTE This feature is experimental. Enable Update Nodes Automatically to let Visual Scripting automatically update your Node Library when it detects a change in any script inside your project's Assets folder. Disable Update Nodes Automatically to manually regenerate your Node Library after you make a change to a script. For more information on how to regenerate your Node Library, see Configure project settings. Predict Potential Null References A predictive debugging feature. Enable Predict Potential Null References to display warnings about potential null value inputs in your graphs. Disable Predict Potential Null References to disable these warnings. NOTE Sometimes, predictive debugging might return false positive results when you enable this setting. Predict Potential Missing Components A predictive debugging feature. Enable Predict Potential Missing Components to display warnings about potential missing components in your graphs, such as a missing node input. Disable Predict Potential Missing Components to disable these warnings. NOTE Sometimes, predictive debugging might return false positive results when you enable this setting. Show Connection Values Enable Show Connection Values to display the input and output values sent between nodes while the Editor is in Play mode. This can make it easier to debug your scripts. Disable Show Connection Values to hide these value labels while in Play mode. For more information on Play mode, see The Game view in the User Manual. NOTE You can also control this preference from the Graph toolbar. For more information, see The interface. Predict Connection Values Enable Predict Connection Values to have the Graph Editor predict what input and output values your graph sends between nodes while the Unity Editor is in Play mode. For example, Visual Scripting would display the value currently set for a variable in your script, though that value might change before it's used by a node. Disable Predict Connection Values to hide these predicted input and output values. Hide Port Labels Enable Hide Port Labels to hide the name labels for node input and output ports. Disable Hide Port Labels to display these name labels. Animate Control Connections Enable Animate Control Connections to display a droplet animation across node control port edges while the Editor is in Play mode. Disable Animate Control Connections to disable the animations. For more information about the different node port types and edges, see Nodes. For more information on Play mode, see The Game view in the User Manual. Animate Value Connections Enable Animate Value Connections to display a droplet animation across node data port edges while the Editor is in Play mode. Disable Animate Value Connections to disable the animations. For more information about the different node port types and edges, see Nodes. For more information on Play mode, see The Game view in the User Manual. Skip Context Menu Enable Skip Context Menu to always open the fuzzy finder when you right-click in the Graph Editor. To access the context menu, use Shift+right-click. Disable Skip Context Menu to open the fuzzy finder when you right-click with no nodes or groups selected in the Graph Editor. The context menu opens when you right-click with a node or group selected. State Graphs preferences The following preferences change the behavior of State Graphs in the Graph window. Preference Description States Reveal Use the dropdown to choose when a Script State node displays a list of events from its graph. If you have many Script State nodes in a State Graph, you might want to change this setting. Never Script State nodes never display their list of events. Always Script State nodes always display their list of events. On Hover Script State nodes only display their list of events when you hover over the node in the Graph window. On Hover with Alt Script State nodes only display their list of events when you hover over the node while you hold Alt. When Selected Script State nodes only display their list of events when you select the node in the Graph window. On Hover or Selected Script State nodes display their list of events when you hover over the node, or when you select the node in the Graph window. On Hover with Alt or Selected Script State nodes display their list of events when you hover over the node while you hold Alt, or when you select the node in the Graph window. Transitions Reveal Use the dropdown to choose when a transition displays a list of events from its graph. If you have many transitions in a State Graph, you might want to change this setting. Never Transitions never display a list of events. Always Transitions always display a list of events. On Hover Transitions only display a list of events when you hover over the transition in the Graph window. On Hover with Alt Transitions only display a list of events when you hover over the transition while you hold Alt. When Selected Transitions only display a list of events when you select the transition in the Graph window. On Hover or Selected Transitions display a list of events when you hover over the transition, or when you select the transition in the Graph window. On Hover with Alt or Selected Transitions display a list of events when you hover over the transition while you hold Alt, or when you select the transition in the Graph window. Transitions End Arrow Enable Transitions End Arrow to add an arrow to the end of each transition edge in a State Graph. Disable Transitions End Arrow to display edges between transitions as simple lines. If you have many transitions in your State Graphs, you might want to disable this setting. Animate Transitions Enable Animate Transitions to display a droplet animation across transition edges when the Editor is in Play mode. Disable Animate Transitions to disable the animations. For more information on Play mode, see The Game view in the User Manual. Additional Developer Mode preferences Note You can only access the following preferences after you have enabled *Developer Mode in your Core preferences. These Developer Mode preferences provide help with developing extensions or custom nodes for Visual Scripting. Their continued support in the Visual Scripting package isn't guaranteed. Preference Description Debug Enable Debug to add additional logging and visual overlays to help you debug element rendering in the Graph window. For example, if you created a custom node, use this setting to help debug your UI. Disable Debug to disable the logging and hide these overlays. Track Metadata State Enable Track Metadata State to add more information to logging. This can assist in debugging. Disable Track Metadata State to hide this additional information. Debug Inspector UI Enable Debug Inspector UI to add more overlays and additional details. The information available is greater than what Visual Scripting provides with the Debug setting, and affects more areas of the Editor's UI. Only enable this setting if you need more in-depth debugging feedback. Disable Debug Inspector UI to hide this information."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-state-graphs-intro.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-state-graphs-intro.html",
    "title": "Develop logic transitions with State Graphs | ModularUIPack",
    "summary": "Develop logic transitions with State Graphs You can use State Graphs to change behaviors of GameObjects based on specific conditions. Create a new state After you create a new graph file for a State Graph, you can create states to tell Visual Scripting what a GameObject does, and when. Create a transition Use transitions to tell Visual Scripting when a GameObject changes states. There's no restriction on how many transitions you can create. State Unit nodes You can use a State Unit node to nest a State Graph inside a Script Graph."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-states-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-states-reference.html",
    "title": "State Graph nodes | ModularUIPack",
    "summary": "State Graph nodes Visual scripting has four nodes that you can use to identify and manipulate the State Graphs assigned to a GameObject and its State Machines: Set State Graph Has State Graph Get State Graph Get State Graphs Set State Graph You can use the Set State Graph node to assign a State Graph to a specific State Machine, or to the first State Machine attached to a specific GameObject. Item Description Node Parameters Container Type Specifies whether the Target is a GameObject or State Machine. Input Ports Enter (Input Trigger) The execution input trigger for the node. Target (GameObject or State Machine) The GameObject or State Machine where the node sets the Graph. Graph (State Graph Asset) The State Graph the node sets on the Target. Output Ports Exit (Output Trigger) The execution output trigger. Graph (State Graph Asset; Optional) Outputs the Graph. Setting the required node parameters and inputs The Set State Graph node has one required input parameter, called Container Type, which is set using the dropdown in the node's header. The Container Type specifies what component type the node should expect as an input for its Target: If you choose GameObject, the node expects to receive a GameObject, and assigns the graph to the first State Machine attached to that GameObject. If you choose State Machine, the node expects to receive a State Machine, and you can specify the exact State Machine where you want to set your State Graph. Depending on which Container Type you select, the icon displayed next to the Target input port on the node changes: Container Type Target Icon GameObject State Machine The node has three input ports, located on the left side. The first port, Enter, connects to the node that should start the execution of the Set State Graph node. The other two ports collect the Set State Graph node's required input data: The Target, or the GameObject or State Machine where you want to set a State Graph. The Graph, or the State Graph to assign to the GameObject or State Machine. Outputs The Set State Graph node has two output ports, located on the right side. The first port, Exit, establishes the connection to the node that should execute after the Set State Graph node has finished. The second port, Graph, can output the State Graph that you assigned using the node. Has State Graph The Has State Graph node allows you to determine whether a GameObject or State Machine has a specific State Graph assigned to it. Item Description Node Parameters Container Type Specify whether the Target is a GameObject or State Machine. Input Ports Enter (Input Trigger) The execution input trigger for the node. Target (GameObject or State Machine) The GameObject or State Machine where the node should check for the Graph. Graph (State Graph Asset) The State Graph to search for on the GameObject or State Machine. Output Ports Exit (Output Trigger) The execution output trigger, which starts execution of the next node in the flow after checking for the specified State Graph. Has Graph (Boolean) Outputs true if the node found the specified State Graph, false if not. Setting the required node parameters and inputs The Has State Graph node has one required input parameter, called Container Type, which is set using the dropdown in the node's header. The Container Type specifies what component type the node should expect as an input for its Target: If you choose GameObject, the node expects to receive a GameObject, and checks for the graph on the first State Machine attached to that GameObject. If you choose State Machine, the node expects to receive a State Machine, and you can specify the exact State Machine where you want to check for the State Graph. Depending on which Container Type you select, the icon displayed next to the Target input port on the node changes: Container Type Target Icon GameObject State Machine The node has three input ports, located on the left side. The first port, Enter, connects to the node that should start the execution of the Has State Graph node. The other two ports collect the Has State Graph node's required input data: The Target, or the GameObject or State Machine where you want to check for a State Graph. The Graph, or the State Graph to search for on the GameObject or State Machine. Outputs The Has State Graph node returns true if it finds the specified State Graph. Otherwise, it returns false. You can use a control node connected to the Has State Graph's output port to change what your script does next, based on the result from Has State Graph. For more information about control nodes, see Control nodes. Get State Graph The Get State Graph node returns the first State Graph set on a GameObject. Item Description Input Ports GameObject (GameObject) The GameObject where the node should retrieve a set State Graph. Output Ports Graph (State Graph Asset) Outputs the first or only State Graph set on the GameObject, or null if there is no set State Graph. Setting the required node parameters and inputs The Get State Graph node is a data node. It can't control any logic in your script, and is only used to return data. The node has a single input port, located on the left side, which collects the node's required input data: The GameObject where the node should retrieve the State Graph. You can choose a specific GameObject, or leave the default selection as This to use the GameObject where your script is currently running. Outputs The Get State Graph node has a single output port, located on the right side. The output port returns the GameObject's first set State Graph, or null, if there is no set State Graph. Note The Get State Graph node returns only the first State Graph set on a GameObject. To return all State Graphs set on a GameObject, use the Get State Graphs node. Get State Graphs The Get State Graphs node returns a list of all State Graphs set on a GameObject. Item Description Input Ports GameObject (GameObject) The GameObject where the node should retrieve a list of set State Graphs. Output Ports Graphs (List of State Graph Assets) Outputs a list of all State Graphs set on the GameObject, or an empty list if there are no set State Graphs. Setting the required node parameters and inputs The Get State Graphs node is a data node. It can't control any logic in your script, and is only used to return data. The node has a single input port, located on the left side, which collects the node's required input data: The GameObject where the node should retrieve a list of State Graphs. You can choose a specific GameObject, or leave the default selection as This to use the GameObject where your script is currently running. Outputs The Get State Graphs node has a single output port, located on the right side. The output port returns a list of all set State Graphs for the GameObject, or an empty list, if there are no set State Graphs."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-sticky-notes.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-sticky-notes.html",
    "title": "Add comments to a graph | ModularUIPack",
    "summary": "Add comments to a graph Use Sticky Notes to add comments to a graph. Sticky Notes can: Describe how a section of your graph works. Leave a note for yourself or others who might work on your Unity project. You can add text to the title and body of a Sticky Note. You can use Sticky Notes in Script Graphs and State Graphs. Add a Sticky Note to a graph To add a Sticky Note to a graph: Open a graph file in the Graph window. Do one of the following: Right-click anywhere in the Graph Editor to open the fuzzy finder. Select Sticky Note. With no items selected in the graph, right-click an empty space in the Graph Editor. Select Create Sticky Note. Edit a Sticky Note To edit text in the title or body of a Sticky Note: Open a graph file in the Graph window. Do one of the following: To edit the title of the Sticky Note, double-click the title. To edit the body of the Sticky Note, double-click the body. Enter the new text for the Sticky Note. Click anywhere in the Graph Editor to close the Sticky Note text editor. Tip You can also edit the text in a Sticky Note with the Graph Inspector: Select the Sticky Note you want to edit. Select Graph Inspector () from the toolbar. Do one of the following: To edit the title of the Sticky Note, select the title. To edit the body of the Sticky Note, select (Body). Enter the new text for the Sticky Note. Move a Sticky Note To move a Sticky Note to a new location in a graph: Open a graph file in the Graph window. Click and drag the Sticky Note to a new location. Delete a Sticky Note To delete a Sticky Note from a graph: Open a graph file in the Graph window. Do one of the following: Right-click a Sticky Note and select Delete. Select a Sticky Note and press Delete (Del). Resize a Sticky Note To change the size of a Sticky Note in a graph: Open a graph file in the Graph window. Click and drag a corner of a Sticky Note. Change the color of a Sticky Note To change the color theme for a Sticky Note: Open a graph file in the Graph window. Select the Sticky Note you want to edit. Select Graph Inspector () from the toolbar. Select a Color Theme: Classic Black Dark Orange Green Blue Red Purple Teal"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-time.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-time.html",
    "title": "Time nodes | ModularUIPack",
    "summary": "Time nodes Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Time nodes include timer, cooldown and wait nodes. Wait Wait nodes delay the execution of the rest of the script. The delay can be a set amount of seconds or a condition that must be fulfilled before moving on. Asynchronicity (delayed execution) in Unity is handled by coroutines (not multithreading). You need to inform visual scripting to run the script as a coroutine in order to support wait nodes. To do this enable the Coroutine checkbox on the initial event that starts the script. Do this in the graph inspector. A small dual-arrow icon appears on the event, indicating that it runs as a coroutine. If the coroutine checkbox is not enabled, an error at runtime indicates a port 'can only be triggered in a coroutine' when reaching a wait node. All wait nodes are also used inside loops and sequences. Wait For Seconds The Wait For Seconds node is the simplest and most common wait node. It delays the execution by a certain number of seconds. Wait Until The Wait Until node stops execution until a given condition is met. For example, you could wait until an object is close enough. Wait While The Wait While node is the opposite of the Wait Until node: it stops execution as long as a given condition is met. For example, you can wait while an object is out of range. Wait For Frame As the name implies, Wait For End Of Frame and Wait For Next Frame nodes delays execution until a specific point in Unity's update loop is met. For more information, see: Execution Order of Events. Wait For Script The Wait For Script node delays execution until all input scripts have been entered at least once. It's a useful way of grouping conditions that occur over multiple events or frames. In other languages, this concept is sometimes called \"promises\". Cooldown The Cooldown node implements a time restriction when the input script can only be triggered a limited number of times. When the cooldown is available, the input script gets transferred to the Ready port. When it is not, it gets transferred to the Not Ready port. The Duration port determines how long it takes for the cooldown to become available again. Checking Unscaled makes it ignore the time scale. The Tick port gets called at every frame while a cooldown is active. It is a good place to update any GUI code that show an indicator of the remaining duration until the action can be called again. In order to get that value, you have two options: Remaining, which returns the number of seconds until ready, and Remaining %, which returns a value between 0 and 1, respectively from ready to not ready. As soon as the cooldown is ready, the Completed port is triggered. There is no need to constantly pass input script for this port to get triggered. Finally, you can force the cooldown to become ready and reset its internal timer by triggering the Reset port. For example, a simple cooldown firing mechanic with a masked sprite and text that indicates how much time is remaining until it can fire again. Timer The Timer node implements and monitors a time pausable progression. The Duration port determines how long it takes for the cooldown to become available again. Checking Unscaled makes it ignore the time scale. A timer is started by triggering the Start input, which in turn triggers the Started output. It can be paused and resumed with the Pause and Resume inputs, or it can alternate between these states with the Toggle input. The Tick port gets called at every frame while a timer is active. In order to get the time measurements, you have two options: Elapsed, which returns the time since the timer was started, or Remaining, which returns the time until the timer completes. You can get each of these measurements in absolute number of seconds, or in %, which returns a value between 0 and 1. This is useful for lerping. As soon as the timer finishes, the Completed port is triggered. For example, a simple autodestroy mechanic on a sprite that is progressively colored red before being destroyed."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-transitions.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-transitions.html",
    "title": "Transitions | ModularUIPack",
    "summary": "Transitions A transition is a connection between State nodes in a State Graph. A transition has a Script Graph that tells Visual Scripting when to switch states in a State Graph. A special transition type, called a self transition, can make a state transition to itself. You can embed the Script Graph for a transition in the Transition node itself, or link to an external graph asset file. Use Event nodes and a Trigger Transition node in the Script Graph you attach to a transition. These nodes specify which event or events must occur to trigger a change of state in your parent State Graph. For example, the following transition Script Graph switches states after a GameObject with the Player tag enters a trigger Collider. Any transition nodes with a transition Script Graph display the name of the event in the graph that triggers the state change. For example, the following parent State Graph displays the graph from the previous example as an On Trigger Enter Transition node. If you've assigned a name to a transition Script Graph, the assigned name appears on the Transition node. Tip To reduce the space taken up by transition nodes in a State Graph, you can hide their name labels. For more information, see Configure your preferences. You can create any number of transitions between states in a State Graph. For more information on how to create transitions, see Create a transition between states."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-types.html",
    "title": "Object types | ModularUIPack",
    "summary": "Object types All scripting in Unity is based on the C# programming language. C# is a \"strongly typed\" language. This means that all data and objects in Visual Scripting have a specific type. For example, a variable can be a number with an integer type, or the object provided by a node's output port can be a GameObject. Types help the computer run Visual Scripting code. Visual Scripting's behavior might not depend on the object type you give a node as an input, but sometimes, an object's type is important. For example, to add a new variable in the Blackboard, you must specify the variable's type to assign it a value. When you make a new edge in the Graph Editor, some nodes might have ports that only allow a connection if the data input is the correct type. Choose the type for an object with the Type menu. For example, you can choose the type for a Data Input port on a Script Graph with the Type menu from the Graph Inspector. Enter a search term in the Type menu to find a specific object type. You can also navigate through the namespaces listed in the Type menu to find a type. Visual Scripting identifies namespaces in the Type menu with an arrow (>). Select any namespace to view the other namespaces or available types within that namespace. Common object types Unity has hundreds of types. You can also add your own custom types. For more information on custom types, see Custom types. The following table includes some commonly used types in Visual Scripting. Type Description Float A float is a numeric value, with or without decimal places. For example, 0.25 or 13.1. Integer An integer is a numeric value without decimal places. For example, 3 or 200. Boolean A Boolean is a true or false value. Use a Boolean to create logic in a Script Graph and for toggles. For example, a Script Graph can trigger an event only if a condition is true. String A string is a sequence of characters or piece of text. For example, string, string123, and s. Char A char is a single alphanumeric character from a string. For example, s or 1. Enum An enum is a finite enumeration of options. Enums are usually represented as dropdowns. For example, a Force Mode enum can have a value of either Force, Impulse, Acceleration, or Velocity Change. Vector A vector represents a set of float coordinates. Unity uses vectors for positions or directions. Vector 2 A Vector 2 has X and Y values. You can use a Vector 2 for coordinates in 2D spaces. Vector 3 A Vector 3 has X, Y, and Z values. You can use a Vector 3 for coordinates in 3D spaces. Vector 4 A Vector 4 has X, Y, Z, and W values. You can use a Vector 4 for coordinates in 4D spaces, such as parameters for shaders. GameObject A GameObject is the basic entity used in Unity scenes. All GameObjects have a name, a transform for their position and rotation in the scene, and a list of components. List A list is an ordered collection of elements. The elements in a list can each have their own type or all have the same type. Visual Scripting indexes items in a list with the first position at 0. This means that the first element of a list is at the 0 index of the list. The second item is at the 1 index, the third is at the 2 index, and so on. Dictionary A dictionary is a collection of elements. Each element has a unique key and a value. Use a key to access and assign the values for an element in a dictionary. For example, you can use a dictionary to organize the names and ages of a group of people. The person's name is the key to the value of their age. A single element in the dictionary can be John and 33. Object An Object is a special type in Unity. If a data input port on a node has its type set to Object, the node doesn't need a specific type as an input. Supported type conversions Visual Scripting can automatically convert some data types passed between nodes. For example, the following graph gets the Transform from a child GameObject of the current GameObject, and triggers an Animator Controller to play an animation. Visual Scripting converts the Transform component sent by the Transform Get Child node to the Animator Controller component on the same GameObject. Visual Scripting can automatically perform the following type conversions: Number to Number (for example, you can convert an integer to a float, such as 5 to 5.0, or 5.0 to 5) Base class to child class Child class to base class Custom operators (for example, you can convert a Vector 2 to a Vector 3) GameObject to a component (for example, a GameObject to its Rigidbody component) Component to GameObject (for example, a Rigidbody component to its GameObject) Component to component on the same GameObject (for example, a Rigidbody component to a Transform component) Enum to array Enum to list"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-update.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-update.html",
    "title": "Update Visual Scripting | ModularUIPack",
    "summary": "Update Visual Scripting Tip Back up your data before you update to a new version of Visual Scripting. For more information on how to back up your Visual Scripting assets and settings, see Create or restore a backup. Before you update, confirm that the version of Visual Scripting is compatible with your current project and needs. For example, you shouldn't use a Preview version of Visual Scripting in a production environment. For more information on package states and the package lifecycle in Unity, see the Package state and lifecycle in the Unity User Manual. To update your current version of Visual Scripting: Go to Window > Package Manager. In the Packages drop-down menu, select In Project. In your list of packages, select Visual Scripting. Select Update to X.X.X, where X.X.X is the newest available version of Visual Scripting."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-using-custom-types.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-using-custom-types.html",
    "title": "Use a custom type | ModularUIPack",
    "summary": "Use a custom type Visual Scripting supports every class and struct type available in Unity. By default, the most common are available in the fuzzy finder. Add additional Unity assemblies, such as custom types and classes, through your project settings. You must write some additional code to use a custom type or class in a graph. You can't assign a value to a variable with a custom type from Unity's Inspector window, or initialize it from inside the Unity Editor if this additional code isn't available. You must assign a default value for a custom type through the Inspector window to use that type for a variable in Visual Scripting. You have two options to enable variable assignment and initialization: If you have access to the source code, you can add the [Inspectable] attribute to the classes and fields that you want to display and modify in the Editor. If you don't have access to the source code, you must create a custom PropertyDrawer and generate the required property provider scripts. Add the [Inspectable] attribute Add the [Inspectable] attribute to the code for your custom class to display its available properties in the Inspector window and Visual Scripting's Graph Inspector. You can't view your classes and fields in the Inspector window without the [Inspectable] attribute. Unity provides a basic UI for your types in the Inspector window, which might not give the aesthetic results you want. If you or your users want to configure a property for a custom type with a slider, for example, don't use the [Inspectable] attribute method. For more information on how to add the [Inspectable] attribute to a custom class, see Add the Inspectable attribute to the source code for a custom type. Create a custom PropertyDrawer Create a custom PropertyDrawer to choose how to display each property for a custom class in the Inspector window. Without access to the source code, you must create a PropertyDrawer to interact with custom-typed variables in Visual Scripting. If you see an error in the Unity Editor's Inspector window when you try to use a type from a third-party package, you must create a custom PropertyDrawer. Note If you are a package developer, or plan to provide your custom classes and types to other users and want those types to be available in Visual Scripting, create a custom PropertyDrawer to get the best results for your users. For more information on how to create a custom PropertyDrawer, see Create a custom PropertyDrawer for a custom type. After you create a custom PropertyDrawer for a custom type, you must generate the necessary property provider scripts. For more information, see the Generate option in Configure project settings."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-variables-api.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-variables-api.html",
    "title": "Variables API | ModularUIPack",
    "summary": "Variables API Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. Visual scripting provides an easy API to handle variables, to get or set their value and verify if they are defined. All these operations are available from the Variables class. For example: Variables.Application.Set(\"score\", 100); Usings Add the following usings to your C# script to access the API: using Unity.VisualScripting; Scopes Graph To access variables on a graph, create a graph reference. This is basically a path to the nested graph from its root machine. To get the root graph on a machine: var graphReference = GraphReference.New(flowMachine, true); To access nested graphs, pass their parent nodes as additional parameters: var graphReference = GraphReference.New(flowMachine, new IGraphParentElement[] { subGraph }, true); To pass a graph reference: Variables.Graph(graphReference) Object To access variables on an object: Variables.Object(gameObject) Scene To access scene variables, do one of the following: Variables.Scene(scene) Or: Variables.Scene(gameObjectInScene) Or: Variables.ActiveScene Application To access application variables: Variables.Application Saved To access saved variables: Variables.Saved Operations In these examples, the lowercase scope refers to one of the previous scopes. Get To get the value of a variable, use the Get method with a name parameter: scope.Get(\"name\"); Note that variables are not strongly typed; they need to be cast manually. For example: int health = (int)Variables.Object(player).Get(\"health\") Set To set the value of a variable, use the Set method with the name and value parameters: scope.Set(\"name\", value); For example: Variables.Object(player).Set(\"health\", 100); Because variables are not strongly typed, pass any value to the second parameter, even if the variable currently is of a different type. Note Using the set method with a variable name that does not yet exist defines a new variable. Is Defined To check if a variable is defined, use the IsDefined method with a name parameter: scope.IsDefined(\"name\"); For example: if (Variables.Application.IsDefined(\"score\")) { // ... }"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-variables-reference.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-variables-reference.html",
    "title": "Variables node | ModularUIPack",
    "summary": "Variables node Note For versions 2019/2020 LTS, download the Visual Scripting package from the Unity Asset Store. There are six kinds of variable nodes. Each of these variable nodes has three object nodes: Get, to retrieve the value of the variable Set, to assign a new value to the variable Is Defined, to check whether the variable is defined They are located under the Variables category in the fuzzy finder. Variable nodes are teal colored. Dynamic Typing For get / set nodes, variables are not statically typed, meaning their type can change at runtime. Their type displays as an object when defined from the blackboard window. Get Variable The get variable node requires the name of the variable as an input and returns the Value as an output. Set Variable The set variable nodes require the name of the variable and the new value assigned to it as inputs. For convenience in layouting, it returns this same value as an output. Connect the control input port to indicate when the variable should be assigned and, optionally, the control output port to indicate what to do after. Using a set node with a variable name that doesn't yet exist creates the variable. Has Variable The Has Variable nodes require the name of the variable as an input and returns an Is Defined boolean as an output. They're useful to check if a variable has been created, and often, provide a fallback value if it hasn't. Do the same thing more easily by checking the Fallback box in the graph inspector for a Get Variable node. This adds a Fallback input to the node that is returned if the variable hasn't been defined: Dynamic Variables As the name of the variable is a standard value input port, connect it to any other port that returns a string. Refer to \"dynamic variables\", that is, variables whose reference might change during play mode. Object Variables Object variable nodes require an additional input for the Source. That port indicates which game object the variable you're referring to is defined. When left to its default value, they look on the current object (self). For example, the Get Variable node gets the value of the health variable on the player2 object. Dropdowns The kind and the name dropdowns can quickly configure the variable nodes. The name suggestions are contextual and are based on the existing variables of this kind and on the other variable nodes in the current graph. Drag and Drop Drag and drop items from the blackboard window directly into the graph to create matching nodes. By default, a Get node is created. If the Alt key is held, a Set node is created. If the Shiftkey is held, an Is Defined node is created. Variables API Visual scripting provides an easy API to handle variables, to get or set their value and verify if they are defined. All these operations are available from the Variables class. For example: Variables.Application.Set(\"score\", 100); Usings Add the following usings to your C# script to access the API: using Unity.VisualScripting; Scope Graph To access variables on a graph, create a graph reference. This is basically a path to the nested graph from its root machine. To get the root graph on a machine: var graphReference = GraphReference.New(flowMachine, true); To access nested graphs, pass their parent nodes as additional parameters: var graphReference = GraphReference.New(flowMachine, new IGraphParentElement[] { superUnit }, true); To pass a graph reference: Variables.Graph(graphReference) Object To access variables on an object: Variables.Object(gameObject) Scene To access scene variables, do one of the following: Variables.Scene(scene) Or: Variables.Scene(gameObjectInScene) Or: Variables.ActiveScene Application To access application variables: Variables.Application Saved To access saved variables: Variables.Saved Operations In these examples, the lowercase scope refers to one of the previous scopes. Get To get the value of a variable, use the Get method with a name parameter: scope.Get(\"name\"); Note that variables are not strongly typed; they need to be cast manually. For example: int health = (int)Variables.Object(player).Get(\"health\") Set To set the value of a variable, use the Set method with the name and value parameters: scope.Set(\"name\", value); For example: Variables.Object(player).Set(\"health\", 100); Because variables are not strongly typed, pass any value to the second parameter, even if the variable currently is of a different type. Note Using the set method with a variable name that does not yet exist defines a new variable. Is Defined To check if a variable is defined, use the IsDefined method with a name parameter: scope.IsDefined(\"name\"); For example: if (Variables.Application.IsDefined(\"score\")) { // ... }"
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-variables.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-variables.html",
    "title": "Variables | ModularUIPack",
    "summary": "Variables Variables act as a container for a piece of information that might change as an application runs. To define a variable, you need to provide: A name for the variable, such as MyVariable. The type of data the variable holds, such as int or string . A value for the variable, such as 1 or cat. In Visual Scripting, you can give a node the name of a variable, instead of a fixed value or text. Your Script Graph uses the variable's name to access its value. For example, you can use a variable called Count, with an int type and a value of 1. You can use an Add node in Visual Scripting to add 1 to the value of Count, and save the new value in Count to use again in another part of your Script Graph, or a different Script Graph. Variables also have scopes. A variable's scope determines what parts of your Script Graph can access which variables to read or modify their values. The scope can also decide whether another Script Graph can access a variable. You can create and manage variables in a graph from the Blackboard. For more information on the Blackboard, see The Blackboard. For more information on how to use variables, see Create and add a variable to a Script Graph. Variable scopes Each variable scope has its own tab on the Blackboard, except Flow variables. Visual Scripting has six variable scopes. Variable Scope Property Flow Variables Flow variables are like local variables in a scripting language: they have the smallest scope. You can't use a Flow variable if: The Flow variable doesn’t have a direct or indirect connection to the nodes where you want to use its value. The node where the variable is defined must be a part of the logical flow where you want to use its value. The Flow variable hasn’t been set before Visual Scripting tries to run any logic that needs its value. The node where the variable is defined must come before any other logic in your graph. You can't create a Flow variable from the Blackboard - you can create one with a Set Variable node and set the Scope to Flow. Graph Variables Graph variables belong to a specific Script Graph. You can't access or modify Graph variables outside the specific Script Graph where they're defined. You also can't create a new Graph variable unless you have a Script Graph open in the Graph window. Object Variables Object variables belong to a specific GameObject. You can edit an Object variable from the Unity Editor's Inspector for the GameObject, and the Object variable is accessible in all graphs attached to the GameObject. You can't create a new Object variable unless you've opened your Script Graph from a Script Machine component on a GameObject. Scene Variables Scene variables belong to the current scene. Visual Scripting creates a new GameObject in your scene to hold references to your Scene variables. You can access your Scene variables from any Script Graph attached to a different GameObject in a single scene, but can't access a Scene variable in another scene in your project. App or Application Variables Application variables belong to your entire application. You can access an Application variable across multiple scenes while your application runs, and the Application variable would hold your changes. Any values held in an Application variable reset to their default values after your application quits. Saved Variables Saved variables are like Application variables, but they persist even after your application quits. You can use a Saved variable as a simple but powerful save system. Unity stores Saved variables in its PlayerPrefs, and they don't refer to Unity objects, like GameObjects and components. For more information on PlayerPrefs, see PlayerPrefs in the Unity User Manual Scripting Reference. Note You can still access the Blackboard and create new variables with a State Graph open in the Graph window, but you can't add a variable node and use it inside a State Graph. For Saved variables, there are two additional tabs on the Blackboard: Initial and Saved: Values defined in the Initial tab apply to all new instances of your application as default values. Values defined in the Saved tab are the last modified values for those variables, based on when you last ran your application. You can edit them manually, or delete the values to reset them to the values defined in the Initial tab."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-version-control.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Documentation~/vs-version-control.html",
    "title": "Version control systems | ModularUIPack",
    "summary": "Version control systems To avoid any problems with automatically generated files, exclude some Visual Scripting files from your version control solution. To exclude files from version control, include a file or configure your settings to specify which files and folders to exclude: Create a new file at the root of your project directory. Tip The root of your project directory is at the level above your Assets folder. Name the file based on your chosen version control system: Git: .gitignore. For more information, see Git's documentation on gitignore. Unity Collab: .collabignore. For more information, see the Unity User Manual. Subversion: Ignore the files from your svn:ignore property or runtime configuration options. For more information, see Subversion's documentation on Ignoring Unversioned Items. Open the file in a text editor. Add the appropriate files or file patterns to your ignore file or configuration. For an example and more information, see Ignore file template. Note If you have an issue when you try to create a .gitignore file on Windows, refer to Microsoft's documentation on how to create a .gitignore file from the command line. Ignore file template The following template ignores all core Visual Scripting files, but preserves your project settings and variables. It also includes the standard Unity ignore directives for files that you can exclude from version control. For more information, see the Unity.gitignore file included in GitHub's gitignore template repository. Refer to the comments in the template for which lines to comment or remove. # Optionally exclude these transient (generated) files, # because they can be easily re-generated by the package Assets/Unity.VisualScripting.Generated/VisualScripting.Flow/UnitOptions.db Assets/Unity.VisualScripting.Generated/VisualScripting.Flow/UnitOptions.db.meta Assets/Unity.VisualScripting.Generated/VisualScripting.Core/Property Providers Assets/Unity.VisualScripting.Generated/VisualScripting.Core/Property Providers.meta ## Unity # From: https://github.com/github/gitignore/blob/master/Unity.gitignore /[Ll]ibrary/ /[Tt]emp/ /[Oo]bj/ /[Bb]uild/ /[Bb]uilds/ /[Ll]ogs/ /[Uu]ser[Ss]ettings/ # MemoryCaptures can get excessive in size. # They also could contain extremely sensitive data /[Mm]emoryCaptures/ # Asset meta data should only be ignored when the corresponding asset is also ignored !/[Aa]ssets/**/*.meta # Uncomment this line if you want to ignore the asset store tools plugin # /[Aa]ssets/AssetStoreTools* # Autogenerated Jetbrains Rider plugin /[Aa]ssets/Plugins/Editor/JetBrains* # Visual Studio cache directory .vs/ # Gradle cache directory .gradle/ # Autogenerated VS/MD/Consulo solution and project files ExportedObj/ .consulo/ *.csproj *.unityproj *.sln *.suo *.tmp *.user *.userprefs *.pidb *.booproj *.svd *.pdb *.opendb *.VC.db # Unity3D generated meta files *.pidb.meta *.pdb.meta *.mdb.meta # Unity3D Generated File On Crash Reports sysinfo.txt # Builds *.apk *.aab *.unitypackage # Crashlytics generated file crashlytics-build.properties # Packed Addressables /[Aa]ssets/[Aa]ddressable[Aa]ssets[Dd]ata/*.*.bin* # Temporary auto-generated Android Assets /[Aa]ssets/[Ss]treamingAssets/aa.meta /[Aa]ssets/[Ss]treamingAssets/aa/* Remove previously committed files If you committed any files to a version control solution that you want to exclude: See Git's documentation on the git-rm command. See Subversion's documentation on the svn delete command."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/LICENSE.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "com.unity.visualscripting copyright © 2020 Unity Technologies Licensed under the Unity Package Distribution License (see https://unity3d.com/legal/licenses/Unity_Package_Distribution_License ). Unless expressly provided otherwise, the software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/README.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/README.html",
    "title": "Visual Scripting (com.unity.visualscripting) | ModularUIPack",
    "summary": "Visual Scripting (com.unity.visualscripting) Visual Scripting, previously known as BOLT, is an alternative workflow to design behaviours. Instead of the classic method of writing a C# script, visual scripting offers a way to design behaviours intuitively without code, by connecting events, actions, and data together in a graph. Both programmers and non-programmers can use node-based graphs to design final logic or to quickly create prototypes. This package also features an API that programmers can use for more advanced tasks, or to create custom nodes that can be used by other team members. Required Software Unity: Supported versions include 2021.1 Documentation Documentation is available here. For further discussion, visit the Discord or the Visual Scripting forum."
  },
  "Library/PackageCache/com.unity.visualscripting@1.9.4/Third Party Notices.html": {
    "href": "Library/PackageCache/com.unity.visualscripting@1.9.4/Third Party Notices.html",
    "title": "| ModularUIPack",
    "summary": "This package contains third-party software components governed by the license(s) indicated below: Component Name: AQN Parser License Type: Microsoft Public License Copyright © 2013 Christophe Bertrand https://www.codeproject.com/Tips/624300/AssemblyQualifiedName-Parser This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software. Definitions The terms \"reproduce,\" \"reproduction,\" \"derivative works,\" and \"distribution\" have the same meaning here as under U.S. copyright law. A \"contribution\" is the original software, or any additions or changes to the software. A \"contributor\" is any person that distributes its contribution under this license. \"Licensed patents\" are a contributor's patent claims that read directly on its contribution. Grant of Rights (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create. (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software. Conditions and Limitations (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks. (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically. (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software. (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license. (E) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement. Component Name: Deep Copy License Type: MIT Copyright © 2014 Alexey Burtsev https://github.com/Burtsev-Alexey/net-object-deep-copy Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: DotNetZip License Type: Microsoft Public License Copyright © 2017 Ionic https://dotnetzip.codeplex.com/ This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software. Definitions The terms \"reproduce,\" \"reproduction,\" \"derivative works,\" and \"distribution\" have the same meaning here as under U.S. copyright law. A \"contribution\" is the original software, or any additions or changes to the software. A \"contributor\" is any person that distributes its contribution under this license. \"Licensed patents\" are a contributor's patent claims that read directly on its contribution. Grant of Rights (A) Copyright Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free copyright license to reproduce its contribution, prepare derivative works of its contribution, and distribute its contribution or any derivative works that you create. (B) Patent Grant- Subject to the terms of this license, including the license conditions and limitations in section 3, each contributor grants you a non-exclusive, worldwide, royalty-free license under its licensed patents to make, have made, use, sell, offer for sale, import, and/or otherwise dispose of its contribution in the software or derivative works of the contribution in the software. Conditions and Limitations (A) No Trademark License- This license does not grant you rights to use any contributors' name, logo, or trademarks. (B) If you bring a patent claim against any contributor over patents that you claim are infringed by the software, your patent license from such contributor to the software ends automatically. (C) If you distribute any portion of the software, you must retain all copyright, patent, trademark, and attribution notices that are present in the software. (D) If you distribute any portion of the software in source code form, you may do so only under this license by including a complete copy of this license with your distribution. If you distribute any portion of the software in compiled or object code form, you may only do so under a license that complies with this license. (E) The software is licensed \"as-is.\" You bear the risk of using it. The contributors give no express warranties, guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot change. To the extent permitted under your local laws, the contributors exclude the implied warranties of merchantability, fitness for a particular purpose and non-infringement. Component Name: FatCow Icons License Type: Creative Commons Attribution 3.0 Copyright © 2017 FatCow Web Hosting https://www.fatcow.com/free-icons THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED. BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND CONDITIONS. Definitions \"Collective Work\" means a work, such as a periodical issue, anthology or encyclopedia, in which the Work in its entirety in unmodified form, along with one or more other contributions, constituting separate and independent works in themselves, are assembled into a collective whole. A work that constitutes a Collective Work will not be considered a Derivative Work (as defined below) for the purposes of this License.\"Derivative Work\" means a work based upon the Work or upon the Work and other pre-existing works, such as a translation, musical arrangement, dramatization, fictionalization, motion picture version, sound recording, art reproduction, abridgment, condensation, or any other form in which the Work may be recast, transformed, or adapted, except that a work that constitutes a Collective Work will not be considered a Derivative Work for the purpose of this License. For the avoidance of doubt, where the Work is a musical composition or sound recording, the synchronization of the Work in timed-relation with a moving image (\"synching\") will be considered a Derivative Work for the purpose of this License.\"Licensor\" means the individual, individuals, entity or entities that offers the Work under the terms of this License.\"Original Author\" means the individual, individuals, entity or entities who created the Work.\"Work\" means the copyrightable work of authorship offered under the terms of this License.\"You\" means an individual or entity exercising rights under this License who has not previously violated the terms of this License with respect to the Work, or who has received express permission from the Licensor to exercise rights under this License despite a previous violation.2. Fair Use Rights. Nothing in this license is intended to reduce, limit, or restrict any rights arising from fair use, first sale or other limitations on the exclusive rights of the copyright owner under copyright law or other applicable laws. License Grant. Subject to the terms and conditions of this License, Licensor hereby grants You a worldwide, royalty-free, non-exclusive, perpetual (for the duration of the applicable copyright) license to exercise the rights in the Work as stated below: to reproduce the Work, to incorporate the Work into one or more Collective Works, and to reproduce the Work as incorporated in the Collective Works;to create and reproduce Derivative Works provided that any such Derivative Work, including any translation in any medium, takes reasonable steps to clearly label, demarcate or otherwise identify that changes were made to the original Work. For example, a translation could be marked \"The original work was translated from English to Spanish,\" or a modification could indicate \"The original work has been modified.\";;to distribute copies or phonorecords of, display publicly, perform publicly, and perform publicly by means of a digital audio transmission the Work including as incorporated in Collective Works;to distribute copies or phonorecords of, display publicly, perform publicly, and perform publicly by means of a digital audio transmission Derivative Works.For the avoidance of doubt, where the Work is a musical composition: Performance Royalties Under Blanket Licenses. Licensor waives the exclusive right to collect, whether individually or, in the event that Licensor is a member of a performance rights society (e.g. ASCAP, BMI, SESAC), via that society, royalties for the public performance or public digital performance (e.g. webcast) of the Work.Mechanical Rights and Statutory Royalties. Licensor waives the exclusive right to collect, whether individually or via a music rights agency or designated agent (e.g. Harry Fox Agency), royalties for any phonorecord You create from the Work (\"cover version\") and distribute, subject to the compulsory license created by 17 USC Section 115 of the US Copyright Act (or the equivalent in other jurisdictions).Webcasting Rights and Statutory Royalties. For the avoidance of doubt, where the Work is a sound recording, Licensor waives the exclusive right to collect, whether individually or via a performance-rights society (e.g. SoundExchange), royalties for the public digital performance (e.g. webcast) of the Work, subject to the compulsory license created by 17 USC Section 114 of the US Copyright Act (or the equivalent in other jurisdictions).The above rights may be exercised in all media and formats whether now known or hereafter devised. The above rights include the right to make such modifications as are technically necessary to exercise the rights in other media and formats. All rights not expressly granted by Licensor are hereby reserved. Restrictions. The license granted in Section 3 above is expressly made subject to and limited by the following restrictions: You may distribute, publicly display, publicly perform, or publicly digitally perform the Work only under the terms of this License, and You must include a copy of, or the Uniform Resource Identifier for, this License with every copy or phonorecord of the Work You distribute, publicly display, publicly perform, or publicly digitally perform. You may not offer or impose any terms on the Work that restrict the terms of this License or the ability of a recipient of the Work to exercise the rights granted to that recipient under the terms of the License. You may not sublicense the Work. You must keep intact all notices that refer to this License and to the disclaimer of warranties. When You distribute, publicly display, publicly perform, or publicly digitally perform the Work, You may not impose any technological measures on the Work that restrict the ability of a recipient of the Work from You to exercise the rights granted to that recipient under the terms of the License. This Section 4(a) applies to the Work as incorporated in a Collective Work, but this does not require the Collective Work apart from the Work itself to be made subject to the terms of this License. If You create a Collective Work, upon notice from any Licensor You must, to the extent practicable, remove from the Collective Work any credit as required by Section 4(b), as requested. If You create a Derivative Work, upon notice from any Licensor You must, to the extent practicable, remove from the Derivative Work any credit as required by Section 4(b), as requested.If You distribute, publicly display, publicly perform, or publicly digitally perform the Work (as defined in Section 1 above) or any Derivative Works (as defined in Section 1 above) or Collective Works (as defined in Section 1 above), You must, unless a request has been made pursuant to Section 4(a), keep intact all copyright notices for the Work and provide, reasonable to the medium or means You are utilizing: (i) the name of the Original Author (or pseudonym, if applicable) if supplied, and/or (ii) if the Original Author and/or Licensor designate another party or parties (e.g. a sponsor institute, publishing entity, journal) for attribution (\"Attribution Parties\") in Licensor's copyright notice, terms of service or by other reasonable means, the name of such party or parties; the title of the Work if supplied; to the extent reasonably practicable, the Uniform Resource Identifier, if any, that Licensor specifies to be associated with the Work, unless such URI does not refer to the copyright notice or licensing information for the Work; and, consistent with Section 3(b) in the case of a Derivative Work, a credit identifying the use of the Work in the Derivative Work (e.g., \"French translation of the Work by Original Author,\" or \"Screenplay based on original Work by Original Author\"). The credit required by this Section 4(b) may be implemented in any reasonable manner; provided, however, that in the case of a Derivative Work or Collective Work, at a minimum such credit will appear, if a credit for all contributing authors of the Derivative Work or Collective Work appears, then as part of these credits and in a manner at least as prominent as the credits for the other contributing authors. For the avoidance of doubt, You may only use the credit required by this Section for the purpose of attribution in the manner set out above and, by exercising Your rights under this License, You may not implicitly or explicitly assert or imply any connection with, sponsorship or endorsement by the Original Author, Licensor and/or Attribution Parties, as appropriate, of You or Your use of the Work, without the separate, express prior written permission of the Original Author, Licensor and/or Attribution Parties.5. Representations, Warranties and Disclaimer UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING, LICENSOR OFFERS THE WORK AS-IS AND ONLY TO THE EXTENT OF ANY RIGHTS HELD IN THE LICENSED WORK BY THE LICENSOR. THE LICENSOR MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF TITLE, MARKETABILITY, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Termination This License and the rights granted hereunder will terminate automatically upon any breach by You of the terms of this License. Individuals or entities who have received Derivative Works (as defined in Section 1 above) or Collective Works (as defined in Section 1 above) from You under this License, however, will not have their licenses terminated provided such individuals or entities remain in full compliance with those licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any termination of this License.Subject to the above terms and conditions, the license granted here is perpetual (for the duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves the right to release the Work under different license terms or to stop distributing the Work at any time; provided, however that any such election will not serve to withdraw this License (or any other license that has been, or is required to be, granted under the terms of this License), and this License will continue in full force and effect unless terminated as stated above.8. Miscellaneous Each time You distribute or publicly digitally perform the Work (as defined in Section 1 above) or a Collective Work (as defined in Section 1 above), the Licensor offers to the recipient a license to the Work on the same terms and conditions as the license granted to You under this License.Each time You distribute or publicly digitally perform a Derivative Work, Licensor offers to the recipient a license to the original Work on the same terms and conditions as the license granted to You under this License.If any provision of this License is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this License, and without further action by the parties to this agreement, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.No term or provision of this License shall be deemed waived and no breach consented to unless such waiver or consent shall be in writing and signed by the party to be charged with such waiver or consent.This License constitutes the entire agreement between the parties with respect to the Work licensed here. There are no understandings, agreements or representations with respect to the Work not specified here. Licensor shall not be bound by any additional provisions that may appear in any communication from You. This License may not be modified without the mutual written agreement of the Licensor and You. Component Name: Full Serializer License Type: MIT Copyright © 2017 Jacob Dufault https://github.com/jacobdufault/fullserializer Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. Component Name: Iconmonstr Icons License Type: Bespoke Copyright (c) 2020 iconmonstr Alexander Kahlkopf https://iconmonstr.com This license agreement (the “Agreement”) sets forth the terms by which Alexander Kahlkopf, the owner of iconmonstr (the “Licensor”), shall provide access to certain Work (defined below) to you (the “Licensee”, “you” or “your”). This Agreement regulates the free use of the icons, fonts, images and other media content (collectively, the “Work”), which is made available via the website iconmonstr.com (the “Website”). By downloading or copying a Work, you agree to be bound by the following terms and conditions. Grant of Rights The Works on the Website are copyrighted property of Licensor. Licensor hereby grants Licensee a perpetual, non-exclusive, non-transferrable single-user license for the use of the Work based on the conditions of this Agreement. You agree that the Work serves as part of the design and is not the basis or main component of the product, template or application distributed by the Licensee. Furthermore, you agree not to sell, redistribute, sublicense, share or otherwise transfer the Work to other people or entities. Permitted Uses Licensee may use the Work in non-commercial and commercial projects, services or products without attribution.Licensee may use the Work for any illustrative purposes in any media, including, but not limited to, websites, web banners, newsletters, PDF documents, blogs, emails, slideshows, TV and video presentations, smartphones, splash screens, movies, magazine articles, books, advertisements, brochures, document illustrations, booklets, billboards, business cards, packages, etc.Licensee may use the Work in template or application without attribution; provided, however, that the Work serves as part of the design and is not the basis or main component of the product, template or application distributed by Licensee and is not used contrary to the terms and conditions of this Agreement.Licensee may adapt or change the Work according to his or her requirements. Prohibited Uses Licensee may not sell, redistribute, sublicense, share or otherwise transfer the Work to other people or entities.Licensee may not use the Work as part of a logo, trademark or service mark.Licensee may not use the Work for pornographic, infringing, defamatory, racist or religiously offensive illustrations. Additional Information on Rights Certain Works, such as logos or brands, are subject to copyright and require the agreement of a third party for the assignment of these rights. Licensee is responsible for providing all rights, agreements, and licenses for the use of the Work. Termination This Agreement shall automatically terminate without notice if you do not comply with the terms or conditions specified in this Agreement. If you yourself wish to terminate this Agreement, destroy the Work, all copies and derivatives of the Work and any materials related to it. Indemnification You agree to indemnify Licensor for any and all claims, liability performances, damages, costs (including attorney fees) or other liabilities that are caused by or related to a breach of this Agreement, which are caused by the use of the Website or Work, by the non-compliance of the use restrictions of a Work or which are caused by the claims of third parties regarding the use of a Work. Warranty and Liability The Website and the Works are provided “as is.” Licensor does not accept any warranty or liability regarding a Work, the Website, the accuracy of the information or rights described therein or the licenses, which are subject to this Agreement. Licensor is not liable for damages, costs, losses or claims incurred by you, another person or entity by the use of the Website or the Works. Component Name: MD4 Managed Implementation License Type: MIT Copyright (C) 2003 Motus Technologies Inc. (http://www.motus.com) Copyright (C) 2004-2005,2010 Novell, Inc (http://www.novell.com) Author: Sebastien Pouliot (sebastien@ximian.com) https://github.com/mono/mono/blob/master/mcs/class/Mono.Security/Mono.Security.Cryptography/MD4Managed.cs Permission is hereby granted, free of charge, to any person obtaininga copy of this software and associated documentation files (the\"Software\"), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions: The above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE ANDNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BELIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTIONOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTIONWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Reorderable List License Type: MIT Copyright (c) 2013-2015 Rotorz Limited Author: Rotorz Limited https://bitbucket.org/rotorz/reorderable-list-editor-field-for-unity Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: SQLite License Type: Public Domain Copyright owner not applicable https://www.sqlite.org/index.html SQLite is in the public domain and does not require a license Component Name: SQLite .NET License Type: MIT Copyright (c) Krueger Systems Inc https://github.com/praeclarum/sqlite-net Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: YamlDotNet License Type: MIT Copyright (c) 2008, 2009, 2010, 2011, 2012, 2013, 2014 Antoine Aubry and contributors http://aaubry.net/pages/yamldotnet.html Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Ensure.That License Type: MIT Copyright (c) 2015 Daniel Wertheim https://github.com/danielwertheim/Ensure.That Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: NCalc License Type: MIT Copyright (c) 2011 Sebastien Ros https://github.com/ncalc/ncalc Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Antlr 3 Runtime License Type: BSD License Copyright (c) 2011 The ANTLR Project All rights reserved. https://github.com/antlr/antlrcs [The \"BSD license\"] Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
  },
  "Packages/com.unity.asset-store-tools/CHANGELOG.html": {
    "href": "Packages/com.unity.asset-store-tools/CHANGELOG.html",
    "title": "Changelog | ModularUIPack",
    "summary": "Changelog All notable changes to this package will be documented in this file. [12.0.1] - 2025-01-16 Preview Generator changes Updated generated preview collection UI to display the asset extension Fixed an issue with some prefab and model asset types not generating previews Fixed an error that could occur when changing scenes after deleting a preview source asset [12.0.0] - 2025-01-13 General changes The code comprising the Asset Store Publishing Tools has been refactored. Added dependency on Newtonsoft Json Uploader changes Updated window to retain its state if closed unless a domain reload occurs Added option to generate higher resolution asset previews when exporting Fixed a rare issue where authentication would fail Minor UI tweaks Validator changes Added validation tests for: Package naming Project Template assets Updated the Type Namespace validation test to check for Unity top level namespaces Exporter changes Updated how asset previews are generated/included for the package that is being exported Preview Generator Added a Preview Generator window that can be used to pre-generate and inspect package previews before exporting [11.4.4] - 2024-11-29 Validator Changes The validator UI window description section can now be expanded or shrunk to take up less screen space Updated severity of the Model Importer Logs validation test Exporter Changes Updated exporter to always exclude hidden files and folders beginning with the dot symbol (e.g.: .hiddenFolder/ or .hiddenfile.txt) Updated exporter to explicitly exclude extended attribute files when exporting packages on macOS systems Other Moved the Asset Store Tools toolbar items into the Tools section Fixed several window-related compilation warnings when using Unity 6 versions of the Editor [11.4.3] - 2024-08-01 Validator Changes Hotfix: Remove non-ascii characters from the demo scene validation [11.4.2] - 2024-07-30 Validator Changes Check for nested .unitypackage files in the demo scene validation Prevent normal map test from erroring when misc importer types are detected Remove Templates category from the uncompressed images requirement list [11.4.1] - 2024-05-10 Exporter Changes Fixed an issue with bundled plugin folder contents not being exported Other Miscellaneous internal changes [11.4.0] - 2024-01-23 Uploader Changes Added prevention of uploading packages larger than 6 GB Added a prompt to allow automatically generating meta files within hidden folders Fixed some obsolete API usage warnings in newer Unity versions Validator Changes Added validation tests for: Animation Clip take names Model import logs Uncompressed Package size Updated the fail severity of Audio Clipping validation test Updated the Demo Scene test to treat default scenes with custom skyboxes as valid demo scenes Fixed some obsolete API usage warnings in newer Unity versions Other Added an option to check for Asset Store Publishing Tools updates [11.3.1] - 2023-08-14 Uploader Changes Added the option to select indirect package dependencies from the project (e.g. Mathematics package installed by the Burst package) Validator Changes Updated the Texture Dimensions test to ignore 'Sprite' and 'Editor GUI' texture types Exporter Changes Updated exporter to ignore the 'ProjectSettings/ProjectVersion.txt' asset when exporting 'Complete Project' category packages [11.3.0] - 2023-07-04 Uploader Changes Added the option to validate a pre-exported package Added the option to export a .unitypackage file without uploading Updated the dependency selection UI Validator Changes Added the option to validate several asset paths at once Note: when validating package that is comprised of several folders (e.g. Assets/MyPackage + Assets/StreamingAssets + Assets/WebGLTemplates), please select all applicable paths that would be included in the package Added several new validation tests for: File Menu Names Compressed files Model Types Texture Dimensions Particle Systems Normal Map Textures Audio Clipping Path Lengths Script Compilation Updated validation test severities based on package category Updated validation tests to each have their own test logic class Updated validation tests to be displayed in alphabetical order Fixed several issues with the namespace check test Fixed scenes in Samples~ folders not being taken into account for the sample scene check test Other internal changes Exporter Changes Package exporter is now a separate module (similar to Uploader and Validator) Fixed hidden folders being included when exporting package content Note: this prevents an issue with the Unity Editor, where exported hidden folders would appear in the Project window as empty folders when imported, despite having content on disk. Content nested within hidden folders is still collected, provided it contains unique .meta files [11.2.2] - 2023-02-23 Validator Changes Updated the 'LOD Setup' test to address some issues Added additional checks for LOD renderers (inactive renderer check, LOD Group reference check, relative hierarchy position to LOD Group check) LOD Group Component is no longer required to be on the root of the Prefab Updated the test result message interface when invalid Prefabs are found [11.2.1] - 2023-01-17 Uploader Changes Added a more informative error when exporting content with clashing guid meta files in hidden folders Fixed a compilation issue for Unity 2020.1 and 2020.2 Fixed a rare error condition when queueing multiple package uploads in quick succession Fixed Asset Store Uploader state not being properly reset if the uploading process fails Validator Changes Updated the Asset Store Validator description Fixed a rare memory overflow issue when performing package validation [11.2.0] - 2022-11-03 Uploader Changes Uploader will now use the custom package exporter by default An option to use the legacy (native) exporter can be found in the Asset Store Publishing Tools' settings window When exporting from the Assets folder, package dependencies can now be selected individually instead of being a choice between 'All' or 'None' This option is only available with the custom exporter Changed the way the Uploader reports completed uploading tasks Modal pop-up has been replaced by a new UI view state Added an option to the Asset Store Publishing Tools' Settings to display the pop-up after a completed upload Changed exported .unitypackage files to have distinguishable file names Fixed the Uploader window indefinitely stalling at 100% upload progress when a response from the Asset Store server is not received Fixed native package exporter producing broken packages when the export path contained hidden folders Fixed an issue with high CPU usage when uploading packages Fixed Asset Store Publishing Tools' settings not being saved between Editor sessions on macOS Other minor changes and tweaks Validator Changes Added two new tests: 'Types have namespaces': checks whether scripts and native libraries under the validated path are nested under a namespace 'Consistent line endings': checks whether scripts under the validated path have consistent line endings. This is similar to the warning from the Unity Editor compilation pipeline when a script contains both Windows and UNIX line endings. Improved 'Reset Prefabs' test to display and be more informative about prefabs with unusually low transform values Improved 'SpeedTree asset inclusion' test to search for '.st' files Improved 'Documentation inclusion' test to treat '.md' files as valid documentation files Improved 'Lossy audio file inclusion' test to treat '.aif' and '.aiff' files as valid non-lossy audio files Improved 'Lossy audio file inclusion' test to search the project for non-lossy variants of existing lossy audio files Removed 'Duplicate animation names' test Tweaked validation severities for several tests Other minor changes and tweaks [11.1.0] - 2022-09-14 Uploader Changes Package Publisher Portal links can now be opened for all packages regardless of package status External Dependency Manager can now be selected as a 'Special Folder' if found in the root Assets folder Validator Changes Added category selection for the Validator Categories help determine the outcome of package validation more accurately. For example, documentation is not crucial for art packages, but is required for tooling packages. Added a list of prefabs with missing mesh references to 'Meshes have Prefabs' test when the test fails Corrected the message for a passing 'Shader compilation errors' test Improved the floating point precision accuracy of 'Reset Prefabs' test Fixed 'Missing Components in Assets' test checking all project folders instead of only the set path Fixed 'Prefabs for meshes' test not checking meshes in certain paths Fixed 'Reset Prefabs' test failing because of Prefabs with a Rect Transform Component Fixed 'Reset Prefabs' test ignoring Transform rotation Fixed test description text overlapping in some cases Other minor changes and tweaks [11.0.2] - 2022-08-09 Corrected some namespaces which were causing issues when deriving classes from Editor class [11.0.1] - 2022-08-05 Uploader Changes Added Settings window (Asset Store Tools > Settings) Added Soft/Junction Symlink support (enable through Settings) Added workflow and path selection serialization (workflow saved locally, paths locally and online) No more logs when using the -nullable compiler option (thanks @alfish) Some API refactoring in preparation for CLI support Other minor fixes/improvements Note: when updating Asset Store Tools from the Package Manager, don't forget to remove the old version from the project (V11.0.0) before importing the new one (V11.0.1) [11.0.0] - 2022-07-20 Uploader changes UI has been reworked using UI Toolkit New login window, allowing to login using Unity Cloud Services Improved top bar, including search and sorting Draft packages moved to the top Added category, size, and last modified date next to the package Added a link to the publishing portal next to the package New uploading flow: “Pre-exported .unitypackage” Previous uploading flow (folder selection) has been renamed to “From Assets Folder” Dependencies check has been renamed to “Include Package Manifest” for clarity Special Folders can now be selected and uploaded together with the package’s main folder (i.e. StreamingAssets, Plugins) You can now upload to multiple packages at the same time without waiting for the first one to finish Package can now be validated in the Uploading window by pressing the “Validate” button Added refresh and logout buttons to the bottom toolbar for easier access Packages caching - package information will no longer be redownloaded every time you open the Uploader window during the same Editor session (Experimental) Custom exporter - will export your package ~2 times faster, but may miss some asset previews in the final product. To enable it - click three dots on the top left side of the window and enable “Use Custom Exporting” Validator changes UI has been reworked using UI Toolkit New tests based on the new guidelines Updated tests’ titles, descriptions, and error reporting [5.0.5] - 2021-11-04 Fixed namespace issues [5.0.4] - 2020-07-28 Fixed issues with Unity 2020.1 [5.0.3] - 2020-05-07 Remove \"Remove Standard Assets\" check [5.0.2] - 2020-04-21 Enable auto login with Unity account Upload package with thread [5.0.1] - 2020-03-23 Fix domain resolve issue [5.0.0] - 2019-10-09 Added \"Package Validator\" tool Added Help window Added logout confirmation popup Updated toolbar menu layout Removed \"Mass Labeler\" tool Updated layout of Login and Package Upload windows Error messages are now more elaborate and user-friendly Removed deprecated \"Main Assets\" step from the Package Upload window Package Upload window now has a step for including package manager dependencies Tooltips are now added to each upload process step [4.1.0] - 2018-05-14 Made Tool compatible with 2017.1 [4.0.7] - 2017-07-10 Tweaked menu items. [4.0.6] - 2016-07-15 Improved error messages. [4.0.5] - 2016-03-17 Enabling upload of fbm files. [4.0.4] - 2015-11-16 Login improvements [4.0.3] - 2015-11-16 Prepare the Tools for Unity 5.3 [4.0.2] - 2015-10-23 Fixed issue where Upload button would not work for some projects. Fixed issues for publishers that only had one package. [4.0.0] - 2015-09-01 Replaced Package Manager with Package Upload. Package management is now handled by Publisher Administration"
  },
  "Packages/com.unity.asset-store-tools/LICENSE.html": {
    "href": "Packages/com.unity.asset-store-tools/LICENSE.html",
    "title": "| ModularUIPack",
    "summary": "Asset Store Tools v2 copyright © 2025 Unity Technologies Source code of the package is licensed under the Unity Companion License (see https://unity.com/legal/licenses/unity-companion-license); otherwise licensed under the Unity Package Distribution License (see https://unity.com/legal/licenses/unity-package-distribution-license ) Unless expressly provided otherwise, the software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "api/Fallencake.UI.AnimatedImageScroller.html": {
    "href": "api/Fallencake.UI.AnimatedImageScroller.html",
    "title": "Class AnimatedImageScroller | ModularUIPack",
    "summary": "Class AnimatedImageScroller Namespace Fallencake.UI Assembly Fallencake.UI.dll Drives continuous UV scrolling for a collection of ScrollableImage items. public class AnimatedImageScroller : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour AnimatedImageScroller Derived FillImageScroller Examples Assign a list of images and toggle scrolling: var scroller = GetComponent<AnimatedImageScroller>(); scroller.SetScrollableImages(new List<ScrollableImage> { item1, item2 }); scroller.IsScrolling = true; // start Remarks On Start(), the component calls Init() to prepare all images. While IsScrolling is true, Update() advances UV offsets for each image every frame by calling UpdateOffset(). Fields _isScrolling [SerializeField] protected bool _isScrolling Field Value bool _scrollableImages [SerializeField] protected List<ScrollableImage> _scrollableImages Field Value List<ScrollableImage> Properties IsScrolling Whether the scroller should advance UV offsets each frame. public bool IsScrolling { get; set; } Property Value bool true to update all configured ScrollableImage instances in Update(); false to pause scrolling. Methods Init() Initializes the scroller by calling Init() on each item. protected virtual void Init() SetScrollableImages(List<ScrollableImage>) Replaces the current collection of images to be scrolled. public virtual void SetScrollableImages(List<ScrollableImage> scrollableImages) Parameters scrollableImages List<ScrollableImage> The list of ScrollableImage items to manage and animate. Start() Unity lifecycle hook. Prepares all configured ScrollableImage instances. protected virtual void Start() Update() Unity lifecycle hook. Advances scrolling each frame while IsScrolling is true. protected virtual void Update()"
  },
  "api/Fallencake.UI.AnimationType.html": {
    "href": "api/Fallencake.UI.AnimationType.html",
    "title": "Enum AnimationType | ModularUIPack",
    "summary": "Enum AnimationType Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum AnimationType Fields Tween = 0 UnityAnimator = 1"
  },
  "api/Fallencake.UI.AtomSpinner.html": {
    "href": "api/Fallencake.UI.AtomSpinner.html",
    "title": "Class AtomSpinner | ModularUIPack",
    "summary": "Class AtomSpinner Namespace Fallencake.UI Assembly Fallencake.UI.dll Stylized loading spinner composed of multiple orbital elements configured by AtomSpinnerParameters. public class AtomSpinner : UIBehaviour, ISpinner Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour AtomSpinner Implements ISpinner Remarks Creates and lays out individual ModularSpinner instances and their orbit visuals, computing per-element angles and start offsets. Provides Spin() and Stop() to control animation. Methods CalculateRotationAngles(int) Calculates per-element rotation angles for layout around the orbit. public List<float> CalculateRotationAngles(int numberOfElements) Parameters numberOfElements int How many elements should be positioned. Returns List<float> List of Z-rotation angles in degrees. CalculateStartAngles(int) Calculates per-element starting angles to seed spinner initial rotations. public List<int> CalculateStartAngles(int numberOfElements) Parameters numberOfElements int How many elements to seed. Returns List<int> List of angles in degrees for initial rotation states. Initialize() Builds and (re)initializes spinners and orbits according to current parameters. public void Initialize() InitializeElement(AtomSpinnerParameters, int) Initializes a specific element (spinner + orbit) at the given index. public void InitializeElement(AtomSpinnerParameters elementParameters, int index) Parameters elementParameters AtomSpinnerParameters Configuration bundle for the element. index int Index of the element to initialize. Spin() Starts or continues the spinning animation. public void Spin() Start() protected override void Start() Stop() Stops the spinning animation. public void Stop()"
  },
  "api/Fallencake.UI.AtomSpinnerParameters.html": {
    "href": "api/Fallencake.UI.AtomSpinnerParameters.html",
    "title": "Class AtomSpinnerParameters | ModularUIPack",
    "summary": "Class AtomSpinnerParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll Parameter bundle for configuring a single atom spinner element and its orbit. [Serializable] public class AtomSpinnerParameters Inheritance object AtomSpinnerParameters Constructors AtomSpinnerParameters() public AtomSpinnerParameters() Fields elementColor Tint color of the spinning element. public Color elementColor Field Value Color elementSize Size (x,y) of the spinning element. public Vector2 elementSize Field Value Vector2 elementSprite [Header(\"OPTIONS\")] public Sprite elementSprite Field Value Sprite orbirColor Tint color of the orbit ring. public Color orbirColor Field Value Color orbit Orbit ring image to visualize the path. public Image orbit Field Value Image orbitSprite Sprite used for the orbit ring. public Sprite orbitSprite Field Value Sprite spinner [Header(\"COMPONENTS\")] public ModularSpinner spinner Field Value ModularSpinner spinningAreaOffset Offsets constraining the element's spinning area inside its container. public Vector2 spinningAreaOffset Field Value Vector2"
  },
  "api/Fallencake.UI.Audio.AudioData.html": {
    "href": "api/Fallencake.UI.Audio.AudioData.html",
    "title": "Struct AudioData | ModularUIPack",
    "summary": "Struct AudioData Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Serializable value object describing a UI sound: clip, enable flag, volume and pitch. [Serializable] public struct AudioData Constructors AudioData(AudioClip, bool, float, float) Creates a new AudioData with specified parameters. public AudioData(AudioClip clip, bool enabled = true, float volume = 1, float pitch = 1) Parameters clip AudioClip Audio clip. enabled bool Enabled or not. volume float Volume multiplier. pitch float Sound pitch. Fields Clip Audio clip to play. [Tooltip(\"Audio clip to play\")] public AudioClip Clip Field Value AudioClip Enabled Enables or disables sound playback. [Tooltip(\"Enables or disables sound playback\")] public bool Enabled Field Value bool Pitch Sound pitch. [Tooltip(\"Sound pitch\")] [Range(0.5, 2.5)] public float Pitch Field Value float Volume Sound volume (from 0 to 1). [Tooltip(\"Sound volume (from 0 to 1)\")] [Range(0, 1)] public float Volume Field Value float"
  },
  "api/Fallencake.UI.Audio.AudioManager.html": {
    "href": "api/Fallencake.UI.Audio.AudioManager.html",
    "title": "Class AudioManager | ModularUIPack",
    "summary": "Class AudioManager Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Centralized audio settings and utilities for UI components. Manages global enable/volume and provides a shared UnityEngine.AudioSource. public static class AudioManager Inheritance object AudioManager Properties GlobalSoundEnabled Global sound enable/disable for all UI components. public static bool GlobalSoundEnabled { get; set; } Property Value bool GlobalVolume Global volume for all UI components. public static float GlobalVolume { get; set; } Property Value float SharedAudioSource Shared audio source for components that don't have their own. public static AudioSource SharedAudioSource { get; } Property Value AudioSource Methods MuteAll() Disables sounds for all components. public static void MuteAll() RegisterHandler(IAudioHandler) Registers an audio handler for centralized management. public static void RegisterHandler(IAudioHandler handler) Parameters handler IAudioHandler Audio handler. UnmuteAll() Enables sounds for all components. public static void UnmuteAll() UnregisterHandler(IAudioHandler) Removes the audio handler from management. public static void UnregisterHandler(IAudioHandler handler) Parameters handler IAudioHandler Audio handler."
  },
  "api/Fallencake.UI.Audio.DropdownAudioHandler.html": {
    "href": "api/Fallencake.UI.Audio.DropdownAudioHandler.html",
    "title": "Class DropdownAudioHandler | ModularUIPack",
    "summary": "Class DropdownAudioHandler Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Concrete UI audio handler for DropdownMenu that plays open/close and selection-related sounds via a shared UnityEngine.AudioSource. public class DropdownAudioHandler : UIAudioHandler<IDropdownAudioProvider>, IAudioEventHandler, IDropdownAudioHandler, IAudioHandler Inheritance object UIAudioHandler<IDropdownAudioProvider> DropdownAudioHandler Implements IAudioEventHandler IDropdownAudioHandler IAudioHandler Inherited Members UIAudioHandler<IDropdownAudioProvider>._provider UIAudioHandler<IDropdownAudioProvider>.Component UIAudioHandler<IDropdownAudioProvider>.Selectable UIAudioHandler<IDropdownAudioProvider>.AudioSource UIAudioHandler<IDropdownAudioProvider>.EnableSounds UIAudioHandler<IDropdownAudioProvider>.Volume UIAudioHandler<IDropdownAudioProvider>.AddEventTriggers() UIAudioHandler<IDropdownAudioProvider>.RemoveEventTriggers() UIAudioHandler<IDropdownAudioProvider>.UpdateInteractable(bool) UIAudioHandler<IDropdownAudioProvider>.IsInteractable() UIAudioHandler<IDropdownAudioProvider>.PlaySelectSound() UIAudioHandler<IDropdownAudioProvider>.PlayDeselectSound() UIAudioHandler<IDropdownAudioProvider>.PlayPressSound() UIAudioHandler<IDropdownAudioProvider>.OnSelect(BaseEventData) UIAudioHandler<IDropdownAudioProvider>.OnDeselect(BaseEventData) UIAudioHandler<IDropdownAudioProvider>.OnPointerClick(PointerEventData) UIAudioHandler<IDropdownAudioProvider>.OnPointerEnter(PointerEventData) UIAudioHandler<IDropdownAudioProvider>.OnPointerExit(PointerEventData) UIAudioHandler<IDropdownAudioProvider>.OnSubmit(BaseEventData) UIAudioHandler<IDropdownAudioProvider>.Dispose() Constructors DropdownAudioHandler(IDropdownAudioProvider) public DropdownAudioHandler(IDropdownAudioProvider provider) Parameters provider IDropdownAudioProvider Properties CloseSound Sound when closing the dropdown menu. public AudioClip CloseSound { get; } Property Value AudioClip OpenSound Sound when opening the dropdown menu. public AudioClip OpenSound { get; } Property Value AudioClip SelectItemSound Sound when selecting an item from the list. public AudioClip SelectItemSound { get; } Property Value AudioClip Methods Create(IDropdownAudioProvider) Factory that constructs a handler when sounds are enabled and ensures an UnityEngine.AudioSource exists. public static DropdownAudioHandler Create(IDropdownAudioProvider provider) Parameters provider IDropdownAudioProvider Audio-capable dropdown provider. Returns DropdownAudioHandler PlayCloseSound() Plays the close dropdown menu sound. public void PlayCloseSound() PlayOpenSound() Plays the open dropdown menu sound. public void PlayOpenSound() PlaySelectItemSound() Plays the select item sound from the list. public void PlaySelectItemSound()"
  },
  "api/Fallencake.UI.Audio.IAudioEventHandler.html": {
    "href": "api/Fallencake.UI.Audio.IAudioEventHandler.html",
    "title": "Interface IAudioEventHandler | ModularUIPack",
    "summary": "Interface IAudioEventHandler Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Interface that aggregates standard UI event handlers used for audio feedback. Implementations can react to selection, click, pointer and submit events. public interface IAudioEventHandler"
  },
  "api/Fallencake.UI.Audio.IAudioHandler.html": {
    "href": "api/Fallencake.UI.Audio.IAudioHandler.html",
    "title": "Interface IAudioHandler | ModularUIPack",
    "summary": "Interface IAudioHandler Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Base interface for managing sounds in UI components. Provides access to audio device and toggles plus basic event-driven playback. public interface IAudioHandler Properties AudioSource Audio source for playing sounds. AudioSource AudioSource { get; set; } Property Value AudioSource EnableSounds Whether sounds are enabled for the component. bool EnableSounds { get; set; } Property Value bool Volume Volume for sound playback. float Volume { get; set; } Property Value float Methods PlayDeselectSound() Play sound when deselected. void PlayDeselectSound() PlayPressSound() Play sound when pressed. void PlayPressSound() PlaySelectSound() Play sound when hovered. void PlaySelectSound() UpdateInteractable(bool) Updates the interactable state of the UI component. void UpdateInteractable(bool isInteractable) Parameters isInteractable bool Whether the component should be interactable."
  },
  "api/Fallencake.UI.Audio.IAudioProvider.html": {
    "href": "api/Fallencake.UI.Audio.IAudioProvider.html",
    "title": "Interface IAudioProvider | ModularUIPack",
    "summary": "Interface IAudioProvider Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll public interface IAudioProvider Properties AudioSource AudioSource used to play sounds. AudioSource AudioSource { get; set; } Property Value AudioSource Component Owning component used by handlers for context and coroutines. MonoBehaviour Component { get; } Property Value MonoBehaviour DeselectSound Sound played on deselect. AudioData DeselectSound { get; } Property Value AudioData EnableSounds Enables/disables sound playback for this component. bool EnableSounds { get; set; } Property Value bool PressSound Sound played on press/submit. AudioData PressSound { get; } Property Value AudioData SelectSound Sound played on select/hover. AudioData SelectSound { get; } Property Value AudioData Selectable UI selectable to bind event triggers to. Selectable Selectable { get; } Property Value Selectable Volume Per-component volume multiplier. float Volume { get; set; } Property Value float"
  },
  "api/Fallencake.UI.Audio.IDropdownAudioHandler.html": {
    "href": "api/Fallencake.UI.Audio.IDropdownAudioHandler.html",
    "title": "Interface IDropdownAudioHandler | ModularUIPack",
    "summary": "Interface IDropdownAudioHandler Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Interface for managing sounds in the DropdownMenu component. public interface IDropdownAudioHandler : IAudioHandler Inherited Members IAudioHandler.AudioSource IAudioHandler.EnableSounds IAudioHandler.Volume IAudioHandler.PlaySelectSound() IAudioHandler.PlayDeselectSound() IAudioHandler.PlayPressSound() IAudioHandler.UpdateInteractable(bool) Properties CloseSound Sound when closing the dropdown menu. AudioClip CloseSound { get; } Property Value AudioClip OpenSound Sound when opening the dropdown menu. AudioClip OpenSound { get; } Property Value AudioClip SelectItemSound Sound when selecting an item from the list. AudioClip SelectItemSound { get; } Property Value AudioClip Methods PlayCloseSound() Play sound when closing the dropdown menu. void PlayCloseSound() PlayOpenSound() Play sound when opening the dropdown menu. void PlayOpenSound() PlaySelectItemSound() Play sound when selecting an item from the list. void PlaySelectItemSound()"
  },
  "api/Fallencake.UI.Audio.IDropdownAudioProvider.html": {
    "href": "api/Fallencake.UI.Audio.IDropdownAudioProvider.html",
    "title": "Interface IDropdownAudioProvider | ModularUIPack",
    "summary": "Interface IDropdownAudioProvider Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll public interface IDropdownAudioProvider : IAudioProvider Inherited Members IAudioProvider.Component IAudioProvider.Selectable IAudioProvider.AudioSource IAudioProvider.SelectSound IAudioProvider.DeselectSound IAudioProvider.PressSound IAudioProvider.EnableSounds IAudioProvider.Volume Properties CloseSound Sound data for closing the dropdown. AudioData CloseSound { get; } Property Value AudioData OpenSound Sound data for opening the dropdown. AudioData OpenSound { get; } Property Value AudioData SelectItemSound Sound data for selecting an item. AudioData SelectItemSound { get; } Property Value AudioData"
  },
  "api/Fallencake.UI.Audio.IInputFieldAudioHandler.html": {
    "href": "api/Fallencake.UI.Audio.IInputFieldAudioHandler.html",
    "title": "Interface IInputFieldAudioHandler | ModularUIPack",
    "summary": "Interface IInputFieldAudioHandler Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Інтерфейс для управління звуками в компоненті InputField public interface IInputFieldAudioHandler : IAudioHandler Inherited Members IAudioHandler.AudioSource IAudioHandler.EnableSounds IAudioHandler.Volume IAudioHandler.PlaySelectSound() IAudioHandler.PlayDeselectSound() IAudioHandler.PlayPressSound() IAudioHandler.UpdateInteractable(bool) Properties EndEditSound Звук закінчення редагування AudioClip EndEditSound { get; } Property Value AudioClip TypeSound Звук введення символу AudioClip TypeSound { get; } Property Value AudioClip Methods PlayEndEditSound() Відтворює звук закінчення редагування void PlayEndEditSound() PlayTypeSound() Відтворює звук введення символу void PlayTypeSound()"
  },
  "api/Fallencake.UI.Audio.IInputFieldAudioProvider.html": {
    "href": "api/Fallencake.UI.Audio.IInputFieldAudioProvider.html",
    "title": "Interface IInputFieldAudioProvider | ModularUIPack",
    "summary": "Interface IInputFieldAudioProvider Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll public interface IInputFieldAudioProvider : IAudioProvider Inherited Members IAudioProvider.Component IAudioProvider.Selectable IAudioProvider.AudioSource IAudioProvider.SelectSound IAudioProvider.DeselectSound IAudioProvider.PressSound IAudioProvider.EnableSounds IAudioProvider.Volume Properties EndEditSound Sound when editing ends (submit). AudioData EndEditSound { get; } Property Value AudioData TypeSound Sound when typing characters. AudioData TypeSound { get; } Property Value AudioData"
  },
  "api/Fallencake.UI.Audio.IProgressBarAudioHandler.html": {
    "href": "api/Fallencake.UI.Audio.IProgressBarAudioHandler.html",
    "title": "Interface IProgressBarAudioHandler | ModularUIPack",
    "summary": "Interface IProgressBarAudioHandler Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll public interface IProgressBarAudioHandler : IAudioHandler Inherited Members IAudioHandler.AudioSource IAudioHandler.EnableSounds IAudioHandler.Volume IAudioHandler.PlaySelectSound() IAudioHandler.PlayDeselectSound() IAudioHandler.PlayPressSound() IAudioHandler.UpdateInteractable(bool) Methods CanPlayProgressUpdateSound() Indicates whether update sound can be played now (e.g., not already playing). bool CanPlayProgressUpdateSound() Returns bool PlayProgressCompleteSound() Plays progress completion sound. void PlayProgressCompleteSound() PlayProgressUpdateSound(float) Plays progress update sound, optionally overriding pitch. void PlayProgressUpdateSound(float pitch = -1) Parameters pitch float Override pitch; pass negative to use configured pitch."
  },
  "api/Fallencake.UI.Audio.IProgressBarAudioProvider.html": {
    "href": "api/Fallencake.UI.Audio.IProgressBarAudioProvider.html",
    "title": "Interface IProgressBarAudioProvider | ModularUIPack",
    "summary": "Interface IProgressBarAudioProvider Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll public interface IProgressBarAudioProvider : IAudioProvider Inherited Members IAudioProvider.Component IAudioProvider.Selectable IAudioProvider.AudioSource IAudioProvider.SelectSound IAudioProvider.DeselectSound IAudioProvider.PressSound IAudioProvider.EnableSounds IAudioProvider.Volume Properties ProgressCompleteSound Sound data for completion. AudioData ProgressCompleteSound { get; } Property Value AudioData ProgressUpdateSound Sound data for progress update (loop/step). AudioData ProgressUpdateSound { get; } Property Value AudioData"
  },
  "api/Fallencake.UI.Audio.IToggleAudioHandler.html": {
    "href": "api/Fallencake.UI.Audio.IToggleAudioHandler.html",
    "title": "Interface IToggleAudioHandler | ModularUIPack",
    "summary": "Interface IToggleAudioHandler Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Interface for managing sounds in the Toggle component. public interface IToggleAudioHandler : IAudioHandler Inherited Members IAudioHandler.AudioSource IAudioHandler.EnableSounds IAudioHandler.Volume IAudioHandler.PlaySelectSound() IAudioHandler.PlayDeselectSound() IAudioHandler.PlayPressSound() IAudioHandler.UpdateInteractable(bool) Properties ToggleOffSound Sound when the toggle is deactivated. AudioClip ToggleOffSound { get; } Property Value AudioClip ToggleOnSound Sound when the toggle is activated. AudioClip ToggleOnSound { get; } Property Value AudioClip Methods PlayToggleOffSound() Play sound when the toggle is deactivated. void PlayToggleOffSound() PlayToggleOnSound() Play sound when the toggle is activated. void PlayToggleOnSound()"
  },
  "api/Fallencake.UI.Audio.IToggleAudioProvider.html": {
    "href": "api/Fallencake.UI.Audio.IToggleAudioProvider.html",
    "title": "Interface IToggleAudioProvider | ModularUIPack",
    "summary": "Interface IToggleAudioProvider Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll public interface IToggleAudioProvider : IAudioProvider Inherited Members IAudioProvider.Component IAudioProvider.Selectable IAudioProvider.AudioSource IAudioProvider.SelectSound IAudioProvider.DeselectSound IAudioProvider.PressSound IAudioProvider.EnableSounds IAudioProvider.Volume Properties ToggleOffSound Sound when toggled off. AudioData ToggleOffSound { get; } Property Value AudioData ToggleOnSound Sound when toggled on. AudioData ToggleOnSound { get; } Property Value AudioData"
  },
  "api/Fallencake.UI.Audio.InputFieldAudioHandler.html": {
    "href": "api/Fallencake.UI.Audio.InputFieldAudioHandler.html",
    "title": "Class InputFieldAudioHandler | ModularUIPack",
    "summary": "Class InputFieldAudioHandler Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Audio handler for Unity UnityEngine.UI.InputField-like components via IInputFieldAudioProvider. Plays typing and end-edit sounds. public class InputFieldAudioHandler : UIAudioHandler<IInputFieldAudioProvider>, IAudioEventHandler, IInputFieldAudioHandler, IAudioHandler Inheritance object UIAudioHandler<IInputFieldAudioProvider> InputFieldAudioHandler Implements IAudioEventHandler IInputFieldAudioHandler IAudioHandler Inherited Members UIAudioHandler<IInputFieldAudioProvider>._provider UIAudioHandler<IInputFieldAudioProvider>.Component UIAudioHandler<IInputFieldAudioProvider>.Selectable UIAudioHandler<IInputFieldAudioProvider>.AudioSource UIAudioHandler<IInputFieldAudioProvider>.EnableSounds UIAudioHandler<IInputFieldAudioProvider>.Volume UIAudioHandler<IInputFieldAudioProvider>.AddEventTriggers() UIAudioHandler<IInputFieldAudioProvider>.RemoveEventTriggers() UIAudioHandler<IInputFieldAudioProvider>.UpdateInteractable(bool) UIAudioHandler<IInputFieldAudioProvider>.IsInteractable() UIAudioHandler<IInputFieldAudioProvider>.PlaySelectSound() UIAudioHandler<IInputFieldAudioProvider>.PlayDeselectSound() UIAudioHandler<IInputFieldAudioProvider>.PlayPressSound() UIAudioHandler<IInputFieldAudioProvider>.OnSelect(BaseEventData) UIAudioHandler<IInputFieldAudioProvider>.OnDeselect(BaseEventData) UIAudioHandler<IInputFieldAudioProvider>.OnPointerClick(PointerEventData) UIAudioHandler<IInputFieldAudioProvider>.OnPointerEnter(PointerEventData) UIAudioHandler<IInputFieldAudioProvider>.OnPointerExit(PointerEventData) UIAudioHandler<IInputFieldAudioProvider>.OnSubmit(BaseEventData) UIAudioHandler<IInputFieldAudioProvider>.Dispose() Constructors InputFieldAudioHandler(IInputFieldAudioProvider) public InputFieldAudioHandler(IInputFieldAudioProvider provider) Parameters provider IInputFieldAudioProvider Properties EndEditSound Звук закінчення редагування public AudioClip EndEditSound { get; } Property Value AudioClip EndEditSoundData public AudioData EndEditSoundData { get; } Property Value AudioData TypeSound Звук введення символу public AudioClip TypeSound { get; } Property Value AudioClip TypeSoundData public AudioData TypeSoundData { get; } Property Value AudioData Methods Create(IInputFieldAudioProvider) public static InputFieldAudioHandler Create(IInputFieldAudioProvider provider) Parameters provider IInputFieldAudioProvider Returns InputFieldAudioHandler PlayEndEditSound() Plays end-edit (submit) sound. public void PlayEndEditSound() PlayTypeSound() Plays type (character input) sound. public void PlayTypeSound()"
  },
  "api/Fallencake.UI.Audio.ProgressBarAudioHandler.html": {
    "href": "api/Fallencake.UI.Audio.ProgressBarAudioHandler.html",
    "title": "Class ProgressBarAudioHandler | ModularUIPack",
    "summary": "Class ProgressBarAudioHandler Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Audio handler for progress bars via IProgressBarAudioProvider. Supports update tick sound (with pitch control) and completion sound. public class ProgressBarAudioHandler : UIAudioHandler<IProgressBarAudioProvider>, IAudioEventHandler, IProgressBarAudioHandler, IAudioHandler Inheritance object UIAudioHandler<IProgressBarAudioProvider> ProgressBarAudioHandler Implements IAudioEventHandler IProgressBarAudioHandler IAudioHandler Inherited Members UIAudioHandler<IProgressBarAudioProvider>._provider UIAudioHandler<IProgressBarAudioProvider>.Component UIAudioHandler<IProgressBarAudioProvider>.Selectable UIAudioHandler<IProgressBarAudioProvider>.AudioSource UIAudioHandler<IProgressBarAudioProvider>.EnableSounds UIAudioHandler<IProgressBarAudioProvider>.Volume UIAudioHandler<IProgressBarAudioProvider>.AddEventTriggers() UIAudioHandler<IProgressBarAudioProvider>.RemoveEventTriggers() UIAudioHandler<IProgressBarAudioProvider>.UpdateInteractable(bool) UIAudioHandler<IProgressBarAudioProvider>.IsInteractable() UIAudioHandler<IProgressBarAudioProvider>.PlaySelectSound() UIAudioHandler<IProgressBarAudioProvider>.PlayDeselectSound() UIAudioHandler<IProgressBarAudioProvider>.PlayPressSound() UIAudioHandler<IProgressBarAudioProvider>.OnSelect(BaseEventData) UIAudioHandler<IProgressBarAudioProvider>.OnDeselect(BaseEventData) UIAudioHandler<IProgressBarAudioProvider>.OnPointerClick(PointerEventData) UIAudioHandler<IProgressBarAudioProvider>.OnPointerEnter(PointerEventData) UIAudioHandler<IProgressBarAudioProvider>.OnPointerExit(PointerEventData) UIAudioHandler<IProgressBarAudioProvider>.OnSubmit(BaseEventData) Methods CanPlayProgressUpdateSound() Indicates whether update sound can be played now (e.g., not already playing). public bool CanPlayProgressUpdateSound() Returns bool Create(IProgressBarAudioProvider) Factory to create handler and ensure UnityEngine.AudioSource existence. public static ProgressBarAudioHandler Create(IProgressBarAudioProvider provider) Parameters provider IProgressBarAudioProvider Progress bar audio provider. Returns ProgressBarAudioHandler Dispose() Releases resources and unregisters from the manager. public override void Dispose() PlayProgressCompleteSound() Plays progress completion sound. public void PlayProgressCompleteSound() PlayProgressUpdateSound(float) Plays progress update sound, optionally overriding pitch. public void PlayProgressUpdateSound(float pitch = -1) Parameters pitch float Override pitch; pass negative to use configured pitch."
  },
  "api/Fallencake.UI.Audio.ToggleAudioHandler.html": {
    "href": "api/Fallencake.UI.Audio.ToggleAudioHandler.html",
    "title": "Class ToggleAudioHandler | ModularUIPack",
    "summary": "Class ToggleAudioHandler Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Audio handler for Toggle-like components via IToggleAudioProvider. Plays toggle on/off sounds. public class ToggleAudioHandler : UIAudioHandler<IToggleAudioProvider>, IAudioEventHandler, IToggleAudioHandler, IAudioHandler Inheritance object UIAudioHandler<IToggleAudioProvider> ToggleAudioHandler Implements IAudioEventHandler IToggleAudioHandler IAudioHandler Inherited Members UIAudioHandler<IToggleAudioProvider>._provider UIAudioHandler<IToggleAudioProvider>.Component UIAudioHandler<IToggleAudioProvider>.Selectable UIAudioHandler<IToggleAudioProvider>.AudioSource UIAudioHandler<IToggleAudioProvider>.EnableSounds UIAudioHandler<IToggleAudioProvider>.Volume UIAudioHandler<IToggleAudioProvider>.AddEventTriggers() UIAudioHandler<IToggleAudioProvider>.RemoveEventTriggers() UIAudioHandler<IToggleAudioProvider>.UpdateInteractable(bool) UIAudioHandler<IToggleAudioProvider>.IsInteractable() UIAudioHandler<IToggleAudioProvider>.PlaySelectSound() UIAudioHandler<IToggleAudioProvider>.PlayDeselectSound() UIAudioHandler<IToggleAudioProvider>.PlayPressSound() UIAudioHandler<IToggleAudioProvider>.OnSelect(BaseEventData) UIAudioHandler<IToggleAudioProvider>.OnDeselect(BaseEventData) UIAudioHandler<IToggleAudioProvider>.OnPointerClick(PointerEventData) UIAudioHandler<IToggleAudioProvider>.OnPointerEnter(PointerEventData) UIAudioHandler<IToggleAudioProvider>.OnPointerExit(PointerEventData) UIAudioHandler<IToggleAudioProvider>.OnSubmit(BaseEventData) UIAudioHandler<IToggleAudioProvider>.Dispose() Constructors ToggleAudioHandler(IToggleAudioProvider) public ToggleAudioHandler(IToggleAudioProvider provider) Parameters provider IToggleAudioProvider Properties ToggleOffSound Sound when the toggle is deactivated. public AudioClip ToggleOffSound { get; } Property Value AudioClip ToggleOffSoundData public AudioData ToggleOffSoundData { get; } Property Value AudioData ToggleOnSound Sound when the toggle is activated. public AudioClip ToggleOnSound { get; } Property Value AudioClip ToggleOnSoundData public AudioData ToggleOnSoundData { get; } Property Value AudioData Methods Create(IToggleAudioProvider) Static factory to create and configure the toggle audio handler. Ensures an UnityEngine.AudioSource exists when sounds are enabled. public static ToggleAudioHandler Create(IToggleAudioProvider provider) Parameters provider IToggleAudioProvider The toggle audio provider. Returns ToggleAudioHandler New ToggleAudioHandler or null if sounds disabled. PlayToggleOffSound() Plays the toggle off sound. public void PlayToggleOffSound() PlayToggleOnSound() Plays the toggle on sound. public void PlayToggleOnSound()"
  },
  "api/Fallencake.UI.Audio.UIAudioHandler-1.html": {
    "href": "api/Fallencake.UI.Audio.UIAudioHandler-1.html",
    "title": "Class UIAudioHandler<T> | ModularUIPack",
    "summary": "Class UIAudioHandler<T> Namespace Fallencake.UI.Audio Assembly Fallencake.UI.dll Generic base class for UI audio handlers that wires UI events to sound playback and provides shared management via AudioManager. public class UIAudioHandler<T> : IAudioHandler, IAudioEventHandler where T : IAudioProvider Type Parameters T Inheritance object UIAudioHandler<T> Implements IAudioHandler IAudioEventHandler Derived DropdownAudioHandler InputFieldAudioHandler ProgressBarAudioHandler ToggleAudioHandler Constructors UIAudioHandler(T) public UIAudioHandler(T provider) Parameters provider T Properties AudioSource Audio source for playing sounds. public AudioSource AudioSource { get; set; } Property Value AudioSource Component Component used for coroutines and context. public MonoBehaviour Component { get; } Property Value MonoBehaviour EnableSounds Whether sounds are enabled for the component. public bool EnableSounds { get; set; } Property Value bool Selectable Associated selectable used to attach event triggers. public Selectable Selectable { get; } Property Value Selectable Volume Volume for sound playback. public float Volume { get; set; } Property Value float _provider protected T _provider { get; } Property Value T Methods AddEventTriggers() Adds event handlers to the component. protected virtual void AddEventTriggers() Dispose() Releases resources and unregisters from the manager. public virtual void Dispose() IsInteractable() Checks if the component is available for interaction. protected virtual bool IsInteractable() Returns bool OnDeselect(BaseEventData) Called when the element is deselected. public virtual void OnDeselect(BaseEventData eventData) Parameters eventData BaseEventData OnPointerClick(PointerEventData) Called when the element is clicked. public virtual void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData OnPointerEnter(PointerEventData) Called when the pointer enters the element. public virtual void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData OnPointerExit(PointerEventData) Called when the pointer exits the element. public virtual void OnPointerExit(PointerEventData eventData) Parameters eventData PointerEventData OnSelect(BaseEventData) Called when the element is selected. public virtual void OnSelect(BaseEventData eventData) Parameters eventData BaseEventData OnSubmit(BaseEventData) Called when the element is submitted. public virtual void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData PlayDeselectSound() Plays the deselect sound. public virtual void PlayDeselectSound() PlayPressSound() Plays the press sound. public virtual void PlayPressSound() PlaySelectSound() Plays the select sound. public virtual void PlaySelectSound() RemoveEventTriggers() Removes event handlers from the component. protected virtual void RemoveEventTriggers() UpdateInteractable(bool) Updates the interactable state and event handlers. public virtual void UpdateInteractable(bool isInteractable) Parameters isInteractable bool New interactable state."
  },
  "api/Fallencake.UI.Audio.html": {
    "href": "api/Fallencake.UI.Audio.html",
    "title": "Namespace Fallencake.UI.Audio | ModularUIPack",
    "summary": "Namespace Fallencake.UI.Audio Classes AudioManager Centralized audio settings and utilities for UI components. Manages global enable/volume and provides a shared UnityEngine.AudioSource. DropdownAudioHandler Concrete UI audio handler for DropdownMenu that plays open/close and selection-related sounds via a shared UnityEngine.AudioSource. InputFieldAudioHandler Audio handler for Unity UnityEngine.UI.InputField-like components via IInputFieldAudioProvider. Plays typing and end-edit sounds. ProgressBarAudioHandler Audio handler for progress bars via IProgressBarAudioProvider. Supports update tick sound (with pitch control) and completion sound. ToggleAudioHandler Audio handler for Toggle-like components via IToggleAudioProvider. Plays toggle on/off sounds. UIAudioHandler<T> Generic base class for UI audio handlers that wires UI events to sound playback and provides shared management via AudioManager. Structs AudioData Serializable value object describing a UI sound: clip, enable flag, volume and pitch. Interfaces IAudioEventHandler Interface that aggregates standard UI event handlers used for audio feedback. Implementations can react to selection, click, pointer and submit events. IAudioHandler Base interface for managing sounds in UI components. Provides access to audio device and toggles plus basic event-driven playback. IAudioProvider IDropdownAudioHandler Interface for managing sounds in the DropdownMenu component. IDropdownAudioProvider IInputFieldAudioHandler Інтерфейс для управління звуками в компоненті InputField IInputFieldAudioProvider IProgressBarAudioHandler IProgressBarAudioProvider IToggleAudioHandler Interface for managing sounds in the Toggle component. IToggleAudioProvider"
  },
  "api/Fallencake.UI.AxialSpinnerHandler.html": {
    "href": "api/Fallencake.UI.AxialSpinnerHandler.html",
    "title": "Class AxialSpinnerHandler | ModularUIPack",
    "summary": "Class AxialSpinnerHandler Namespace Fallencake.UI Assembly Fallencake.UI.dll Axial spinner handler that positions elements along an axis and rotates them around their centers. public class AxialSpinnerHandler : SpinnerHandler, ISpinnerHandler Inheritance object SpinnerHandler AxialSpinnerHandler Implements ISpinnerHandler Inherited Members SpinnerHandler._spinner SpinnerHandler._spinners SpinnerHandler._isInitialized SpinnerHandler._elementsAmount SpinnerHandler._size SpinnerHandler.rotationTime SpinnerHandler.rotationDelay SpinnerHandler.size SpinnerHandler.isClockwise SpinnerHandler.isLookForward SpinnerHandler.isSimpleDelay SpinnerHandler.isContinuousSpin SpinnerHandler.startAngle SpinnerHandler.elementsAmount SpinnerHandler.facingDirection SpinnerHandler.elementStartPosition SpinnerHandler.movementCurve SpinnerHandler._allNotSpinning SpinnerHandler.GetSpinner(int) SpinnerHandler.InitSpinners() SpinnerHandler.Spin() SpinnerHandler.Stop() SpinnerHandler.StopImmediate() SpinnerHandler.StartSynchronizedContinuousSpin(float) SpinnerHandler.HasFirstElementCompletedRotation() SpinnerHandler.GetFirstCompletedElementSpeed() Constructors AxialSpinnerHandler(ModularSpinner) Constructs an axial spinner handler for a given spinner. public AxialSpinnerHandler(ModularSpinner spinner) Parameters spinner ModularSpinner Methods CalculateAreaSize() Calculates layout size used for positioning. public override void CalculateAreaSize() Initialize() Initializes handler state and places elements to their start positions. public override void Initialize() MoveTangently(int) Moves the element along the axis based on the current spinner angle. public override void MoveTangently(int index) Parameters index int SetElementsStartPosition() Positions elements along the X axis with the first element at center. Subsequent elements are distributed from center towards the edge according to ElementStartPosition. public override void SetElementsStartPosition()"
  },
  "api/Fallencake.UI.BaseSelector.SelectorItem.html": {
    "href": "api/Fallencake.UI.BaseSelector.SelectorItem.html",
    "title": "Class BaseSelector.SelectorItem | ModularUIPack",
    "summary": "Class BaseSelector.SelectorItem Namespace Fallencake.UI Assembly Fallencake.UI.dll Represents a single selectable item: a display name, optional icon, and a selection event. [Serializable] public class BaseSelector.SelectorItem Inheritance object BaseSelector.SelectorItem Fields Icon Optional icon sprite used by icon graphics. public Sprite Icon Field Value Sprite Name Display name used in labels. [SerializeField] public string Name Field Value string OnSelected Event invoked when this item becomes selected. public UnityEvent OnSelected Field Value UnityEvent s_DefaultName public const string s_DefaultName = \"Selector Item\" Field Value string"
  },
  "api/Fallencake.UI.BaseSelector.html": {
    "href": "api/Fallencake.UI.BaseSelector.html",
    "title": "Class BaseSelector | ModularUIPack",
    "summary": "Class BaseSelector Namespace Fallencake.UI Assembly Fallencake.UI.dll Base component for selectable UI controls that manage a list of items and synchronize labels, icons, indicators, animations, and saving behavior. public abstract class BaseSelector : MonoBehaviour, ISaveable Inheritance object Object Component Behaviour MonoBehaviour BaseSelector Implements ISaveable Derived Selector Remarks Provides common properties for visibility, spacing, scaling, saving, and events. Derived selectors implement content update hooks and selection logic via SelectItem(int). Fields OnSelectedIndexChanged Invoked when the selected index changes. public SelectedIndexEvent OnSelectedIndexChanged Field Value SelectedIndexEvent OnSelectedTextChanged Invoked when the displayed text changes due to selection. public SelectedTextEvent OnSelectedTextChanged Field Value SelectedTextEvent PlayerPrefsKeyPrefix protected const string PlayerPrefsKeyPrefix = \"ModularSelector_\" Field Value string _basicContentLayout [SerializeField] protected HorizontalOrVerticalLayoutGroup _basicContentLayout Field Value HorizontalOrVerticalLayoutGroup _basicIcon [SerializeField] protected Image _basicIcon Field Value Image _basicTextLabel [SerializeField] protected TMP_Text _basicTextLabel Field Value TMP_Text _contentSpacing The spacing between the content components. [SerializeField] [Range(0, 100)] protected int _contentSpacing Field Value int _defaultItemIndex The index of the default item in the items list used when the selector is initialized if saving is disabled. [SerializeField] protected int _defaultItemIndex Field Value int _iconScale The scale of the icon component when it is enabled. [SerializeField] [Range(0.25, 5)] protected float _iconScale Field Value float _indicatorPrefab [SerializeField] protected GameObject _indicatorPrefab Field Value GameObject _indicatorsContainer [SerializeField] protected Transform _indicatorsContainer Field Value Transform _invertAnimation When enabled, creates an inverted animation behavior. When selecting the next item in the Items list, it will play the previous animation, and when selecting the previous item, it will play the next animation. [SerializeField] protected bool _invertAnimation Field Value bool _invokeOnInitialization Determines whether callbacks should be invoked when the selector is initialized. When enabled, the events will be triggered during initialization. [SerializeField] protected bool _invokeOnInitialization Field Value bool _isIconEnabled Controls the visibility of icon components and affects the layout of selector content. [SerializeField] protected bool _isIconEnabled Field Value bool _isIndicatorsEnabled Controls the visibility of indicators container component. [SerializeField] protected bool _isIndicatorsEnabled Field Value bool _isInitialized protected bool _isInitialized Field Value bool _isSavingEnabled Determines whether the selector's state can be saved and loaded. [SerializeField] protected bool _isSavingEnabled Field Value bool _isTextEnabled Controls the visibility of text components and affects the layout of selector content. [SerializeField] protected bool _isTextEnabled Field Value bool _items [SerializeField] protected List<SelectorItem> _items Field Value List<SelectorItem> _loopSelection When enabled, the selector will loop through the items when the first or last item is selected. [SerializeField] protected bool _loopSelection Field Value bool _nextAnimator [SerializeField] protected ModularAnimator _nextAnimator Field Value ModularAnimator _previousAnimator [SerializeField] protected ModularAnimator _previousAnimator Field Value ModularAnimator _saveKey The string key used to save and load the selector's state in PlayerPrefs. [SerializeField] protected string _saveKey Field Value string _secondaryContentLayout [SerializeField] protected HorizontalOrVerticalLayoutGroup _secondaryContentLayout Field Value HorizontalOrVerticalLayoutGroup _secondaryIcon [SerializeField] protected Image _secondaryIcon Field Value Image _secondaryTextLabel [SerializeField] protected TMP_Text _secondaryTextLabel Field Value TMP_Text _selectedItemIndex protected int _selectedItemIndex Field Value int s_IndicatorWarning protected static readonly string s_IndicatorWarning Field Value string s_ItemsValidationWarning protected static readonly string s_ItemsValidationWarning Field Value string s_TextLabelWarning protected static readonly string s_TextLabelWarning Field Value string Properties ContentSpacing public int ContentSpacing { get; set; } Property Value int DefaultItemIndex public int DefaultItemIndex { get; set; } Property Value int IconScale public float IconScale { get; set; } Property Value float InvertAnimation public bool InvertAnimation { get; set; } Property Value bool InvokeOnInitialization public bool InvokeOnInitialization { get; set; } Property Value bool IsIconEnabled public bool IsIconEnabled { get; set; } Property Value bool IsIndicatorsEnabled public bool IsIndicatorsEnabled { get; set; } Property Value bool IsInitialized Whether the selector finished its initialization routine. public bool IsInitialized { get; } Property Value bool IsSavingEnabled Enables save/load behavior for the component. public bool IsSavingEnabled { get; set; } Property Value bool IsTextEnabled public bool IsTextEnabled { get; set; } Property Value bool LoopSelection public bool LoopSelection { get; set; } Property Value bool SaveKey PlayerPrefs key used to persist the state. public string SaveKey { get; set; } Property Value string SelectedItemIndex Current selected item index within _items. public int SelectedItemIndex { get; set; } Property Value int Methods Awake() protected virtual void Awake() HandleSelectedIndexChanged() protected virtual void HandleSelectedIndexChanged() HandleSelectedTextChanged() protected virtual void HandleSelectedTextChanged() Initialize() protected virtual void Initialize() InvokeInitialSelection() protected virtual void InvokeInitialSelection() IsDestroyed() Indicates whether this component has been destroyed. public virtual bool IsDestroyed() Returns bool True if the component instance is no longer valid. LoadState() Loads the current selection from persistent storage, or uses DefaultItemIndex if disabled. public virtual void LoadState() SaveState() Persists the current selected index if IsSavingEnabled is true. public virtual void SaveState() SelectItem(int) Selects an item by index and updates visuals in derived implementations. public abstract void SelectItem(int index) Parameters index int Zero-based index of the item to select. UpdateContentLayout() protected abstract void UpdateContentLayout() UpdateIndicators() protected abstract void UpdateIndicators() UpdateLabelAndIcon() protected abstract void UpdateLabelAndIcon() UpdateVisuals() protected virtual void UpdateVisuals() ValidateComponents() protected virtual bool ValidateComponents() Returns bool See Also Selector"
  },
  "api/Fallencake.UI.BasicData.html": {
    "href": "api/Fallencake.UI.BasicData.html",
    "title": "Class BasicData | ModularUIPack",
    "summary": "Class BasicData Namespace Fallencake.UI Assembly Fallencake.UI.dll Base class for data elements, which contain a name and an icon [Serializable] public class BasicData : IBasicData Inheritance object BasicData Implements IBasicData Constructors BasicData(string, Sprite) public BasicData(string name, Sprite icon = null) Parameters name string icon Sprite Properties Icon public Sprite Icon { get; } Property Value Sprite Name public string Name { get; } Property Value string"
  },
  "api/Fallencake.UI.Button.ClickEffectUpdateMode.html": {
    "href": "api/Fallencake.UI.Button.ClickEffectUpdateMode.html",
    "title": "Enum Button.ClickEffectUpdateMode | ModularUIPack",
    "summary": "Enum Button.ClickEffectUpdateMode Namespace Fallencake.UI Assembly Fallencake.UI.dll Update timing used by the click ripple effect. public enum Button.ClickEffectUpdateMode Fields Normal = 0 Uses UnityEngine.Time.deltaTime; the effect is affected by timeScale. UnscaledTime = 1 Uses UnityEngine.Time.unscaledDeltaTime; the effect ignores timeScale. Remarks Use UnscaledTime to make the effect independent of UnityEngine.Time.timeScale."
  },
  "api/Fallencake.UI.Button.html": {
    "href": "api/Fallencake.UI.Button.html",
    "title": "Class Button | ModularUIPack",
    "summary": "Class Button Namespace Fallencake.UI Assembly Fallencake.UI.dll Modular, multi-graphic UI button with single- and double-click support, group selection behavior, and optional click ripple effects. [AddComponentMenu(\"Modular UI/Button\", 30)] [ExecuteAlways] public class Button : MultipleGraphicsSelectable, IMultiSelectable, IMultipleClicksHandler, IGroupSelectable Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable MultipleGraphicsSelectable Button Implements IMultiSelectable IMultipleClicksHandler IGroupSelectable Inherited Members MultipleGraphicsSelectable._colorableGraphics MultipleGraphicsSelectable._swappableGraphics MultipleGraphicsSelectable._swappableCanvasGroupe MultipleGraphicsSelectable.ColorableGraphics MultipleGraphicsSelectable.SwappableGraphics MultipleGraphicsSelectable.SwappableCanvasGroupe MultipleGraphicsSelectable._transition MultipleGraphicsSelectable.SelectableTransition MultipleGraphicsSelectable._tweenCoroutine MultipleGraphicsSelectable.Start() MultipleGraphicsSelectable.OnDisable() MultipleGraphicsSelectable.OnDestroy() MultipleGraphicsSelectable.DoStateTransition(Selectable.SelectionState, bool) MultipleGraphicsSelectable.AddNewColorableGraphics() MultipleGraphicsSelectable.AddNewSwappableSprite() MultipleGraphicsSelectable.AddColorableGraphic(Graphic, SelectionColorBlock) MultipleGraphicsSelectable.AddColorableGraphic(Graphic, Color, Color, Color, Color, Color, float, float) MultipleGraphicsSelectable.AddSwappableSprite(Graphic, SelectionSpriteState) MultipleGraphicsSelectable.AddSwappableSprite(Image, Sprite, Sprite, Sprite, Sprite) MultipleGraphicsSelectable.SetFadingCanvasGroups(CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, float) Remarks Composes multiple icons and text labels for each visual state and coordinates their transitions via MultipleGraphicsSelectable. Supports double-click detection using DoubleClickInterval and EnableInstantFirstClickEvent, and can participate in a SelectableGroup to synchronize selection within a group. Optionally spawns a ripple effect on pointer down. Fields ClickEffectMaxScale Maximum uniform scale the ripple can reach before it is destroyed. [Range(0.5, 25)] public float ClickEffectMaxScale Field Value float ClickEffectParent The parent UnityEngine.Transform that will host the ripple effect GameObject. public Transform ClickEffectParent Field Value Transform ClickEffectSpeed Playback speed multiplier for the ripple animation. [Range(0.1, 5)] public float ClickEffectSpeed Field Value float ClickEffectStartColor Starting color (including alpha) of the ripple. public Color ClickEffectStartColor Field Value Color ClickEffectTargetColor Target color (including alpha) the ripple fades to. public Color ClickEffectTargetColor Field Value Color ClickEffectTexture The sprite used by the ripple effect image. public Sprite ClickEffectTexture Field Value Sprite DoubleClickInterval The interval in seconds between the first click and the second click to trigger the OnDoubleClick event. [Range(0.1, 1)] public float DoubleClickInterval Field Value float EnableClickEffect Enables or disables the visual ripple effect on pointer down. public bool EnableClickEffect Field Value bool Remarks When enabled, CreateRippleEffect(Vector2) instantiates a transient RippleEffect on ClickEffectParent configured by the fields below. EnableDoubleClick If true, the button will trigger the OnDoubleClick event when the user clicks the button twice within the DoubleClickInterval seconds. public bool EnableDoubleClick Field Value bool EnableInstantFirstClickEvent When true, the OnClick event will be triggered immediately when the button is clicked. If false, the event will be triggered after the DoubleClickInterval seconds. public bool EnableInstantFirstClickEvent Field Value bool IsCenteredPosition If true, spawns the ripple at the center of ClickEffectParent; otherwise uses the pointer position. public bool IsCenteredPosition Field Value bool IsRenderOnTop If true, forces ClickEffectParent to be rendered on top by moving it to the end of the sibling list. public bool IsRenderOnTop Field Value bool OnClickEffectUpdateMode Determines whether the ripple animation uses scaled or unscaled time. public ClickEffectUpdateMode OnClickEffectUpdateMode Field Value ClickEffectUpdateMode Properties IsIconEnabled Whether icon graphics are enabled and synchronized across button states. public bool IsIconEnabled { get; set; } Property Value bool Setting this property immediately toggles icon GameObjects using SetIconEnabled(bool). IsTextEnabled Whether text label graphics are enabled across button states. public bool IsTextEnabled { get; set; } Property Value bool Setting this property immediately toggles text label GameObjects using SetTextLabelEnabled(bool). OnClick UnityEvent that is triggered when the button is pressed once. Note: Triggered on MouseUp after MouseDown on the same object. public OnButtonClickedEvent OnClick { get; set; } Property Value OnButtonClickedEvent OnDoubleClick UnityEvent that is triggered when the button is pressed twice for a short period of time. public OnButtonClickedEvent OnDoubleClick { get; set; } Property Value OnButtonClickedEvent Methods CreateRippleEffect(Vector2) Spawns a ripple effect at the given screen-space position or at the center depending on IsCenteredPosition. public void CreateRippleEffect(Vector2 position) Parameters position Vector2 Screen position in pixels where the ripple should appear. ForceSelected(bool) Forces the button's selected flag and refreshes its visuals, regardless of group presence. public void ForceSelected(bool selected) Parameters selected bool Whether the button should appear selected. HandleDoubleClickCheck() Method that handles the check for double click on button to trigger OnDoubleClick event. You can call it from OnPointerClick method. public void HandleDoubleClickCheck() Remarks If EnableDoubleClick is disabled, immediately performs a normal click. Otherwise uses DoubleClickInterval to detect the second click and optionally fires the first click instantly depending on EnableInstantFirstClickEvent. SetGroup(SelectableGroup) Assigns the group that manages this button's selection state. public void SetGroup(SelectableGroup group) Parameters group SelectableGroup The SelectableGroup to associate with this button. SetIconEnabled(bool) Toggle the visibility of the icon. If _isIconControlsParent is true, the icon's parent will be toggled instead of the icon itself. public void SetIconEnabled(bool isActive) Parameters isActive bool If true, the icon will be visible. If false, the icon will be hidden. SetSelectedInGroup(bool) Sets this button's selected state within its group and updates visuals. public void SetSelectedInGroup(bool selected) Parameters selected bool If true, forces the button into the Selected state in its group. SetTextLabelEnabled(bool) Toggle the visibility of the text label. public void SetTextLabelEnabled(bool isActive) Parameters isActive bool If true, the text label will be visible. If false, the text label will be hidden. See Also MultipleGraphicsSelectable OnClick OnDoubleClick"
  },
  "api/Fallencake.UI.CameraSource.html": {
    "href": "api/Fallencake.UI.CameraSource.html",
    "title": "Enum CameraSource | ModularUIPack",
    "summary": "Enum CameraSource Namespace Fallencake.UI Assembly Fallencake.UI.dll Specifies the camera source to use for UI interaction/rendering in the context menu system. public enum CameraSource Fields Custom = 1 Use a custom-assigned camera reference. Main = 0 Use UnityEngine.Camera.main as the camera source."
  },
  "api/Fallencake.UI.CanvasGroupTweenExtensions.html": {
    "href": "api/Fallencake.UI.CanvasGroupTweenExtensions.html",
    "title": "Class CanvasGroupTweenExtensions | ModularUIPack",
    "summary": "Class CanvasGroupTweenExtensions Namespace Fallencake.UI Assembly Fallencake.UI.dll Helpers for animating UnityEngine.CanvasGroup visibility based on selectable SelectionState. public static class CanvasGroupTweenExtensions Inheritance object CanvasGroupTweenExtensions Methods SetState(SelectionState, SwappableCanvasGroup) Fades UnityEngine.CanvasGroups inside swappableCanvasGroupe to reflect the given state. public static IEnumerator SetState(SelectionState state, SwappableCanvasGroup swappableCanvasGroupe) Parameters state SelectionState Target selection state to visualize. swappableCanvasGroupe SwappableCanvasGroup Container with per-state UnityEngine.CanvasGroups and fade settings. Returns IEnumerator Coroutine enumerator that performs the tween over time. Remarks Activates only the relevant groups and interpolates alpha from current values to 1 for the active state and to 0 for the inactive states over FadeDuration."
  },
  "api/Fallencake.UI.ClickEffect.html": {
    "href": "api/Fallencake.UI.ClickEffect.html",
    "title": "Class ClickEffect | ModularUIPack",
    "summary": "Class ClickEffect Namespace Fallencake.UI Assembly Fallencake.UI.dll Base behaviour for transient click effects that animate an UnityEngine.UI.Image. public abstract class ClickEffect : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ClickEffect Derived RippleEffect Fields IsUnscaledTime If true, uses UnityEngine.Time.unscaledDeltaTime for timing; otherwise UnityEngine.Time.deltaTime. public bool IsUnscaledTime Field Value bool _image protected Image _image Field Value Image _parent protected Transform _parent Field Value Transform Methods Init() Finds and caches required components. Called from Start(). protected virtual void Init() PlayEffectTween() Implement animation step for the effect. protected abstract void PlayEffectTween() Start() protected virtual void Start() Update() protected virtual void Update()"
  },
  "api/Fallencake.UI.ClickEffectUpdateMode.html": {
    "href": "api/Fallencake.UI.ClickEffectUpdateMode.html",
    "title": "Enum ClickEffectUpdateMode | ModularUIPack",
    "summary": "Enum ClickEffectUpdateMode Namespace Fallencake.UI Assembly Fallencake.UI.dll Update timing used by the click ripple effect. public enum ClickEffectUpdateMode Fields Normal = 0 Uses UnityEngine.Time.deltaTime; the effect is affected by timeScale. UnscaledTime = 1 Uses UnityEngine.Time.unscaledDeltaTime; the effect ignores timeScale. Remarks Use UnscaledTime to make the effect independent of UnityEngine.Time.timeScale."
  },
  "api/Fallencake.UI.ColorAssetCollection.html": {
    "href": "api/Fallencake.UI.ColorAssetCollection.html",
    "title": "Class ColorAssetCollection | ModularUIPack",
    "summary": "Class ColorAssetCollection Namespace Fallencake.UI Assembly Fallencake.UI.dll Adapter around an IColorAssetProvider that exposes a collection-like API for selecting and animating colors across a set of UI assets. public class ColorAssetCollection : IColorAssetCollection<Color>, IAssetCollection<Color> Inheritance object ColorAssetCollection Implements IColorAssetCollection<Color> IAssetCollection<Color> Constructors ColorAssetCollection(IColorAssetProvider) public ColorAssetCollection(IColorAssetProvider colorAssetProvider) Parameters colorAssetProvider IColorAssetProvider Properties AssetsNumber Gets number of available color assets provided by ColorCollectionData. public int AssetsNumber { get; } Property Value int SelectedAssetIndex Gets or sets the selected asset index, forwarding to the provider. public int SelectedAssetIndex { get; set; } Property Value int Methods SelectAsset(int) Selects a color by index instantly. public void SelectAsset(int index) Parameters index int Index in the collection. SelectAsset(int, bool, float) Selects a color by index with optional animation. public void SelectAsset(int index, bool isInstantly = false, float duration = 1) Parameters index int Index in the collection. isInstantly bool If true, applies immediately. duration float Lerp duration in seconds when not instant. SetColor(int, bool, float) Selects a color by index and applies it to assets, instantly or over time. public void SetColor(int index, bool isInstantly = false, float duration = 1) Parameters index int Index in the collection. isInstantly bool If true, applies without animation. duration float Lerp duration if animated. SetColor(Color, bool, float) Applies a specific color directly or via interpolation to all colorable assets. public void SetColor(Color color, bool isInstantly = false, float duration = 1) Parameters color Color Target color. isInstantly bool If true, applies without animation. duration float Lerp duration if animated. SetSelectedColor() Applies the provider's currently selected color to all assets respecting tint settings. public void SetSelectedColor() Events OnAssetSelected Raised when a color asset is selected and applied. public event Action<Color> OnAssetSelected Event Type Action<Color>"
  },
  "api/Fallencake.UI.ColorCollectionData.html": {
    "href": "api/Fallencake.UI.ColorCollectionData.html",
    "title": "Class ColorCollectionData | ModularUIPack",
    "summary": "Class ColorCollectionData Namespace Fallencake.UI Assembly Fallencake.UI.dll ScriptableObject that stores a list of selectable colors for UI elements. [CreateAssetMenu(fileName = \"New ColorCollectionData\", menuName = \"Modular UI/Data Collections/ColorCollectionData\", order = 0)] public class ColorCollectionData : ScriptableObject Inheritance object Object ScriptableObject ColorCollectionData Properties Colors The ordered list of colors available in this collection. public List<Color> Colors { get; } Property Value List<Color>"
  },
  "api/Fallencake.UI.ColorableCollection.html": {
    "href": "api/Fallencake.UI.ColorableCollection.html",
    "title": "Class ColorableCollection | ModularUIPack",
    "summary": "Class ColorableCollection Namespace Fallencake.UI Assembly Fallencake.UI.dll Component for applying colors or gradients from collections to multiple UI assets with optional tinting. public class ColorableCollection : UIBehaviour, IColorSetter, IColorAssetProvider, IGradientAssetProvider Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour ColorableCollection Implements IColorSetter IColorAssetProvider IGradientAssetProvider Properties ColorAssetCollection Lazily initialized color asset collection according to ColorizingType. public IColorAssetCollection<Color> ColorAssetCollection { get; } Property Value IColorAssetCollection<Color> ColorAssetCollectionCount Gets the number of available colors in the collection (excluding index 0 for UI purposes). Returns 0 if no collection is available or collection has only one item. public int ColorAssetCollectionCount { get; } Property Value int ColorCollectionData Gets the color collection data containing available colors. public ColorCollectionData ColorCollectionData { get; } Property Value ColorCollectionData ColorableAssets Gets the list of UI Graphics that will be affected by color changes. public List<Graphic> ColorableAssets { get; } Property Value List<Graphic> ColorizingType Gets the current colorizing type that determines component behavior. public ColorizingType ColorizingType { get; } Property Value ColorizingType GradientAssetCollection Lazily initialized gradient asset collection according to ColorizingType. public IColorAssetCollection<Gradient> GradientAssetCollection { get; } Property Value IColorAssetCollection<Gradient> GradientAssetCollectionCount Number of available gradients excluding index 0 when using collection data. public int GradientAssetCollectionCount { get; } Property Value int GradientCollectionData Gets the gradient collection data containing available gradients. public GradientCollectionData GradientCollectionData { get; } Property Value GradientCollectionData Gradients Gets the list of UI Gradients that will be affected by gradient changes. public List<UIGradient> Gradients { get; } Property Value List<UIGradient> IsTintingEnabled Gets or sets whether tinting is enabled. public bool IsTintingEnabled { get; set; } Property Value bool SelectedColor Gets or sets the currently selected color. public Color SelectedColor { get; set; } Property Value Color SelectedColorIndex Gets or sets the currently selected color index in the collection. public int SelectedColorIndex { get; set; } Property Value int SelectedGradient Gets or sets the currently selected gradient. public Gradient SelectedGradient { get; set; } Property Value Gradient SelectedGradientIndex Gets or sets the currently selected gradient index in the collection. public int SelectedGradientIndex { get; set; } Property Value int TintColor Gets or sets the tint color used for mixing with the selected color. public Color TintColor { get; set; } Property Value Color TintCurve Gets or sets the animation curve used to control the tinting across colorable assets. public AnimationCurve TintCurve { get; set; } Property Value AnimationCurve TweenCoroutine Gets or sets the current animation coroutine for color transitions. public Coroutine TweenCoroutine { get; set; } Property Value Coroutine Methods Awake() Initializes the component and sets up asset collections. Called automatically by Unity. protected override void Awake() SelectColor(float) Dynamically selects a color from the collection based on a float index value. The float value is rounded to the nearest integer index (e.g., 1.2 → 1, 1.55 → 2). Values outside the collection bounds are clamped to valid range. public void SelectColor(float floatIndex) Parameters floatIndex float Float index value that will be rounded and clamped to collection indices SetColor(int) Sets the color by index and updates the selected index and color/gradient values. public void SetColor(int index) Parameters index int The index of the color/gradient to select SetColor(int, float) Sets the color by index with animation duration and updates the selected index and color/gradient values. public void SetColor(int index, float duration) Parameters index int The index of the color/gradient to select duration float Animation duration in seconds SetColor(Color) Sets a specific color directly and updates the selected color value. public void SetColor(Color color) Parameters color Color The color to set SetColor(Color, float) Sets a specific color with animation duration and updates the selected color value. public void SetColor(Color color, float duration) Parameters color Color The color to set duration float Animation duration in seconds SetColor(Gradient) Sets a specific gradient directly and updates the selected gradient value. public void SetColor(Gradient gradient) Parameters gradient Gradient The gradient to set SetColor(Gradient, float) Sets a specific gradient with animation duration and updates the selected gradient value. public void SetColor(Gradient gradient, float duration) Parameters gradient Gradient The gradient to set duration float Animation duration in seconds Start() protected override void Start()"
  },
  "api/Fallencake.UI.ColorableGraphic.html": {
    "href": "api/Fallencake.UI.ColorableGraphic.html",
    "title": "Class ColorableGraphic | ModularUIPack",
    "summary": "Class ColorableGraphic Namespace Fallencake.UI Assembly Fallencake.UI.dll Transition data for a UnityEngine.UI.Graphic using a SelectionColorBlock across selection states. [Serializable] public class ColorableGraphic : SelectableTransitionData<SelectionColorBlock, Color>, ITargetGraphic Inheritance object SelectableTransitionData<SelectionColorBlock, Color> ColorableGraphic Implements ITargetGraphic Inherited Members SelectableTransitionData<SelectionColorBlock, Color>.SelectableStates SelectableTransitionData<SelectionColorBlock, Color>.GetTargetData(SelectionState) Fields Colors Color block defining colors and timings per selection state. public SelectionColorBlock Colors Field Value SelectionColorBlock Properties Image Convenience function that converts the referenced Graphic to a Image, if possible. public Image Image { get; set; } Property Value Image SelectableStates public override ISelectableStates<Color> SelectableStates { get; } Property Value ISelectableStates<Color> TargetGraphic The target graphic affected by color transitions. public Graphic TargetGraphic { get; set; } Property Value Graphic Events OnSetProperty public event Action OnSetProperty Event Type Action"
  },
  "api/Fallencake.UI.ColorizingType.html": {
    "href": "api/Fallencake.UI.ColorizingType.html",
    "title": "Enum ColorizingType | ModularUIPack",
    "summary": "Enum ColorizingType Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ColorizingType Fields ColorCollection = 2 Picks colors from a ColorCollectionData. GradientCollection = 3 Picks gradients from a GradientCollectionData. SimpleColor = 0 Uses a single color value applied directly to assets. SimpleGradient = 1 Uses a single gradient applied directly to gradient targets."
  },
  "api/Fallencake.UI.ComplexAnimatorController.html": {
    "href": "api/Fallencake.UI.ComplexAnimatorController.html",
    "title": "Class ComplexAnimatorController | ModularUIPack",
    "summary": "Class ComplexAnimatorController Namespace Fallencake.UI Assembly Fallencake.UI.dll public class ComplexAnimatorController : PopupTweenAnimator, IPopupTweenAnimator Inheritance object Object Component Behaviour MonoBehaviour TweenAnimatorBase PopupTweenAnimator ComplexAnimatorController Implements IPopupTweenAnimator Inherited Members PopupTweenAnimator.IsHiddenOnStart PopupTweenAnimator.OnShowStart PopupTweenAnimator.OnShowUpdate PopupTweenAnimator.OnShowEnd PopupTweenAnimator.OnHideStart PopupTweenAnimator.OnHideUpdate PopupTweenAnimator.OnHideEnd PopupTweenAnimator.IsShowAnimating PopupTweenAnimator.IsHideAnimating PopupTweenAnimator.InvokeShowStart() PopupTweenAnimator.InvokeShowUpdate() PopupTweenAnimator.InvokeShowEnd() PopupTweenAnimator.InvokeHideStart() PopupTweenAnimator.InvokeHideUpdate() PopupTweenAnimator.InvokeHideEnd() PopupTweenAnimator.Start() PopupTweenAnimator.OnEnable() PopupTweenAnimator.InitializeTintParameters() TweenAnimatorBase.OnDisable() TweenAnimatorBase.PlayTween(TweenParameters, LoopType, bool, Action) TweenAnimatorBase.PlayPopupTween(PopupTweenParameters, bool, bool, bool, Action, Action) TweenAnimatorBase.OnTweenComplete(ITweenBasicParameters, bool, Action) TweenAnimatorBase.OnSimpleTweenComplete(ITweenBasicParameters, bool, Action) TweenAnimatorBase.OnSimpleTweenComplete(ITweenBasicParameters, bool, bool, Action) Methods Hide(Action) public override void Hide(Action onComplete = null) Parameters onComplete Action HideInstantly(Action) public override void HideInstantly(Action onComplete = null) Parameters onComplete Action Show(Action) public override void Show(Action onComplete) Parameters onComplete Action"
  },
  "api/Fallencake.UI.ContextItemType.html": {
    "href": "api/Fallencake.UI.ContextItemType.html",
    "title": "Enum ContextItemType | ModularUIPack",
    "summary": "Enum ContextItemType Namespace Fallencake.UI Assembly Fallencake.UI.dll Types of items that can appear inside a context menu. public enum ContextItemType Fields Button = 0 A standard Unity UI button (UnityEngine.UI.Button). ModularButton = 1 A modular button from this package (Button). Separator = 2 A non-interactive separator line used to group items."
  },
  "api/Fallencake.UI.ContextMenuArea.html": {
    "href": "api/Fallencake.UI.ContextMenuArea.html",
    "title": "Class ContextMenuArea | ModularUIPack",
    "summary": "Class ContextMenuArea Namespace Fallencake.UI Assembly Fallencake.UI.dll Click-capture area for a ModularContextMenu. Ensures a transparent UnityEngine.UI.Image is present to receive raycasts. [DisallowMultipleComponent] [RequireComponent(typeof(Image))] public class ContextMenuArea : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ContextMenuArea Methods Init(ModularContextMenu) Initializes the area with a target ModularContextMenu and configures the raycast receiver. public void Init(ModularContextMenu contextMenu) Parameters contextMenu ModularContextMenu Target context menu to be controlled by click events. OnPointerClick(PointerEventData) Handles pointer clicks to open/close the context menu. Left click closes when open; right click triggers UpdateContent(). public void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData Pointer event data including button and position."
  },
  "api/Fallencake.UI.ContextMenuBase.html": {
    "href": "api/Fallencake.UI.ContextMenuBase.html",
    "title": "Class ContextMenuBase | ModularUIPack",
    "summary": "Class ContextMenuBase Namespace Fallencake.UI Assembly Fallencake.UI.dll Base class for context menu implementations providing lifecycle, content management and popup animation orchestration via PopupTweenAnimator. public abstract class ContextMenuBase : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ContextMenuBase Derived ContextSubMenu ModularContextMenu Fields _content [SerializeField] protected Transform _content Field Value Transform _contentRectTransform protected RectTransform _contentRectTransform Field Value RectTransform _isActive protected bool _isActive Field Value bool _itemsContainer [SerializeField] protected Transform _itemsContainer Field Value Transform _popupAnimator [SerializeField] protected PopupTweenAnimator _popupAnimator Field Value PopupTweenAnimator Properties isActive Indicates whether the menu is currently shown. public bool isActive { get; } Property Value bool Methods ClearAllItems() Destroys all child items from the items container. protected virtual void ClearAllItems() Close() Triggers the popup animator to hide the context menu with animation and sets the menu as inactive. public virtual void Close() CloseInstantly() Instantly hides the menu without animation by calling the popup animator's HideInstantly(Action). protected virtual void CloseInstantly() CloseOnClick() Closes the menu on click. public virtual void CloseOnClick() GetMenuWidth() Gets current menu content width in pixels. public float GetMenuWidth() Returns float InitContent() Ensures content transform exists and caches UnityEngine.RectTransform. protected virtual void InitContent() InitItemsContainer() Ensures items container exists under content. protected virtual void InitItemsContainer() InitPopupAnimator() Ensures popup animator component is available. protected virtual void InitPopupAnimator() Open() Displays the context menu with an opening animation and sets its active state to true. public virtual void Open() SetProperty<T>(ref T, T, Action) Helper method used to set a given property if it has changed. protected virtual void SetProperty<T>(ref T currentValue, T newValue, Action onSet) Parameters currentValue T Reference to the current value. newValue T Proposed new value. onSet Action Callback invoked when the value actually changes. Type Parameters T Type of the property. UpdateItemsWithDelay(float) Rebuilds items after a small delay to ensure layout is updated. protected virtual IEnumerator UpdateItemsWithDelay(float time) Parameters time float Delay in seconds (unscaled). Returns IEnumerator"
  },
  "api/Fallencake.UI.ContextMenuItem.html": {
    "href": "api/Fallencake.UI.ContextMenuItem.html",
    "title": "Class ContextMenuItem | ModularUIPack",
    "summary": "Class ContextMenuItem Namespace Fallencake.UI Assembly Fallencake.UI.dll Data model for a single context menu item. [Serializable] public class ContextMenuItem Inheritance object ContextMenuItem Fields Icon Optional icon to render next to the item text. public Sprite Icon Field Value Sprite Name Display name shown in the menu. public string Name Field Value string OnClick Callback invoked when the item is clicked. public UnityEvent OnClick Field Value UnityEvent SubMenuItems Optional submenu items; when present renders a submenu entry. public List<ContextSubMenuItem> SubMenuItems Field Value List<ContextSubMenuItem> Type Item kind used for rendering and interaction. public ContextItemType Type Field Value ContextItemType"
  },
  "api/Fallencake.UI.ContextMenuItemView.html": {
    "href": "api/Fallencake.UI.ContextMenuItemView.html",
    "title": "Class ContextMenuItemView | ModularUIPack",
    "summary": "Class ContextMenuItemView Namespace Fallencake.UI Assembly Fallencake.UI.dll Unified view/controller for a context menu item. Provides type-safe access to text, icon, and click subscription for both Unity UI Button and modular Button variants. public class ContextMenuItemView : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ContextMenuItemView Properties Type Item type that determines which underlying button component to use. public ContextItemType Type { get; set; } Property Value ContextItemType Methods SetIcon(Sprite) Sets the visible icon sprite. public void SetIcon(Sprite sprite) Parameters sprite Sprite Sprite to display, may be null to hide. SetText(string) Sets the visible label text. public void SetText(string text) Parameters text string Text to display. SubscribeOnClick(UnityAction) Subscribes a click callback to the appropriate button component depending on Type. public void SubscribeOnClick(UnityAction action) Parameters action UnityAction Callback to invoke on click."
  },
  "api/Fallencake.UI.ContextSubMenu.html": {
    "href": "api/Fallencake.UI.ContextSubMenu.html",
    "title": "Class ContextSubMenu | ModularUIPack",
    "summary": "Class ContextSubMenu Namespace Fallencake.UI Assembly Fallencake.UI.dll Submenu implementation that opens on hover or click depending on SubMenuBehaviour. Inherits base layout/animation behavior from ContextMenuBase. public class ContextSubMenu : ContextMenuBase Inheritance object Object Component Behaviour MonoBehaviour ContextMenuBase ContextSubMenu Inherited Members ContextMenuBase._popupAnimator ContextMenuBase._itemsContainer ContextMenuBase._content ContextMenuBase._contentRectTransform ContextMenuBase._isActive ContextMenuBase.isActive ContextMenuBase.InitContent() ContextMenuBase.InitItemsContainer() ContextMenuBase.InitPopupAnimator() ContextMenuBase.ClearAllItems() ContextMenuBase.CloseInstantly() ContextMenuBase.UpdateItemsWithDelay(float) ContextMenuBase.GetMenuWidth() ContextMenuBase.SetProperty<T>(ref T, T, Action) Methods Close() Triggers the popup animator to hide the context menu with animation and sets the menu as inactive. public override void Close() CloseOnClick() Closes the menu on click. public override void CloseOnClick() Init(ModularContextMenu, List<ContextSubMenuItem>, SubMenuBehaviour, GameObject, GameObject, Button, bool) Initializes submenu with configuration provided by parent menu. public void Init(ModularContextMenu parentMenu, List<ContextSubMenuItem> menuItems, SubMenuBehaviour behaviour, GameObject itemButtonPrefab, GameObject separatorPrefab, Button modularButtonPrefab, bool isAutoPosition) Parameters parentMenu ModularContextMenu Parent ModularContextMenu. menuItems List<ContextSubMenuItem> Submenu items to render. behaviour SubMenuBehaviour How submenu opens (hover or click). itemButtonPrefab GameObject Prefab for regular button items. separatorPrefab GameObject Prefab for separator items. modularButtonPrefab Button Prefab for modular button items. isAutoPosition bool If true, submenu auto-positions near parent. OnPointerEnter(PointerEventData) Use this callback to detect pointer enter events public void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData OnPointerExit(PointerEventData) Use this callback to detect pointer exit events public void OnPointerExit(PointerEventData eventData) Parameters eventData PointerEventData Open() Displays the context menu with an opening animation and sets its active state to true. public override void Open() UpdateContent() Rebuilds submenu content and optionally repositions based on parent settings. public void UpdateContent()"
  },
  "api/Fallencake.UI.ContextSubMenuItem.html": {
    "href": "api/Fallencake.UI.ContextSubMenuItem.html",
    "title": "Class ContextSubMenuItem | ModularUIPack",
    "summary": "Class ContextSubMenuItem Namespace Fallencake.UI Assembly Fallencake.UI.dll Data model for a submenu child item. [Serializable] public class ContextSubMenuItem Inheritance object ContextSubMenuItem Fields Icon Optional icon for the submenu item. public Sprite Icon Field Value Sprite Name Display name shown in the submenu. public string Name Field Value string OnClick Callback invoked when the submenu item is clicked. public UnityEvent OnClick Field Value UnityEvent Type Item type (usually Button or Separator). public ContextItemType Type Field Value ContextItemType"
  },
  "api/Fallencake.UI.DataTemplate.html": {
    "href": "api/Fallencake.UI.DataTemplate.html",
    "title": "Class DataTemplate | ModularUIPack",
    "summary": "Class DataTemplate Namespace Fallencake.UI Assembly Fallencake.UI.dll ScriptableObject that stores a named collection of selectable data items for UI components (e.g., dropdowns, selectors). [CreateAssetMenu(fileName = \"New Data Template\", menuName = \"Modular UI/Templates/Data Template\", order = 1)] public class DataTemplate : ScriptableObject, IDataTemplate Inheritance object Object ScriptableObject DataTemplate Implements IDataTemplate Properties Items Lazily materialized list of items as IBasicData for read-only consumption. public List<IBasicData> Items { get; } Property Value List<IBasicData> TemplateName Logical name of the template collection. public string TemplateName { get; } Property Value string Methods AddItem(string, Sprite) Adds a new item to the template and invalidates cache. public void AddItem(string name, Sprite icon = null) Parameters name string Display name of the item. icon Sprite Optional icon. ClearItems() Removes all items from the template and invalidates cache. public void ClearItems()"
  },
  "api/Fallencake.UI.DraggableUI.html": {
    "href": "api/Fallencake.UI.DraggableUI.html",
    "title": "Class DraggableUI | ModularUIPack",
    "summary": "Class DraggableUI Namespace Fallencake.UI Assembly Fallencake.UI.dll Enables dragging of a target UnityEngine.RectTransform within a defined drag area. Provides events for drag lifecycle and optional bring-to-front behavior. [AddComponentMenu(\"Modular UI/Draggable UI\")] public class DraggableUI : UIBehaviour Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour DraggableUI Properties DragArea Bounds within which dragging is clamped. Defaults to top-most parent UnityEngine.RectTransform. public RectTransform DragArea { get; } Property Value RectTransform DragTransform The transform that will be moved by this component. Defaults to own UnityEngine.RectTransform. public RectTransform DragTransform { get; } Property Value RectTransform IsDragOnTop If true, moves the dragged transform to the top of the hierarchy during drag. public bool IsDragOnTop { get; set; } Property Value bool OnDragEnded Event called when drag ends public UnityEvent OnDragEnded { get; } Property Value UnityEvent OnDragStarted Event called when drag starts public UnityEvent OnDragStarted { get; } Property Value UnityEvent OnDragging Event called every frame during drag public UnityEvent OnDragging { get; } Property Value UnityEvent Methods OnBeginDrag(PointerEventData) Called by a BaseInputModule before a drag is started. public void OnBeginDrag(PointerEventData data) Parameters data PointerEventData OnDrag(PointerEventData) When dragging is occurring this will be called every time the cursor is moved. public void OnDrag(PointerEventData data) Parameters data PointerEventData OnEndDrag(PointerEventData) Called when drag operation ends. public void OnEndDrag(PointerEventData data) Parameters data PointerEventData Pointer event data. Start() public void Start()"
  },
  "api/Fallencake.UI.DropdownDirection.html": {
    "href": "api/Fallencake.UI.DropdownDirection.html",
    "title": "Enum DropdownDirection | ModularUIPack",
    "summary": "Enum DropdownDirection Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum DropdownDirection Fields Bottom = 0 Top = 1"
  },
  "api/Fallencake.UI.DropdownEvent.html": {
    "href": "api/Fallencake.UI.DropdownEvent.html",
    "title": "Class DropdownEvent | ModularUIPack",
    "summary": "Class DropdownEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll Event invoked with the selected item index when the dropdown value changes. [Serializable] public class DropdownEvent : UnityEvent<int> Inheritance object UnityEventBase UnityEvent<int> DropdownEvent"
  },
  "api/Fallencake.UI.DropdownItem.html": {
    "href": "api/Fallencake.UI.DropdownItem.html",
    "title": "Class DropdownItem | ModularUIPack",
    "summary": "Class DropdownItem Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class DropdownItem Inheritance object DropdownItem Fields Icon Optional icon for the item. public Sprite Icon Field Value Sprite Index Runtime index assigned by the dropdown when building items. [HideInInspector] public int Index Field Value int Name Display name of the item. public string Name Field Value string OnItemSelected Invoked when this item is selected. public UnityEvent OnItemSelected Field Value UnityEvent"
  },
  "api/Fallencake.UI.DropdownMenu.AnimationType.html": {
    "href": "api/Fallencake.UI.DropdownMenu.AnimationType.html",
    "title": "Enum DropdownMenu.AnimationType | ModularUIPack",
    "summary": "Enum DropdownMenu.AnimationType Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum DropdownMenu.AnimationType Fields Tween = 0 UnityAnimator = 1"
  },
  "api/Fallencake.UI.DropdownMenu.DropdownEvent.html": {
    "href": "api/Fallencake.UI.DropdownMenu.DropdownEvent.html",
    "title": "Class DropdownMenu.DropdownEvent | ModularUIPack",
    "summary": "Class DropdownMenu.DropdownEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class DropdownMenu.DropdownEvent : UnityEvent<int> Inheritance object UnityEventBase UnityEvent<int> DropdownMenu.DropdownEvent"
  },
  "api/Fallencake.UI.DropdownMenu.DropdownItem.html": {
    "href": "api/Fallencake.UI.DropdownMenu.DropdownItem.html",
    "title": "Class DropdownMenu.DropdownItem | ModularUIPack",
    "summary": "Class DropdownMenu.DropdownItem Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class DropdownMenu.DropdownItem Inheritance object DropdownMenu.DropdownItem Fields Icon public Sprite Icon Field Value Sprite Index [HideInInspector] public int Index Field Value int Name public string Name Field Value string OnItemSelected public UnityEvent OnItemSelected Field Value UnityEvent"
  },
  "api/Fallencake.UI.DropdownMenu.ItemTextChangedEvent.html": {
    "href": "api/Fallencake.UI.DropdownMenu.ItemTextChangedEvent.html",
    "title": "Class DropdownMenu.ItemTextChangedEvent | ModularUIPack",
    "summary": "Class DropdownMenu.ItemTextChangedEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class DropdownMenu.ItemTextChangedEvent : UnityEvent<TMP_Text> Inheritance object UnityEventBase UnityEvent<TMP_Text> DropdownMenu.ItemTextChangedEvent"
  },
  "api/Fallencake.UI.DropdownMenu.html": {
    "href": "api/Fallencake.UI.DropdownMenu.html",
    "title": "Class DropdownMenu | ModularUIPack",
    "summary": "Class DropdownMenu Namespace Fallencake.UI Assembly Fallencake.UI.dll Configurable dropdown UI component supporting tween or Animator-based open/close, item selection, sounds, and optional state saving. public class DropdownMenu : UIBehaviour, IDropdownMenu, IDropdownAudioProvider, IAudioProvider, ISaveable Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour DropdownMenu Implements IDropdownMenu IDropdownAudioProvider IAudioProvider ISaveable Fields OnItemTextChanged public DropdownMenu.ItemTextChangedEvent OnItemTextChanged Field Value DropdownMenu.ItemTextChangedEvent OnValueChanged public DropdownEvent OnValueChanged Field Value DropdownEvent animationType public AnimationType animationType Field Value AnimationType index [HideInInspector] public int index Field Value int isOn [HideInInspector] public bool isOn Field Value bool itemSpacing [Range(0, 100)] public float itemSpacing Field Value float items [SerializeField] public List<DropdownItem> items Field Value List<DropdownItem> setItemImage [HideInInspector] public Image setItemImage Field Value Image setItemText [HideInInspector] public TextMeshProUGUI setItemText Field Value TextMeshProUGUI siblingIndex [HideInInspector] public int siblingIndex Field Value int Properties AnimationCurve Easing curve for tween-based animation. public AnimationCurve AnimationCurve { get; } Property Value AnimationCurve AnimationRunner \"The MonoBehaviour component used to run coroutines or for attaching the Animator component.\" public MonoBehaviour AnimationRunner { get; } Property Value MonoBehaviour Animator Animator used when UnityAnimator is selected. public Animator Animator { get; } Property Value Animator AudioSource AudioSource used for playing dropdown sounds. public AudioSource AudioSource { get; set; } Property Value AudioSource CloseSound Sound data for closing the dropdown. public AudioData CloseSound { get; } Property Value AudioData ClosingTime Close animation duration (seconds, unscaled). public float ClosingTime { get; } Property Value float Component Owning component used by handlers for context and coroutines. public MonoBehaviour Component { get; } Property Value MonoBehaviour ContentOffset Offset in pixels between header and list panel. public float ContentOffset { get; } Property Value float CurrentAnimationType Gets/sets current animation type and reinitializes handler when changed. public AnimationType CurrentAnimationType { get; set; } Property Value AnimationType DeselectSound Sound played on deselect. public AudioData DeselectSound { get; } Property Value AudioData EnableSounds Enables UI sounds via IDropdownAudioHandler. public bool EnableSounds { get; set; } Property Value bool IsHighPriority If true, ensures the list renders on top using a dedicated Canvas. public bool IsHighPriority { get; set; } Property Value bool IsIconEnabled public bool IsIconEnabled { get; set; } Property Value bool IsInteractable Controls user interaction availability. public bool IsInteractable { get; set; } Property Value bool IsItemSelectedAtUpdate When true, invokes selected item events during UpdateDropdown(). public bool IsItemSelectedAtUpdate { get; } Property Value bool IsSavingEnabled Enables save/load behavior for the component. public bool IsSavingEnabled { get; set; } Property Value bool IsTriggerEnabled If true, clicking outside closes the dropdown via an invisible overlay trigger. public bool IsTriggerEnabled { get; set; } Property Value bool ItemListCanvasGroup CanvasGroup used for list open/close transitions. public CanvasGroup ItemListCanvasGroup { get; } Property Value CanvasGroup ItemListRect RectTransform of the list content panel. public RectTransform ItemListRect { get; } Property Value RectTransform ItemPadding Get or set the padding of items in the container. Value format: (left, right, top, bottom) Default value: (8, 25, 8, 8) public RectOffset ItemPadding { get; set; } Property Value RectOffset ItemPrefab Prefab used to instantiate list items. public GameObject ItemPrefab { get; set; } Property Value GameObject OpenSound Sound data for opening the dropdown. public AudioData OpenSound { get; } Property Value AudioData OpeningTime Open animation duration (seconds, unscaled). public float OpeningTime { get; } Property Value float OutOnPointerExit If true, pointer exit will close the dropdown. public bool OutOnPointerExit { get; set; } Property Value bool PanelDirection Direction from the header where the list opens. public DropdownDirection PanelDirection { get; } Property Value DropdownDirection PanelHeight Target list panel height while opened. public float PanelHeight { get; } Property Value float PressSound Sound played on press/submit. public AudioData PressSound { get; } Property Value AudioData SaveKey PlayerPrefs key used to persist the state. public string SaveKey { get; set; } Property Value string SelectItemSound Sound data for selecting an item. public AudioData SelectItemSound { get; } Property Value AudioData SelectSound Sound played on select/hover. public AudioData SelectSound { get; } Property Value AudioData Selectable Underlying UnityEngine.UI.Selectable for navigation/select. public Selectable Selectable { get; } Property Value Selectable SelectedImage Image that displays selected item icon. public Image SelectedImage { get; } Property Value Image SelectedItemIndex Index of the currently selected item; setter selects item and updates view. public int SelectedItemIndex { get; set; } Property Value int SelectedText Label that displays selected item text. public TextMeshProUGUI SelectedText { get; } Property Value TextMeshProUGUI Volume Master volume multiplier for sounds (0..1). public float Volume { get; set; } Property Value float Methods Animate() Toggles the open/close state and triggers the active animation handler and sounds. public void Animate() Awake() protected override void Awake() CreateNewItem(string) public void CreateNewItem(string title) Parameters title string CreateNewItem(string, bool) public void CreateNewItem(string title, bool notify) Parameters title string notify bool CreateNewItem(string, Sprite, bool) public void CreateNewItem(string title, Sprite icon, bool notify) Parameters title string icon Sprite notify bool InitTrigger() Creates and configures click-outside trigger overlay in play mode when enabled. public void InitTrigger() InitializeAudio() public void InitializeAudio() LoadState() Loads selected item index from UnityEngine.PlayerPrefs. public void LoadState() OnDeselect(BaseEventData) Called by the EventSystem when a new object is being selected. public void OnDeselect(BaseEventData eventData) Parameters eventData BaseEventData OnDestroy() protected override void OnDestroy() OnEnable() protected override void OnEnable() OnPointerClick(PointerEventData) Use this callback to detect clicks. public void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData OnPointerEnter(PointerEventData) Use this callback to detect pointer enter events public void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData OnPointerExit(PointerEventData) Use this callback to detect pointer exit events public void OnPointerExit(PointerEventData eventData) Parameters eventData PointerEventData OnSelect(BaseEventData) public void OnSelect(BaseEventData eventData) Parameters eventData BaseEventData OnSubmit(BaseEventData) public void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData PlayCloseSound() Plays dropdown close sound. public void PlayCloseSound() PlayDeselectSound() Plays UI deselect sound via audio handler. public void PlayDeselectSound() PlayOpenSound() Plays dropdown open sound. public void PlayOpenSound() PlayPressSound() Plays UI press sound via audio handler. public void PlayPressSound() PlaySelectItemSound() Plays item selected sound. public void PlaySelectItemSound() PlaySelectSound() Plays UI select sound via audio handler. public void PlaySelectSound() RemoveItem(string) public void RemoveItem(string itemTitle) Parameters itemTitle string RemoveItem(string, bool) public void RemoveItem(string itemTitle, bool notify) Parameters itemTitle string notify bool SaveState() Saves selected item index to UnityEngine.PlayerPrefs. public void SaveState() SelectItem(int, bool, bool, bool) Selects item by index, saves state if enabled and updates UI optionally. public void SelectItem(int itemIndex, bool updateView = true, bool playSound = true, bool selectDropdown = true) Parameters itemIndex int Item index to select. updateView bool Whether to update label/icon. playSound bool Whether to play selection sound. selectDropdown bool Whether to programmatically select the dropdown. SetIconEnabled(bool) Sets the visibility of the selected item's icon. public void SetIconEnabled(bool value) Parameters value bool Whether to enable or disable the icon gameobject. UpdateAnimator() Reinitializes the tween animator handler when using tween mode. public void UpdateAnimator() UpdateDropdown() Sets up the dropdown menu by creating items and updating the UI. public void UpdateDropdown() UpdateItemLayout() public void UpdateItemLayout() UpdateSelectable() Updates the interactable state of the Selectable component public void UpdateSelectable()"
  },
  "api/Fallencake.UI.DropdownTweenAnimatorHandler.html": {
    "href": "api/Fallencake.UI.DropdownTweenAnimatorHandler.html",
    "title": "Class DropdownTweenAnimatorHandler | ModularUIPack",
    "summary": "Class DropdownTweenAnimatorHandler Namespace Fallencake.UI Assembly Fallencake.UI.dll Tween-based animation handler for DropdownMenu open/close using size/alpha interpolation. public class DropdownTweenAnimatorHandler : IDropdownAnimationHandler Inheritance object DropdownTweenAnimatorHandler Implements IDropdownAnimationHandler Methods Animate(bool) public void Animate(bool isOpening) Parameters isOpening bool Cleanup() public void Cleanup() Initialize(IDropdownMenu) public void Initialize(IDropdownMenu dropdown) Parameters dropdown IDropdownMenu"
  },
  "api/Fallencake.UI.DropdownUnityAnimatorHandler.html": {
    "href": "api/Fallencake.UI.DropdownUnityAnimatorHandler.html",
    "title": "Class DropdownUnityAnimatorHandler | ModularUIPack",
    "summary": "Class DropdownUnityAnimatorHandler Namespace Fallencake.UI Assembly Fallencake.UI.dll Animator-based dropdown animation handler. Plays named states on an UnityEngine.Animator. public class DropdownUnityAnimatorHandler : IDropdownAnimationHandler Inheritance object DropdownUnityAnimatorHandler Implements IDropdownAnimationHandler Methods Animate(bool) public void Animate(bool isOpening) Parameters isOpening bool Cleanup() public void Cleanup() Initialize(IDropdownMenu) public void Initialize(IDropdownMenu dropdown) Parameters dropdown IDropdownMenu"
  },
  "api/Fallencake.UI.ElementStartPosition.html": {
    "href": "api/Fallencake.UI.ElementStartPosition.html",
    "title": "Enum ElementStartPosition | ModularUIPack",
    "summary": "Enum ElementStartPosition Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ElementStartPosition Fields Evenly = 1 Manually = 0 Offset = 2"
  },
  "api/Fallencake.UI.EllipticalSpinnerHandler.html": {
    "href": "api/Fallencake.UI.EllipticalSpinnerHandler.html",
    "title": "Class EllipticalSpinnerHandler | ModularUIPack",
    "summary": "Class EllipticalSpinnerHandler Namespace Fallencake.UI Assembly Fallencake.UI.dll Elliptical geometry spinner handler that positions elements along an ellipse and moves/rotates them tangentially over time. public class EllipticalSpinnerHandler : SpinnerHandler, ISpinnerHandler Inheritance object SpinnerHandler EllipticalSpinnerHandler Implements ISpinnerHandler Inherited Members SpinnerHandler._spinner SpinnerHandler._spinners SpinnerHandler._isInitialized SpinnerHandler._elementsAmount SpinnerHandler._size SpinnerHandler.rotationTime SpinnerHandler.rotationDelay SpinnerHandler.size SpinnerHandler.isClockwise SpinnerHandler.isLookForward SpinnerHandler.isSimpleDelay SpinnerHandler.isContinuousSpin SpinnerHandler.startAngle SpinnerHandler.elementsAmount SpinnerHandler.facingDirection SpinnerHandler.elementStartPosition SpinnerHandler.movementCurve SpinnerHandler._allNotSpinning SpinnerHandler.GetSpinner(int) SpinnerHandler.InitSpinners() SpinnerHandler.Spin() SpinnerHandler.Stop() SpinnerHandler.StopImmediate() SpinnerHandler.StartSynchronizedContinuousSpin(float) SpinnerHandler.HasFirstElementCompletedRotation() SpinnerHandler.GetFirstCompletedElementSpeed() Constructors EllipticalSpinnerHandler(ModularSpinner) public EllipticalSpinnerHandler(ModularSpinner spinner) Parameters spinner ModularSpinner Methods CalculateAreaSize() Calculates layout size used for positioning. public override void CalculateAreaSize() Initialize() Initializes internal state and places elements. public override void Initialize() MoveTangently(int) Moves an element along the tangent of the path (per frame update). public override void MoveTangently(int index) Parameters index int SetElementsStartPosition() Places elements to their start positions. public override void SetElementsStartPosition()"
  },
  "api/Fallencake.UI.Examples.DraggableUIExample.html": {
    "href": "api/Fallencake.UI.Examples.DraggableUIExample.html",
    "title": "Class DraggableUIExample | ModularUIPack",
    "summary": "Class DraggableUIExample Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll Example demonstrating how to use the DraggableUI events public class DraggableUIExample : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour DraggableUIExample"
  },
  "api/Fallencake.UI.Examples.ProgressBarExample.html": {
    "href": "api/Fallencake.UI.Examples.ProgressBarExample.html",
    "title": "Class ProgressBarExample | ModularUIPack",
    "summary": "Class ProgressBarExample Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll Example script showing how to use the ProgressBar component. Attach this to a GameObject with a ProgressBar component to see it in action. AUTO TEST MODES: Positive Value Modifier: Fills progress bar from current to maximum, then resets to minimum and repeats Negative Value Modifier: Drains progress bar from current to minimum, then sets to maximum and repeats The direction (fill/drain) is automatically determined by the sign of the Value Modifier. When Loop Test is enabled with negative modifier, it creates a \"fill → drain → fill → drain\" cycle. public class ProgressBarExample : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ProgressBarExample Methods AddModifier() public void AddModifier() AutoTest() public void AutoTest() CompleteProgress() public void CompleteProgress() ResetProgress() public void ResetProgress() SetRandomValue() public void SetRandomValue() StartAutoTest() public void StartAutoTest() StopAutoTest() public void StopAutoTest() SubtractModifier() public void SubtractModifier()"
  },
  "api/Fallencake.UI.Examples.ProgressBarItem.html": {
    "href": "api/Fallencake.UI.Examples.ProgressBarItem.html",
    "title": "Class ProgressBarItem | ModularUIPack",
    "summary": "Class ProgressBarItem Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll Represents a progress bar item with its own value modifier. In stepwise mode (autoTestStepDelay > 0), valueModifier is used with AddValue() for each step. Positive valueModifier = increasing progress, Negative valueModifier = decreasing progress. [Serializable] public class ProgressBarItem Inheritance object ProgressBarItem Constructors ProgressBarItem() public ProgressBarItem() ProgressBarItem(ProgressBar, float) public ProgressBarItem(ProgressBar bar, float modifier = 10) Parameters bar ProgressBar modifier float Fields isEnabled [SerializeField] public bool isEnabled Field Value bool progressBar [SerializeField] public ProgressBar progressBar Field Value ProgressBar valueModifier Amount added to progress bar each step in stepwise mode. Positive values increase progress, negative values decrease progress. In smooth mode, only the sign determines direction. [SerializeField] public float valueModifier Field Value float Properties IsCompleted public bool IsCompleted { get; } Property Value bool IsDecreasing public bool IsDecreasing { get; } Property Value bool IsValid public bool IsValid { get; } Property Value bool Methods PrepareAnimation() public void PrepareAnimation() StartAnimation(MonoBehaviour, float, bool, float) public void StartAnimation(MonoBehaviour owner, float duration, bool useStepDelay = false, float stepDelay = 0) Parameters owner MonoBehaviour duration float useStepDelay bool stepDelay float StopAnimation() public void StopAnimation()"
  },
  "api/Fallencake.UI.Examples.ProgressBarListExample.html": {
    "href": "api/Fallencake.UI.Examples.ProgressBarListExample.html",
    "title": "Class ProgressBarListExample | ModularUIPack",
    "summary": "Class ProgressBarListExample Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll Example script for animating multiple progress bars with domino effect. Each progress bar can have its own value modifier and timing based on animation curve. FEATURES: List of progress bars with individual value modifiers Domino effect using AnimationCurve for timing Total animation duration control or individual duration based on valueModifier Support for both increasing and decreasing progress bars Individual enable/disable for each progress bar Stepwise or smooth progress updating Two completion modes: wait for all or individual reset ANIMATION MODES: Smooth (autoTestStepDelay = 0): Continuous progress filling Stepwise (autoTestStepDelay > 0): Progress updates in discrete steps using AddValue(valueModifier) every autoTestStepDelay seconds COMPLETION MODES: Wait For All (waitForAllFinished = true): All bars complete in testDuration, then all reset together Individual Reset (waitForAllFinished = false): Each bar completes in testDuration, resets separately with domino delay between cycles public class ProgressBarListExample : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ProgressBarListExample Methods AddProgressBarItem(ProgressBar, float) Adds a new progress bar item to the list public void AddProgressBarItem(ProgressBar progressBar, float valueModifier = 10) Parameters progressBar ProgressBar valueModifier float GetDebugInfo() Gets debug information about the current state public string GetDebugInfo() Returns string GetValidItems() public List<ProgressBarItem> GetValidItems() Returns List<ProgressBarItem> GetValidItemsCount() Gets the valid (enabled and not null) progress bar items count public int GetValidItemsCount() Returns int PrintDebugInfo() Prints debug information to console [ContextMenu(\"Print Debug Info\")] public void PrintDebugInfo() RemoveProgressBarItem(ProgressBar) Removes a progress bar item from the list public void RemoveProgressBarItem(ProgressBar progressBar) Parameters progressBar ProgressBar ResetProgressBars() Resets all progress bars to their starting values with animation public void ResetProgressBars() ResetProgressBarsImmediate() Resets all progress bars to their starting values without animation (for immediate reset) public void ResetProgressBarsImmediate() StartAnimation() Starts the domino animation for all progress bars public void StartAnimation() StopAnimation() Stops all animations public void StopAnimation()"
  },
  "api/Fallencake.UI.Examples.SimpleTimerExample.TimerState.html": {
    "href": "api/Fallencake.UI.Examples.SimpleTimerExample.TimerState.html",
    "title": "Enum SimpleTimerExample.TimerState | ModularUIPack",
    "summary": "Enum SimpleTimerExample.TimerState Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll public enum SimpleTimerExample.TimerState Fields Completed = 3 InvokingEvents = 2 Running = 1 Stopped = 0"
  },
  "api/Fallencake.UI.Examples.SimpleTimerExample.html": {
    "href": "api/Fallencake.UI.Examples.SimpleTimerExample.html",
    "title": "Class SimpleTimerExample | ModularUIPack",
    "summary": "Class SimpleTimerExample Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll Universal timer component that triggers a list of events sequentially after a specified duration. Supports both simultaneous and sequential event invocation with customizable timing curves. public class SimpleTimerExample : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SimpleTimerExample Properties CurrentState public SimpleTimerExample.TimerState CurrentState { get; } Property Value SimpleTimerExample.TimerState ElapsedTime public float ElapsedTime { get; } Property Value float EventInvokedStates public IReadOnlyList<bool> EventInvokedStates { get; } Property Value IReadOnlyList<bool> EventsCount public int EventsCount { get; } Property Value int InvokeSpan public float InvokeSpan { get; set; } Property Value float IsRunning public bool IsRunning { get; } Property Value bool NormalizedProgress public float NormalizedProgress { get; } Property Value float RemainingTime public float RemainingTime { get; } Property Value float TimerDuration public float TimerDuration { get; set; } Property Value float Methods AddEvent(UnityEvent) Adds a new event to the list public void AddEvent(UnityEvent newEvent) Parameters newEvent UnityEvent CompleteTimer() Instantly completes the timer and triggers all events public void CompleteTimer() GetDebugInfo() Gets debug information about the current state public string GetDebugInfo() Returns string InvokeAllEvents() Manually invokes all events immediately public void InvokeAllEvents() InvokeEvent(int) Manually invokes a specific event by index public void InvokeEvent(int eventIndex) Parameters eventIndex int PauseTimer() Pauses the timer (can be resumed with ResumeTimer) public void PauseTimer() PrintDebugInfo() Prints debug information to console [ContextMenu(\"Print Debug Info\")] public void PrintDebugInfo() RemoveEvent(int) Removes an event at the specified index public void RemoveEvent(int index) Parameters index int ResetTimer() Resets timer progress to zero public void ResetTimer() ResumeTimer() Resumes the timer from current elapsed time public void ResumeTimer() StartTimer() Starts the timer countdown public void StartTimer() StopTimer() Stops the timer and resets progress public void StopTimer()"
  },
  "api/Fallencake.UI.Examples.SimpleValueScrollerExample.AnimationType.html": {
    "href": "api/Fallencake.UI.Examples.SimpleValueScrollerExample.AnimationType.html",
    "title": "Enum SimpleValueScrollerExample.AnimationType | ModularUIPack",
    "summary": "Enum SimpleValueScrollerExample.AnimationType Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll public enum SimpleValueScrollerExample.AnimationType Fields Smooth = 0 Stepwise = 1"
  },
  "api/Fallencake.UI.Examples.SimpleValueScrollerExample.LoopDirection.html": {
    "href": "api/Fallencake.UI.Examples.SimpleValueScrollerExample.LoopDirection.html",
    "title": "Enum SimpleValueScrollerExample.LoopDirection | ModularUIPack",
    "summary": "Enum SimpleValueScrollerExample.LoopDirection Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll public enum SimpleValueScrollerExample.LoopDirection Fields Decreasing = 1 Increasing = 0 PingPong = 2"
  },
  "api/Fallencake.UI.Examples.SimpleValueScrollerExample.ValueType.html": {
    "href": "api/Fallencake.UI.Examples.SimpleValueScrollerExample.ValueType.html",
    "title": "Enum SimpleValueScrollerExample.ValueType | ModularUIPack",
    "summary": "Enum SimpleValueScrollerExample.ValueType Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll public enum SimpleValueScrollerExample.ValueType Fields Float = 0 Int = 1"
  },
  "api/Fallencake.UI.Examples.SimpleValueScrollerExample.html": {
    "href": "api/Fallencake.UI.Examples.SimpleValueScrollerExample.html",
    "title": "Class SimpleValueScrollerExample | ModularUIPack",
    "summary": "Class SimpleValueScrollerExample Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll Universal component for demonstrating smooth or stepwise changes of numeric values. Can work with any components via the UnityEvent system. Supports various animation types, curves, and speed settings. public class SimpleValueScrollerExample : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SimpleValueScrollerExample Properties CurrentValue public float CurrentValue { get; set; } Property Value float CurrentValueType public SimpleValueScrollerExample.ValueType CurrentValueType { get; } Property Value SimpleValueScrollerExample.ValueType IsAnimating public bool IsAnimating { get; } Property Value bool MaxValue public float MaxValue { get; set; } Property Value float MinValue public float MinValue { get; set; } Property Value float Methods AddValue(float) Adds a value to the current one public void AddValue(float valueToAdd) Parameters valueToAdd float AnimateToMaximum() Animates to the maximum public void AnimateToMaximum() AnimateToMinimum() Animates to the minimum public void AnimateToMinimum() AnimateToValue(float, float?) Animates to the specified value public void AnimateToValue(float targetValue, float? customDuration = null) Parameters targetValue float customDuration float? SetRandomValue() Sets a random value in the range public void SetRandomValue() SetToMaximum() Sets the value to the maximum public void SetToMaximum() SetToMinimum() Sets the value to the minimum public void SetToMinimum() SetValue(float, bool) Sets a new value with the possibility of animation public void SetValue(float value, bool sendEvent = true) Parameters value float sendEvent bool StartAutoTest() Starts the automatic test public void StartAutoTest() StopAnimation() Stops the current animation public void StopAnimation() StopAutoTest() Stops the automatic test public void StopAutoTest() SubtractValue(float) Subtracts a value from the current one public void SubtractValue(float valueToSubtract) Parameters valueToSubtract float"
  },
  "api/Fallencake.UI.Examples.SimpleValueScrollerListExample.LoopDirection.html": {
    "href": "api/Fallencake.UI.Examples.SimpleValueScrollerListExample.LoopDirection.html",
    "title": "Enum SimpleValueScrollerListExample.LoopDirection | ModularUIPack",
    "summary": "Enum SimpleValueScrollerListExample.LoopDirection Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll public enum SimpleValueScrollerListExample.LoopDirection Fields Decreasing = 1 Increasing = 0 PingPong = 2"
  },
  "api/Fallencake.UI.Examples.SimpleValueScrollerListExample.html": {
    "href": "api/Fallencake.UI.Examples.SimpleValueScrollerListExample.html",
    "title": "Class SimpleValueScrollerListExample | ModularUIPack",
    "summary": "Class SimpleValueScrollerListExample Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll Universal component for animating multiple numeric values with domino effect. Can work with any components that accept float or int values through UnityEvent system. Supports smooth and stepwise animations, individual timing, and various completion modes. FEATURES: List of value items with individual settings and events Domino effect using AnimationCurve for timing Support for both float and int value types Individual enable/disable for each value item Stepwise or smooth value updating Two completion modes: wait for all or individual reset Flexible event system for connecting to any numeric component ANIMATION MODES: Smooth: Continuous value interpolation using curves Stepwise: Value updates in discrete steps using valueModifier every stepDelay seconds COMPLETION MODES: Wait For All: All values complete in testDuration, then all reset together Individual Reset: Each value completes individually, resets separately with domino delay public class SimpleValueScrollerListExample : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SimpleValueScrollerListExample Properties IsPlaying public bool IsPlaying { get; } Property Value bool TotalItems public int TotalItems { get; } Property Value int ValidItemsCount public int ValidItemsCount { get; } Property Value int ValueItems public List<ValueScrollerItem> ValueItems { get; } Property Value List<ValueScrollerItem> Methods AddValueItem(string, float, float, float, float) Adds a new value item to the list public void AddValueItem(string name, float minValue, float maxValue, float currentValue = 0, float targetValue = 100) Parameters name string minValue float maxValue float currentValue float targetValue float AnimateItem(int) Animates a specific item to its target value public void AnimateItem(int index) Parameters index int GetDebugInfo() Gets debug information about the current state public string GetDebugInfo() Returns string GetValidItems() Gets all valid (enabled and not null) value items public List<ValueScrollerItem> GetValidItems() Returns List<ValueScrollerItem> GetValueItem(int) Gets a value item by index public ValueScrollerItem GetValueItem(int index) Parameters index int Returns ValueScrollerItem PrintDebugInfo() Prints debug information to console [ContextMenu(\"Print Debug Info\")] public void PrintDebugInfo() RemoveValueItem(int) Removes a value item from the list by index public void RemoveValueItem(int index) Parameters index int ResetValues() Resets all value items to their starting values based on loop direction public void ResetValues() SetAllToTargets() Sets all values to their targets immediately public void SetAllToTargets() SetItemValue(int, float) Sets the value of a specific item by index public void SetItemValue(int index, float value) Parameters index int value float StartAnimation() Starts the domino animation for all value items public void StartAnimation() StopAnimation() Stops all animations public void StopAnimation()"
  },
  "api/Fallencake.UI.Examples.TintAnimationExample.html": {
    "href": "api/Fallencake.UI.Examples.TintAnimationExample.html",
    "title": "Class TintAnimationExample | ModularUIPack",
    "summary": "Class TintAnimationExample Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll Example demonstrating how to use the new TweenType.Tint animation public class TintAnimationExample : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TintAnimationExample Methods AnimateColorDirect() Animate the image color using TweenExtensions directly public void AnimateColorDirect() CreateTintPopupParameters() Create PopupTweenParameters for show/hide animations public PopupTweenParameters CreateTintPopupParameters() Returns PopupTweenParameters CreateTintTweenParameters() Create TweenParameters for use with TweenAnimatorBase-derived classes public TweenParameters CreateTintTweenParameters() Returns TweenParameters ResetColor() Reset the image to its original color public void ResetColor()"
  },
  "api/Fallencake.UI.Examples.ValueScrollerItem.html": {
    "href": "api/Fallencake.UI.Examples.ValueScrollerItem.html",
    "title": "Class ValueScrollerItem | ModularUIPack",
    "summary": "Class ValueScrollerItem Namespace Fallencake.UI.Examples Assembly Fallencake.UI.dll Represents a value scroller item with its own settings and target values. Can animate float or int values and trigger events for any component that accepts numeric input. [Serializable] public class ValueScrollerItem Inheritance object ValueScrollerItem Constructors ValueScrollerItem() public ValueScrollerItem() ValueScrollerItem(string, float, float, float, float) public ValueScrollerItem(string name, float min, float max, float current = 0, float target = 100) Parameters name string min float max float current float target float Fields currentValue [SerializeField] public float currentValue Field Value float decimalPlaces [SerializeField] public int decimalPlaces Field Value int isEnabled [SerializeField] public bool isEnabled Field Value bool itemName [Header(\"Basic Settings\")] [SerializeField] public string itemName Field Value string maxValue [SerializeField] public float maxValue Field Value float minValue [Header(\"Value Range\")] [SerializeField] public float minValue Field Value float onFloatValueChanged [Header(\"Events\")] [SerializeField] public UnityEvent<float> onFloatValueChanged Field Value UnityEvent<float> onIntValueChanged [SerializeField] public UnityEvent<int> onIntValueChanged Field Value UnityEvent<int> targetValue [SerializeField] public float targetValue Field Value float useWholeNumbers [SerializeField] public bool useWholeNumbers Field Value bool valueModifier [Header(\"Animation Settings\")] [SerializeField] public float valueModifier Field Value float valueType [SerializeField] public SimpleValueScrollerExample.ValueType valueType Field Value SimpleValueScrollerExample.ValueType Properties IsAnimating public bool IsAnimating { get; } Property Value bool IsCompleted public bool IsCompleted { get; } Property Value bool IsDecreasing public bool IsDecreasing { get; } Property Value bool IsIncreasing public bool IsIncreasing { get; } Property Value bool IsValid public bool IsValid { get; } Property Value bool NormalizedTarget public float NormalizedTarget { get; } Property Value float NormalizedValue public float NormalizedValue { get; } Property Value float Methods AddValue(float) Adds a value to the current value public void AddValue(float valueToAdd) Parameters valueToAdd float PrepareAnimation() Prepares the item for animation public void PrepareAnimation() ResetToStart() Resets to the starting value based on target direction public void ResetToStart() SetToTarget() Sets value to the target immediately public void SetToTarget() SetValue(float, bool) Sets the current value with proper clamping and precision public void SetValue(float value, bool sendEvent = true) Parameters value float sendEvent bool StartAnimation(MonoBehaviour, float, bool, float) Starts animation towards the target value public void StartAnimation(MonoBehaviour owner, float duration, bool useStepDelay = false, float stepDelay = 0) Parameters owner MonoBehaviour duration float useStepDelay bool stepDelay float StopAnimation() Stops the current animation public void StopAnimation()"
  },
  "api/Fallencake.UI.Examples.html": {
    "href": "api/Fallencake.UI.Examples.html",
    "title": "Namespace Fallencake.UI.Examples | ModularUIPack",
    "summary": "Namespace Fallencake.UI.Examples Classes DraggableUIExample Example demonstrating how to use the DraggableUI events ProgressBarExample Example script showing how to use the ProgressBar component. Attach this to a GameObject with a ProgressBar component to see it in action. AUTO TEST MODES: Positive Value Modifier: Fills progress bar from current to maximum, then resets to minimum and repeats Negative Value Modifier: Drains progress bar from current to minimum, then sets to maximum and repeats The direction (fill/drain) is automatically determined by the sign of the Value Modifier. When Loop Test is enabled with negative modifier, it creates a \"fill → drain → fill → drain\" cycle. ProgressBarItem Represents a progress bar item with its own value modifier. In stepwise mode (autoTestStepDelay > 0), valueModifier is used with AddValue() for each step. Positive valueModifier = increasing progress, Negative valueModifier = decreasing progress. ProgressBarListExample Example script for animating multiple progress bars with domino effect. Each progress bar can have its own value modifier and timing based on animation curve. FEATURES: List of progress bars with individual value modifiers Domino effect using AnimationCurve for timing Total animation duration control or individual duration based on valueModifier Support for both increasing and decreasing progress bars Individual enable/disable for each progress bar Stepwise or smooth progress updating Two completion modes: wait for all or individual reset ANIMATION MODES: Smooth (autoTestStepDelay = 0): Continuous progress filling Stepwise (autoTestStepDelay > 0): Progress updates in discrete steps using AddValue(valueModifier) every autoTestStepDelay seconds COMPLETION MODES: Wait For All (waitForAllFinished = true): All bars complete in testDuration, then all reset together Individual Reset (waitForAllFinished = false): Each bar completes in testDuration, resets separately with domino delay between cycles SimpleTimerExample Universal timer component that triggers a list of events sequentially after a specified duration. Supports both simultaneous and sequential event invocation with customizable timing curves. SimpleValueScrollerExample Universal component for demonstrating smooth or stepwise changes of numeric values. Can work with any components via the UnityEvent system. Supports various animation types, curves, and speed settings. SimpleValueScrollerListExample Universal component for animating multiple numeric values with domino effect. Can work with any components that accept float or int values through UnityEvent system. Supports smooth and stepwise animations, individual timing, and various completion modes. FEATURES: List of value items with individual settings and events Domino effect using AnimationCurve for timing Support for both float and int value types Individual enable/disable for each value item Stepwise or smooth value updating Two completion modes: wait for all or individual reset Flexible event system for connecting to any numeric component ANIMATION MODES: Smooth: Continuous value interpolation using curves Stepwise: Value updates in discrete steps using valueModifier every stepDelay seconds COMPLETION MODES: Wait For All: All values complete in testDuration, then all reset together Individual Reset: Each value completes individually, resets separately with domino delay TintAnimationExample Example demonstrating how to use the new TweenType.Tint animation ValueScrollerItem Represents a value scroller item with its own settings and target values. Can animate float or int values and trigger events for any component that accepts numeric input. Enums SimpleTimerExample.TimerState SimpleValueScrollerExample.AnimationType SimpleValueScrollerExample.LoopDirection SimpleValueScrollerExample.ValueType SimpleValueScrollerListExample.LoopDirection"
  },
  "api/Fallencake.UI.FacingDirection.html": {
    "href": "api/Fallencake.UI.FacingDirection.html",
    "title": "Enum FacingDirection | ModularUIPack",
    "summary": "Enum FacingDirection Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum FacingDirection Fields Bottom = 1 Left = 2 Right = 3 Top = 0"
  },
  "api/Fallencake.UI.FadeCanvasGroupPopupTweenParameters.html": {
    "href": "api/Fallencake.UI.FadeCanvasGroupPopupTweenParameters.html",
    "title": "Class FadeCanvasGroupPopupTweenParameters | ModularUIPack",
    "summary": "Class FadeCanvasGroupPopupTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class FadeCanvasGroupPopupTweenParameters : PopupTweenParametersData<Component, float>, IPopupTweenParametersData<Component, float>, ITweenTargetData<Component> Inheritance object PopupTweenParametersData<Component, float> FadeCanvasGroupPopupTweenParameters Implements IPopupTweenParametersData<Component, float> ITweenTargetData<Component> Inherited Members PopupTweenParametersData<Component, float>.Target PopupTweenParametersData<Component, float>.ShowValue PopupTweenParametersData<Component, float>.HideValue Constructors FadeCanvasGroupPopupTweenParameters() public FadeCanvasGroupPopupTweenParameters() FadeCanvasGroupPopupTweenParameters(CanvasGroup, float, float, bool) public FadeCanvasGroupPopupTweenParameters(CanvasGroup target, float showAlpha = 1, float hideAlpha = 0, bool isInteractableOnHide = false) Parameters target CanvasGroup showAlpha float hideAlpha float isInteractableOnHide bool FadeCanvasGroupPopupTweenParameters(Graphic, float, float) public FadeCanvasGroupPopupTweenParameters(Graphic target, float showAlpha = 1, float hideAlpha = 0) Parameters target Graphic showAlpha float hideAlpha float Properties HideAlpha Hide alpha value public float HideAlpha { get; set; } Property Value float HideValue public override float HideValue { get; } Property Value float IsInteractableOnHide Whether CanvasGroup should be interactable when hidden (only applies to CanvasGroup targets) public bool IsInteractableOnHide { get; } Property Value bool ShowAlpha Show alpha value public float ShowAlpha { get; set; } Property Value float ShowValue public override float ShowValue { get; } Property Value float Target public override Component Target { get; } Property Value Component TargetType Type of the target component for fade animation public FadeTargetType TargetType { get; set; } Property Value FadeTargetType"
  },
  "api/Fallencake.UI.FadeCanvasGroupTweenParameters.html": {
    "href": "api/Fallencake.UI.FadeCanvasGroupTweenParameters.html",
    "title": "Class FadeCanvasGroupTweenParameters | ModularUIPack",
    "summary": "Class FadeCanvasGroupTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class FadeCanvasGroupTweenParameters : TweenParametersData<CanvasGroup, float>, ITweenParametersData<CanvasGroup, float>, ITweenTargetData<CanvasGroup> Inheritance object TweenParametersData<CanvasGroup, float> FadeCanvasGroupTweenParameters Implements ITweenParametersData<CanvasGroup, float> ITweenTargetData<CanvasGroup> Inherited Members TweenParametersData<CanvasGroup, float>.Target TweenParametersData<CanvasGroup, float>.Value TweenParametersData<CanvasGroup, float>.StartValue Constructors FadeCanvasGroupTweenParameters() public FadeCanvasGroupTweenParameters() FadeCanvasGroupTweenParameters(CanvasGroup, float, bool) public FadeCanvasGroupTweenParameters(CanvasGroup target, float alpha, bool isInteractableOnHide = false) Parameters target CanvasGroup alpha float isInteractableOnHide bool Properties IsInteractableOnHide public bool IsInteractableOnHide { get; } Property Value bool StartValue public override float StartValue { get; } Property Value float Target public override CanvasGroup Target { get; } Property Value CanvasGroup Value public override float Value { get; } Property Value float"
  },
  "api/Fallencake.UI.FadeSelectorInputFieldAnimator.html": {
    "href": "api/Fallencake.UI.FadeSelectorInputFieldAnimator.html",
    "title": "Class FadeSelectorInputFieldAnimator | ModularUIPack",
    "summary": "Class FadeSelectorInputFieldAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll Animator that fades placeholder and selector via UnityEngine.CanvasGroup.alpha on select/deselect. public class FadeSelectorInputFieldAnimator : InputFieldAnimator, IInputFieldAnimator Inheritance object Object Component Behaviour MonoBehaviour InputFieldAnimator FadeSelectorInputFieldAnimator Implements IInputFieldAnimator Inherited Members InputFieldAnimator._getDefaultOnInit InputFieldAnimator._selectEase InputFieldAnimator._selectDuration InputFieldAnimator._deselectEase InputFieldAnimator._deselectDuration InputFieldAnimator._tweenCoroutine InputFieldAnimator._isInitialized InputFieldAnimator.IsInitialized InputFieldAnimator.OnSelected InputFieldAnimator.OnDeselected InputFieldAnimator.Awake() InputFieldAnimator.OnDisable() InputFieldAnimator.Select() InputFieldAnimator.Deselect() InputFieldAnimator.InstantSelect() InputFieldAnimator.InstantDeselect() Methods Init() Implement component discovery and default-state caching. protected override void Init() InstantUpdate(bool) Updates visuals immediately for selected/deselected state. protected override void InstantUpdate(bool isSelected) Parameters isSelected bool Whether to render selected state. PlayTweenAnimation(bool, float, AnimationCurve) Plays a tweened animation for selected/deselected state. protected override IEnumerator PlayTweenAnimation(bool isSelected, float duration, AnimationCurve ease) Parameters isSelected bool Target selection state. duration float Tween duration (seconds). ease AnimationCurve Easing curve. Returns IEnumerator"
  },
  "api/Fallencake.UI.FadeTargetType.html": {
    "href": "api/Fallencake.UI.FadeTargetType.html",
    "title": "Enum FadeTargetType | ModularUIPack",
    "summary": "Enum FadeTargetType Namespace Fallencake.UI Assembly Fallencake.UI.dll Target types supported by fade tweens. public enum FadeTargetType Fields CanvasGroup = 0 Fade UnityEngine.CanvasGroup. Graphic = 1 Fade UnityEngine.UI.Graphic alpha."
  },
  "api/Fallencake.UI.FadeTween.html": {
    "href": "api/Fallencake.UI.FadeTween.html",
    "title": "Class FadeTween | ModularUIPack",
    "summary": "Class FadeTween Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class FadeTween : TweenBase<Component, float>, ITargetableTween<Component, float>, ITween Inheritance object TweenBase<Component, float> FadeTween Implements ITargetableTween<Component, float> ITween Inherited Members TweenBase<Component, float>._target TweenBase<Component, float>._startValue TweenBase<Component, float>._endValue TweenBase<Component, float>._duration TweenBase<Component, float>._delay TweenBase<Component, float>._ease TweenBase<Component, float>.Target TweenBase<Component, float>.StartValue TweenBase<Component, float>.EndValue TweenBase<Component, float>.Duration TweenBase<Component, float>.Delay TweenBase<Component, float>.Ease TweenBase<Component, float>.IsTweened TweenBase<Component, float>._isTweened TweenBase<Component, float>._tweenCoroutine TweenBase<Component, float>.Play(MonoBehaviour, bool) TweenBase<Component, float>.Reset(bool) TweenBase<Component, float>.ResetTarget() TweenBase<Component, float>.OnComplete() TweenBase<Component, float>.GetTargetValue(bool) Constructors FadeTween() public FadeTween() FadeTween(CanvasGroup, float, float, float, float, AnimationCurve) public FadeTween(CanvasGroup target, float startValue, float endValue, float duration, float delay, AnimationCurve ease = null) Parameters target CanvasGroup startValue float endValue float duration float delay float ease AnimationCurve FadeTween(Graphic, float, float, float, float, AnimationCurve) public FadeTween(Graphic target, float startValue, float endValue, float duration, float delay, AnimationCurve ease = null) Parameters target Graphic startValue float endValue float duration float delay float ease AnimationCurve Properties TargetType Type of the target component for fade animation public FadeTargetType TargetType { get; set; } Property Value FadeTargetType Methods Play(MonoBehaviour, bool) Plays the tween on a coroutine holder. Implementations should start a coroutine and call OnComplete() when finished. public override void Play(MonoBehaviour coroutineHolder, bool isForward = true) Parameters coroutineHolder MonoBehaviour MonoBehaviour used to start/stop coroutines. isForward bool If true plays towards EndValue, otherwise towards StartValue. ResetTarget() Implemented by concrete tweens to restore target to its initial state. protected override void ResetTarget()"
  },
  "api/Fallencake.UI.FillImageScroller.html": {
    "href": "api/Fallencake.UI.FillImageScroller.html",
    "title": "Class FillImageScroller | ModularUIPack",
    "summary": "Class FillImageScroller Namespace Fallencake.UI Assembly Fallencake.UI.dll Specialized scroller that animates a fill by moving a UnityEngine.RectTransform's Y position according to a numeric value mapped between configurable minimum and maximum offsets. public class FillImageScroller : AnimatedImageScroller Inheritance object Object Component Behaviour MonoBehaviour AnimatedImageScroller FillImageScroller Inherited Members AnimatedImageScroller._scrollableImages AnimatedImageScroller._isScrolling AnimatedImageScroller.IsScrolling AnimatedImageScroller.Init() AnimatedImageScroller.Update() AnimatedImageScroller.SetScrollableImages(List<ScrollableImage>) Examples Quick setup in code: var scroller = gameObject.AddComponent<FillImageScroller>(); scroller.SetScrollableImages(myImages); // inherited UV scrolling if needed scroller.FillTransform = myFillRect; // RectTransform to move vertically scroller.MinValue = 0f; scroller.MaxValue = 100f; scroller.MinFillOffset = 0f; scroller.MaxFillOffset = 120f; scroller.UseAutoHeight = true; // anchors/pivot/height configured automatically scroller.Value = 65f; // updates Y position immediately Remarks Inherits scrolling support from AnimatedImageScroller for texture UV movement, and augments it with a vertical fill behavior driven by Value. The fill position is calculated using UnityEngine.Mathf.InverseLerp(float, float, float) over the MinValue–MaxValue range and then mapped to the MinFillOffset–MaxFillOffset Y offsets via UnityEngine.Mathf.Lerp(float, float, float). When UseAutoHeight is enabled, the component configures anchors, pivot and height of the FillTransform for standard bottom-up filling by calling an internal setup routine (anchors (0,0)-(1,0), pivot.y = 1, height = MaxFillOffset), then applies only Y offset changes via UnityEngine.RectTransform.anchoredPosition while preserving X. Properties FillTransform Target UnityEngine.RectTransform whose UnityEngine.RectTransform.anchoredPosition.y is updated to visualize the fill according to Value. public RectTransform FillTransform { get; set; } Property Value RectTransform Assign the transform that should move vertically to represent the fill. Setting this property immediately re-applies the current Value via FillValue(float). MaxFillOffset Maximum Y offset (in local anchored space) for FillTransform when Value equals MaxValue. public float MaxFillOffset { get; set; } Property Value float Updating this property immediately reapplies the current Value. When UseAutoHeight is enabled, this value also defines the transform height via UnityEngine.RectTransform.SetSizeWithCurrentAnchors(UnityEngine.RectTransform.Axis, float). MaxValue Maximum value of the logical range that corresponds to MaxFillOffset. public float MaxValue { get; set; } Property Value float Changing this revalidates Value to keep it within bounds and updates visuals if needed. MinFillOffset Minimum Y offset (in local anchored space) for FillTransform when Value equals MinValue. public float MinFillOffset { get; set; } Property Value float Updating this property immediately reapplies the current Value. MinValue Minimum value of the logical range that corresponds to MinFillOffset. public float MinValue { get; set; } Property Value float Changing this revalidates Value to keep it within bounds and updates visuals if needed. UseAutoHeight Enables automatic height and layout configuration for the FillTransform. public bool UseAutoHeight { get; set; } Property Value bool When enabled, anchors are set to (0,0)–(1,0), UnityEngine.RectTransform.pivot.y becomes 1, position is reset to zero, and height is set to MaxFillOffset so that the Y offset directly represents the fill level. Value Current fill value clamped within MinValue–MaxValue. public float Value { get; set; } Property Value float Assigning a value updates the fill immediately by calling FillValue(float). The value is clamped to the valid range. Remarks The mapping uses UnityEngine.Mathf.InverseLerp(float, float, float) to compute a normalized factor and then UnityEngine.Mathf.Lerp(float, float, float) to produce the Y offset between MinFillOffset and MaxFillOffset. Methods FillValue(float) Recomputes and applies the FillTransform's Y offset to reflect the specified value. public void FillValue(float value) Parameters value float The value to map into the MinValue–MaxValue range. Remarks The value is normalized using UnityEngine.Mathf.InverseLerp(float, float, float) and then mapped to MinFillOffset–MaxFillOffset via UnityEngine.Mathf.Lerp(float, float, float). When UseAutoHeight is enabled, auto-height configuration is applied beforehand. Only the Y component of UnityEngine.RectTransform.anchoredPosition is changed; the X component remains unchanged to preserve horizontal alignment. Start() Unity Start lifecycle method. protected override void Start() Remarks Invokes base initialization from AnimatedImageScroller and then applies the initial Value to position the FillTransform. See Also AnimatedImageScroller"
  },
  "api/Fallencake.UI.FillSelectorInputFieldAnimator.html": {
    "href": "api/Fallencake.UI.FillSelectorInputFieldAnimator.html",
    "title": "Class FillSelectorInputFieldAnimator | ModularUIPack",
    "summary": "Class FillSelectorInputFieldAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll Animator that moves/scales placeholder and fills a selector UnityEngine.UI.Image on select. public class FillSelectorInputFieldAnimator : InputFieldAnimator, IInputFieldAnimator Inheritance object Object Component Behaviour MonoBehaviour InputFieldAnimator FillSelectorInputFieldAnimator Implements IInputFieldAnimator Inherited Members InputFieldAnimator._getDefaultOnInit InputFieldAnimator._selectEase InputFieldAnimator._selectDuration InputFieldAnimator._deselectEase InputFieldAnimator._deselectDuration InputFieldAnimator._tweenCoroutine InputFieldAnimator._isInitialized InputFieldAnimator.IsInitialized InputFieldAnimator.OnSelected InputFieldAnimator.OnDeselected InputFieldAnimator.Awake() InputFieldAnimator.OnDisable() InputFieldAnimator.Select() InputFieldAnimator.Deselect() InputFieldAnimator.InstantSelect() InputFieldAnimator.InstantDeselect() Methods Init() Implement component discovery and default-state caching. protected override void Init() InstantUpdate(bool) Updates visuals immediately for selected/deselected state. protected override void InstantUpdate(bool isSelected) Parameters isSelected bool Whether to render selected state. PlayTweenAnimation(bool, float, AnimationCurve) Plays a tweened animation for selected/deselected state. protected override IEnumerator PlayTweenAnimation(bool isSelected, float duration, AnimationCurve ease) Parameters isSelected bool Target selection state. duration float Tween duration (seconds). ease AnimationCurve Easing curve. Returns IEnumerator"
  },
  "api/Fallencake.UI.FrameSwapAnimator.html": {
    "href": "api/Fallencake.UI.FrameSwapAnimator.html",
    "title": "Class FrameSwapAnimator | ModularUIPack",
    "summary": "Class FrameSwapAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll Animated frame swapper that cycles through sprites with smooth fading transitions. public class FrameSwapAnimator : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour FrameSwapAnimator Properties BackImage public Image BackImage { get; } Property Value Image CrossfadeOverlapDelay public float CrossfadeOverlapDelay { get; set; } Property Value float CurrentFrameIndex public int CurrentFrameIndex { get; } Property Value int FadeDuration Auto-calculated fade duration for perfectly balanced ping-pong transitions. Equals FrameSwapTime minus CrossfadeOverlapDelay, ensuring fade in and fade out have identical duration. public float FadeDuration { get; } Property Value float FrameCount public int FrameCount { get; } Property Value int FrameSwapTime public float FrameSwapTime { get; set; } Property Value float FrontImage public Image FrontImage { get; } Property Value Image IsAnimating public bool IsAnimating { get; } Property Value bool IsPlayOnEnable public bool IsPlayOnEnable { get; set; } Property Value bool LoopAnimation public bool LoopAnimation { get; set; } Property Value bool Methods Play() Starts the frame swap animation with crossfade transitions. Analyzes current image alpha states and starts animation correctly: Image with alpha 0 starts fading IN with new frame Image with alpha 100% starts fading OUT after delay public void Play() Restart() Restarts the animation from the first frame. public void Restart() SetFrame(int) Sets the current frame without animation. public void SetFrame(int frameIndex) Parameters frameIndex int Index of the frame to set Stop() Stops the animation and ensures proper image state: One image MUST have alpha 100% (fully visible) Other image MUST have alpha 0% (fully transparent) This guarantees no visual gaps when animation stops. public void Stop() ValidateImageStates() Validates that at least one image is visible and logs warnings if both are transparent. Call this method periodically during animation to catch potential issues. public void ValidateImageStates()"
  },
  "api/Fallencake.UI.GradientAssetCollection.html": {
    "href": "api/Fallencake.UI.GradientAssetCollection.html",
    "title": "Class GradientAssetCollection | ModularUIPack",
    "summary": "Class GradientAssetCollection Namespace Fallencake.UI Assembly Fallencake.UI.dll public class GradientAssetCollection : IColorAssetCollection<Gradient>, IAssetCollection<Gradient> Inheritance object GradientAssetCollection Implements IColorAssetCollection<Gradient> IAssetCollection<Gradient> Constructors GradientAssetCollection(IGradientAssetProvider) public GradientAssetCollection(IGradientAssetProvider gradientAssetProvider) Parameters gradientAssetProvider IGradientAssetProvider Properties AssetsNumber public int AssetsNumber { get; } Property Value int SelectedAssetIndex public int SelectedAssetIndex { get; set; } Property Value int Methods SelectAsset(int) public void SelectAsset(int index) Parameters index int SelectAsset(int, bool, float) public void SelectAsset(int index, bool isInstantly = false, float duration = 1) Parameters index int isInstantly bool duration float SetColor(int, bool, float) public void SetColor(int index, bool isInstantly = false, float duration = 1) Parameters index int isInstantly bool duration float SetColor(Gradient, bool, float) public void SetColor(Gradient gradient, bool isInstantly = false, float duration = 1) Parameters gradient Gradient isInstantly bool duration float SetSelectedColor() public void SetSelectedColor() Events OnAssetSelected public event Action<Gradient> OnAssetSelected Event Type Action<Gradient>"
  },
  "api/Fallencake.UI.GradientCollectionData.html": {
    "href": "api/Fallencake.UI.GradientCollectionData.html",
    "title": "Class GradientCollectionData | ModularUIPack",
    "summary": "Class GradientCollectionData Namespace Fallencake.UI Assembly Fallencake.UI.dll [CreateAssetMenu(fileName = \"New GradientCollectionData\", menuName = \"Modular UI/Data Collections/GradientCollectionData\", order = 1)] public class GradientCollectionData : ScriptableObject Inheritance object Object ScriptableObject GradientCollectionData Properties Gradients public List<Gradient> Gradients { get; } Property Value List<Gradient>"
  },
  "api/Fallencake.UI.HeadSpinner.html": {
    "href": "api/Fallencake.UI.HeadSpinner.html",
    "title": "Class HeadSpinner | ModularUIPack",
    "summary": "Class HeadSpinner Namespace Fallencake.UI Assembly Fallencake.UI.dll Stylized head-and-body spinner that stretches and rotates a body towards a rotating head element. public class HeadSpinner : UIBehaviour, ISpinner Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour HeadSpinner Implements ISpinner Methods Spin() Starts or continues the spinning animation. public void Spin() Start() protected override void Start() Stop() Stops the spinning animation. public void Stop()"
  },
  "api/Fallencake.UI.IAssetCollection-1.html": {
    "href": "api/Fallencake.UI.IAssetCollection-1.html",
    "title": "Interface IAssetCollection<TType> | ModularUIPack",
    "summary": "Interface IAssetCollection<TType> Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IAssetCollection<TType> Type Parameters TType Properties AssetsNumber int AssetsNumber { get; } Property Value int SelectedAssetIndex int SelectedAssetIndex { get; set; } Property Value int Methods SelectAsset(int, bool, float) void SelectAsset(int index, bool isInstantly, float selectionDuration) Parameters index int isInstantly bool selectionDuration float Events OnAssetSelected event Action<TType> OnAssetSelected Event Type Action<TType>"
  },
  "api/Fallencake.UI.IBasicData.html": {
    "href": "api/Fallencake.UI.IBasicData.html",
    "title": "Interface IBasicData | ModularUIPack",
    "summary": "Interface IBasicData Namespace Fallencake.UI Assembly Fallencake.UI.dll Base interface for data elements, which contain a name and an icon public interface IBasicData Properties Icon Sprite Icon { get; } Property Value Sprite Name string Name { get; } Property Value string"
  },
  "api/Fallencake.UI.IColorAssetCollection-1.html": {
    "href": "api/Fallencake.UI.IColorAssetCollection-1.html",
    "title": "Interface IColorAssetCollection<T> | ModularUIPack",
    "summary": "Interface IColorAssetCollection<T> Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IColorAssetCollection<T> : IAssetCollection<T> Type Parameters T Inherited Members IAssetCollection<T>.SelectedAssetIndex IAssetCollection<T>.AssetsNumber IAssetCollection<T>.OnAssetSelected IAssetCollection<T>.SelectAsset(int, bool, float) Methods SetColor(int, bool, float) void SetColor(int index, bool isInstantly = false, float duration = 1) Parameters index int isInstantly bool duration float SetColor(T, bool, float) void SetColor(T color, bool isInstantly = false, float duration = 1) Parameters color T isInstantly bool duration float SetSelectedColor() void SetSelectedColor()"
  },
  "api/Fallencake.UI.IColorAssetProvider.html": {
    "href": "api/Fallencake.UI.IColorAssetProvider.html",
    "title": "Interface IColorAssetProvider | ModularUIPack",
    "summary": "Interface IColorAssetProvider Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IColorAssetProvider Properties ColorCollectionData ColorCollectionData ColorCollectionData { get; } Property Value ColorCollectionData ColorableAssets List<Graphic> ColorableAssets { get; } Property Value List<Graphic> ColorizingType ColorizingType ColorizingType { get; } Property Value ColorizingType IsTintingEnabled bool IsTintingEnabled { get; } Property Value bool SelectedColor Color SelectedColor { get; set; } Property Value Color SelectedColorIndex int SelectedColorIndex { get; set; } Property Value int TintColor Color TintColor { get; } Property Value Color TintCurve AnimationCurve TintCurve { get; } Property Value AnimationCurve TweenCoroutine Coroutine TweenCoroutine { get; set; } Property Value Coroutine name string name { get; } Property Value string Methods StartCoroutine(IEnumerator) Coroutine StartCoroutine(IEnumerator enumerator) Parameters enumerator IEnumerator Returns Coroutine StopCoroutine(Coroutine) void StopCoroutine(Coroutine tweenCoroutine) Parameters tweenCoroutine Coroutine"
  },
  "api/Fallencake.UI.IColorSetter.html": {
    "href": "api/Fallencake.UI.IColorSetter.html",
    "title": "Interface IColorSetter | ModularUIPack",
    "summary": "Interface IColorSetter Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IColorSetter Methods SetColor(int) void SetColor(int index) Parameters index int SetColor(int, float) void SetColor(int index, float duration = 1) Parameters index int duration float SetColor(Color) void SetColor(Color color) Parameters color Color SetColor(Color, float) void SetColor(Color color, float duration = 1) Parameters color Color duration float SetColor(Gradient) void SetColor(Gradient gradient) Parameters gradient Gradient SetColor(Gradient, float) void SetColor(Gradient gradient, float duration = 1) Parameters gradient Gradient duration float"
  },
  "api/Fallencake.UI.IDataTemplate.html": {
    "href": "api/Fallencake.UI.IDataTemplate.html",
    "title": "Interface IDataTemplate | ModularUIPack",
    "summary": "Interface IDataTemplate Namespace Fallencake.UI Assembly Fallencake.UI.dll Interface for data templates, which contain a list of elements public interface IDataTemplate Properties Items List<IBasicData> Items { get; } Property Value List<IBasicData> TemplateName string TemplateName { get; } Property Value string"
  },
  "api/Fallencake.UI.IDropdownAnimationHandler.html": {
    "href": "api/Fallencake.UI.IDropdownAnimationHandler.html",
    "title": "Interface IDropdownAnimationHandler | ModularUIPack",
    "summary": "Interface IDropdownAnimationHandler Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IDropdownAnimationHandler Methods Animate(bool) void Animate(bool isOpening) Parameters isOpening bool Cleanup() void Cleanup() Initialize(IDropdownMenu) void Initialize(IDropdownMenu dropdown) Parameters dropdown IDropdownMenu"
  },
  "api/Fallencake.UI.IDropdownMenu.html": {
    "href": "api/Fallencake.UI.IDropdownMenu.html",
    "title": "Interface IDropdownMenu | ModularUIPack",
    "summary": "Interface IDropdownMenu Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IDropdownMenu : IDropdownAudioProvider, IAudioProvider Inherited Members IDropdownAudioProvider.OpenSound IDropdownAudioProvider.CloseSound IDropdownAudioProvider.SelectItemSound IAudioProvider.Component IAudioProvider.Selectable IAudioProvider.AudioSource IAudioProvider.SelectSound IAudioProvider.DeselectSound IAudioProvider.PressSound IAudioProvider.EnableSounds IAudioProvider.Volume Properties AnimationCurve AnimationCurve AnimationCurve { get; } Property Value AnimationCurve AnimationRunner MonoBehaviour AnimationRunner { get; } Property Value MonoBehaviour Animator Animator Animator { get; } Property Value Animator ClosingTime float ClosingTime { get; } Property Value float ContentOffset float ContentOffset { get; } Property Value float ItemListCanvasGroup CanvasGroup ItemListCanvasGroup { get; } Property Value CanvasGroup ItemListRect RectTransform ItemListRect { get; } Property Value RectTransform OpeningTime float OpeningTime { get; } Property Value float PanelDirection DropdownDirection PanelDirection { get; } Property Value DropdownDirection PanelHeight float PanelHeight { get; } Property Value float"
  },
  "api/Fallencake.UI.IGradientAssetProvider.html": {
    "href": "api/Fallencake.UI.IGradientAssetProvider.html",
    "title": "Interface IGradientAssetProvider | ModularUIPack",
    "summary": "Interface IGradientAssetProvider Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IGradientAssetProvider Properties ColorizingType ColorizingType ColorizingType { get; } Property Value ColorizingType GradientCollectionData GradientCollectionData GradientCollectionData { get; } Property Value GradientCollectionData Gradients List<UIGradient> Gradients { get; } Property Value List<UIGradient> SelectedGradient Gradient SelectedGradient { get; set; } Property Value Gradient SelectedGradientIndex int SelectedGradientIndex { get; set; } Property Value int TweenCoroutine Coroutine TweenCoroutine { get; set; } Property Value Coroutine name string name { get; } Property Value string Methods StartCoroutine(IEnumerator) Coroutine StartCoroutine(IEnumerator enumerator) Parameters enumerator IEnumerator Returns Coroutine StopCoroutine(Coroutine) void StopCoroutine(Coroutine tweenCoroutine) Parameters tweenCoroutine Coroutine"
  },
  "api/Fallencake.UI.IGroupSelectable.html": {
    "href": "api/Fallencake.UI.IGroupSelectable.html",
    "title": "Interface IGroupSelectable | ModularUIPack",
    "summary": "Interface IGroupSelectable Namespace Fallencake.UI Assembly Fallencake.UI.dll Interface for elements that can be part of a group public interface IGroupSelectable Methods ForceSelected(bool) Forces the selection state void ForceSelected(bool selected) Parameters selected bool SetGroup(SelectableGroup) Sets the group for this element void SetGroup(SelectableGroup group) Parameters group SelectableGroup SetSelectedInGroup(bool) Sets the selection state in the group void SetSelectedInGroup(bool selected) Parameters selected bool"
  },
  "api/Fallencake.UI.IInputFieldAnimator.html": {
    "href": "api/Fallencake.UI.IInputFieldAnimator.html",
    "title": "Interface IInputFieldAnimator | ModularUIPack",
    "summary": "Interface IInputFieldAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IInputFieldAnimator Methods Deselect() void Deselect() InstantDeselect() void InstantDeselect() InstantSelect() void InstantSelect() Select() void Select()"
  },
  "api/Fallencake.UI.IMultiSelectable.html": {
    "href": "api/Fallencake.UI.IMultiSelectable.html",
    "title": "Interface IMultiSelectable | ModularUIPack",
    "summary": "Interface IMultiSelectable Namespace Fallencake.UI Assembly Fallencake.UI.dll Defines the contract for UI controls that support multiple coordinated graphic transitions (color tinting, sprite swapping, and CanvasGroup fading). public interface IMultiSelectable Properties ColorableGraphics Collection of colorable graphics taking part in state-based color transitions. List<ColorableGraphic> ColorableGraphics { get; set; } Property Value List<ColorableGraphic> SelectableTransition The transition mode applied when the selection state changes. SelectableTransition SelectableTransition { get; set; } Property Value SelectableTransition SwappableCanvasGroupe Settings bundle that drives CanvasGroup-based fading during state transitions. SwappableCanvasGroup SwappableCanvasGroupe { get; set; } Property Value SwappableCanvasGroup SwappableGraphics Collection of swappable sprites taking part in state-based sprite transitions. List<SwappableSprite> SwappableGraphics { get; set; } Property Value List<SwappableSprite> Methods AddColorableGraphic(Graphic, SelectionColorBlock) Creates and adds a ColorableGraphic configured with a target and color block. ColorableGraphic AddColorableGraphic(Graphic target, SelectionColorBlock colors) Parameters target Graphic The UnityEngine.UI.Graphic to be color-tinted on state changes. colors SelectionColorBlock The SelectionColorBlock defining colors and timings. Returns ColorableGraphic The created ColorableGraphic. AddColorableGraphic(Graphic, Color, Color, Color, Color, Color, float, float) Creates and adds a ColorableGraphic using explicit state colors. ColorableGraphic AddColorableGraphic(Graphic target, Color normal, Color highlighted, Color pressed, Color selected, Color disabled, float colorMultiplier = 1, float fadeDuration = 0.1) Parameters target Graphic The UnityEngine.UI.Graphic to be color-tinted. normal Color Color for Normal state. highlighted Color Color for Highlighted state. pressed Color Color for Pressed state. selected Color Color for Selected state. disabled Color Color for Disabled state. colorMultiplier float Multiplier applied to colors. fadeDuration float Color transition duration in seconds. Returns ColorableGraphic The created ColorableGraphic. AddNewColorableGraphics() Adds a new ColorableGraphic entry to ColorableGraphics. void AddNewColorableGraphics() AddNewSwappableSprite() Adds a new SwappableSprite entry to SwappableGraphics. void AddNewSwappableSprite() AddSwappableSprite(Graphic, SelectionSpriteState) Creates and adds a SwappableSprite configured with a target and sprite state. SwappableSprite AddSwappableSprite(Graphic target, SelectionSpriteState spriteState) Parameters target Graphic The UnityEngine.UI.Graphic whose sprite will be swapped. spriteState SelectionSpriteState The SelectionSpriteState defining sprites per state. Returns SwappableSprite The created SwappableSprite. AddSwappableSprite(Image, Sprite, Sprite, Sprite, Sprite) Creates and adds a SwappableSprite using explicit state sprites. SwappableSprite AddSwappableSprite(Image targetImage, Sprite highlighted, Sprite pressed, Sprite selected, Sprite disabled) Parameters targetImage Image The UnityEngine.UI.Image to receive swapped sprites. highlighted Sprite Sprite for Highlighted state. pressed Sprite Sprite for Pressed state. selected Sprite Sprite for Selected state. disabled Sprite Sprite for Disabled state. Returns SwappableSprite The created SwappableSprite. SetFadingCanvasGroups(CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, float) Configures SwappableCanvasGroupe with CanvasGroups per state and fade duration. void SetFadingCanvasGroups(CanvasGroup normal, CanvasGroup highlighted, CanvasGroup pressed, CanvasGroup selected, CanvasGroup disabled, float fadeDuration = 0.1) Parameters normal CanvasGroup CanvasGroup for Normal state. highlighted CanvasGroup CanvasGroup for Highlighted state. pressed CanvasGroup CanvasGroup for Pressed state. selected CanvasGroup CanvasGroup for Selected state. disabled CanvasGroup CanvasGroup for Disabled state. fadeDuration float Alpha fade duration in seconds."
  },
  "api/Fallencake.UI.IMultipleClicksHandler.html": {
    "href": "api/Fallencake.UI.IMultipleClicksHandler.html",
    "title": "Interface IMultipleClicksHandler | ModularUIPack",
    "summary": "Interface IMultipleClicksHandler Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IMultipleClicksHandler Properties OnClick UnityEvent that is triggered when the button is pressed once. Note: Triggered on MouseUp after MouseDown on the same object. OnButtonClickedEvent OnClick { get; set; } Property Value OnButtonClickedEvent OnDoubleClick UnityEvent that is triggered when the button is pressed twice for a short period of time. OnButtonClickedEvent OnDoubleClick { get; set; } Property Value OnButtonClickedEvent Methods HandleDoubleClickCheck() Method that handles the check for double click on button to trigger OnDoubleClick event. You can call it from OnPointerClick method. void HandleDoubleClickCheck()"
  },
  "api/Fallencake.UI.IOnClickEffect.html": {
    "href": "api/Fallencake.UI.IOnClickEffect.html",
    "title": "Interface IOnClickEffect | ModularUIPack",
    "summary": "Interface IOnClickEffect Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IOnClickEffect Methods CreateOnCLickEffect(Vector2) void CreateOnCLickEffect(Vector2 position) Parameters position Vector2"
  },
  "api/Fallencake.UI.IPopupTweenAnimator.html": {
    "href": "api/Fallencake.UI.IPopupTweenAnimator.html",
    "title": "Interface IPopupTweenAnimator | ModularUIPack",
    "summary": "Interface IPopupTweenAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IPopupTweenAnimator Methods Hide(Action) void Hide(Action onComplete = null) Parameters onComplete Action HideInstantly(Action) void HideInstantly(Action onComplete = null) Parameters onComplete Action Show(Action) void Show(Action onComplete) Parameters onComplete Action"
  },
  "api/Fallencake.UI.IPopupTweenParameters.html": {
    "href": "api/Fallencake.UI.IPopupTweenParameters.html",
    "title": "Interface IPopupTweenParameters | ModularUIPack",
    "summary": "Interface IPopupTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IPopupTweenParameters : ITweenBasicParameters Inherited Members ITweenBasicParameters.Type ITweenBasicParameters.Coroutine Properties HideDuration float HideDuration { get; } Property Value float HideEase AnimationCurve HideEase { get; } Property Value AnimationCurve ShowDuration float ShowDuration { get; } Property Value float ShowEase AnimationCurve ShowEase { get; } Property Value AnimationCurve"
  },
  "api/Fallencake.UI.IPopupTweenParametersData-2.html": {
    "href": "api/Fallencake.UI.IPopupTweenParametersData-2.html",
    "title": "Interface IPopupTweenParametersData<TTarget, TValue> | ModularUIPack",
    "summary": "Interface IPopupTweenParametersData<TTarget, TValue> Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IPopupTweenParametersData<TTarget, TValue> : ITweenTargetData<TTarget> Type Parameters TTarget TValue Inherited Members ITweenTargetData<TTarget>.Target Properties HideValue TValue HideValue { get; } Property Value TValue ShowValue TValue ShowValue { get; } Property Value TValue"
  },
  "api/Fallencake.UI.IProgressBarAudioHandler.html": {
    "href": "api/Fallencake.UI.IProgressBarAudioHandler.html",
    "title": "Interface IProgressBarAudioHandler | ModularUIPack",
    "summary": "Interface IProgressBarAudioHandler Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IProgressBarAudioHandler : IAudioHandler Inherited Members IAudioHandler.AudioSource IAudioHandler.EnableSounds IAudioHandler.Volume IAudioHandler.PlaySelectSound() IAudioHandler.PlayDeselectSound() IAudioHandler.PlayPressSound() IAudioHandler.UpdateInteractable(bool) Methods CanPlayProgressUpdateSound() bool CanPlayProgressUpdateSound() Returns bool PlayProgressCompleteSound() void PlayProgressCompleteSound() PlayProgressUpdateSound(float) void PlayProgressUpdateSound(float pitch = -1) Parameters pitch float"
  },
  "api/Fallencake.UI.IProgressBarAudioProvider.html": {
    "href": "api/Fallencake.UI.IProgressBarAudioProvider.html",
    "title": "Interface IProgressBarAudioProvider | ModularUIPack",
    "summary": "Interface IProgressBarAudioProvider Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface IProgressBarAudioProvider : IAudioProvider Inherited Members IAudioProvider.Component IAudioProvider.Selectable IAudioProvider.AudioSource IAudioProvider.SelectSound IAudioProvider.DeselectSound IAudioProvider.PressSound IAudioProvider.EnableSounds IAudioProvider.Volume Properties ProgressCompleteSound AudioData ProgressCompleteSound { get; } Property Value AudioData ProgressUpdateSound AudioData ProgressUpdateSound { get; } Property Value AudioData"
  },
  "api/Fallencake.UI.ISaveable.html": {
    "href": "api/Fallencake.UI.ISaveable.html",
    "title": "Interface ISaveable | ModularUIPack",
    "summary": "Interface ISaveable Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface ISaveable Properties IsSavingEnabled Enables save/load behavior for the component. bool IsSavingEnabled { get; set; } Property Value bool SaveKey PlayerPrefs key used to persist the state. string SaveKey { get; set; } Property Value string Methods LoadState() Loads component state from persistent storage. void LoadState() SaveState() Saves component state to persistent storage. void SaveState()"
  },
  "api/Fallencake.UI.ISelectableStates-1.html": {
    "href": "api/Fallencake.UI.ISelectableStates-1.html",
    "title": "Interface ISelectableStates<T> | ModularUIPack",
    "summary": "Interface ISelectableStates<T> Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface ISelectableStates<T> Type Parameters T Properties DisabledState T DisabledState { get; set; } Property Value T HighlightedState T HighlightedState { get; set; } Property Value T NormalState T NormalState { get; set; } Property Value T PressedState T PressedState { get; set; } Property Value T SelectedState T SelectedState { get; set; } Property Value T"
  },
  "api/Fallencake.UI.ISlider.html": {
    "href": "api/Fallencake.UI.ISlider.html",
    "title": "Interface ISlider | ModularUIPack",
    "summary": "Interface ISlider Namespace Fallencake.UI Assembly Fallencake.UI.dll Minimal slider contract exposing current value and bounds with a formatted display value. public interface ISlider Properties DisplayedValue Readable value rendered according to configured precision/format. float DisplayedValue { get; } Property Value float MaxValue Maximum allowed value. float MaxValue { get; set; } Property Value float MinValue Minimum allowed value. float MinValue { get; set; } Property Value float Value Current slider value in real units. float Value { get; set; } Property Value float"
  },
  "api/Fallencake.UI.ISpinner.html": {
    "href": "api/Fallencake.UI.ISpinner.html",
    "title": "Interface ISpinner | ModularUIPack",
    "summary": "Interface ISpinner Namespace Fallencake.UI Assembly Fallencake.UI.dll Contract for spinner-like UI components that can start and stop animated rotation. public interface ISpinner Methods Spin() Starts or continues the spinning animation. void Spin() Stop() Stops the spinning animation. void Stop()"
  },
  "api/Fallencake.UI.ISpinnerHandler.html": {
    "href": "api/Fallencake.UI.ISpinnerHandler.html",
    "title": "Interface ISpinnerHandler | ModularUIPack",
    "summary": "Interface ISpinnerHandler Namespace Fallencake.UI Assembly Fallencake.UI.dll Strategy interface that drives spinning behavior for ModularSpinner. Provides geometry, timing and element control APIs used by concrete handlers. public interface ISpinnerHandler Properties elementStartPosition Initial layout policy for elements. ElementStartPosition elementStartPosition { get; } Property Value ElementStartPosition elementsAmount Number of managed spinning elements. int elementsAmount { get; } Property Value int facingDirection Facing direction used when isLookForward is true. FacingDirection facingDirection { get; } Property Value FacingDirection isClockwise Whether rotation is clockwise. bool isClockwise { get; } Property Value bool isContinuousSpin Whether continuous spinning mode is enabled. bool isContinuousSpin { get; } Property Value bool isLookForward Whether elements rotate to face forward along their path. bool isLookForward { get; } Property Value bool isSimpleDelay Whether a simplified delay model is active. bool isSimpleDelay { get; } Property Value bool movementCurve Easing curve for element movement. AnimationCurve movementCurve { get; } Property Value AnimationCurve rotationDelay Delay between starts of subsequent elements. float rotationDelay { get; } Property Value float rotationTime Duration (seconds) for one full rotation. float rotationTime { get; } Property Value float size Computed layout size used for positioning. Vector2 size { get; } Property Value Vector2 startAngle Base rotation angle in degrees. int startAngle { get; } Property Value int Methods CalculateAreaSize() Calculates layout size used for positioning. void CalculateAreaSize() GetFirstCompletedElementSpeed() Returns rotation speed of the first element that completed rotation. float GetFirstCompletedElementSpeed() Returns float GetSpinner(int) Gets the wrapper spinner for an element by index. UISpinner GetSpinner(int index) Parameters index int Element index. Returns UISpinner HasFirstElementCompletedRotation() Checks whether any element has completed its first rotation. bool HasFirstElementCompletedRotation() Returns bool InitSpinners() Creates/initializes UISpinner wrappers for each element. void InitSpinners() Initialize() Initializes internal state and places elements. void Initialize() MoveTangently(int) Moves an element along the tangent of the path (per frame update). void MoveTangently(int index) Parameters index int SetElementsStartPosition() Places elements to their start positions. void SetElementsStartPosition() Spin() Starts a spin sequence according to handler policy. void Spin() StartSynchronizedContinuousSpin(float) Starts continuous spinning for all elements with the provided synchronized speed. void StartSynchronizedContinuousSpin(float synchronizedSpeed) Parameters synchronizedSpeed float Speed value to apply to all elements. Stop() Stops the current spin. void Stop() StopImmediate() Stops immediately without transitions. void StopImmediate()"
  },
  "api/Fallencake.UI.ITargetGraphic.html": {
    "href": "api/Fallencake.UI.ITargetGraphic.html",
    "title": "Interface ITargetGraphic | ModularUIPack",
    "summary": "Interface ITargetGraphic Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface ITargetGraphic Properties Image Image Image { get; set; } Property Value Image TargetGraphic Graphic TargetGraphic { get; set; } Property Value Graphic Events OnSetProperty event Action OnSetProperty Event Type Action"
  },
  "api/Fallencake.UI.ITargetableTween-2.html": {
    "href": "api/Fallencake.UI.ITargetableTween-2.html",
    "title": "Interface ITargetableTween<TTarget, TParameter> | ModularUIPack",
    "summary": "Interface ITargetableTween<TTarget, TParameter> Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface ITargetableTween<TTarget, TParameter> : ITween Type Parameters TTarget TParameter Inherited Members ITween.IsTweened ITween.Play(MonoBehaviour, bool) ITween.Reset(bool) ITween.Duration ITween.Delay Properties Ease AnimationCurve Ease { get; } Property Value AnimationCurve EndValue TParameter EndValue { get; } Property Value TParameter StartValue TParameter StartValue { get; } Property Value TParameter Target TTarget Target { get; } Property Value TTarget"
  },
  "api/Fallencake.UI.ITemplatesProvider.html": {
    "href": "api/Fallencake.UI.ITemplatesProvider.html",
    "title": "Interface ITemplatesProvider | ModularUIPack",
    "summary": "Interface ITemplatesProvider Namespace Fallencake.UI Assembly Fallencake.UI.dll Interface for the templates provider, which contains a list of available templates public interface ITemplatesProvider Properties Templates List<ScriptableObject> Templates { get; } Property Value List<ScriptableObject> Methods GetTemplate(string) IDataTemplate GetTemplate(string templateName) Parameters templateName string Returns IDataTemplate"
  },
  "api/Fallencake.UI.ITween.html": {
    "href": "api/Fallencake.UI.ITween.html",
    "title": "Interface ITween | ModularUIPack",
    "summary": "Interface ITween Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface ITween Properties Delay float Delay { get; set; } Property Value float Duration float Duration { get; set; } Property Value float IsTweened bool IsTweened { get; } Property Value bool Methods Play(MonoBehaviour, bool) void Play(MonoBehaviour coroutineHolder, bool isForward = true) Parameters coroutineHolder MonoBehaviour isForward bool Reset(bool) void Reset(bool isResetTarget) Parameters isResetTarget bool"
  },
  "api/Fallencake.UI.ITweenAnimator.html": {
    "href": "api/Fallencake.UI.ITweenAnimator.html",
    "title": "Interface ITweenAnimator | ModularUIPack",
    "summary": "Interface ITweenAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface ITweenAnimator Properties Tweens List<ITween> Tweens { get; set; } Property Value List<ITween> Methods Play(Action) void Play(Action onComplete) Parameters onComplete Action Stop() void Stop()"
  },
  "api/Fallencake.UI.ITweenBasicParameters.html": {
    "href": "api/Fallencake.UI.ITweenBasicParameters.html",
    "title": "Interface ITweenBasicParameters | ModularUIPack",
    "summary": "Interface ITweenBasicParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface ITweenBasicParameters Properties Coroutine Coroutine Coroutine { get; set; } Property Value Coroutine Type TweenType Type { get; } Property Value TweenType"
  },
  "api/Fallencake.UI.ITweenParameters.html": {
    "href": "api/Fallencake.UI.ITweenParameters.html",
    "title": "Interface ITweenParameters | ModularUIPack",
    "summary": "Interface ITweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface ITweenParameters : ITweenBasicParameters Inherited Members ITweenBasicParameters.Type ITweenBasicParameters.Coroutine Properties Duration float Duration { get; } Property Value float Ease AnimationCurve Ease { get; } Property Value AnimationCurve"
  },
  "api/Fallencake.UI.ITweenParametersData-2.html": {
    "href": "api/Fallencake.UI.ITweenParametersData-2.html",
    "title": "Interface ITweenParametersData<TTarget, TValue> | ModularUIPack",
    "summary": "Interface ITweenParametersData<TTarget, TValue> Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface ITweenParametersData<TTarget, TValue> : ITweenTargetData<TTarget> Type Parameters TTarget TValue Inherited Members ITweenTargetData<TTarget>.Target Properties Value TValue Value { get; } Property Value TValue"
  },
  "api/Fallencake.UI.ITweenTargetData-1.html": {
    "href": "api/Fallencake.UI.ITweenTargetData-1.html",
    "title": "Interface ITweenTargetData<TTarget> | ModularUIPack",
    "summary": "Interface ITweenTargetData<TTarget> Namespace Fallencake.UI Assembly Fallencake.UI.dll public interface ITweenTargetData<TTarget> Type Parameters TTarget Properties Target TTarget Target { get; } Property Value TTarget"
  },
  "api/Fallencake.UI.ImageCollection.html": {
    "href": "api/Fallencake.UI.ImageCollection.html",
    "title": "Class ImageCollection | ModularUIPack",
    "summary": "Class ImageCollection Namespace Fallencake.UI Assembly Fallencake.UI.dll public class ImageCollection : Image, IAssetCollection<Sprite> Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Graphic MaskableGraphic Image ImageCollection Implements IAssetCollection<Sprite> Extension Methods TweenExtensions.FadeGraphic(Graphic, float, float, float, AnimationCurve, float, Action, Action) TweenExtensions.FadeGraphic(Graphic, float, float, AnimationCurve, float, Action) TweenExtensions.FadeGraphic(Graphic, float, float, AnimationCurve, float, Action, Action) TweenExtensions.TintGraphic(Graphic, Color, float, AnimationCurve, float, Action) TweenExtensions.TintGraphic(Graphic, Color, float, AnimationCurve, float, Action, Action) TweenExtensions.FadeImage(Image, float, float, AnimationCurve, float, Action) Properties AssetsNumber public int AssetsNumber { get; } Property Value int SelectedAssetIndex public int SelectedAssetIndex { get; set; } Property Value int Methods SelectAsset(int, bool, float) public void SelectAsset(int index, bool isInstantly = false, float selectionDuration = 1) Parameters index int isInstantly bool selectionDuration float SelectAsset(float) public void SelectAsset(float index) Parameters index float Events OnAssetSelected public event Action<Sprite> OnAssetSelected Event Type Action<Sprite>"
  },
  "api/Fallencake.UI.ImageCollectionData.html": {
    "href": "api/Fallencake.UI.ImageCollectionData.html",
    "title": "Class ImageCollectionData | ModularUIPack",
    "summary": "Class ImageCollectionData Namespace Fallencake.UI Assembly Fallencake.UI.dll [CreateAssetMenu(fileName = \"New ImageCollectionData\", menuName = \"Modular UI/Data Collections/ImageCollectionData\", order = 2)] public class ImageCollectionData : ScriptableObject Inheritance object Object ScriptableObject ImageCollectionData Fields Sprites public List<Sprite> Sprites Field Value List<Sprite>"
  },
  "api/Fallencake.UI.ImageIndicator.html": {
    "href": "api/Fallencake.UI.ImageIndicator.html",
    "title": "Class ImageIndicator | ModularUIPack",
    "summary": "Class ImageIndicator Namespace Fallencake.UI Assembly Fallencake.UI.dll Represents a single indicator element with activated/deactivated states, background visibility and selection events for highlighting current step. [Serializable] public class ImageIndicator : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ImageIndicator Properties ActivatedImage Foreground image used when indicator is active. public Image ActivatedImage { get; set; } Property Value Image CurrentAlpha Current alpha of the activated image. public float CurrentAlpha { get; } Property Value float DeactivatedImage Background image used when indicator is inactive. public Image DeactivatedImage { get; set; } Property Value Image IsActive Whether the indicator is currently active. public bool IsActive { get; } Property Value bool OnActivated Invoked when indicator becomes active. public UnityEvent OnActivated { get; } Property Value UnityEvent OnDeactivated Invoked when indicator becomes inactive. public UnityEvent OnDeactivated { get; } Property Value UnityEvent OnDeselected Invoked when indicator selection is cleared. public UnityEvent OnDeselected { get; } Property Value UnityEvent OnSelected Invoked when indicator is selected/highlighted. public UnityEvent OnSelected { get; } Property Value UnityEvent Methods SetActive(bool) Sets active state and updates visuals; invokes activation events on change. public void SetActive(bool active) Parameters active bool SetAlpha(float) Sets alpha for the activated image. public void SetAlpha(float alpha) Parameters alpha float SetBackgroundVisible(bool) Sets the visibility of the deactivated (background) image. public void SetBackgroundVisible(bool visible) Parameters visible bool SetColor(Color) Sets color (with preserved current alpha) for the activated image. public void SetColor(Color color) Parameters color Color SetColorWithAlpha(Color, float) Sets color with specific alpha value. public void SetColorWithAlpha(Color color, float alpha) Parameters color Color alpha float SetState(bool, float) Sets both the active state and alpha value at once. public void SetState(bool active, float alpha = 1) Parameters active bool alpha float TriggerDeselected() Triggers the OnDeselected event for this indicator. public void TriggerDeselected() TriggerSelected() Triggers the OnSelected event for this indicator. public void TriggerSelected()"
  },
  "api/Fallencake.UI.InputFieldAnimator.html": {
    "href": "api/Fallencake.UI.InputFieldAnimator.html",
    "title": "Class InputFieldAnimator | ModularUIPack",
    "summary": "Class InputFieldAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll Base animator for input field visual feedback. Handles select/deselect animations using tweened coroutines and exposes events for selection state changes. public abstract class InputFieldAnimator : MonoBehaviour, IInputFieldAnimator Inheritance object Object Component Behaviour MonoBehaviour InputFieldAnimator Implements IInputFieldAnimator Derived FadeSelectorInputFieldAnimator FillSelectorInputFieldAnimator LineSelectorInputFieldAnimator Fields OnDeselected Invoked after Deselect() finishes scheduling animation. public UnityEvent OnDeselected Field Value UnityEvent OnSelected Invoked after Select() finishes scheduling animation. public UnityEvent OnSelected Field Value UnityEvent _deselectDuration [SerializeField] [Range(0, 10)] protected float _deselectDuration Field Value float _deselectEase [SerializeField] protected AnimationCurve _deselectEase Field Value AnimationCurve _getDefaultOnInit [Header(\"OPTIONS\")] [SerializeField] protected bool _getDefaultOnInit Field Value bool _isInitialized protected bool _isInitialized Field Value bool _selectDuration [SerializeField] [Range(0, 10)] protected float _selectDuration Field Value float _selectEase [SerializeField] protected AnimationCurve _selectEase Field Value AnimationCurve _tweenCoroutine protected Coroutine _tweenCoroutine Field Value Coroutine Properties IsInitialized Indicates whether animator finished initial setup. public bool IsInitialized { get; } Property Value bool Methods Awake() Initializes the animator. protected virtual void Awake() Deselect() Plays deselect animation using configured ease and duration. public void Deselect() Init() Implement component discovery and default-state caching. protected abstract void Init() InstantDeselect() Applies deselected visuals instantly without tweening. public void InstantDeselect() InstantSelect() Applies selected visuals instantly without tweening. public void InstantSelect() InstantUpdate(bool) Updates visuals immediately for selected/deselected state. protected abstract void InstantUpdate(bool isSelected) Parameters isSelected bool Whether to render selected state. OnDisable() protected virtual void OnDisable() PlayTweenAnimation(bool, float, AnimationCurve) Plays a tweened animation for selected/deselected state. protected abstract IEnumerator PlayTweenAnimation(bool isSelected, float duration, AnimationCurve ease) Parameters isSelected bool Target selection state. duration float Tween duration (seconds). ease AnimationCurve Easing curve. Returns IEnumerator Select() Plays select animation using configured ease and duration. public void Select()"
  },
  "api/Fallencake.UI.JampingSpinner.html": {
    "href": "api/Fallencake.UI.JampingSpinner.html",
    "title": "Class JampingSpinner | ModularUIPack",
    "summary": "Class JampingSpinner Namespace Fallencake.UI Assembly Fallencake.UI.dll Stylized jumping spinner that combines orbital movement with squash-and-stretch and shadow tweens. public class JampingSpinner : UIBehaviour, ISpinner Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour JampingSpinner Implements ISpinner Methods Initialize() Initializes spinner geometry, assigns sprites/colors, and sets up all tweens. public void Initialize() OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). protected override void OnRectTransformDimensionsChange() Spin() Starts or continues the spinning animation. public void Spin() Start() protected override void Start() Stop() Stops the spinning animation. public void Stop()"
  },
  "api/Fallencake.UI.JampingSpinnerParameters.html": {
    "href": "api/Fallencake.UI.JampingSpinnerParameters.html",
    "title": "Class JampingSpinnerParameters | ModularUIPack",
    "summary": "Class JampingSpinnerParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll Configuration bundle for a jumping spinner element, its shadow and supporting tweeners. [Serializable] public class JampingSpinnerParameters Inheritance object JampingSpinnerParameters Constructors JampingSpinnerParameters() public JampingSpinnerParameters() Fields apogeeTweener Tweener driving apogee scaling/position. public ModularAnimator apogeeTweener Field Value ModularAnimator deformationFactor Intensity of squash-and-stretch deformation. [Range(0, 2)] public float deformationFactor Field Value float elementColor Base color of the element. public Color elementColor Field Value Color elementImage Image component for the element. public Image elementImage Field Value Image elementSize Size of the element in pixels. public Vector2 elementSize Field Value Vector2 elementSprite Sprite for the jumping element. [Header(\"OPTIONS\")] public Sprite elementSprite Field Value Sprite elementTransform Optional direct reference to element transform; falls back to elementImage. public RectTransform elementTransform Field Value RectTransform landingTweener Tweener driving landing scaling/position. public ModularAnimator landingTweener Field Value ModularAnimator shadowDownTweener Tweener for shadow collapse/fade down. public ModularAnimator shadowDownTweener Field Value ModularAnimator shadowFadedColor Faded color of the shadow at apogee. public Color shadowFadedColor Field Value Color shadowFadedScale Shadow scale when faded. public Vector3 shadowFadedScale Field Value Vector3 shadowImage Image component for the shadow. public Image shadowImage Field Value Image shadowNormalColor Base color of the shadow. public Color shadowNormalColor Field Value Color shadowSprite Sprite for the ground shadow. public Sprite shadowSprite Field Value Sprite shadowUpTweener Tweener for shadow expansion/fade up. public ModularAnimator shadowUpTweener Field Value ModularAnimator spinner Spinner that moves the element along the path. [Header(\"COMPONENTS\")] public ModularSpinner spinner Field Value ModularSpinner"
  },
  "api/Fallencake.UI.LineSelectorInputFieldAnimator.html": {
    "href": "api/Fallencake.UI.LineSelectorInputFieldAnimator.html",
    "title": "Class LineSelectorInputFieldAnimator | ModularUIPack",
    "summary": "Class LineSelectorInputFieldAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll Animator that scales a selector line and adjusts placeholder pivot/scale to indicate focus. public class LineSelectorInputFieldAnimator : InputFieldAnimator, IInputFieldAnimator Inheritance object Object Component Behaviour MonoBehaviour InputFieldAnimator LineSelectorInputFieldAnimator Implements IInputFieldAnimator Inherited Members InputFieldAnimator._getDefaultOnInit InputFieldAnimator._selectEase InputFieldAnimator._selectDuration InputFieldAnimator._deselectEase InputFieldAnimator._deselectDuration InputFieldAnimator._tweenCoroutine InputFieldAnimator._isInitialized InputFieldAnimator.IsInitialized InputFieldAnimator.OnSelected InputFieldAnimator.OnDeselected InputFieldAnimator.Awake() InputFieldAnimator.OnDisable() InputFieldAnimator.Select() InputFieldAnimator.Deselect() InputFieldAnimator.InstantSelect() InputFieldAnimator.InstantDeselect() Methods Init() Implement component discovery and default-state caching. protected override void Init() InstantUpdate(bool) Updates visuals immediately for selected/deselected state. protected override void InstantUpdate(bool isSelected) Parameters isSelected bool Whether to render selected state. PlayTweenAnimation(bool, float, AnimationCurve) Plays a tweened animation for selected/deselected state. protected override IEnumerator PlayTweenAnimation(bool isSelected, float duration, AnimationCurve ease) Parameters isSelected bool Target selection state. duration float Tween duration (seconds). ease AnimationCurve Easing curve. Returns IEnumerator"
  },
  "api/Fallencake.UI.LinearSlider.FillType.html": {
    "href": "api/Fallencake.UI.LinearSlider.FillType.html",
    "title": "Enum LinearSlider.FillType | ModularUIPack",
    "summary": "Enum LinearSlider.FillType Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum LinearSlider.FillType Fields Filled = 0 Sliced = 1"
  },
  "api/Fallencake.UI.LinearSlider.SliderDirection.html": {
    "href": "api/Fallencake.UI.LinearSlider.SliderDirection.html",
    "title": "Enum LinearSlider.SliderDirection | ModularUIPack",
    "summary": "Enum LinearSlider.SliderDirection Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum LinearSlider.SliderDirection Fields BottomToTop = 2 LeftToRight = 0 RightToLeft = 1 TopToBottom = 3"
  },
  "api/Fallencake.UI.LinearSlider.html": {
    "href": "api/Fallencake.UI.LinearSlider.html",
    "title": "Class LinearSlider | ModularUIPack",
    "summary": "Class LinearSlider Namespace Fallencake.UI Assembly Fallencake.UI.dll Linear slider implementation supporting horizontal/vertical directions and two fill modes (Filled or Sliced). public class LinearSlider : Slider, IMultiSelectable, ISlider Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable MultipleGraphicsSelectable Slider LinearSlider Implements IMultiSelectable ISlider Inherited Members Slider._fillImage Slider._handle Slider._valueTextLabel Slider._inputField Slider._minValue Slider.MinValue Slider._maxValue Slider.MaxValue Slider._value Slider.Value Slider._decimals Slider.Decimals Slider._isPercent Slider.IsPercent Slider._isAutoSizeEnabled Slider.IsAutoSizeEnabled Slider._isValueTextEnabled Slider.IsValueTextEnabled Slider._isInputFieldEnabled Slider.IsInputFieldEnabled Slider._isWholeNumbers Slider.IsWholeNumbers Slider._axis Slider.Axis Slider._reverseValue Slider.ReverseValue Slider._stepSize Slider._isSavingEnabled Slider.IsSavingEnabled Slider._valueSaveKey Slider.onValueChanged Slider.onPointerEnter Slider.onPointerExit Slider.DisplayedValue Slider.ValueText Slider._hitRectTransform Slider._currentValueOnPointerDown Slider._displayedValuePrecision Slider._isLoadedFromSave Slider._valueChanged Slider.k_savingTag Slider.s_HandleWarning Slider.s_FillImageWarning Slider.s_ValueTextWarning Slider._isPointerDown Slider._isPointerUp Slider.NormalizedValue Slider.OnRectTransformDimensionsChange() Slider.Start() Slider.OnEnable() Slider.OnDisable() Slider.Initialize() Slider.UpdateInputFieldListener() Slider.FindSelectableOnLeft() Slider.FindSelectableOnRight() Slider.FindSelectableOnUp() Slider.FindSelectableOnDown() Slider.OnPointerEnter(PointerEventData) Slider.OnPointerExit(PointerEventData) Slider.LoadState() Slider.SaveState() Slider.SetValue(float, bool) Slider.ForceUpdateVisuals() Slider.UpdateVisuals() Slider.SetValueText() Slider.SetActiveValueTextLabel(bool) Slider.SetInputFieldValue(string) Slider.SetActiveInputField(bool) Slider.UpdateInputField() Slider.UpdateTextAutoSize() Slider.HasValueChanged() MultipleGraphicsSelectable._colorableGraphics MultipleGraphicsSelectable._swappableGraphics MultipleGraphicsSelectable._swappableCanvasGroupe MultipleGraphicsSelectable.ColorableGraphics MultipleGraphicsSelectable.SwappableGraphics MultipleGraphicsSelectable.SwappableCanvasGroupe MultipleGraphicsSelectable._transition MultipleGraphicsSelectable.SelectableTransition MultipleGraphicsSelectable._tweenCoroutine MultipleGraphicsSelectable.OnDestroy() MultipleGraphicsSelectable.DoStateTransition(Selectable.SelectionState, bool) MultipleGraphicsSelectable.AddNewColorableGraphics() MultipleGraphicsSelectable.AddNewSwappableSprite() MultipleGraphicsSelectable.AddColorableGraphic(Graphic, SelectionColorBlock) MultipleGraphicsSelectable.AddColorableGraphic(Graphic, Color, Color, Color, Color, Color, float, float) MultipleGraphicsSelectable.AddSwappableSprite(Graphic, SelectionSpriteState) MultipleGraphicsSelectable.AddSwappableSprite(Image, Sprite, Sprite, Sprite, Sprite) MultipleGraphicsSelectable.SetFadingCanvasGroups(CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, float) Properties Direction Logical direction for the slider movement and fill. public LinearSlider.SliderDirection Direction { get; set; } Property Value LinearSlider.SliderDirection SliderFillType Current visual fill type. Changing resets anchors and refreshes visuals. public LinearSlider.FillType SliderFillType { get; set; } Property Value LinearSlider.FillType Methods GraphicUpdateComplete() Callback sent when this ICanvasElement has completed Graphic rebuild. public virtual void GraphicUpdateComplete() HandleSliderMouseInput(PointerEventData, bool) protected override void HandleSliderMouseInput(PointerEventData eventData, bool isValueClamped) Parameters eventData PointerEventData isValueClamped bool LayoutComplete() Callback sent when this ICanvasElement has completed layout. public virtual void LayoutComplete() Rebuild(CanvasUpdate) Rebuild the element for the given stage. public virtual void Rebuild(CanvasUpdate executing) Parameters executing CanvasUpdate The current CanvasUpdate stage being rebuild. ResetFillImageAnchor() Resets the anchors of the fill image to stretch (for filled mode). public void ResetFillImageAnchor() SetDirection(SliderDirection) Applies a new logical direction and refreshes visuals/anchors accordingly. public void SetDirection(LinearSlider.SliderDirection direction) Parameters direction LinearSlider.SliderDirection SetFillImage() protected override void SetFillImage() SetHandlePosition() protected override void SetHandlePosition() SetOrigin() protected override void SetOrigin() Update() protected virtual void Update()"
  },
  "api/Fallencake.UI.LoopType.html": {
    "href": "api/Fallencake.UI.LoopType.html",
    "title": "Enum LoopType | ModularUIPack",
    "summary": "Enum LoopType Namespace Fallencake.UI Assembly Fallencake.UI.dll Looping behavior for tween playback. public enum LoopType Fields None = 0 Play once. PingPong = 2 Alternate forward and backward directions. Simple = 1 Repeat from the start after completion."
  },
  "api/Fallencake.UI.ModularAnimator.html": {
    "href": "api/Fallencake.UI.ModularAnimator.html",
    "title": "Class ModularAnimator | ModularUIPack",
    "summary": "Class ModularAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll General-purpose animator that plays a list of tweens with optional loop policies and events. public class ModularAnimator : MonoBehaviour, ITweenAnimator Inheritance object Object Component Behaviour MonoBehaviour ModularAnimator Implements ITweenAnimator Fields OnForwardCompleted Event that is invoked in the PingPong mode when all tweens have finished playing in the forward direction. public UnityEvent OnForwardCompleted Field Value UnityEvent OnTweenCompleted Event that is triggered when all tweens have completed their animation. public UnityEvent OnTweenCompleted Field Value UnityEvent Properties IsTweened Returns true if all tweens in the Fallencake.UI.ModularAnimator._tweens list are currently tweening. public bool IsTweened { get; } Property Value bool LoopCount Number of times to repeat the animation sequence when Fallencake.UI.ModularAnimator._loopType is not None. For Simple a single cycle is one forward play. For PingPong a single cycle is a complete forward-and-backward play. public int LoopCount { get; set; } Property Value int Tweens The list of tweens animated by this animator. public List<ITween> Tweens { get; set; } Property Value List<ITween> Methods Init(List<ITween>, LoopType, bool) Overload that assumes infinite loop count when applicable. public void Init(List<ITween> tweens, LoopType loopType = LoopType.None, bool isPlayOnEnable = false) Parameters tweens List<ITween> loopType LoopType isPlayOnEnable bool Init(List<ITween>, LoopType, int, bool) Initializes the animator with the specified tweens, loop type, and play on enable flag. public void Init(List<ITween> tweens, LoopType loopType = LoopType.None, int loopCount = -1, bool isPlayOnEnable = false) Parameters tweens List<ITween> The list of tweens to animate. loopType LoopType The type of loop to use for the tweens. loopCount int isPlayOnEnable bool Whether to automatically play the tweens when the object is enabled. OnDisable() public void OnDisable() OnEnable() public void OnEnable() Play() Convenience overload without completion callback. public void Play() Play(Action) Plays all tweens and handles loop bookkeeping. public void Play(Action onComplete) Parameters onComplete Action Stop() Stops and resets tweens by default. public void Stop() Stop(bool) Stops all coroutines and resets tweens optionally. public void Stop(bool isReset = true) Parameters isReset bool"
  },
  "api/Fallencake.UI.ModularContextMenu.html": {
    "href": "api/Fallencake.UI.ModularContextMenu.html",
    "title": "Class ModularContextMenu | ModularUIPack",
    "summary": "Class ModularContextMenu Namespace Fallencake.UI Assembly Fallencake.UI.dll A modular popup menu appears upon user interaction, such as a right-click mouse operation. [AddComponentMenu(\"Modular UI/Context Menu\")] public class ModularContextMenu : ContextMenuBase Inheritance object Object Component Behaviour MonoBehaviour ContextMenuBase ModularContextMenu Inherited Members ContextMenuBase._popupAnimator ContextMenuBase._itemsContainer ContextMenuBase._content ContextMenuBase._contentRectTransform ContextMenuBase._isActive ContextMenuBase.isActive ContextMenuBase.InitContent() ContextMenuBase.InitItemsContainer() ContextMenuBase.InitPopupAnimator() ContextMenuBase.ClearAllItems() ContextMenuBase.Open() ContextMenuBase.Close() ContextMenuBase.CloseInstantly() ContextMenuBase.CloseOnClick() ContextMenuBase.UpdateItemsWithDelay(float) ContextMenuBase.GetMenuWidth() ContextMenuBase.SetProperty<T>(ref T, T, Action) Fields _offset [SerializeField] protected RectOffset _offset Field Value RectOffset _subMenuOffset [SerializeField] protected Vector2 _subMenuOffset Field Value Vector2 Properties backgroundColor Background overlay color used when interactive background is enabled. public Color backgroundColor { get; set; } Property Value Color isCloseOnClick If true, clicking on the interactive background closes the menu. public bool isCloseOnClick { get; set; } Property Value bool offset The offset added around the content element to the point at which the menu opens. public RectOffset offset { get; set; } Property Value RectOffset panelPosition Current quadrant of the menu relative to the cursor/area bounds. public PanelPosition panelPosition { get; } Property Value PanelPosition subMenuOffset Relative offset applied when spawning a submenu next to the parent item. public Vector2 subMenuOffset { get; } Property Value Vector2 Methods AddButton(string, UnityAction, Sprite, bool) Adds a clickable button item with optional icon. public ContextMenuItem AddButton(string name, UnityAction onClick, Sprite icon = null, bool rebuild = true) Parameters name string Display text. onClick UnityAction Click callback. icon Sprite Optional icon. rebuild bool If true, calls UpdateContent(). Returns ContextMenuItem AddItem(ContextMenuItem, bool) Adds a preconfigured item and optionally rebuilds the menu. public void AddItem(ContextMenuItem item, bool rebuild = true) Parameters item ContextMenuItem Item to add. rebuild bool If true, calls UpdateContent(). AddNewItem() Adds a new empty item to the menu. Prefer AddItem/AddButton/AddSeparator. [Obsolete(\"Use AddItem(ContextMenuItem) / AddButton / AddSeparator\")] public void AddNewItem() AddSeparator(bool) Adds a visual separator item. public ContextMenuItem AddSeparator(bool rebuild = true) Parameters rebuild bool If true, calls UpdateContent(). Returns ContextMenuItem AddSubMenu(string, List<ContextSubMenuItem>, Sprite, bool) Adds a submenu with provided items. public ContextMenuItem AddSubMenu(string name, List<ContextSubMenuItem> items, Sprite icon = null, bool rebuild = true) Parameters name string Submenu header text. items List<ContextSubMenuItem> Child submenu items. icon Sprite Optional icon. rebuild bool If true, calls UpdateContent(). Returns ContextMenuItem ClearItems(bool) Clears all menu items. public void ClearItems(bool rebuild = true) Parameters rebuild bool If true, calls UpdateContent(). OpenAt(Vector2) Shows the menu at a specific screen position. public void OpenAt(Vector2 screenPosition) Parameters screenPosition Vector2 Position in screen pixels. OpenAt(Vector2, bool) Shows the menu at a specific screen position with optional content rebuild. When isUpdateContent is true, items are rebuilt before showing. public void OpenAt(Vector2 screenPosition, bool isUpdateContent) Parameters screenPosition Vector2 Position in screen pixels. isUpdateContent bool If true, calls UpdateContent() before showing. OpenAtCursor() Shows the menu at the current cursor position. public void OpenAtCursor() SetItems(List<ContextMenuItem>, bool) Sets the entire items list and optionally rebuilds the menu. public void SetItems(List<ContextMenuItem> items, bool rebuild = true) Parameters items List<ContextMenuItem> New list of items to display. rebuild bool If true, calls UpdateContent(). UpdateContent() Rebuilds menu items based on the current items list and repositions the menu. public void UpdateContent() UpdatePositionFromCursor() Updates internal cursor position (based on current input system) and repositions the menu. public void UpdatePositionFromCursor()"
  },
  "api/Fallencake.UI.ModularInputField.html": {
    "href": "api/Fallencake.UI.ModularInputField.html",
    "title": "Class ModularInputField | ModularUIPack",
    "summary": "Class ModularInputField Namespace Fallencake.UI Assembly Fallencake.UI.dll Modular wrapper over TMPro.TMP_InputField that adds animation hooks, audio feedback via IInputFieldAudioProvider and convenient submit handling. [RequireComponent(typeof(TMP_InputField))] public class ModularInputField : MonoBehaviour, IInputFieldAudioProvider, IAudioProvider Inheritance object Object Component Behaviour MonoBehaviour ModularInputField Implements IInputFieldAudioProvider IAudioProvider Fields OnSubmitEvent public UnityEvent OnSubmitEvent Field Value UnityEvent Properties AudioSource AudioSource used to play sounds. public AudioSource AudioSource { get; set; } Property Value AudioSource Component Owning component used by handlers for context and coroutines. public MonoBehaviour Component { get; } Property Value MonoBehaviour DeselectSound Sound played on deselect. public AudioData DeselectSound { get; } Property Value AudioData EnableSounds Enables/disables sound playback for this component. public bool EnableSounds { get; set; } Property Value bool EndEditSound Sound for end-edit/submit. public AudioData EndEditSound { get; } Property Value AudioData PressSound Sound played on press/submit. public AudioData PressSound { get; } Property Value AudioData SelectSound Sound played on select/hover. public AudioData SelectSound { get; } Property Value AudioData Selectable UI selectable to bind event triggers to. public Selectable Selectable { get; } Property Value Selectable TypeSound Sound for character typing. public AudioData TypeSound { get; } Property Value AudioData UseDeselectSound Enables deselect sound playback. public bool UseDeselectSound { get; set; } Property Value bool UsePressSound Enables press sound playback. public bool UsePressSound { get; set; } Property Value bool UseSelectSound Enables select sound playback. public bool UseSelectSound { get; set; } Property Value bool Volume Per-component volume multiplier. public float Volume { get; set; } Property Value float Methods Deselect() Triggers deselect animation if field is empty (placeholder visible). public void Deselect() Dispose() Disposes internal audio handler and releases resources. public void Dispose() OnDeselect(BaseEventData) Called by the EventSystem when a new object is being selected. public void OnDeselect(BaseEventData eventData) Parameters eventData BaseEventData OnPointerClick(PointerEventData) Use this callback to detect clicks. public void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData OnSelect(BaseEventData) public void OnSelect(BaseEventData eventData) Parameters eventData BaseEventData OnSubmit(BaseEventData) public void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData PlayDeselectSound() public void PlayDeselectSound() PlayPressSound() public void PlayPressSound() PlaySelectSound() public void PlaySelectSound() PlayTextInputSound() Plays a text input sound if enabled and clip is assigned. public void PlayTextInputSound() Select() Triggers select animation if field is empty (placeholder visible). public void Select() UpdateInteractable(bool) Updates interactivity for the input field and audio handler. public void UpdateInteractable(bool isInteractable) Parameters isInteractable bool Target interactable state. UpdateStateInstant() Waits for animator initialization and applies instant state to match current text. public IEnumerator UpdateStateInstant() Returns IEnumerator"
  },
  "api/Fallencake.UI.ModularModalWindow.ContentType.html": {
    "href": "api/Fallencake.UI.ModularModalWindow.ContentType.html",
    "title": "Enum ModularModalWindow.ContentType | ModularUIPack",
    "summary": "Enum ModularModalWindow.ContentType Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ModularModalWindow.ContentType Fields Custom = 0 Modular = 1"
  },
  "api/Fallencake.UI.ModularModalWindow.StateBehaviour.html": {
    "href": "api/Fallencake.UI.ModularModalWindow.StateBehaviour.html",
    "title": "Enum ModularModalWindow.StateBehaviour | ModularUIPack",
    "summary": "Enum ModularModalWindow.StateBehaviour Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ModularModalWindow.StateBehaviour Fields Destroy = 3 Disable = 2 Enable = 1 None = 0"
  },
  "api/Fallencake.UI.ModularModalWindow.html": {
    "href": "api/Fallencake.UI.ModularModalWindow.html",
    "title": "Class ModularModalWindow | ModularUIPack",
    "summary": "Class ModularModalWindow Namespace Fallencake.UI Assembly Fallencake.UI.dll Simple modal window with title, content, optional icon and confirm/cancel buttons. Supports animated show/hide via PopupTweenAnimator. [AddComponentMenu(\"Modular UI/Modal Window\")] public class ModularModalWindow : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ModularModalWindow Fields OnCancel public UnityEvent OnCancel Field Value UnityEvent OnConfirm public UnityEvent OnConfirm Field Value UnityEvent OnHide public UnityEvent OnHide Field Value UnityEvent OnShow public UnityEvent OnShow Field Value UnityEvent Properties ContentLabel Content text label. public TMP_Text ContentLabel { get; } Property Value TMP_Text Icon Icon image reference. public Image Icon { get; } Property Value Image IconSprite Default icon sprite. public Sprite IconSprite { get; } Property Value Sprite IsOn Whether the window is currently shown. public bool IsOn { get; } Property Value bool TitleLabel Title text label. public TMP_Text TitleLabel { get; } Property Value TMP_Text Type Content type used to render UI (custom or modular). public ModularModalWindow.ContentType Type { get; } Property Value ModularModalWindow.ContentType Methods Close() Closes the window with animation. public void Close() Open() Opens the window with animation. public void Open() UpdateUI() Updates labels, icons and button visibility based on current settings. public void UpdateUI()"
  },
  "api/Fallencake.UI.ModularPopupAnimator.html": {
    "href": "api/Fallencake.UI.ModularPopupAnimator.html",
    "title": "Class ModularPopupAnimator | ModularUIPack",
    "summary": "Class ModularPopupAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll Animator for show/hide popup sequences using a list of PopupTweenParameters. Ensures completion callbacks fire with the longest tween of each phase. public class ModularPopupAnimator : PopupTweenAnimator, IPopupTweenAnimator Inheritance object Object Component Behaviour MonoBehaviour TweenAnimatorBase PopupTweenAnimator ModularPopupAnimator Implements IPopupTweenAnimator Inherited Members PopupTweenAnimator.IsHiddenOnStart PopupTweenAnimator.OnShowStart PopupTweenAnimator.OnShowUpdate PopupTweenAnimator.OnShowEnd PopupTweenAnimator.OnHideStart PopupTweenAnimator.OnHideUpdate PopupTweenAnimator.OnHideEnd PopupTweenAnimator.IsShowAnimating PopupTweenAnimator.IsHideAnimating PopupTweenAnimator.InvokeShowStart() PopupTweenAnimator.InvokeShowUpdate() PopupTweenAnimator.InvokeShowEnd() PopupTweenAnimator.InvokeHideStart() PopupTweenAnimator.InvokeHideUpdate() PopupTweenAnimator.InvokeHideEnd() PopupTweenAnimator.Start() PopupTweenAnimator.OnEnable() TweenAnimatorBase.OnDisable() TweenAnimatorBase.PlayTween(TweenParameters, LoopType, bool, Action) TweenAnimatorBase.PlayPopupTween(PopupTweenParameters, bool, bool, bool, Action, Action) TweenAnimatorBase.OnTweenComplete(ITweenBasicParameters, bool, Action) TweenAnimatorBase.OnSimpleTweenComplete(ITweenBasicParameters, bool, Action) TweenAnimatorBase.OnSimpleTweenComplete(ITweenBasicParameters, bool, bool, Action) Properties TweenParameters Popup tweens that compose the show/hide animations. public List<PopupTweenParameters> TweenParameters { get; } Property Value List<PopupTweenParameters> Methods AddNewItem() Adds a new popup tween entry. public void AddNewItem() Hide() Overload without completion callback. public void Hide() Hide(Action) public override void Hide(Action onComplete = null) Parameters onComplete Action HideInstantly(Action) public override void HideInstantly(Action onComplete = null) Parameters onComplete Action InitializeTintParameters() Initializes tint parameters to capture current colors if UseCurrentColorAsStart is enabled protected override void InitializeTintParameters() RemoveItem(int) Removes a tween entry by index. public void RemoveItem(int index) Parameters index int Zero-based index of the tween to remove. Show() Overload without completion callback. public void Show() Show(Action) public override void Show(Action onComplete = null) Parameters onComplete Action"
  },
  "api/Fallencake.UI.ModularSpinner.html": {
    "href": "api/Fallencake.UI.ModularSpinner.html",
    "title": "Class ModularSpinner | ModularUIPack",
    "summary": "Class ModularSpinner Namespace Fallencake.UI Assembly Fallencake.UI.dll Configurable spinner control that delegates movement to a strategy handler and exposes a rich set of options for rotation geometry and behavior. public class ModularSpinner : UIBehaviour, ISpinner Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour ModularSpinner Implements ISpinner Remarks Uses a pluggable ISpinnerHandler implementation (e.g., Elliptical or Axial) selected by SpinningType to animate elements inside rotationArea. Provides utility methods to initialize from code and control play state via Spin()/Stop(). Properties ElementsOffset Spacing factor between elements along the path. public float ElementsOffset { get; set; } Property Value float elementStartPosition Starting positions of elements along the path. public ElementStartPosition elementStartPosition { get; } Property Value ElementStartPosition elements The transforms of individual spinning elements. public List<RectTransform> elements { get; } Property Value List<RectTransform> facingDirection Initial facing direction for elements. public FacingDirection facingDirection { get; } Property Value FacingDirection isClockwise Whether elements rotate clockwise. public bool isClockwise { get; } Property Value bool isContinuousSpin Whether to transition to synchronized continuous spin. public bool isContinuousSpin { get; } Property Value bool isLookForward Whether elements should face forward along the path. public bool isLookForward { get; } Property Value bool isSimpleDelay Whether a simple delay model is used. public bool isSimpleDelay { get; } Property Value bool movementCurve Movement easing curve for element rotation. public AnimationCurve movementCurve { get; } Property Value AnimationCurve rotationArea The area within which the animation is laid out. public RectTransform rotationArea { get; } Property Value RectTransform rotationDelay Delay between starting consecutive element rotations. public float rotationDelay { get; } Property Value float rotationSpeed Duration (in seconds) for a full rotation. public float rotationSpeed { get; } Property Value float startAngle Starting rotation angle in degrees. public int startAngle { get; } Property Value int Methods InitSpinners() Stops current animation, re-initializes internals and updates the play flag. public void InitSpinners() Initialize(List<RectTransform>, RectTransform, int, float, float, float, bool, bool, bool, bool, bool, bool, SpinningType, FacingDirection, AnimationCurve) Fully initializes the spinner with explicit elements, area, angles and behavior options. public void Initialize(List<RectTransform> elements, RectTransform rotationArea, int startAngle, float rotationTime, float elementsOffset, float rotationDelay, bool isPlayOnEnable, bool isSpinning, bool isClockwise, bool isLookForward, bool isSimpleDelay, bool isContinuousSpin, SpinningType spinningType, FacingDirection facingDirection, AnimationCurve movementCurve) Parameters elements List<RectTransform> Spinning elements. rotationArea RectTransform The bounds used to layout spinning. startAngle int Starting angle in degrees. rotationTime float Time for one full rotation, in seconds. elementsOffset float Distance factor between elements on the path. rotationDelay float Delay between element starts. isPlayOnEnable bool Whether to start spinning when enabled. isSpinning bool Initial spinning flag. isClockwise bool Rotate clockwise if true. isLookForward bool Face forward along path if true. isSimpleDelay bool Use simple delay model if true. isContinuousSpin bool Enable synchronized continuous spin after first loop. spinningType SpinningType Rotation geometry strategy. facingDirection FacingDirection Initial facing direction. movementCurve AnimationCurve Easing curve for movement. Initialize(int, float, float, float, bool, bool, bool, bool, bool, bool, SpinningType, FacingDirection, AnimationCurve) Initializes core parameters without changing elements collection and area. public void Initialize(int startAngle, float rotationTime, float elementsOffset, float rotationDelay, bool isPlayOnEnable = true, bool isSpinning = true, bool isClockwise = true, bool isLookForward = false, bool isSimpleDelay = false, bool isContinuousSpin = false, SpinningType spinningType = SpinningType.Elliptical, FacingDirection facingDirection = FacingDirection.Top, AnimationCurve movementCurve = null) Parameters startAngle int Starting angle in degrees. rotationTime float Time for one full rotation, in seconds. elementsOffset float Distance factor between elements on the path. rotationDelay float Delay between element starts. isPlayOnEnable bool Whether to play on enable. isSpinning bool Initial spinning flag. isClockwise bool Rotate clockwise if true. isLookForward bool Face forward along the path if true. isSimpleDelay bool Use simple delay model if true. isContinuousSpin bool Enable continuous spin synchronization after first loop. spinningType SpinningType Geometry strategy. facingDirection FacingDirection Initial facing direction. movementCurve AnimationCurve Easing curve; defaults to linear if null. OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). protected override void OnRectTransformDimensionsChange() Spin() Starts or continues the spinning animation. public void Spin() Stop() Stops the spinning animation. public void Stop()"
  },
  "api/Fallencake.UI.ModularToggle.html": {
    "href": "api/Fallencake.UI.ModularToggle.html",
    "title": "Class ModularToggle | ModularUIPack",
    "summary": "Class ModularToggle Namespace Fallencake.UI Assembly Fallencake.UI.dll A modular toggle consisting of several graphic elements, like changeable background and handle. [AddComponentMenu(\"Modular UI/Modular Toggle\", 32)] public class ModularToggle : ToggleBase, IMultiSelectable, ISaveable, IToggleAudioProvider, IAudioProvider Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable MultipleGraphicsSelectable ToggleBase ModularToggle Implements IMultiSelectable ISaveable IToggleAudioProvider IAudioProvider Inherited Members ToggleBase._isOn ToggleBase._invokeEventsOnStart ToggleBase._handle ToggleBase._group ToggleBase.IsOn ToggleBase._ease ToggleBase._switchDuration ToggleBase.IsSavingEnabled ToggleBase.SaveKey ToggleBase.OnValueChanged ToggleBase._isInitialized ToggleBase.OnEnable() ToggleBase.OnDisable() ToggleBase.Initialize() ToggleBase.LoadState() ToggleBase.SaveState() ToggleBase.Set(bool, bool, bool, bool) ToggleBase.AnimateSwitch() ToggleBase.SetOn() ToggleBase.SetOff() ToggleBase.SetIsOn(bool, bool, bool, bool) ToggleBase.SetIsOnWithoutNotify(bool, bool) ToggleBase.SetToggleGroup(ModularToggleGroup, bool) ToggleBase.SwitchView(bool, bool) ToggleBase.SwitchOn() ToggleBase.SwitchOff() ToggleBase.OnSubmit(BaseEventData) ToggleBase.EditorApplyIsOn() MultipleGraphicsSelectable._colorableGraphics MultipleGraphicsSelectable._swappableGraphics MultipleGraphicsSelectable._swappableCanvasGroupe MultipleGraphicsSelectable.ColorableGraphics MultipleGraphicsSelectable.SwappableGraphics MultipleGraphicsSelectable.SwappableCanvasGroupe MultipleGraphicsSelectable._transition MultipleGraphicsSelectable.SelectableTransition MultipleGraphicsSelectable._tweenCoroutine MultipleGraphicsSelectable.Start() MultipleGraphicsSelectable.DoStateTransition(Selectable.SelectionState, bool) MultipleGraphicsSelectable.AddNewColorableGraphics() MultipleGraphicsSelectable.AddNewSwappableSprite() MultipleGraphicsSelectable.AddColorableGraphic(Graphic, SelectionColorBlock) MultipleGraphicsSelectable.AddColorableGraphic(Graphic, Color, Color, Color, Color, Color, float, float) MultipleGraphicsSelectable.AddSwappableSprite(Graphic, SelectionSpriteState) MultipleGraphicsSelectable.AddSwappableSprite(Image, Sprite, Sprite, Sprite, Sprite) MultipleGraphicsSelectable.SetFadingCanvasGroups(CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, float) Properties AudioSource AudioSource used to play sounds. public AudioSource AudioSource { get; set; } Property Value AudioSource Component \"The MonoBehaviour component used to run coroutines or for attaching the Animator component.\" public MonoBehaviour Component { get; } Property Value MonoBehaviour DeselectSound Sound played on deselect. public AudioData DeselectSound { get; } Property Value AudioData EnableSounds Enables/disables sound playback for this component. public bool EnableSounds { get; set; } Property Value bool EnableSwitchText public bool EnableSwitchText { get; set; } Property Value bool IsColorableText public bool IsColorableText { get; } Property Value bool IsFadingView public bool IsFadingView { get; set; } Property Value bool IsInteractable Controls whether the toggle can be interacted with. When false, the toggle will not respond to user input. public bool IsInteractable { get; set; } Property Value bool IsStretchingHandle public bool IsStretchingHandle { get; } Property Value bool PressSound Sound played on press/submit. public AudioData PressSound { get; } Property Value AudioData SelectSound Sound played on select/hover. public AudioData SelectSound { get; } Property Value AudioData Selectable \"The selectable component of the toggle. Used to select the toggle and handle navigation events.\" public Selectable Selectable { get; } Property Value Selectable SoundSource public AudioSource SoundSource { get; set; } Property Value AudioSource SwitchDirection The axis along which the handle moves. Updates handle anchors/pivot to edge-centered positions. public SwitchDirection SwitchDirection { get; set; } Property Value SwitchDirection ToggleOffSound Sound when toggled off. public AudioData ToggleOffSound { get; } Property Value AudioData ToggleOnSound Sound when toggled on. public AudioData ToggleOnSound { get; } Property Value AudioData Volume Per-component volume multiplier. public float Volume { get; set; } Property Value float Methods ApplyHandleAnchorsForDirection() Applies anchors and pivot to the handle based on current SwitchDirection and IsOn. Keeps the handle centered on the corresponding edge. public void ApplyHandleAnchorsForDirection() Awake() Convenience function to get the Animator component on the GameObject. protected override void Awake() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { private Animator buttonAnimator; public Button button; void Start() { //Assigns the \"buttonAnimator\" with the button's animator. buttonAnimator = button.animator; } } InstantSwitch(bool) Instantly update visuals of handle/background. protected override void InstantSwitch(bool isOn) Parameters isOn bool OnDestroy() protected override void OnDestroy() OnPointerClick(PointerEventData) Handle pointer click to toggle value when interactable. public override void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData OnPointerEnter(PointerEventData) Evaluate current state and transition to appropriate state. New state could be pressed or hover depending on pressed state. public override void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerEnterHandler// required interface when using the OnPointerEnter method. { //Do this when the cursor enters the rect area of this selectable UI object. public void OnPointerEnter(PointerEventData eventData) { Debug.Log(\"The cursor entered the selectable UI element.\"); } } OnPointerExit(PointerEventData) Evaluate current state and transition to normal state. public override void OnPointerExit(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerExitHandler// required interface when using the OnPointerExit method. { //Do this when the cursor exits the rect area of this selectable UI object. public void OnPointerExit(PointerEventData eventData) { Debug.Log(\"The cursor exited the selectable UI element.\"); } } PlayOnDeselectSound() public void PlayOnDeselectSound() PlayOnHoveredSound() public void PlayOnHoveredSound() PlayOnPressedSound() public void PlayOnPressedSound() PlaySwitchTween(bool) Play animated transition between states. Override in derived controls. protected override void PlaySwitchTween(bool isOn) Parameters isOn bool SetActiveTextLabels(bool) public void SetActiveTextLabels(bool isActive) Parameters isActive bool"
  },
  "api/Fallencake.UI.ModularToggleGroup.html": {
    "href": "api/Fallencake.UI.ModularToggleGroup.html",
    "title": "Class ModularToggleGroup | ModularUIPack",
    "summary": "Class ModularToggleGroup Namespace Fallencake.UI Assembly Fallencake.UI.dll Group controller for ToggleBase elements. Ensures only one toggle is on at a time unless AllowSwitchOff is enabled. [AddComponentMenu(\"Modular UI/Toggle Group\", 33)] public class ModularToggleGroup : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ModularToggleGroup Properties AllowSwitchOff Whether it is allowed that all toggles are switched off. public bool AllowSwitchOff { get; set; } Property Value bool Methods AnyTogglesOn() Returns true if any toggle is on. public bool AnyTogglesOn() Returns bool EnsureValidState() Ensure that the group's state is valid according to AllowSwitchOff. If not allowed to switch off and no toggles are on, the first available will be enabled. public void EnsureValidState() NotifyToggleOn(ToggleBase, bool) Notify the group that a toggle has been switched on. All other toggles will be turned off. public void NotifyToggleOn(ToggleBase toggle, bool sendCallback = true) Parameters toggle ToggleBase sendCallback bool RegisterToggle(ToggleBase) Register a toggle to this group. public void RegisterToggle(ToggleBase toggle) Parameters toggle ToggleBase UnregisterToggle(ToggleBase) Unregister a toggle from this group. public void UnregisterToggle(ToggleBase toggle) Parameters toggle ToggleBase"
  },
  "api/Fallencake.UI.MovePopupTweenParameters.html": {
    "href": "api/Fallencake.UI.MovePopupTweenParameters.html",
    "title": "Class MovePopupTweenParameters | ModularUIPack",
    "summary": "Class MovePopupTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class MovePopupTweenParameters : PopupTweenParametersData<RectTransform, Vector3>, IPopupTweenParametersData<RectTransform, Vector3>, ITweenTargetData<RectTransform> Inheritance object PopupTweenParametersData<RectTransform, Vector3> MovePopupTweenParameters Implements IPopupTweenParametersData<RectTransform, Vector3> ITweenTargetData<RectTransform> Inherited Members PopupTweenParametersData<RectTransform, Vector3>.Target PopupTweenParametersData<RectTransform, Vector3>.ShowValue PopupTweenParametersData<RectTransform, Vector3>.HideValue Properties HideValue public override Vector3 HideValue { get; } Property Value Vector3 ShowValue public override Vector3 ShowValue { get; } Property Value Vector3 Target public override RectTransform Target { get; } Property Value RectTransform"
  },
  "api/Fallencake.UI.MoveTween.html": {
    "href": "api/Fallencake.UI.MoveTween.html",
    "title": "Class MoveTween | ModularUIPack",
    "summary": "Class MoveTween Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class MoveTween : TweenBase<Transform, Vector3>, ITargetableTween<Transform, Vector3>, ITween Inheritance object TweenBase<Transform, Vector3> MoveTween Implements ITargetableTween<Transform, Vector3> ITween Inherited Members TweenBase<Transform, Vector3>._target TweenBase<Transform, Vector3>._startValue TweenBase<Transform, Vector3>._endValue TweenBase<Transform, Vector3>._duration TweenBase<Transform, Vector3>._delay TweenBase<Transform, Vector3>._ease TweenBase<Transform, Vector3>.Target TweenBase<Transform, Vector3>.StartValue TweenBase<Transform, Vector3>.EndValue TweenBase<Transform, Vector3>.Duration TweenBase<Transform, Vector3>.Delay TweenBase<Transform, Vector3>.Ease TweenBase<Transform, Vector3>.IsTweened TweenBase<Transform, Vector3>._isTweened TweenBase<Transform, Vector3>._tweenCoroutine TweenBase<Transform, Vector3>.Play(MonoBehaviour, bool) TweenBase<Transform, Vector3>.Reset(bool) TweenBase<Transform, Vector3>.ResetTarget() TweenBase<Transform, Vector3>.OnComplete() TweenBase<Transform, Vector3>.GetTargetValue(bool) Constructors MoveTween() public MoveTween() MoveTween(Transform, Vector3, Vector3, float, float, bool, AnimationCurve) public MoveTween(Transform target, Vector3 startValue, Vector3 endValue, float duration, float delay, bool isLocalMovement = true, AnimationCurve ease = null) Parameters target Transform startValue Vector3 endValue Vector3 duration float delay float isLocalMovement bool ease AnimationCurve Methods Play(MonoBehaviour, bool) Plays the tween on a coroutine holder. Implementations should start a coroutine and call OnComplete() when finished. public override void Play(MonoBehaviour coroutineHolder, bool isForward = true) Parameters coroutineHolder MonoBehaviour MonoBehaviour used to start/stop coroutines. isForward bool If true plays towards EndValue, otherwise towards StartValue. ResetTarget() Implemented by concrete tweens to restore target to its initial state. protected override void ResetTarget()"
  },
  "api/Fallencake.UI.MoveTweenParameters.html": {
    "href": "api/Fallencake.UI.MoveTweenParameters.html",
    "title": "Class MoveTweenParameters | ModularUIPack",
    "summary": "Class MoveTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class MoveTweenParameters : TweenParametersData<RectTransform, Vector3>, ITweenParametersData<RectTransform, Vector3>, ITweenTargetData<RectTransform> Inheritance object TweenParametersData<RectTransform, Vector3> MoveTweenParameters Implements ITweenParametersData<RectTransform, Vector3> ITweenTargetData<RectTransform> Inherited Members TweenParametersData<RectTransform, Vector3>.Target TweenParametersData<RectTransform, Vector3>.Value TweenParametersData<RectTransform, Vector3>.StartValue Constructors MoveTweenParameters() public MoveTweenParameters() MoveTweenParameters(RectTransform, Vector3) public MoveTweenParameters(RectTransform target, Vector3 position) Parameters target RectTransform position Vector3 Properties StartValue public override Vector3 StartValue { get; } Property Value Vector3 Target public override RectTransform Target { get; } Property Value RectTransform Value public override Vector3 Value { get; } Property Value Vector3"
  },
  "api/Fallencake.UI.MultipleGraphicsSelectable.html": {
    "href": "api/Fallencake.UI.MultipleGraphicsSelectable.html",
    "title": "Class MultipleGraphicsSelectable | ModularUIPack",
    "summary": "Class MultipleGraphicsSelectable Namespace Fallencake.UI Assembly Fallencake.UI.dll Base selectable that orchestrates transitions for multiple UI graphics when its selection state changes. public class MultipleGraphicsSelectable : Selectable, IMultiSelectable Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable MultipleGraphicsSelectable Implements IMultiSelectable Derived Button Slider ToggleBase Examples Button: quickly add a ColorableGraphic with explicit colors and timings: using UnityEngine; using UnityEngine.UI; using Fallencake.UI; public class MyCustomButton : Button { [SerializeField] private Graphic _titleGraphic; protected override void Start() { base.Start(); SelectableTransition = SelectableTransition.ColorTint; // Add color-tint target with explicit state colors, multiplier and fade AddColorableGraphic( target: _titleGraphic, normal: Color.white, highlighted: new Color(0.95f, 0.95f, 1f, 1f), pressed: new Color(0.85f, 0.85f, 0.95f, 1f), selected: new Color(0.95f, 0.95f, 1f, 1f), disabled: new Color(1f, 1f, 1f, 0.5f), colorMultiplier: 1.0f, fadeDuration: 0.1f); } } Slider: configure CanvasGroup-based fading via method: using UnityEngine; using UnityEngine.UI; using Fallencake.UI; public class MyVolumeSlider : Slider { [SerializeField] private CanvasGroup _normal; [SerializeField] private CanvasGroup _highlighted; [SerializeField] private CanvasGroup _pressed; [SerializeField] private CanvasGroup _selected; [SerializeField] private CanvasGroup _disabled; protected override void Start() { base.Start(); SelectableTransition = SelectableTransition.CanvasGroupFading; // Assign groups and fade duration SetFadingCanvasGroups(_normal, _highlighted, _pressed, _selected, _disabled, fadeDuration: 0.15f); } } Remarks Uses Unity's UnityEngine.UI.Selectable state machine and extends it to control collections of colorable graphics, swappable sprites, and a CanvasGroup fading setup. Derived classes can customize behavior by adjusting SelectableTransition and editing the collections. Fields _colorableGraphics [SerializeField] protected List<ColorableGraphic> _colorableGraphics Field Value List<ColorableGraphic> _swappableCanvasGroupe [SerializeField] protected SwappableCanvasGroup _swappableCanvasGroupe Field Value SwappableCanvasGroup _swappableGraphics [SerializeField] protected List<SwappableSprite> _swappableGraphics Field Value List<SwappableSprite> _transition [SerializeField] protected SelectableTransition _transition Field Value SelectableTransition _tweenCoroutine protected Coroutine _tweenCoroutine Field Value Coroutine Properties ColorableGraphics Collection of graphic elements that can be color-tinted during button state transitions. public List<ColorableGraphic> ColorableGraphics { get; set; } Property Value List<ColorableGraphic> SelectableTransition The type of transition that will be applied to the targetGraphic when the state changes. public SelectableTransition SelectableTransition { get; set; } Property Value SelectableTransition SwappableCanvasGroupe Settings for CanvasGroups that can be swapped during button state transitions. public SwappableCanvasGroup SwappableCanvasGroupe { get; set; } Property Value SwappableCanvasGroup SwappableGraphics Collection of graphic elements that can be swapped during button state transitions. public List<SwappableSprite> SwappableGraphics { get; set; } Property Value List<SwappableSprite> Methods AddColorableGraphic(Graphic, SelectionColorBlock) Creates and adds a ColorableGraphic configured with a target and color block. public ColorableGraphic AddColorableGraphic(Graphic target, SelectionColorBlock colors) Parameters target Graphic The UnityEngine.UI.Graphic to be color-tinted on state changes. colors SelectionColorBlock The SelectionColorBlock defining colors and timings. Returns ColorableGraphic The created ColorableGraphic. AddColorableGraphic(Graphic, Color, Color, Color, Color, Color, float, float) Creates and adds a ColorableGraphic using explicit state colors. public ColorableGraphic AddColorableGraphic(Graphic target, Color normal, Color highlighted, Color pressed, Color selected, Color disabled, float colorMultiplier = 1, float fadeDuration = 0.1) Parameters target Graphic The UnityEngine.UI.Graphic to be color-tinted. normal Color Color for Normal state. highlighted Color Color for Highlighted state. pressed Color Color for Pressed state. selected Color Color for Selected state. disabled Color Color for Disabled state. colorMultiplier float Multiplier applied to colors. fadeDuration float Color transition duration in seconds. Returns ColorableGraphic The created ColorableGraphic. AddNewColorableGraphics() Adds a new ColorableGraphic to the list of colorable graphics. This method is used when you need to dynamically add new UI elements that should change color based on button state. Typically called from the Unity Editor when configuring button appearance or programmatically when adding new colorable elements at runtime. [Obsolete(\"Use AddColorableGraphic(Graphic, SelectionColorBlock) or the color overload instead.\")] public void AddNewColorableGraphics() AddNewSwappableSprite() Adds a new SwappableSprite to the list of swappable sprites. This method is used when you need to dynamically add new UI elements that should change sprite based on button state. Typically called from the Unity Editor when configuring button appearance or programmatically when adding new swappable elements at runtime. [Obsolete(\"Use AddSwappableSprite(Graphic, SelectionSpriteState) or the sprite overload instead.\")] public void AddNewSwappableSprite() AddSwappableSprite(Graphic, SelectionSpriteState) Creates and adds a SwappableSprite configured with a target and sprite state. public SwappableSprite AddSwappableSprite(Graphic target, SelectionSpriteState spriteState) Parameters target Graphic The UnityEngine.UI.Graphic whose sprite will be swapped. spriteState SelectionSpriteState The SelectionSpriteState defining sprites per state. Returns SwappableSprite The created SwappableSprite. AddSwappableSprite(Image, Sprite, Sprite, Sprite, Sprite) Creates and adds a SwappableSprite using explicit state sprites. public SwappableSprite AddSwappableSprite(Image targetImage, Sprite highlighted, Sprite pressed, Sprite selected, Sprite disabled) Parameters targetImage Image The UnityEngine.UI.Image to receive swapped sprites. highlighted Sprite Sprite for Highlighted state. pressed Sprite Sprite for Pressed state. selected Sprite Sprite for Selected state. disabled Sprite Sprite for Disabled state. Returns SwappableSprite The created SwappableSprite. DoStateTransition(SelectionState, bool) Transition the Selectable to the entered state. protected override void DoStateTransition(Selectable.SelectionState state, bool instant) Parameters state Selectable.SelectionState State to transition to instant bool Should the transition occur instantly. OnDestroy() protected override void OnDestroy() OnDisable() protected override void OnDisable() SetFadingCanvasGroups(CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, float) Configures SwappableCanvasGroupe with CanvasGroups per state and fade duration. public void SetFadingCanvasGroups(CanvasGroup normal, CanvasGroup highlighted, CanvasGroup pressed, CanvasGroup selected, CanvasGroup disabled, float fadeDuration = 0.1) Parameters normal CanvasGroup CanvasGroup for Normal state. highlighted CanvasGroup CanvasGroup for Highlighted state. pressed CanvasGroup CanvasGroup for Pressed state. selected CanvasGroup CanvasGroup for Selected state. disabled CanvasGroup CanvasGroup for Disabled state. fadeDuration float Alpha fade duration in seconds. Start() protected override void Start()"
  },
  "api/Fallencake.UI.NavigationScrollbar.html": {
    "href": "api/Fallencake.UI.NavigationScrollbar.html",
    "title": "Class NavigationScrollbar | ModularUIPack",
    "summary": "Class NavigationScrollbar Namespace Fallencake.UI Assembly Fallencake.UI.dll public class NavigationScrollbar : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour NavigationScrollbar Methods CheckForValue(float) public void CheckForValue(float value) Parameters value float OnBeginDrag(PointerEventData) Called by a BaseInputModule before a drag is started. public void OnBeginDrag(PointerEventData data) Parameters data PointerEventData ScrollDown() public void ScrollDown() ScrollUp() public void ScrollUp() UpdateSelectedTitle(int) public void UpdateSelectedTitle(int selected) Parameters selected int"
  },
  "api/Fallencake.UI.OffsetPopupTweenParameters.html": {
    "href": "api/Fallencake.UI.OffsetPopupTweenParameters.html",
    "title": "Class OffsetPopupTweenParameters | ModularUIPack",
    "summary": "Class OffsetPopupTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll Popup tween parameters for animating RectTransform offsetMin and offsetMax values with separate show and hide values [Serializable] public class OffsetPopupTweenParameters : PopupTweenParametersData<RectTransform, OffsetValues>, IPopupTweenParametersData<RectTransform, OffsetValues>, ITweenTargetData<RectTransform> Inheritance object PopupTweenParametersData<RectTransform, OffsetValues> OffsetPopupTweenParameters Implements IPopupTweenParametersData<RectTransform, OffsetValues> ITweenTargetData<RectTransform> Inherited Members PopupTweenParametersData<RectTransform, OffsetValues>.Target PopupTweenParametersData<RectTransform, OffsetValues>.ShowValue PopupTweenParametersData<RectTransform, OffsetValues>.HideValue Properties HideBottom Hide Bottom margin (offsetMin.y) public float HideBottom { get; set; } Property Value float HideLeft Hide Left margin (offsetMin.x) public float HideLeft { get; set; } Property Value float HideRight Hide Right margin (offsetMax.x) public float HideRight { get; set; } Property Value float HideTop Hide Top margin (offsetMax.y) public float HideTop { get; set; } Property Value float HideValue public override OffsetValues HideValue { get; } Property Value OffsetValues ShowBottom Show Bottom margin (offsetMin.y) public float ShowBottom { get; set; } Property Value float ShowLeft Show Left margin (offsetMin.x) public float ShowLeft { get; set; } Property Value float ShowRight Show Right margin (offsetMax.x) public float ShowRight { get; set; } Property Value float ShowTop Show Top margin (offsetMax.y) public float ShowTop { get; set; } Property Value float ShowValue public override OffsetValues ShowValue { get; } Property Value OffsetValues Target public override RectTransform Target { get; } Property Value RectTransform"
  },
  "api/Fallencake.UI.OffsetTween.html": {
    "href": "api/Fallencake.UI.OffsetTween.html",
    "title": "Class OffsetTween | ModularUIPack",
    "summary": "Class OffsetTween Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class OffsetTween : TweenBase<RectTransform, OffsetValues>, ITargetableTween<RectTransform, OffsetValues>, ITween Inheritance object TweenBase<RectTransform, OffsetValues> OffsetTween Implements ITargetableTween<RectTransform, OffsetValues> ITween Inherited Members TweenBase<RectTransform, OffsetValues>._target TweenBase<RectTransform, OffsetValues>._startValue TweenBase<RectTransform, OffsetValues>._endValue TweenBase<RectTransform, OffsetValues>._duration TweenBase<RectTransform, OffsetValues>._delay TweenBase<RectTransform, OffsetValues>._ease TweenBase<RectTransform, OffsetValues>.Target TweenBase<RectTransform, OffsetValues>.StartValue TweenBase<RectTransform, OffsetValues>.EndValue TweenBase<RectTransform, OffsetValues>.Duration TweenBase<RectTransform, OffsetValues>.Delay TweenBase<RectTransform, OffsetValues>.Ease TweenBase<RectTransform, OffsetValues>.IsTweened TweenBase<RectTransform, OffsetValues>._isTweened TweenBase<RectTransform, OffsetValues>._tweenCoroutine TweenBase<RectTransform, OffsetValues>.Play(MonoBehaviour, bool) TweenBase<RectTransform, OffsetValues>.Reset(bool) TweenBase<RectTransform, OffsetValues>.ResetTarget() TweenBase<RectTransform, OffsetValues>.OnComplete() TweenBase<RectTransform, OffsetValues>.GetTargetValue(bool) Constructors OffsetTween() public OffsetTween() OffsetTween(RectTransform, OffsetValues, OffsetValues, float, float, AnimationCurve) public OffsetTween(RectTransform target, OffsetValues startValue, OffsetValues endValue, float duration, float delay, AnimationCurve ease = null) Parameters target RectTransform startValue OffsetValues endValue OffsetValues duration float delay float ease AnimationCurve Methods Play(MonoBehaviour, bool) Plays the tween on a coroutine holder. Implementations should start a coroutine and call OnComplete() when finished. public override void Play(MonoBehaviour coroutineHolder, bool isForward = true) Parameters coroutineHolder MonoBehaviour MonoBehaviour used to start/stop coroutines. isForward bool If true plays towards EndValue, otherwise towards StartValue. ResetTarget() Implemented by concrete tweens to restore target to its initial state. protected override void ResetTarget()"
  },
  "api/Fallencake.UI.OffsetTweenParameters.html": {
    "href": "api/Fallencake.UI.OffsetTweenParameters.html",
    "title": "Class OffsetTweenParameters | ModularUIPack",
    "summary": "Class OffsetTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll Tween parameters for animating RectTransform offsetMin and offsetMax values (Left, Right, Top, Bottom margins) [Serializable] public class OffsetTweenParameters : TweenParametersData<RectTransform, OffsetValues>, ITweenParametersData<RectTransform, OffsetValues>, ITweenTargetData<RectTransform> Inheritance object TweenParametersData<RectTransform, OffsetValues> OffsetTweenParameters Implements ITweenParametersData<RectTransform, OffsetValues> ITweenTargetData<RectTransform> Inherited Members TweenParametersData<RectTransform, OffsetValues>.Target TweenParametersData<RectTransform, OffsetValues>.Value TweenParametersData<RectTransform, OffsetValues>.StartValue Constructors OffsetTweenParameters() public OffsetTweenParameters() OffsetTweenParameters(RectTransform, OffsetValues) public OffsetTweenParameters(RectTransform target, OffsetValues offsetValues) Parameters target RectTransform offsetValues OffsetValues OffsetTweenParameters(RectTransform, float, float, float, float) public OffsetTweenParameters(RectTransform target, float left, float bottom, float right, float top) Parameters target RectTransform left float bottom float right float top float Properties Bottom Bottom margin (offsetMin.y) public float Bottom { get; set; } Property Value float Left Left margin (offsetMin.x) public float Left { get; set; } Property Value float Right Right margin (offsetMax.x) public float Right { get; set; } Property Value float StartValue public override OffsetValues StartValue { get; } Property Value OffsetValues Target public override RectTransform Target { get; } Property Value RectTransform Top Top margin (offsetMax.y) public float Top { get; set; } Property Value float Value public override OffsetValues Value { get; } Property Value OffsetValues"
  },
  "api/Fallencake.UI.OffsetValues.html": {
    "href": "api/Fallencake.UI.OffsetValues.html",
    "title": "Struct OffsetValues | ModularUIPack",
    "summary": "Struct OffsetValues Namespace Fallencake.UI Assembly Fallencake.UI.dll Represents offset values for RectTransform margins offsetMin controls Left and Bottom margins offsetMax controls Right and Top margins [Serializable] public struct OffsetValues Constructors OffsetValues(float, float, float, float) public OffsetValues(float left, float bottom, float right, float top) Parameters left float bottom float right float top float OffsetValues(Vector2, Vector2) public OffsetValues(Vector2 offsetMin, Vector2 offsetMax) Parameters offsetMin Vector2 offsetMax Vector2 Properties Bottom Bottom margin (offsetMin.y) public float Bottom { get; set; } Property Value float Left Left margin (offsetMin.x) public float Left { get; set; } Property Value float OffsetMax public Vector2 OffsetMax { get; } Property Value Vector2 OffsetMin public Vector2 OffsetMin { get; } Property Value Vector2 Right Right margin (offsetMax.x) public float Right { get; set; } Property Value float Top Top margin (offsetMax.y) public float Top { get; set; } Property Value float Methods Lerp(OffsetValues, OffsetValues, float) Linear interpolation between two OffsetValues public static OffsetValues Lerp(OffsetValues a, OffsetValues b, float t) Parameters a OffsetValues b OffsetValues t float Returns OffsetValues Operators implicit operator OffsetValues((float left, float bottom, float right, float top)) public static implicit operator OffsetValues((float left, float bottom, float right, float top) tuple) Parameters tuple (float left, float bottom, float right, float top) Returns OffsetValues"
  },
  "api/Fallencake.UI.OnButtonClickedEvent.html": {
    "href": "api/Fallencake.UI.OnButtonClickedEvent.html",
    "title": "Class OnButtonClickedEvent | ModularUIPack",
    "summary": "Class OnButtonClickedEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll UnityEvent for button events [Serializable] public class OnButtonClickedEvent : UnityEvent Inheritance object UnityEventBase UnityEvent OnButtonClickedEvent"
  },
  "api/Fallencake.UI.PanelData.html": {
    "href": "api/Fallencake.UI.PanelData.html",
    "title": "Class PanelData | ModularUIPack",
    "summary": "Class PanelData Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class PanelData Inheritance object PanelData Fields ButtonObject Optional button GameObject associated with the panel. public GameObject ButtonObject Field Value GameObject FirstSelected First selected GameObject when this panel becomes active. public GameObject FirstSelected Field Value GameObject PanelName Logical name used to select this panel. public string PanelName Field Value string PanelObject Root GameObject of the panel. public GameObject PanelObject Field Value GameObject"
  },
  "api/Fallencake.UI.PanelManager.PanelChangeEvent.html": {
    "href": "api/Fallencake.UI.PanelManager.PanelChangeEvent.html",
    "title": "Class PanelManager.PanelChangeEvent | ModularUIPack",
    "summary": "Class PanelManager.PanelChangeEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class PanelManager.PanelChangeEvent : UnityEvent<int> Inheritance object UnityEventBase UnityEvent<int> PanelManager.PanelChangeEvent"
  },
  "api/Fallencake.UI.PanelManager.PanelData.html": {
    "href": "api/Fallencake.UI.PanelManager.PanelData.html",
    "title": "Class PanelManager.PanelData | ModularUIPack",
    "summary": "Class PanelManager.PanelData Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class PanelManager.PanelData Inheritance object PanelManager.PanelData Fields ButtonObject public GameObject ButtonObject Field Value GameObject FirstSelected public GameObject FirstSelected Field Value GameObject PanelName public string PanelName Field Value string PanelObject public GameObject PanelObject Field Value GameObject"
  },
  "api/Fallencake.UI.PanelManager.html": {
    "href": "api/Fallencake.UI.PanelManager.html",
    "title": "Class PanelManager | ModularUIPack",
    "summary": "Class PanelManager Namespace Fallencake.UI Assembly Fallencake.UI.dll Modular Panel Manager. Handles switching between panels with optional popup animations, editor-friendly preview, and button synchronization. [AddComponentMenu(\"Modular UI/Panel Manager\")] public class PanelManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour PanelManager Fields OnPanelChanged public PanelManager.PanelChangeEvent OnPanelChanged Field Value PanelManager.PanelChangeEvent Panels public List<PanelData> Panels Field Value List<PanelData> currentPanelIndex public int currentPanelIndex Field Value int Properties DeactivateUnselectedPanelsInEditor Deactivate unselected panels in editor mode (runtime always deactivates). public bool DeactivateUnselectedPanelsInEditor { get; set; } Property Value bool IsActivePanelOnTop Move active panel to top of hierarchy during animated transitions. public bool IsActivePanelOnTop { get; set; } Property Value bool IsAnimatedPanelSwitch Enable animated transitions between panels using PopupTweenAnimator. public bool IsAnimatedPanelSwitch { get; set; } Property Value bool initializeButtons Automatically initialize buttons. public bool initializeButtons { get; set; } Property Value bool Methods AddNewItem() public void AddNewItem() GetCurrentPanelIndex() Gets the currently selected panel index public int GetCurrentPanelIndex() Returns int Current panel index GetPanelCount() Gets the total number of panels public int GetPanelCount() Returns int Number of panels HideCurrentButton() public void HideCurrentButton() HideCurrentPanel() public void HideCurrentPanel() Initialize() public void Initialize() NextPanel() public void NextPanel() OpenFirstTab() public void OpenFirstTab() OpenPanel(string) public void OpenPanel(string newPanel) Parameters newPanel string OpenPanelByIndex(int) public void OpenPanelByIndex(int index) Parameters index int PrevPanel() public void PrevPanel() RefreshPanelStates() Public method to manually trigger panel state update. Respects the IsAnimatedPanelSwitch setting for proper behavior. public void RefreshPanelStates() SelectPanel(int) Public method to select panel by index public void SelectPanel(int panelIndex) Parameters panelIndex int Index of panel to select ShowCurrentButton() public void ShowCurrentButton() ShowCurrentPanel() public void ShowCurrentPanel()"
  },
  "api/Fallencake.UI.PanelPosition.html": {
    "href": "api/Fallencake.UI.PanelPosition.html",
    "title": "Enum PanelPosition | ModularUIPack",
    "summary": "Enum PanelPosition Namespace Fallencake.UI Assembly Fallencake.UI.dll Predefined panel placement presets relative to the screen or an anchor. public enum PanelPosition Fields BottomLeft = 1 Position at the bottom-left corner. BottomRight = 2 Position at the bottom-right corner. Center = 0 Center the panel. CenterRight = 5 Position centered vertically on the right side. TopLeft = 3 Position at the top-left corner. TopRight = 4 Position at the top-right corner."
  },
  "api/Fallencake.UI.ParticleLocalSpawner.RandomizationMode.html": {
    "href": "api/Fallencake.UI.ParticleLocalSpawner.RandomizationMode.html",
    "title": "Enum ParticleLocalSpawner.RandomizationMode | ModularUIPack",
    "summary": "Enum ParticleLocalSpawner.RandomizationMode Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ParticleLocalSpawner.RandomizationMode Fields Box = 0 Circle = 2 Disc = 4 Gaussian = 3 Sphere = 1"
  },
  "api/Fallencake.UI.ParticleLocalSpawner.RotationDirection.html": {
    "href": "api/Fallencake.UI.ParticleLocalSpawner.RotationDirection.html",
    "title": "Enum ParticleLocalSpawner.RotationDirection | ModularUIPack",
    "summary": "Enum ParticleLocalSpawner.RotationDirection Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ParticleLocalSpawner.RotationDirection Fields Bottom = 1 Left = 2 Right = 3 Top = 0"
  },
  "api/Fallencake.UI.ParticleLocalSpawner.SpriteSelectionMode.html": {
    "href": "api/Fallencake.UI.ParticleLocalSpawner.SpriteSelectionMode.html",
    "title": "Enum ParticleLocalSpawner.SpriteSelectionMode | ModularUIPack",
    "summary": "Enum ParticleLocalSpawner.SpriteSelectionMode Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ParticleLocalSpawner.SpriteSelectionMode Fields PingPong = 3 Random = 0 Sequential = 1 SequentialReverse = 2"
  },
  "api/Fallencake.UI.ParticleLocalSpawner.html": {
    "href": "api/Fallencake.UI.ParticleLocalSpawner.html",
    "title": "Class ParticleLocalSpawner | ModularUIPack",
    "summary": "Class ParticleLocalSpawner Namespace Fallencake.UI Assembly Fallencake.UI.dll public class ParticleLocalSpawner : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ParticleLocalSpawner Properties ActiveParticleCount public int ActiveParticleCount { get; } Property Value int IsSpawning public bool IsSpawning { get; } Property Value bool PooledParticleCount public int PooledParticleCount { get; } Property Value int Methods AddSprite(Sprite) public void AddSprite(Sprite sprite) Parameters sprite Sprite AddStartColorOption(Color) public void AddStartColorOption(Color color) Parameters color Color ClearAllParticles() public void ClearAllParticles() RemoveSprite(Sprite) public void RemoveSprite(Sprite sprite) Parameters sprite Sprite SetColorOverLifetime(Gradient) public void SetColorOverLifetime(Gradient gradient) Parameters gradient Gradient SetParticleLifetime(float) public void SetParticleLifetime(float lifetime) Parameters lifetime float SetParticleSystemMode(float, Color, AnimationCurve, Gradient) public void SetParticleSystemMode(float startSize, Color startColor, AnimationCurve sizeOverLifetime, Gradient colorOverLifetime) Parameters startSize float startColor Color sizeOverLifetime AnimationCurve colorOverLifetime Gradient SetPositionRandomization(bool, Vector3, RandomizationMode) public void SetPositionRandomization(bool enable, Vector3 randomRange, ParticleLocalSpawner.RandomizationMode mode = RandomizationMode.Box) Parameters enable bool randomRange Vector3 mode ParticleLocalSpawner.RandomizationMode SetRandomParticleLifetime(float, float) public void SetRandomParticleLifetime(float minLife, float maxLife) Parameters minLife float maxLife float SetRandomSpawnFrequency(float, float) public void SetRandomSpawnFrequency(float minFreq, float maxFreq) Parameters minFreq float maxFreq float SetRandomStartColors(List<Color>) public void SetRandomStartColors(List<Color> colors) Parameters colors List<Color> SetRandomStartSize(float, float) public void SetRandomStartSize(float minSize, float maxSize) Parameters minSize float maxSize float SetRandomizationIntensity(float) public void SetRandomizationIntensity(float intensity) Parameters intensity float SetRotationDirection(RotationDirection) public void SetRotationDirection(ParticleLocalSpawner.RotationDirection direction) Parameters direction ParticleLocalSpawner.RotationDirection SetRotationSettings(bool, RotationDirection) public void SetRotationSettings(bool rotateToPrevious, ParticleLocalSpawner.RotationDirection direction) Parameters rotateToPrevious bool direction ParticleLocalSpawner.RotationDirection SetRotationToPrevious(bool) public void SetRotationToPrevious(bool enable) Parameters enable bool SetSizeOverLifetime(AnimationCurve) public void SetSizeOverLifetime(AnimationCurve curve) Parameters curve AnimationCurve SetSpawnFrequency(float) public void SetSpawnFrequency(float frequency) Parameters frequency float SetStartColor(Color) public void SetStartColor(Color color) Parameters color Color SetStartSize(float) public void SetStartSize(float size) Parameters size float StartSpawning() public void StartSpawning() StopSpawning() public void StopSpawning()"
  },
  "api/Fallencake.UI.PopupTweenAnimator.html": {
    "href": "api/Fallencake.UI.PopupTweenAnimator.html",
    "title": "Class PopupTweenAnimator | ModularUIPack",
    "summary": "Class PopupTweenAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll public abstract class PopupTweenAnimator : TweenAnimatorBase, IPopupTweenAnimator Inheritance object Object Component Behaviour MonoBehaviour TweenAnimatorBase PopupTweenAnimator Implements IPopupTweenAnimator Derived ModularPopupAnimator Inherited Members TweenAnimatorBase.OnDisable() TweenAnimatorBase.PlayTween(TweenParameters, LoopType, bool, Action) TweenAnimatorBase.PlayPopupTween(PopupTweenParameters, bool, bool, bool, Action, Action) TweenAnimatorBase.OnTweenComplete(ITweenBasicParameters, bool, Action) TweenAnimatorBase.OnSimpleTweenComplete(ITweenBasicParameters, bool, Action) TweenAnimatorBase.OnSimpleTweenComplete(ITweenBasicParameters, bool, bool, Action) Properties IsHiddenOnStart public bool IsHiddenOnStart { get; } Property Value bool IsHideAnimating Returns true if Hide animation is currently playing public bool IsHideAnimating { get; } Property Value bool IsShowAnimating Returns true if Show animation is currently playing public bool IsShowAnimating { get; } Property Value bool OnHideEnd Event called when Hide animation ends public UnityEvent OnHideEnd { get; } Property Value UnityEvent OnHideStart Event called when Hide animation starts public UnityEvent OnHideStart { get; } Property Value UnityEvent OnHideUpdate Event called every frame during Hide animation public UnityEvent OnHideUpdate { get; } Property Value UnityEvent OnShowEnd Event called when Show animation ends public UnityEvent OnShowEnd { get; } Property Value UnityEvent OnShowStart Event called when Show animation starts public UnityEvent OnShowStart { get; } Property Value UnityEvent OnShowUpdate Event called every frame during Show animation public UnityEvent OnShowUpdate { get; } Property Value UnityEvent Methods Hide(Action) public abstract void Hide(Action onComplete = null) Parameters onComplete Action HideInstantly(Action) public abstract void HideInstantly(Action onComplete = null) Parameters onComplete Action InitializeTintParameters() Initializes tint parameters to capture current colors if UseCurrentColorAsStart is enabled protected virtual void InitializeTintParameters() InvokeHideEnd() Called internally to trigger hide end event protected virtual void InvokeHideEnd() InvokeHideStart() Called internally to trigger hide start event protected virtual void InvokeHideStart() InvokeHideUpdate() Called internally to trigger hide update event protected virtual void InvokeHideUpdate() InvokeShowEnd() Called internally to trigger show end event protected virtual void InvokeShowEnd() InvokeShowStart() Called internally to trigger show start event protected virtual void InvokeShowStart() InvokeShowUpdate() Called internally to trigger show update event protected virtual void InvokeShowUpdate() OnEnable() protected virtual void OnEnable() Show(Action) public abstract void Show(Action onComplete = null) Parameters onComplete Action Start() protected virtual void Start()"
  },
  "api/Fallencake.UI.PopupTweenParameters.html": {
    "href": "api/Fallencake.UI.PopupTweenParameters.html",
    "title": "Class PopupTweenParameters | ModularUIPack",
    "summary": "Class PopupTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll Parameter container describing a single popup tween and its show/hide behavior. [Serializable] public class PopupTweenParameters : IPopupTweenParameters, ITweenBasicParameters Inheritance object PopupTweenParameters Implements IPopupTweenParameters ITweenBasicParameters Remarks Contains per-mode easing and duration, as well as specific parameter blocks for each supported tween type, such as MovePopupTweenParameters, ScalePopupTweenParameters, FadeCanvasGroupPopupTweenParameters, OffsetPopupTweenParameters, SizePopupTweenParameters and TintGraphicPopupTweenParameters. The active data is determined by Type. Fields _hideEase [SerializeField] protected AnimationCurve _hideEase Field Value AnimationCurve _showEase [SerializeField] protected AnimationCurve _showEase Field Value AnimationCurve Properties Coroutine Runtime coroutine reference used during playback. public Coroutine Coroutine { get; set; } Property Value Coroutine FadeParameters Parameter block for CanvasGroup fade tween. public FadeCanvasGroupPopupTweenParameters FadeParameters { get; } Property Value FadeCanvasGroupPopupTweenParameters HideDuration Duration in seconds for the hide phase. public float HideDuration { get; } Property Value float HideEase Easing curve used for the hide phase. public AnimationCurve HideEase { get; } Property Value AnimationCurve MoveParameters Parameter block for move tween. public MovePopupTweenParameters MoveParameters { get; } Property Value MovePopupTweenParameters OffsetParameters Parameter block for RectTransform offset tween. public OffsetPopupTweenParameters OffsetParameters { get; } Property Value OffsetPopupTweenParameters ScaleParameters Parameter block for scale tween. public ScalePopupTweenParameters ScaleParameters { get; } Property Value ScalePopupTweenParameters ShowDuration Duration in seconds for the show phase. public float ShowDuration { get; } Property Value float ShowEase Easing curve used for the show phase. public AnimationCurve ShowEase { get; } Property Value AnimationCurve SizeParameters Parameter block for RectTransform size tween. public SizePopupTweenParameters SizeParameters { get; } Property Value SizePopupTweenParameters TintParameters Parameter block for Graphic tint tween. public TintGraphicPopupTweenParameters TintParameters { get; } Property Value TintGraphicPopupTweenParameters Type The tween type represented by this instance. public TweenType Type { get; } Property Value TweenType"
  },
  "api/Fallencake.UI.PopupTweenParametersData-2.html": {
    "href": "api/Fallencake.UI.PopupTweenParametersData-2.html",
    "title": "Class PopupTweenParametersData<TTarget, TValue> | ModularUIPack",
    "summary": "Class PopupTweenParametersData<TTarget, TValue> Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public abstract class PopupTweenParametersData<TTarget, TValue> : IPopupTweenParametersData<TTarget, TValue>, ITweenTargetData<TTarget> Type Parameters TTarget TValue Inheritance object PopupTweenParametersData<TTarget, TValue> Implements IPopupTweenParametersData<TTarget, TValue> ITweenTargetData<TTarget> Derived FadeCanvasGroupPopupTweenParameters MovePopupTweenParameters OffsetPopupTweenParameters ScalePopupTweenParameters SizePopupTweenParameters TintGraphicPopupTweenParameters Properties HideValue public abstract TValue HideValue { get; } Property Value TValue ShowValue public abstract TValue ShowValue { get; } Property Value TValue Target public abstract TTarget Target { get; } Property Value TTarget"
  },
  "api/Fallencake.UI.ProgressBar.AnimationType.html": {
    "href": "api/Fallencake.UI.ProgressBar.AnimationType.html",
    "title": "Enum ProgressBar.AnimationType | ModularUIPack",
    "summary": "Enum ProgressBar.AnimationType Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ProgressBar.AnimationType Fields Bounce = 3 Elastic = 2 None = 0 Smooth = 1"
  },
  "api/Fallencake.UI.ProgressBar.FillType.html": {
    "href": "api/Fallencake.UI.ProgressBar.FillType.html",
    "title": "Enum ProgressBar.FillType | ModularUIPack",
    "summary": "Enum ProgressBar.FillType Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ProgressBar.FillType Fields Filled = 0 Indicators = 2 Sliced = 1"
  },
  "api/Fallencake.UI.ProgressBar.ProgressDirection.html": {
    "href": "api/Fallencake.UI.ProgressBar.ProgressDirection.html",
    "title": "Enum ProgressBar.ProgressDirection | ModularUIPack",
    "summary": "Enum ProgressBar.ProgressDirection Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ProgressBar.ProgressDirection Fields BottomToTop = 2 LeftToRight = 0 RightToLeft = 1 TopToBottom = 3"
  },
  "api/Fallencake.UI.ProgressBar.ProgressEvent.html": {
    "href": "api/Fallencake.UI.ProgressBar.ProgressEvent.html",
    "title": "Class ProgressBar.ProgressEvent | ModularUIPack",
    "summary": "Class ProgressBar.ProgressEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class ProgressBar.ProgressEvent : UnityEvent Inheritance object UnityEventBase UnityEvent ProgressBar.ProgressEvent"
  },
  "api/Fallencake.UI.ProgressBar.ProgressValueEvent.html": {
    "href": "api/Fallencake.UI.ProgressBar.ProgressValueEvent.html",
    "title": "Class ProgressBar.ProgressValueEvent | ModularUIPack",
    "summary": "Class ProgressBar.ProgressValueEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class ProgressBar.ProgressValueEvent : UnityEvent<float> Inheritance object UnityEventBase UnityEvent<float> ProgressBar.ProgressValueEvent"
  },
  "api/Fallencake.UI.ProgressBar.TextDisplayMode.html": {
    "href": "api/Fallencake.UI.ProgressBar.TextDisplayMode.html",
    "title": "Enum ProgressBar.TextDisplayMode | ModularUIPack",
    "summary": "Enum ProgressBar.TextDisplayMode Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum ProgressBar.TextDisplayMode Fields Custom = 4 None = 0 Percentage = 1 Value = 2 ValueAndMax = 3"
  },
  "api/Fallencake.UI.ProgressBar.html": {
    "href": "api/Fallencake.UI.ProgressBar.html",
    "title": "Class ProgressBar | ModularUIPack",
    "summary": "Class ProgressBar Namespace Fallencake.UI Assembly Fallencake.UI.dll A modular progress bar component with support for different fill types, directions, animations, and audio feedback. [AddComponentMenu(\"Modular UI/Progress Bar\")] [ExecuteAlways] public class ProgressBar : UIBehaviour, ISaveable, IProgressBarAudioProvider, IAudioProvider Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour ProgressBar Implements ISaveable IProgressBarAudioProvider IAudioProvider Fields MAX_INDICATORS Maximum number of indicators that can be created automatically. This limit exists to prevent performance issues with too many UI elements. public const int MAX_INDICATORS = 100 Field Value int _backgroundImage [SerializeField] protected Image _backgroundImage Field Value Image _fillContainer [SerializeField] protected RectTransform _fillContainer Field Value RectTransform _fillImage [SerializeField] protected Image _fillImage Field Value Image _fillLabel [SerializeField] protected RectTransform _fillLabel Field Value RectTransform _fillType [SerializeField] protected ProgressBar.FillType _fillType Field Value ProgressBar.FillType _indicatorAmount [SerializeField] protected int _indicatorAmount Field Value int _indicatorPrefab [SerializeField] protected GameObject _indicatorPrefab Field Value GameObject _indicators [SerializeField] protected List<ImageIndicator> _indicators Field Value List<ImageIndicator> _indicatorsContainer [SerializeField] protected Transform _indicatorsContainer Field Value Transform _isDifferentIndicators [SerializeField] protected bool _isDifferentIndicators Field Value bool _isWholeNumbers [SerializeField] protected bool _isWholeNumbers Field Value bool _maxValue [SerializeField] protected float _maxValue Field Value float _minValue [SerializeField] protected float _minValue Field Value float _progressText [SerializeField] protected TMP_Text _progressText Field Value TMP_Text _value [SerializeField] [Range(0, 1)] protected float _value Field Value float Properties AnimationDuration public float AnimationDuration { get; set; } Property Value float AudioSource AudioSource used to play sounds. public AudioSource AudioSource { get; set; } Property Value AudioSource AutoConfigureLayoutGroup Auto-configure UnityEngine.UI.LayoutGroup settings for indicators container. When enabled, automatically adds and configures UnityEngine.UI.HorizontalLayoutGroup or UnityEngine.UI.VerticalLayoutGroup based on the progress Direction. Also sets spacing, alignment, and force expand settings. public bool AutoConfigureLayoutGroup { get; set; } Property Value bool BackgroundImage public Image BackgroundImage { get; set; } Property Value Image Component Owning component used by handlers for context and coroutines. public MonoBehaviour Component { get; } Property Value MonoBehaviour CurrentAnimationType public ProgressBar.AnimationType CurrentAnimationType { get; set; } Property Value ProgressBar.AnimationType CurrentFillType public virtual ProgressBar.FillType CurrentFillType { get; set; } Property Value ProgressBar.FillType CustomTextFormat public string CustomTextFormat { get; set; } Property Value string DeselectSound Sound played on deselect. public AudioData DeselectSound { get; } Property Value AudioData Direction public ProgressBar.ProgressDirection Direction { get; set; } Property Value ProgressBar.ProgressDirection DisplayMode public ProgressBar.TextDisplayMode DisplayMode { get; set; } Property Value ProgressBar.TextDisplayMode EnableSounds Enables/disables sound playback for this component. public bool EnableSounds { get; set; } Property Value bool FillImage public Image FillImage { get; set; } Property Value Image FillLabel The RectTransform that is placed at the current value position on the progress bar if IsFillLabelEnabled is true. public RectTransform FillLabel { get; set; } Property Value RectTransform IndicatorAmount Number of indicators to create automatically (only used when IsDifferentIndicators is false). public int IndicatorAmount { get; set; } Property Value int IndicatorPrefab Prefab GameObject with ImageIndicator component for automatic indicator creation. Used if ProgressBar.FillType is Indicators and IsDifferentIndicators is false. public GameObject IndicatorPrefab { get; set; } Property Value GameObject IndicatorSpacing Spacing between indicators in UnityEngine.UI.LayoutGroup. Used if ProgressBar.FillType is Indicators. public float IndicatorSpacing { get; set; } Property Value float Indicators List of indicator components. Used if ProgressBar.FillType is Indicators. Filled automatically if IsDifferentIndicators is false, or manually by user if true. public List<ImageIndicator> Indicators { get; set; } Property Value List<ImageIndicator> IndicatorsContainer Transform container where indicators will be instantiated. LayoutGroup will be automatically added based on progress Direction. public Transform IndicatorsContainer { get; set; } Property Value Transform IsAnimating public bool IsAnimating { get; } Property Value bool IsBackgroundEnabled public bool IsBackgroundEnabled { get; set; } Property Value bool IsChangePitchUpdateSound public bool IsChangePitchUpdateSound { get; set; } Property Value bool IsColorizingEnabled Enables colorizing the progress bar using a gradient or color range. When is true, the bar color is updated in UpdateColors() based on the current value. public bool IsColorizingEnabled { get; set; } Property Value bool IsDifferentIndicators If false - indicators for Indicators list are created automatically from prefab. If true - indicators are set manually by user. public virtual bool IsDifferentIndicators { get; set; } Property Value bool IsFillLabelEnabled public bool IsFillLabelEnabled { get; set; } Property Value bool IsIndicatorForceExpand Enable force expand for indicators in UnityEngine.UI.LayoutGroup. Used if ProgressBar.FillType is Indicators. public bool IsIndicatorForceExpand { get; set; } Property Value bool IsSavingEnabled Enables save/load behavior for the component. public bool IsSavingEnabled { get; set; } Property Value bool IsSecondaryBarEnabled Secondary bar with custom Triggers And Delay: The secondary bar can work in two modes: Proportional mode (Fallencake.UI.ProgressBar._useCustomTriggers = false): Secondary bar value equals primary bar value Custom triggers mode (Fallencake.UI.ProgressBar._useCustomTriggers = true): Secondary bar value determined by trigger pairs Example usage with custom triggers: Trigger 1: primaryValue = 25, secondaryValue = 10 (when primary reaches 25, secondary shows 10) Trigger 2: primaryValue = 50, secondaryValue = 30 (when primary reaches 50, secondary shows 30) Trigger 3: primaryValue = 100, secondaryValue = 50 (when primary reaches 100, secondary shows 50) Fallencake.UI.ProgressBar._secondaryBarDelay = 0.3 (primary updates first, then secondary after 0.3 seconds) public bool IsSecondaryBarEnabled { get; set; } Property Value bool IsTextEnabled public bool IsTextEnabled { get; set; } Property Value bool IsWholeNumbers public virtual bool IsWholeNumbers { get; set; } Property Value bool MaxValue public virtual float MaxValue { get; set; } Property Value float MinValue public float MinValue { get; set; } Property Value float NormalizedValue public float NormalizedValue { get; set; } Property Value float OnProgressComplete public ProgressBar.ProgressEvent OnProgressComplete { get; set; } Property Value ProgressBar.ProgressEvent OnProgressUpdateEnd public ProgressBar.ProgressEvent OnProgressUpdateEnd { get; set; } Property Value ProgressBar.ProgressEvent OnProgressUpdateStart public ProgressBar.ProgressEvent OnProgressUpdateStart { get; set; } Property Value ProgressBar.ProgressEvent OnSecondaryUpdateEnd public ProgressBar.ProgressEvent OnSecondaryUpdateEnd { get; set; } Property Value ProgressBar.ProgressEvent OnSecondaryUpdateStart public ProgressBar.ProgressEvent OnSecondaryUpdateStart { get; set; } Property Value ProgressBar.ProgressEvent OnValueChanged public ProgressBar.ProgressValueEvent OnValueChanged { get; set; } Property Value ProgressBar.ProgressValueEvent PitchResetTimeSeconds public float PitchResetTimeSeconds { get; set; } Property Value float PressSound Sound played on press/submit. public AudioData PressSound { get; } Property Value AudioData ProgressCompleteSound Sound data for completion. public AudioData ProgressCompleteSound { get; } Property Value AudioData ProgressText public TMP_Text ProgressText { get; set; } Property Value TMP_Text ProgressUpdateSound Sound data for progress update (loop/step). public AudioData ProgressUpdateSound { get; } Property Value AudioData SaveKey PlayerPrefs key used to persist the state. public string SaveKey { get; set; } Property Value string SecondaryBarDelay Delay in seconds between primary and secondary bar updates. Positive value: primary bar updates first, then secondary bar after delay Negative value: secondary bar updates first, then primary bar after delay Zero: both bars update simultaneously This delay works for both proportional mode and custom triggers mode. public float SecondaryBarDelay { get; set; } Property Value float SecondaryFillImage The fill image used for the secondary progress bar (only used when UseCustomSecondaryBar is false). public Image SecondaryFillImage { get; set; } Property Value Image SecondaryFillType Specifies the visual representation of the secondary bar. Can be either Filled or Sliced. public ProgressBar.FillType SecondaryFillType { get; set; } Property Value ProgressBar.FillType SecondaryProgressBar public ProgressBar SecondaryProgressBar { get; set; } Property Value ProgressBar SecondaryTriggers Custom trigger pairs that define secondary bar values for specific primary bar values. Only used when UseCustomTriggers is true. Example usage with custom triggers: Trigger 1: primaryValue = 25, secondaryValue = 10 (when primary reaches 25, secondary shows 10) Trigger 2: primaryValue = 50, secondaryValue = 30 (when primary reaches 50, secondary shows 30) Trigger 3: primaryValue = 100, secondaryValue = 50 (when primary reaches 100, secondary shows 50) _secondaryBarDelay = 0.3 (primary updates first, then secondary after 0.3 seconds) public List<SecondaryBarTrigger> SecondaryTriggers { get; set; } Property Value List<SecondaryBarTrigger> SelectSound Sound played on select/hover. public AudioData SelectSound { get; } Property Value AudioData Selectable UI selectable to bind event triggers to. public Selectable Selectable { get; } Property Value Selectable UseCustomSecondaryBar When enabled, uses custom trigger pairs to determine secondary bar values. When disabled, secondary bar value equals primary bar value (proportional mode). In custom triggers mode, you define trigger pairs (SecondaryBarTrigger) where: primaryValue: When primary bar reaches this value secondaryValue: Secondary bar should display this value public bool UseCustomSecondaryBar { get; set; } Property Value bool UseCustomTriggers When enabled, uses custom trigger pairs to determine secondary bar values. When disabled, secondary bar value equals primary bar value (proportional mode). public bool UseCustomTriggers { get; set; } Property Value bool Value public float Value { get; set; } Property Value float Volume Per-component volume multiplier. public float Volume { get; set; } Property Value float Methods AddValue(float) public void AddValue(float amount) Parameters amount float ApplyIndicatorColor(ImageIndicator, float) Applies dynamic color to indicator based on progress value and settings protected virtual void ApplyIndicatorColor(ImageIndicator indicator, float alpha) Parameters indicator ImageIndicator alpha float Awake() protected override void Awake() ClearAutoIndicators() protected virtual void ClearAutoIndicators() CompleteProgress() Sets the progress bar to the maximum value. public void CompleteProgress() ConfigureIndicatorsLayoutGroup() protected virtual void ConfigureIndicatorsLayoutGroup() CreateExampleTriggers() Creates example trigger configuration for testing purposes [ContextMenu(\"Create Example Secondary Bar Triggers\")] public void CreateExampleTriggers() CreateIndicatorFromPrefab(GameObject) protected virtual ImageIndicator CreateIndicatorFromPrefab(GameObject prefab) Parameters prefab GameObject Returns ImageIndicator ForceCleanupExcessIndicators() Force cleanup of excess auto indicators in container. This method ensures the container has exactly _indicatorAmount auto indicators. [ContextMenu(\"Force Cleanup Excess Indicators\")] public void ForceCleanupExcessIndicators() ForceCreateIndicators(int) Force creates the specified number of indicators immediately. Used in ForceRefreshIndicators to avoid timing issues with delayed destruction in editor. protected virtual void ForceCreateIndicators(int targetCount) Parameters targetCount int Number of indicators to create ForceRefreshIndicators() Force refresh of indicators (useful for debugging). If using auto indicators (IsDifferentIndicators = false), removes all existing indicators and recreates them from the prefab with IndicatorPrefab according to IndicatorAmount. [ContextMenu(\"Force Refresh Indicators\")] public void ForceRefreshIndicators() GetCurrentAutoIndicatorCount() protected virtual int GetCurrentAutoIndicatorCount() Returns int GraphicUpdateComplete() Callback sent when this ICanvasElement has completed Graphic rebuild. public virtual void GraphicUpdateComplete() InitializeIndicators() protected virtual void InitializeIndicators() LayoutComplete() Callback sent when this ICanvasElement has completed layout. public virtual void LayoutComplete() LoadState() Loads component state from persistent storage. public void LoadState() OnDestroy() protected override void OnDestroy() PlayProgressCompleteSound() public void PlayProgressCompleteSound() PlayProgressUpdateSound() public void PlayProgressUpdateSound() Rebuild(CanvasUpdate) Rebuild the element for the given stage. public virtual void Rebuild(CanvasUpdate executing) Parameters executing CanvasUpdate The current CanvasUpdate stage being rebuild. ResetProgress() Resets the progress bar to the minimum value. public void ResetProgress() SafeDestroyGameObject(GameObject) protected virtual void SafeDestroyGameObject(GameObject obj) Parameters obj GameObject SaveState() Saves component state to persistent storage. public void SaveState() SetBackgroundEnabled(bool) public void SetBackgroundEnabled(bool enabled) Parameters enabled bool SetDirection(ProgressDirection) public void SetDirection(ProgressBar.ProgressDirection direction) Parameters direction ProgressBar.ProgressDirection SetFillLabelEnabled(bool) public void SetFillLabelEnabled(bool enabled) Parameters enabled bool SetTextEnabled(bool) public void SetTextEnabled(bool enabled) Parameters enabled bool SetValue(float, bool) Sets the value of the progress bar, optionally animating the transition. This method validates the input, clamps it within the allowed range, and updates the progress bar's visual state. If the value is changed, it triggers value change events and handles secondary bar logic if enabled. public void SetValue(float newValue, bool animate = true) Parameters newValue float The new value to assign to the progress bar. This value will be clamped between _minValue and _maxValue. animate bool If true, the progress bar will animate smoothly to the new value (if animation is enabled and the application is playing); otherwise, the value will update instantly. SetValueImmediate(float) Sets the value of the progress bar without animation. This method is used internally by SetValue(float, bool) when animation is disabled. protected virtual void SetValueImmediate(float newValue) Parameters newValue float The new value to assign to the progress bar. This value will be clamped between _minValue and _maxValue. SetValueImmediate(float, bool, bool) Sets the value of the progress bar without animation. This method is used internally by SetValue(float, bool) when animation is disabled. public void SetValueImmediate(float newValue, bool updateVisuals = true, bool triggerEvents = true) Parameters newValue float The new value to assign to the progress bar. This value will be clamped between _minValue and _maxValue. updateVisuals bool If true, the progress bar will update its visuals. triggerEvents bool If true, the progress bar will trigger events. SetupLayoutGroupSettings(LayoutGroup) protected virtual void SetupLayoutGroupSettings(LayoutGroup layoutGroup) Parameters layoutGroup LayoutGroup Start() protected override void Start() SubtractValue(float) public void SubtractValue(float amount) Parameters amount float Update() protected virtual void Update() UpdateColors() public void UpdateColors() UpdateIndicators() protected virtual void UpdateIndicators() UpdateVisuals() Updates the visual representation of the progress bar based on its current fill type. This method handles the visual update for both regular fill types and indicators. It also updates the secondary bar and the fill label position. protected virtual void UpdateVisuals() ValidateAndFixIndicatorCount() Validates and fixes indicator count discrepancies. Call this if you suspect there are issues with indicator count. [ContextMenu(\"Validate & Fix Indicator Count\")] public void ValidateAndFixIndicatorCount() ValidateValue() protected virtual void ValidateValue()"
  },
  "api/Fallencake.UI.ProgressBarAudioHandler.html": {
    "href": "api/Fallencake.UI.ProgressBarAudioHandler.html",
    "title": "Class ProgressBarAudioHandler | ModularUIPack",
    "summary": "Class ProgressBarAudioHandler Namespace Fallencake.UI Assembly Fallencake.UI.dll public class ProgressBarAudioHandler : UIAudioHandler<IProgressBarAudioProvider>, IAudioEventHandler, IProgressBarAudioHandler, IAudioHandler Inheritance object UIAudioHandler<IProgressBarAudioProvider> ProgressBarAudioHandler Implements IAudioEventHandler IProgressBarAudioHandler IAudioHandler Inherited Members UIAudioHandler<IProgressBarAudioProvider>._provider UIAudioHandler<IProgressBarAudioProvider>.Component UIAudioHandler<IProgressBarAudioProvider>.Selectable UIAudioHandler<IProgressBarAudioProvider>.AudioSource UIAudioHandler<IProgressBarAudioProvider>.EnableSounds UIAudioHandler<IProgressBarAudioProvider>.Volume UIAudioHandler<IProgressBarAudioProvider>.AddEventTriggers() UIAudioHandler<IProgressBarAudioProvider>.RemoveEventTriggers() UIAudioHandler<IProgressBarAudioProvider>.UpdateInteractable(bool) UIAudioHandler<IProgressBarAudioProvider>.IsInteractable() UIAudioHandler<IProgressBarAudioProvider>.PlaySelectSound() UIAudioHandler<IProgressBarAudioProvider>.PlayDeselectSound() UIAudioHandler<IProgressBarAudioProvider>.PlayPressSound() UIAudioHandler<IProgressBarAudioProvider>.OnSelect(BaseEventData) UIAudioHandler<IProgressBarAudioProvider>.OnDeselect(BaseEventData) UIAudioHandler<IProgressBarAudioProvider>.OnPointerClick(PointerEventData) UIAudioHandler<IProgressBarAudioProvider>.OnPointerEnter(PointerEventData) UIAudioHandler<IProgressBarAudioProvider>.OnPointerExit(PointerEventData) UIAudioHandler<IProgressBarAudioProvider>.OnSubmit(BaseEventData) Methods CanPlayProgressUpdateSound() public bool CanPlayProgressUpdateSound() Returns bool Create(IProgressBarAudioProvider) public static ProgressBarAudioHandler Create(IProgressBarAudioProvider provider) Parameters provider IProgressBarAudioProvider Returns ProgressBarAudioHandler Dispose() Releases resources and unregisters from the manager public override void Dispose() PlayProgressCompleteSound() public void PlayProgressCompleteSound() PlayProgressUpdateSound(float) public void PlayProgressUpdateSound(float pitch = -1) Parameters pitch float"
  },
  "api/Fallencake.UI.ProgressBarTestScript.html": {
    "href": "api/Fallencake.UI.ProgressBarTestScript.html",
    "title": "Class ProgressBarTestScript | ModularUIPack",
    "summary": "Class ProgressBarTestScript Namespace Fallencake.UI Assembly Fallencake.UI.dll Тестовий скрипт для перевірки нових івентів в ImageIndicator і ProgressBar public class ProgressBarTestScript : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ProgressBarTestScript Methods CompleteProgress() [ContextMenu(\"Complete Progress\")] public void CompleteProgress() ResetProgress() [ContextMenu(\"Reset Progress\")] public void ResetProgress() SetProgressTo25() [ContextMenu(\"Set Progress to 25%\")] public void SetProgressTo25() SetProgressTo50() [ContextMenu(\"Set Progress to 50%\")] public void SetProgressTo50() SetProgressTo75() [ContextMenu(\"Set Progress to 75%\")] public void SetProgressTo75() TestImageIndicatorEventsMenu() [ContextMenu(\"Test Image Indicator Events\")] public void TestImageIndicatorEventsMenu() TestProgressBarEventsMenu() [ContextMenu(\"Test Progress Bar Events\")] public void TestProgressBarEventsMenu() ToggleIndicator() [ContextMenu(\"Toggle Indicator\")] public void ToggleIndicator()"
  },
  "api/Fallencake.UI.RadialSlider.FillDirection.html": {
    "href": "api/Fallencake.UI.RadialSlider.FillDirection.html",
    "title": "Enum RadialSlider.FillDirection | ModularUIPack",
    "summary": "Enum RadialSlider.FillDirection Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum RadialSlider.FillDirection Fields Clockwise = 0 CounterClockwise = 1"
  },
  "api/Fallencake.UI.RadialSlider.html": {
    "href": "api/Fallencake.UI.RadialSlider.html",
    "title": "Class RadialSlider | ModularUIPack",
    "summary": "Class RadialSlider Namespace Fallencake.UI Assembly Fallencake.UI.dll Radial slider implementation that maps value to 360° arc with configurable origin and clockwise/counterclockwise fill direction. public class RadialSlider : Slider, IMultiSelectable, ISlider Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable MultipleGraphicsSelectable Slider RadialSlider Implements IMultiSelectable ISlider Inherited Members Slider._fillImage Slider._handle Slider._valueTextLabel Slider._inputField Slider._minValue Slider.MinValue Slider._maxValue Slider.MaxValue Slider._value Slider.Value Slider._decimals Slider.Decimals Slider._isPercent Slider.IsPercent Slider._isAutoSizeEnabled Slider.IsAutoSizeEnabled Slider._isValueTextEnabled Slider.IsValueTextEnabled Slider._isInputFieldEnabled Slider.IsInputFieldEnabled Slider._isWholeNumbers Slider.IsWholeNumbers Slider._axis Slider.Axis Slider._reverseValue Slider.ReverseValue Slider._stepSize Slider._isSavingEnabled Slider.IsSavingEnabled Slider._valueSaveKey Slider.onValueChanged Slider.onPointerEnter Slider.onPointerExit Slider.DisplayedValue Slider.ValueText Slider._hitRectTransform Slider._currentValueOnPointerDown Slider._displayedValuePrecision Slider._isLoadedFromSave Slider._valueChanged Slider.k_savingTag Slider.s_HandleWarning Slider.s_FillImageWarning Slider.s_ValueTextWarning Slider._isPointerDown Slider._isPointerUp Slider.NormalizedValue Slider.OnRectTransformDimensionsChange() Slider.Start() Slider.OnEnable() Slider.OnDisable() Slider.Initialize() Slider.UpdateInputFieldListener() Slider.FindSelectableOnLeft() Slider.FindSelectableOnRight() Slider.FindSelectableOnUp() Slider.FindSelectableOnDown() Slider.OnPointerEnter(PointerEventData) Slider.OnPointerExit(PointerEventData) Slider.LoadState() Slider.SaveState() Slider.SetValue(float, bool) Slider.ForceUpdateVisuals() Slider.UpdateVisuals() Slider.SetFillImage() Slider.SetValueText() Slider.SetActiveValueTextLabel(bool) Slider.SetInputFieldValue(string) Slider.SetActiveInputField(bool) Slider.UpdateInputField() Slider.UpdateTextAutoSize() Slider.HasValueChanged() MultipleGraphicsSelectable._colorableGraphics MultipleGraphicsSelectable._swappableGraphics MultipleGraphicsSelectable._swappableCanvasGroupe MultipleGraphicsSelectable.ColorableGraphics MultipleGraphicsSelectable.SwappableGraphics MultipleGraphicsSelectable.SwappableCanvasGroupe MultipleGraphicsSelectable._transition MultipleGraphicsSelectable.SelectableTransition MultipleGraphicsSelectable._tweenCoroutine MultipleGraphicsSelectable.OnDestroy() MultipleGraphicsSelectable.DoStateTransition(Selectable.SelectionState, bool) MultipleGraphicsSelectable.AddNewColorableGraphics() MultipleGraphicsSelectable.AddNewSwappableSprite() MultipleGraphicsSelectable.AddColorableGraphic(Graphic, SelectionColorBlock) MultipleGraphicsSelectable.AddColorableGraphic(Graphic, Color, Color, Color, Color, Color, float, float) MultipleGraphicsSelectable.AddSwappableSprite(Graphic, SelectionSpriteState) MultipleGraphicsSelectable.AddSwappableSprite(Image, Sprite, Sprite, Sprite, Sprite) MultipleGraphicsSelectable.SetFadingCanvasGroups(CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, float) Properties CurrentAngle Angle derived from normalized value (0..360 degrees). public float CurrentAngle { get; } Property Value float CurrentAngleRaw Angle derived from raw value without normalization. public float CurrentAngleRaw { get; } Property Value float Direction Fill direction around the circle. public RadialSlider.FillDirection Direction { get; set; } Property Value RadialSlider.FillDirection Methods GraphicUpdateComplete() See ICanvasElement.GraphicUpdateComplete public virtual void GraphicUpdateComplete() HandleSliderMouseInput(PointerEventData, bool) protected override void HandleSliderMouseInput(PointerEventData eventData, bool isValueClamped) Parameters eventData PointerEventData isValueClamped bool LayoutComplete() See ICanvasElement.LayoutComplete public virtual void LayoutComplete() Rebuild(CanvasUpdate) Rebuild the element for the given stage. public virtual void Rebuild(CanvasUpdate executing) Parameters executing CanvasUpdate The current CanvasUpdate stage being rebuild. SetHandlePosition() protected override void SetHandlePosition() SetOrigin() protected override void SetOrigin()"
  },
  "api/Fallencake.UI.RippleEffect.html": {
    "href": "api/Fallencake.UI.RippleEffect.html",
    "title": "Class RippleEffect | ModularUIPack",
    "summary": "Class RippleEffect Namespace Fallencake.UI Assembly Fallencake.UI.dll Expanding ripple click effect that scales an image and fades its color, destroying itself when complete. public class RippleEffect : ClickEffect Inheritance object Object Component Behaviour MonoBehaviour ClickEffect RippleEffect Inherited Members ClickEffect.IsUnscaledTime ClickEffect._parent ClickEffect._image ClickEffect.Start() ClickEffect.Update() Fields MaxScale Maximum scale multiplier for the ripple before it disappears. public float MaxScale Field Value float Speed Animation speed multiplier for scale and color transitions. public float Speed Field Value float StartColor Starting color including alpha. public Color StartColor Field Value Color TargetColor Target color including alpha. public Color TargetColor Field Value Color Methods Init() Finds and caches required components. Called from Start(). protected override void Init() PlayEffectTween() Implement animation step for the effect. protected override void PlayEffectTween()"
  },
  "api/Fallencake.UI.RotateTween.html": {
    "href": "api/Fallencake.UI.RotateTween.html",
    "title": "Class RotateTween | ModularUIPack",
    "summary": "Class RotateTween Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class RotateTween : TweenBase<Transform, Vector3>, ITargetableTween<Transform, Vector3>, ITween Inheritance object TweenBase<Transform, Vector3> RotateTween Implements ITargetableTween<Transform, Vector3> ITween Inherited Members TweenBase<Transform, Vector3>._target TweenBase<Transform, Vector3>._startValue TweenBase<Transform, Vector3>._endValue TweenBase<Transform, Vector3>._duration TweenBase<Transform, Vector3>._delay TweenBase<Transform, Vector3>._ease TweenBase<Transform, Vector3>.Target TweenBase<Transform, Vector3>.StartValue TweenBase<Transform, Vector3>.EndValue TweenBase<Transform, Vector3>.Duration TweenBase<Transform, Vector3>.Delay TweenBase<Transform, Vector3>.Ease TweenBase<Transform, Vector3>.IsTweened TweenBase<Transform, Vector3>._isTweened TweenBase<Transform, Vector3>._tweenCoroutine TweenBase<Transform, Vector3>.Play(MonoBehaviour, bool) TweenBase<Transform, Vector3>.Reset(bool) TweenBase<Transform, Vector3>.ResetTarget() TweenBase<Transform, Vector3>.OnComplete() TweenBase<Transform, Vector3>.GetTargetValue(bool) Constructors RotateTween() public RotateTween() RotateTween(Transform, Vector3, Vector3, float, float, AnimationCurve) public RotateTween(Transform target, Vector3 startValue, Vector3 endValue, float duration, float delay, AnimationCurve ease = null) Parameters target Transform startValue Vector3 endValue Vector3 duration float delay float ease AnimationCurve Methods Play(MonoBehaviour, bool) Plays the tween on a coroutine holder. Implementations should start a coroutine and call OnComplete() when finished. public override void Play(MonoBehaviour coroutineHolder, bool isForward = true) Parameters coroutineHolder MonoBehaviour MonoBehaviour used to start/stop coroutines. isForward bool If true plays towards EndValue, otherwise towards StartValue. ResetTarget() Implemented by concrete tweens to restore target to its initial state. protected override void ResetTarget()"
  },
  "api/Fallencake.UI.RotateTweenParameters.html": {
    "href": "api/Fallencake.UI.RotateTweenParameters.html",
    "title": "Class RotateTweenParameters | ModularUIPack",
    "summary": "Class RotateTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class RotateTweenParameters : TweenParametersData<RectTransform, Vector3>, ITweenParametersData<RectTransform, Vector3>, ITweenTargetData<RectTransform> Inheritance object TweenParametersData<RectTransform, Vector3> RotateTweenParameters Implements ITweenParametersData<RectTransform, Vector3> ITweenTargetData<RectTransform> Inherited Members TweenParametersData<RectTransform, Vector3>.Target TweenParametersData<RectTransform, Vector3>.Value TweenParametersData<RectTransform, Vector3>.StartValue Constructors RotateTweenParameters() public RotateTweenParameters() RotateTweenParameters(RectTransform, Vector3) public RotateTweenParameters(RectTransform target, Vector3 rotation) Parameters target RectTransform rotation Vector3 Properties StartValue public override Vector3 StartValue { get; } Property Value Vector3 Target public override RectTransform Target { get; } Property Value RectTransform Value public override Vector3 Value { get; } Property Value Vector3"
  },
  "api/Fallencake.UI.ScalePopupTweenParameters.html": {
    "href": "api/Fallencake.UI.ScalePopupTweenParameters.html",
    "title": "Class ScalePopupTweenParameters | ModularUIPack",
    "summary": "Class ScalePopupTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class ScalePopupTweenParameters : PopupTweenParametersData<Transform, Vector3>, IPopupTweenParametersData<Transform, Vector3>, ITweenTargetData<Transform> Inheritance object PopupTweenParametersData<Transform, Vector3> ScalePopupTweenParameters Implements IPopupTweenParametersData<Transform, Vector3> ITweenTargetData<Transform> Inherited Members PopupTweenParametersData<Transform, Vector3>.Target PopupTweenParametersData<Transform, Vector3>.ShowValue PopupTweenParametersData<Transform, Vector3>.HideValue Properties HideValue public override Vector3 HideValue { get; } Property Value Vector3 ShowValue public override Vector3 ShowValue { get; } Property Value Vector3 StartSize public float StartSize { get; } Property Value float Target public override Transform Target { get; } Property Value Transform"
  },
  "api/Fallencake.UI.ScaleTween.html": {
    "href": "api/Fallencake.UI.ScaleTween.html",
    "title": "Class ScaleTween | ModularUIPack",
    "summary": "Class ScaleTween Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class ScaleTween : TweenBase<Transform, Vector3>, ITargetableTween<Transform, Vector3>, ITween Inheritance object TweenBase<Transform, Vector3> ScaleTween Implements ITargetableTween<Transform, Vector3> ITween Inherited Members TweenBase<Transform, Vector3>._target TweenBase<Transform, Vector3>._startValue TweenBase<Transform, Vector3>._endValue TweenBase<Transform, Vector3>._duration TweenBase<Transform, Vector3>._delay TweenBase<Transform, Vector3>._ease TweenBase<Transform, Vector3>.Target TweenBase<Transform, Vector3>.StartValue TweenBase<Transform, Vector3>.EndValue TweenBase<Transform, Vector3>.Duration TweenBase<Transform, Vector3>.Delay TweenBase<Transform, Vector3>.Ease TweenBase<Transform, Vector3>.IsTweened TweenBase<Transform, Vector3>._isTweened TweenBase<Transform, Vector3>._tweenCoroutine TweenBase<Transform, Vector3>.Play(MonoBehaviour, bool) TweenBase<Transform, Vector3>.Reset(bool) TweenBase<Transform, Vector3>.ResetTarget() TweenBase<Transform, Vector3>.OnComplete() TweenBase<Transform, Vector3>.GetTargetValue(bool) Constructors ScaleTween() public ScaleTween() ScaleTween(Transform, Vector3, Vector3, float, float, AnimationCurve) public ScaleTween(Transform target, Vector3 startValue, Vector3 endValue, float duration, float delay, AnimationCurve ease = null) Parameters target Transform startValue Vector3 endValue Vector3 duration float delay float ease AnimationCurve Methods Play(MonoBehaviour, bool) Plays the tween on a coroutine holder. Implementations should start a coroutine and call OnComplete() when finished. public override void Play(MonoBehaviour coroutineHolder, bool isForward = true) Parameters coroutineHolder MonoBehaviour MonoBehaviour used to start/stop coroutines. isForward bool If true plays towards EndValue, otherwise towards StartValue. ResetTarget() Implemented by concrete tweens to restore target to its initial state. protected override void ResetTarget()"
  },
  "api/Fallencake.UI.ScaleTweenParameters.html": {
    "href": "api/Fallencake.UI.ScaleTweenParameters.html",
    "title": "Class ScaleTweenParameters | ModularUIPack",
    "summary": "Class ScaleTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class ScaleTweenParameters : TweenParametersData<Transform, Vector3>, ITweenParametersData<Transform, Vector3>, ITweenTargetData<Transform> Inheritance object TweenParametersData<Transform, Vector3> ScaleTweenParameters Implements ITweenParametersData<Transform, Vector3> ITweenTargetData<Transform> Inherited Members TweenParametersData<Transform, Vector3>.Target TweenParametersData<Transform, Vector3>.Value TweenParametersData<Transform, Vector3>.StartValue Constructors ScaleTweenParameters() public ScaleTweenParameters() ScaleTweenParameters(Transform, Vector3) public ScaleTweenParameters(Transform target, Vector3 scale) Parameters target Transform scale Vector3 Properties StartSize public float StartSize { get; } Property Value float StartValue public override Vector3 StartValue { get; } Property Value Vector3 Target public override Transform Target { get; } Property Value Transform Value public override Vector3 Value { get; } Property Value Vector3"
  },
  "api/Fallencake.UI.ScrollableImage.html": {
    "href": "api/Fallencake.UI.ScrollableImage.html",
    "title": "Class ScrollableImage | ModularUIPack",
    "summary": "Class ScrollableImage Namespace Fallencake.UI Assembly Fallencake.UI.dll Represents a scrollable texture bound to a UnityEngine.UI.RawImage. Manages UV offset over time to create a seamless scrolling effect. [Serializable] public class ScrollableImage Inheritance object ScrollableImage Remarks Call Init() once to cache the starting UnityEngine.UI.RawImage.uvRect and to initialize the current Offset. Then, on each frame, call UpdateOffset() (or let AnimatedImageScroller drive it) to advance the UV offset based on Speed. The offset wraps in the [0,1) range for both axes to avoid precision growth. Properties Image The target UnityEngine.UI.RawImage whose UnityEngine.UI.RawImage.uvRect will be updated. public RawImage Image { get; } Property Value RawImage A reference to the UnityEngine.UI.RawImage component that displays the scrolling texture. Must not be null when Init() or UpdateOffset() are called. Offset Current UV offset applied to the Image's UnityEngine.UI.RawImage.uvRect. public Vector2 Offset { get; } Property Value Vector2 The accumulated offset in UV space, wrapped to the [0,1) interval on each axis. Speed UV scrolling speed (units per second) applied to the texture. public Vector2 Speed { get; } Property Value Vector2 A UnityEngine.Vector2 where X shifts the U coordinate and Y shifts the V coordinate. Positive X moves the texture to the left visually (increasing U), positive Y moves it down (increasing V), depending on the material/shader sampling. Defaults to UnityEngine.Vector2.right. Methods Init() Initializes the scrollable image state by caching the starting UnityEngine.UI.RawImage.uvRect and setting Offset to its position. public void Init() Remarks Invoke this after assigning Image. It is safe to call multiple times; the starting rectangle will be re-captured and the offset reset to that position. UpdateOffset() Advances Offset by Time.deltaTime * Speed, wraps it into [0,1), and applies it to the Image's UnityEngine.UI.RawImage.uvRect while preserving width and height. public void UpdateOffset() Remarks Typically called once per frame. Use from Update() or your own update loop. See Also AnimatedImageScroller"
  },
  "api/Fallencake.UI.SecondaryBarTrigger.html": {
    "href": "api/Fallencake.UI.SecondaryBarTrigger.html",
    "title": "Struct SecondaryBarTrigger | ModularUIPack",
    "summary": "Struct SecondaryBarTrigger Namespace Fallencake.UI Assembly Fallencake.UI.dll Represents a trigger pair for secondary progress bar in custom triggers mode. When the primary bar reaches 'primaryValue', the secondary bar should display 'secondaryValue'. The delay between primary and secondary bar updates is controlled by _secondaryBarDelay: Positive delay: primary bar updates first, then secondary bar after delay Negative delay: secondary bar updates first, then primary bar after delay Zero delay: both bars update simultaneously [Serializable] public struct SecondaryBarTrigger Constructors SecondaryBarTrigger(float, float) public SecondaryBarTrigger(float primary, float secondary) Parameters primary float secondary float Fields primaryValue [SerializeField] public float primaryValue Field Value float secondaryValue [SerializeField] public float secondaryValue Field Value float"
  },
  "api/Fallencake.UI.SelectableGroup.html": {
    "href": "api/Fallencake.UI.SelectableGroup.html",
    "title": "Class SelectableGroup | ModularUIPack",
    "summary": "Class SelectableGroup Namespace Fallencake.UI Assembly Fallencake.UI.dll A group of selectable UI elements that manages selection state and interactions between buttons. Provides functionality for single/multiple selection modes and deselection behavior. public class SelectableGroup : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SelectableGroup Properties AllowDeselection Whether deselection is allowed when clicking again public bool AllowDeselection { get; set; } Property Value bool AllowMultipleSelection Whether multiple selection is allowed public bool AllowMultipleSelection { get; set; } Property Value bool SelectedSelectable First selected element (for compatibility) public IGroupSelectable SelectedSelectable { get; } Property Value IGroupSelectable SelectedSelectables Current selected elements public IReadOnlyList<IGroupSelectable> SelectedSelectables { get; } Property Value IReadOnlyList<IGroupSelectable> Methods AddSelectable(IGroupSelectable) Adds a selectable element to the group public void AddSelectable(IGroupSelectable selectable) Parameters selectable IGroupSelectable ForceDeselect(IGroupSelectable) Forces deselection of an element public void ForceDeselect(IGroupSelectable selectable) Parameters selectable IGroupSelectable ForceSelect(IGroupSelectable) Forces selection of an element public void ForceSelect(IGroupSelectable selectable) Parameters selectable IGroupSelectable OnSelectionChanged() Called when selection changes in the group protected virtual void OnSelectionChanged() RemoveSelectable(IGroupSelectable) Removes a selectable element from the group public void RemoveSelectable(IGroupSelectable selectable) Parameters selectable IGroupSelectable SelectSelectable(IGroupSelectable) Selects or deselects an element public void SelectSelectable(IGroupSelectable selectable) Parameters selectable IGroupSelectable UnselectAll() Deselects all elements public void UnselectAll()"
  },
  "api/Fallencake.UI.SelectableTransition.html": {
    "href": "api/Fallencake.UI.SelectableTransition.html",
    "title": "Enum SelectableTransition | ModularUIPack",
    "summary": "Enum SelectableTransition Namespace Fallencake.UI Assembly Fallencake.UI.dll An enumeration of transition modes for a selectable object. public enum SelectableTransition Fields Animation = 3 Use an animation transition. CanvasGroupFading = 4 Use a CanvasGroup fading transition. ColorTint = 1 Use an color tint transition. None = 0 No Transition. SpriteSwap = 2 Use a sprite swap transition."
  },
  "api/Fallencake.UI.SelectableTransitionData-2.html": {
    "href": "api/Fallencake.UI.SelectableTransitionData-2.html",
    "title": "Class SelectableTransitionData<ISelectableDataStates, T> | ModularUIPack",
    "summary": "Class SelectableTransitionData<ISelectableDataStates, T> Namespace Fallencake.UI Assembly Fallencake.UI.dll public abstract class SelectableTransitionData<ISelectableDataStates, T> Type Parameters ISelectableDataStates T Inheritance object SelectableTransitionData<ISelectableDataStates, T> Derived ColorableGraphic SwappableSprite Properties SelectableStates public virtual ISelectableStates<T> SelectableStates { get; } Property Value ISelectableStates<T> Methods GetTargetData(SelectionState) public T GetTargetData(SelectionState state) Parameters state SelectionState Returns T"
  },
  "api/Fallencake.UI.SelectedIndexEvent.html": {
    "href": "api/Fallencake.UI.SelectedIndexEvent.html",
    "title": "Class SelectedIndexEvent | ModularUIPack",
    "summary": "Class SelectedIndexEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class SelectedIndexEvent : UnityEvent<int> Inheritance object UnityEventBase UnityEvent<int> SelectedIndexEvent"
  },
  "api/Fallencake.UI.SelectedTextEvent.html": {
    "href": "api/Fallencake.UI.SelectedTextEvent.html",
    "title": "Class SelectedTextEvent | ModularUIPack",
    "summary": "Class SelectedTextEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class SelectedTextEvent : UnityEvent<TMP_Text> Inheritance object UnityEventBase UnityEvent<TMP_Text> SelectedTextEvent"
  },
  "api/Fallencake.UI.SelectionColorBlock.html": {
    "href": "api/Fallencake.UI.SelectionColorBlock.html",
    "title": "Struct SelectionColorBlock | ModularUIPack",
    "summary": "Struct SelectionColorBlock Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public struct SelectionColorBlock : ISelectableStates<Color> Implements ISelectableStates<Color> Fields defaultColorBlock Simple getter for a code generated default ColorBlock. public static SelectionColorBlock defaultColorBlock Field Value SelectionColorBlock Properties ColorMultiplier Multiplier applied to colors (allows brightening greater then base color). public float ColorMultiplier { get; set; } Property Value float DisabledState The disabled color for this color block. public Color DisabledState { get; set; } Property Value Color FadeDuration How long a color transition between states should take. public float FadeDuration { get; set; } Property Value float HighlightedState The highlight color for this color block. public Color HighlightedState { get; set; } Property Value Color NormalState The normal color for this color block. public Color NormalState { get; set; } Property Value Color PressedState The pressed color for this color block. public Color PressedState { get; set; } Property Value Color SelectedState The selected color for this color block. public Color SelectedState { get; set; } Property Value Color Methods Equals(SelectionColorBlock) public bool Equals(SelectionColorBlock other) Parameters other SelectionColorBlock Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int Operators operator ==(SelectionColorBlock, SelectionColorBlock) public static bool operator ==(SelectionColorBlock point1, SelectionColorBlock point2) Parameters point1 SelectionColorBlock point2 SelectionColorBlock Returns bool operator !=(SelectionColorBlock, SelectionColorBlock) public static bool operator !=(SelectionColorBlock point1, SelectionColorBlock point2) Parameters point1 SelectionColorBlock point2 SelectionColorBlock Returns bool"
  },
  "api/Fallencake.UI.SelectionSpriteState.html": {
    "href": "api/Fallencake.UI.SelectionSpriteState.html",
    "title": "Class SelectionSpriteState | ModularUIPack",
    "summary": "Class SelectionSpriteState Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class SelectionSpriteState : ISelectableStates<Sprite> Inheritance object SelectionSpriteState Implements ISelectableStates<Sprite> Properties DisabledState Disabled sprite. public Sprite DisabledState { get; set; } Property Value Sprite HighlightedState Highlighted sprite. public Sprite HighlightedState { get; set; } Property Value Sprite NormalState Normal sprite. public Sprite NormalState { get; set; } Property Value Sprite PressedState Pressed sprite. public Sprite PressedState { get; set; } Property Value Sprite SelectedState Selected sprite. public Sprite SelectedState { get; set; } Property Value Sprite Methods Equals(SelectionSpriteState) public bool Equals(SelectionSpriteState other) Parameters other SelectionSpriteState Returns bool"
  },
  "api/Fallencake.UI.SelectionState.html": {
    "href": "api/Fallencake.UI.SelectionState.html",
    "title": "Enum SelectionState | ModularUIPack",
    "summary": "Enum SelectionState Namespace Fallencake.UI Assembly Fallencake.UI.dll An enumeration of selected states of objects public enum SelectionState Fields Disabled = 4 The UI object cannot be selected. Highlighted = 1 The UI object is highlighted. Normal = 0 The UI object can be selected. Pressed = 2 The UI object is pressed. Selected = 3 The UI object is selected"
  },
  "api/Fallencake.UI.Selector.html": {
    "href": "api/Fallencake.UI.Selector.html",
    "title": "Class Selector | ModularUIPack",
    "summary": "Class Selector Namespace Fallencake.UI Assembly Fallencake.UI.dll Simple selector component that updates text, icons, layouts, and indicators based on the selected item. public class Selector : BaseSelector, ISaveable Inheritance object Object Component Behaviour MonoBehaviour BaseSelector Selector Implements ISaveable Inherited Members BaseSelector._basicTextLabel BaseSelector._secondaryTextLabel BaseSelector._basicIcon BaseSelector._secondaryIcon BaseSelector._indicatorsContainer BaseSelector._indicatorPrefab BaseSelector._previousAnimator BaseSelector._nextAnimator BaseSelector._basicContentLayout BaseSelector._secondaryContentLayout BaseSelector._isIconEnabled BaseSelector.IsIconEnabled BaseSelector._isTextEnabled BaseSelector.IsTextEnabled BaseSelector._isIndicatorsEnabled BaseSelector.IsIndicatorsEnabled BaseSelector._isSavingEnabled BaseSelector.IsSavingEnabled BaseSelector._saveKey BaseSelector.SaveKey BaseSelector._invokeOnInitialization BaseSelector.InvokeOnInitialization BaseSelector._invertAnimation BaseSelector.InvertAnimation BaseSelector._loopSelection BaseSelector.LoopSelection BaseSelector._iconScale BaseSelector.IconScale BaseSelector._contentSpacing BaseSelector.ContentSpacing BaseSelector._defaultItemIndex BaseSelector.DefaultItemIndex BaseSelector._items BaseSelector.OnSelectedIndexChanged BaseSelector.OnSelectedTextChanged BaseSelector._selectedItemIndex BaseSelector.SelectedItemIndex BaseSelector._isInitialized BaseSelector.IsInitialized BaseSelector.PlayerPrefsKeyPrefix BaseSelector.s_ItemsValidationWarning BaseSelector.s_TextLabelWarning BaseSelector.s_IndicatorWarning BaseSelector.Awake() BaseSelector.Initialize() BaseSelector.ValidateComponents() BaseSelector.LoadState() BaseSelector.SaveState() BaseSelector.UpdateVisuals() BaseSelector.InvokeInitialSelection() BaseSelector.HandleSelectedIndexChanged() BaseSelector.HandleSelectedTextChanged() BaseSelector.IsDestroyed() Methods CreateNewItem(string, Sprite) public void CreateNewItem(string name, Sprite icon = null) Parameters name string icon Sprite NextItem() public void NextItem() PreviousItem() public void PreviousItem() RemoveItem(string) public void RemoveItem(string itemName) Parameters itemName string SelectItem(int) Selects an item by index and updates visuals in derived implementations. public override void SelectItem(int index) Parameters index int Zero-based index of the item to select. SelectItem(int, bool) Selects an item and optionally plays transition animation. public void SelectItem(int index, bool playAnimation = true) Parameters index int Zero-based index of the item to select. playAnimation bool Whether to play selection animation. UpdateContentLayout() protected override void UpdateContentLayout() UpdateIndicators() protected override void UpdateIndicators() UpdateLabelAndIcon() protected override void UpdateLabelAndIcon()"
  },
  "api/Fallencake.UI.SelectorItem.html": {
    "href": "api/Fallencake.UI.SelectorItem.html",
    "title": "Class SelectorItem | ModularUIPack",
    "summary": "Class SelectorItem Namespace Fallencake.UI Assembly Fallencake.UI.dll Represents a single selectable item: a display name, optional icon, and a selection event. [Serializable] public class SelectorItem Inheritance object SelectorItem Fields Icon Optional icon sprite used by icon graphics. public Sprite Icon Field Value Sprite Name Display name used in labels. [SerializeField] public string Name Field Value string OnSelected Event invoked when this item becomes selected. public UnityEvent OnSelected Field Value UnityEvent s_DefaultName public const string s_DefaultName = \"Selector Item\" Field Value string"
  },
  "api/Fallencake.UI.SimpleTweenAnimator.html": {
    "href": "api/Fallencake.UI.SimpleTweenAnimator.html",
    "title": "Class SimpleTweenAnimator | ModularUIPack",
    "summary": "Class SimpleTweenAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll Simple Tween Animator class for handling basic tween animations. public class SimpleTweenAnimator : TweenAnimator, ITweenAnimator Inheritance object Object Component Behaviour MonoBehaviour TweenAnimatorBase TweenAnimator SimpleTweenAnimator Implements ITweenAnimator Inherited Members TweenAnimator.Tweens TweenAnimatorBase.PlayTween(TweenParameters, LoopType, bool, Action) TweenAnimatorBase.PlayPopupTween(PopupTweenParameters, bool, bool, bool, Action, Action) TweenAnimatorBase.OnTweenComplete(ITweenBasicParameters, bool, Action) TweenAnimatorBase.OnSimpleTweenComplete(ITweenBasicParameters, bool, Action) TweenAnimatorBase.OnSimpleTweenComplete(ITweenBasicParameters, bool, bool, Action) Properties TweenParameters Gets the tween parameters. public TweenParameters TweenParameters { get; } Property Value TweenParameters Methods OnDisable() protected override void OnDisable() Play() public void Play() Play(Action) Plays the tween animation. public override void Play(Action onComplete = null) Parameters onComplete Action Action to be called on completion. Reset() public void Reset() Stop() Stops the tween animation. public override void Stop()"
  },
  "api/Fallencake.UI.SimpleUIParticle.html": {
    "href": "api/Fallencake.UI.SimpleUIParticle.html",
    "title": "Class SimpleUIParticle | ModularUIPack",
    "summary": "Class SimpleUIParticle Namespace Fallencake.UI Assembly Fallencake.UI.dll public class SimpleUIParticle : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SimpleUIParticle Fields image [Header(\"Particle Settings\")] public Image image Field Value Image Properties IsActive public bool IsActive { get; } Property Value bool Methods DeactivateParticle() public void DeactivateParticle() Initialize(Sprite, float, Vector3, Transform) public void Initialize(Sprite sprite, float lifeTime, Vector3 position, Transform parent) Parameters sprite Sprite lifeTime float position Vector3 parent Transform Initialize(Sprite, float, Vector3, Transform, float, Color, AnimationCurve, Gradient) public void Initialize(Sprite sprite, float lifeTime, Vector3 position, Transform parent, float startSize, Color startColor, AnimationCurve sizeOverLifetime, Gradient colorOverLifetime) Parameters sprite Sprite lifeTime float position Vector3 parent Transform startSize float startColor Color sizeOverLifetime AnimationCurve colorOverLifetime Gradient Initialize(Sprite, float, Vector3, Transform, float, Color, AnimationCurve, Gradient, float) public void Initialize(Sprite sprite, float lifeTime, Vector3 position, Transform parent, float startSize, Color startColor, AnimationCurve sizeOverLifetime, Gradient colorOverLifetime, float rotationAngle) Parameters sprite Sprite lifeTime float position Vector3 parent Transform startSize float startColor Color sizeOverLifetime AnimationCurve colorOverLifetime Gradient rotationAngle float SetColorOverLifetime(Gradient) public void SetColorOverLifetime(Gradient gradient) Parameters gradient Gradient SetParticleProperties(float, Color, AnimationCurve, Gradient) public void SetParticleProperties(float startSize, Color startColor, AnimationCurve sizeOverLifetime, Gradient colorOverLifetime) Parameters startSize float startColor Color sizeOverLifetime AnimationCurve colorOverLifetime Gradient SetRotation(float) public void SetRotation(float angle) Parameters angle float SetSizeOverLifetime(AnimationCurve) public void SetSizeOverLifetime(AnimationCurve curve) Parameters curve AnimationCurve SetStartColor(Color) public void SetStartColor(Color color) Parameters color Color SetStartSize(float) public void SetStartSize(float size) Parameters size float"
  },
  "api/Fallencake.UI.SizePopupTweenParameters.html": {
    "href": "api/Fallencake.UI.SizePopupTweenParameters.html",
    "title": "Class SizePopupTweenParameters | ModularUIPack",
    "summary": "Class SizePopupTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll Popup tween parameters for animating RectTransform sizeDelta values with separate show and hide values [Serializable] public class SizePopupTweenParameters : PopupTweenParametersData<RectTransform, Vector2>, IPopupTweenParametersData<RectTransform, Vector2>, ITweenTargetData<RectTransform> Inheritance object PopupTweenParametersData<RectTransform, Vector2> SizePopupTweenParameters Implements IPopupTweenParametersData<RectTransform, Vector2> ITweenTargetData<RectTransform> Inherited Members PopupTweenParametersData<RectTransform, Vector2>.Target PopupTweenParametersData<RectTransform, Vector2>.ShowValue PopupTweenParametersData<RectTransform, Vector2>.HideValue Properties HideHeight Hide Height (sizeDelta.y) public float HideHeight { get; set; } Property Value float HideValue public override Vector2 HideValue { get; } Property Value Vector2 HideWidth Hide Width (sizeDelta.x) public float HideWidth { get; set; } Property Value float ShowHeight Show Height (sizeDelta.y) public float ShowHeight { get; set; } Property Value float ShowValue public override Vector2 ShowValue { get; } Property Value Vector2 ShowWidth Show Width (sizeDelta.x) public float ShowWidth { get; set; } Property Value float Target public override RectTransform Target { get; } Property Value RectTransform"
  },
  "api/Fallencake.UI.SizeTween.html": {
    "href": "api/Fallencake.UI.SizeTween.html",
    "title": "Class SizeTween | ModularUIPack",
    "summary": "Class SizeTween Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class SizeTween : TweenBase<RectTransform, Vector2>, ITargetableTween<RectTransform, Vector2>, ITween Inheritance object TweenBase<RectTransform, Vector2> SizeTween Implements ITargetableTween<RectTransform, Vector2> ITween Inherited Members TweenBase<RectTransform, Vector2>._target TweenBase<RectTransform, Vector2>._startValue TweenBase<RectTransform, Vector2>._endValue TweenBase<RectTransform, Vector2>._duration TweenBase<RectTransform, Vector2>._delay TweenBase<RectTransform, Vector2>._ease TweenBase<RectTransform, Vector2>.Target TweenBase<RectTransform, Vector2>.StartValue TweenBase<RectTransform, Vector2>.EndValue TweenBase<RectTransform, Vector2>.Duration TweenBase<RectTransform, Vector2>.Delay TweenBase<RectTransform, Vector2>.Ease TweenBase<RectTransform, Vector2>.IsTweened TweenBase<RectTransform, Vector2>._isTweened TweenBase<RectTransform, Vector2>._tweenCoroutine TweenBase<RectTransform, Vector2>.Play(MonoBehaviour, bool) TweenBase<RectTransform, Vector2>.Reset(bool) TweenBase<RectTransform, Vector2>.ResetTarget() TweenBase<RectTransform, Vector2>.OnComplete() TweenBase<RectTransform, Vector2>.GetTargetValue(bool) Constructors SizeTween() public SizeTween() SizeTween(RectTransform, Vector2, Vector2, float, float, AnimationCurve) public SizeTween(RectTransform target, Vector2 startValue, Vector2 endValue, float duration, float delay, AnimationCurve ease = null) Parameters target RectTransform startValue Vector2 endValue Vector2 duration float delay float ease AnimationCurve Methods Play(MonoBehaviour, bool) Plays the tween on a coroutine holder. Implementations should start a coroutine and call OnComplete() when finished. public override void Play(MonoBehaviour coroutineHolder, bool isForward = true) Parameters coroutineHolder MonoBehaviour MonoBehaviour used to start/stop coroutines. isForward bool If true plays towards EndValue, otherwise towards StartValue. ResetTarget() Implemented by concrete tweens to restore target to its initial state. protected override void ResetTarget()"
  },
  "api/Fallencake.UI.SizeTweenParameters.html": {
    "href": "api/Fallencake.UI.SizeTweenParameters.html",
    "title": "Class SizeTweenParameters | ModularUIPack",
    "summary": "Class SizeTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll Tween parameters for animating RectTransform sizeDelta values (Width and Height) [Serializable] public class SizeTweenParameters : TweenParametersData<RectTransform, Vector2>, ITweenParametersData<RectTransform, Vector2>, ITweenTargetData<RectTransform> Inheritance object TweenParametersData<RectTransform, Vector2> SizeTweenParameters Implements ITweenParametersData<RectTransform, Vector2> ITweenTargetData<RectTransform> Inherited Members TweenParametersData<RectTransform, Vector2>.Target TweenParametersData<RectTransform, Vector2>.Value TweenParametersData<RectTransform, Vector2>.StartValue Constructors SizeTweenParameters() public SizeTweenParameters() SizeTweenParameters(RectTransform, float, float) public SizeTweenParameters(RectTransform target, float width, float height) Parameters target RectTransform width float height float SizeTweenParameters(RectTransform, Vector2) public SizeTweenParameters(RectTransform target, Vector2 size) Parameters target RectTransform size Vector2 Properties Height Height (sizeDelta.y) public float Height { get; set; } Property Value float StartValue public override Vector2 StartValue { get; } Property Value Vector2 Target public override RectTransform Target { get; } Property Value RectTransform Value public override Vector2 Value { get; } Property Value Vector2 Width Width (sizeDelta.x) public float Width { get; set; } Property Value float"
  },
  "api/Fallencake.UI.Slider.SliderAxis.html": {
    "href": "api/Fallencake.UI.Slider.SliderAxis.html",
    "title": "Enum Slider.SliderAxis | ModularUIPack",
    "summary": "Enum Slider.SliderAxis Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum Slider.SliderAxis Fields Horizontal = 0 Vertical = 1"
  },
  "api/Fallencake.UI.Slider.SliderEvent.html": {
    "href": "api/Fallencake.UI.Slider.SliderEvent.html",
    "title": "Class Slider.SliderEvent | ModularUIPack",
    "summary": "Class Slider.SliderEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class Slider.SliderEvent : UnityEvent<float> Inheritance object UnityEventBase UnityEvent<float> Slider.SliderEvent"
  },
  "api/Fallencake.UI.Slider.html": {
    "href": "api/Fallencake.UI.Slider.html",
    "title": "Class Slider | ModularUIPack",
    "summary": "Class Slider Namespace Fallencake.UI Assembly Fallencake.UI.dll public abstract class Slider : MultipleGraphicsSelectable, IMultiSelectable, ISlider Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable MultipleGraphicsSelectable Slider Implements IMultiSelectable ISlider Derived LinearSlider RadialSlider Inherited Members MultipleGraphicsSelectable._colorableGraphics MultipleGraphicsSelectable._swappableGraphics MultipleGraphicsSelectable._swappableCanvasGroupe MultipleGraphicsSelectable.ColorableGraphics MultipleGraphicsSelectable.SwappableGraphics MultipleGraphicsSelectable.SwappableCanvasGroupe MultipleGraphicsSelectable._transition MultipleGraphicsSelectable.SelectableTransition MultipleGraphicsSelectable._tweenCoroutine MultipleGraphicsSelectable.OnDestroy() MultipleGraphicsSelectable.DoStateTransition(Selectable.SelectionState, bool) MultipleGraphicsSelectable.AddNewColorableGraphics() MultipleGraphicsSelectable.AddNewSwappableSprite() MultipleGraphicsSelectable.AddColorableGraphic(Graphic, SelectionColorBlock) MultipleGraphicsSelectable.AddColorableGraphic(Graphic, Color, Color, Color, Color, Color, float, float) MultipleGraphicsSelectable.AddSwappableSprite(Graphic, SelectionSpriteState) MultipleGraphicsSelectable.AddSwappableSprite(Image, Sprite, Sprite, Sprite, Sprite) MultipleGraphicsSelectable.SetFadingCanvasGroups(CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, float) Fields _axis protected Slider.SliderAxis _axis Field Value Slider.SliderAxis _currentValueOnPointerDown protected float _currentValueOnPointerDown Field Value float _decimals [SerializeField] [Range(0, 5)] protected int _decimals Field Value int _displayedValuePrecision protected float _displayedValuePrecision Field Value float _fillImage [SerializeField] protected Image _fillImage Field Value Image _handle [SerializeField] protected RectTransform _handle Field Value RectTransform _hitRectTransform protected RectTransform _hitRectTransform Field Value RectTransform _inputField [SerializeField] protected TMP_InputField _inputField Field Value TMP_InputField _isAutoSizeEnabled [SerializeField] protected bool _isAutoSizeEnabled Field Value bool _isInputFieldEnabled [SerializeField] protected bool _isInputFieldEnabled Field Value bool _isLoadedFromSave protected bool _isLoadedFromSave Field Value bool _isPercent [SerializeField] protected bool _isPercent Field Value bool _isPointerDown protected bool _isPointerDown Field Value bool _isPointerUp protected bool _isPointerUp Field Value bool _isSavingEnabled [SerializeField] protected bool _isSavingEnabled Field Value bool _isValueTextEnabled [SerializeField] protected bool _isValueTextEnabled Field Value bool _isWholeNumbers [SerializeField] protected bool _isWholeNumbers Field Value bool _maxValue [SerializeField] protected float _maxValue Field Value float _minValue [SerializeField] protected float _minValue Field Value float _reverseValue protected bool _reverseValue Field Value bool _value [SerializeField] protected float _value Field Value float _valueChanged protected bool _valueChanged Field Value bool _valueSaveKey [SerializeField] protected string _valueSaveKey Field Value string _valueTextLabel [SerializeField] protected TMP_Text _valueTextLabel Field Value TMP_Text k_savingTag protected const string k_savingTag = \"_Saved_Value\" Field Value string onPointerEnter public UnityEvent onPointerEnter Field Value UnityEvent onPointerExit public UnityEvent onPointerExit Field Value UnityEvent onValueChanged [SerializeField] public Slider.SliderEvent onValueChanged Field Value Slider.SliderEvent s_FillImageWarning protected static readonly string s_FillImageWarning Field Value string s_HandleWarning protected static readonly string s_HandleWarning Field Value string s_ValueTextWarning protected static readonly string s_ValueTextWarning Field Value string Properties Axis public Slider.SliderAxis Axis { get; set; } Property Value Slider.SliderAxis Decimals public int Decimals { get; set; } Property Value int DisplayedValue Readable value rendered according to configured precision/format. public float DisplayedValue { get; } Property Value float IsAutoSizeEnabled public bool IsAutoSizeEnabled { get; set; } Property Value bool IsInputFieldEnabled Whether the input field is enabled to change the value of the slider. public bool IsInputFieldEnabled { get; set; } Property Value bool IsPercent public bool IsPercent { get; set; } Property Value bool IsSavingEnabled public bool IsSavingEnabled { get; set; } Property Value bool IsValueTextEnabled public bool IsValueTextEnabled { get; set; } Property Value bool IsWholeNumbers public bool IsWholeNumbers { get; set; } Property Value bool MaxValue Maximum allowed value. public float MaxValue { get; set; } Property Value float MinValue Minimum allowed value. public float MinValue { get; set; } Property Value float NormalizedValue Value normalized to [0..1] considering MinValue, MaxValue and IsWholeNumbers. public virtual float NormalizedValue { get; set; } Property Value float ReverseValue public bool ReverseValue { get; set; } Property Value bool Value Current slider value in real units. public float Value { get; set; } Property Value float ValueText public string ValueText { get; } Property Value string _stepSize protected float _stepSize { get; } Property Value float Methods FindSelectableOnDown() Find the selectable object below this one. public override Selectable FindSelectableOnDown() Returns Selectable FindSelectableOnLeft() Find the selectable object to the left of this one. public override Selectable FindSelectableOnLeft() Returns Selectable FindSelectableOnRight() Find the selectable object to the right of this one. public override Selectable FindSelectableOnRight() Returns Selectable FindSelectableOnUp() The Selectable object above current public override Selectable FindSelectableOnUp() Returns Selectable ForceUpdateVisuals() Force-update the slider. Useful if you've changed the properties and want it to update visually. protected void ForceUpdateVisuals() HandleSliderMouseInput(PointerEventData, bool) protected abstract void HandleSliderMouseInput(PointerEventData eventData, bool isValueClamped) Parameters eventData PointerEventData isValueClamped bool HasValueChanged() protected virtual bool HasValueChanged() Returns bool Initialize() protected virtual void Initialize() LoadState() public void LoadState() OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnPointerEnter(PointerEventData) Evaluate current state and transition to appropriate state. New state could be pressed or hover depending on pressed state. public override void OnPointerEnter(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerEnterHandler// required interface when using the OnPointerEnter method. { //Do this when the cursor enters the rect area of this selectable UI object. public void OnPointerEnter(PointerEventData eventData) { Debug.Log(\"The cursor entered the selectable UI element.\"); } } OnPointerExit(PointerEventData) Evaluate current state and transition to normal state. public override void OnPointerExit(PointerEventData eventData) Parameters eventData PointerEventData Examples using UnityEngine; using System.Collections; using UnityEngine.UI; using UnityEngine.EventSystems;// Required when using Event data. public class ExampleClass : MonoBehaviour, IPointerExitHandler// required interface when using the OnPointerExit method. { //Do this when the cursor exits the rect area of this selectable UI object. public void OnPointerExit(PointerEventData eventData) { Debug.Log(\"The cursor exited the selectable UI element.\"); } } OnRectTransformDimensionsChange() This callback is called when the dimensions of an associated RectTransform change. It is always called before Awake, OnEnable, or Start. The call is also made to all child RectTransforms, regardless of whether their dimensions change (which depends on how they are anchored). protected override void OnRectTransformDimensionsChange() SaveState() public void SaveState() SetActiveInputField(bool) public virtual void SetActiveInputField(bool isEnabled) Parameters isEnabled bool SetActiveValueTextLabel(bool) public virtual void SetActiveValueTextLabel(bool isEnabled) Parameters isEnabled bool SetFillImage() protected virtual void SetFillImage() SetHandlePosition() protected abstract void SetHandlePosition() SetInputFieldValue(string) public virtual void SetInputFieldValue(string inputValue) Parameters inputValue string SetOrigin() protected abstract void SetOrigin() SetValue(float, bool) protected virtual void SetValue(float input, bool sendCallback = true) Parameters input float sendCallback bool SetValueText() protected virtual void SetValueText() Start() protected override void Start() UpdateInputField() protected virtual void UpdateInputField() UpdateInputFieldListener() protected virtual void UpdateInputFieldListener() UpdateTextAutoSize() protected virtual void UpdateTextAutoSize() UpdateVisuals() protected virtual void UpdateVisuals()"
  },
  "api/Fallencake.UI.SpinnerEvent.html": {
    "href": "api/Fallencake.UI.SpinnerEvent.html",
    "title": "Class SpinnerEvent | ModularUIPack",
    "summary": "Class SpinnerEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class SpinnerEvent Inheritance object SpinnerEvent Fields onAngleReached public UnityEvent onAngleReached Field Value UnityEvent triggerPercent public int triggerPercent Field Value int Properties IsTriggered public bool IsTriggered { get; set; } Property Value bool"
  },
  "api/Fallencake.UI.SpinnerHandler.html": {
    "href": "api/Fallencake.UI.SpinnerHandler.html",
    "title": "Class SpinnerHandler | ModularUIPack",
    "summary": "Class SpinnerHandler Namespace Fallencake.UI Assembly Fallencake.UI.dll Base implementation of ISpinnerHandler that manages a set of UISpinner wrappers and coordinates their start/stop, timing and layout queries. public abstract class SpinnerHandler : ISpinnerHandler Inheritance object SpinnerHandler Implements ISpinnerHandler Derived AxialSpinnerHandler EllipticalSpinnerHandler Fields _elementsAmount protected int _elementsAmount Field Value int _isInitialized protected bool _isInitialized Field Value bool _size protected Vector2 _size Field Value Vector2 _spinner protected ModularSpinner _spinner Field Value ModularSpinner _spinners protected List<UISpinner> _spinners Field Value List<UISpinner> Properties _allNotSpinning protected bool _allNotSpinning { get; } Property Value bool elementStartPosition Initial layout policy for elements. public ElementStartPosition elementStartPosition { get; } Property Value ElementStartPosition elementsAmount Number of managed spinning elements. public int elementsAmount { get; } Property Value int facingDirection Facing direction used when isLookForward is true. public FacingDirection facingDirection { get; } Property Value FacingDirection isClockwise Whether rotation is clockwise. public bool isClockwise { get; } Property Value bool isContinuousSpin Whether continuous spinning mode is enabled. public bool isContinuousSpin { get; } Property Value bool isLookForward Whether elements rotate to face forward along their path. public bool isLookForward { get; } Property Value bool isSimpleDelay Whether a simplified delay model is active. public bool isSimpleDelay { get; } Property Value bool movementCurve Easing curve for element movement. public AnimationCurve movementCurve { get; } Property Value AnimationCurve rotationDelay Delay between starts of subsequent elements. public float rotationDelay { get; } Property Value float rotationTime Duration (seconds) for one full rotation. public float rotationTime { get; } Property Value float size Computed layout size used for positioning. public Vector2 size { get; } Property Value Vector2 startAngle Base rotation angle in degrees. public int startAngle { get; } Property Value int Methods CalculateAreaSize() Calculates layout size used for positioning. public abstract void CalculateAreaSize() GetFirstCompletedElementSpeed() Returns rotation speed of the first element that completed rotation. public float GetFirstCompletedElementSpeed() Returns float GetSpinner(int) Gets the wrapper spinner for an element by index. public UISpinner GetSpinner(int index) Parameters index int Element index. Returns UISpinner HasFirstElementCompletedRotation() Checks whether any element has completed its first rotation. public bool HasFirstElementCompletedRotation() Returns bool InitSpinners() Creates/initializes UISpinner wrappers for each element. public void InitSpinners() Initialize() Initializes internal state and places elements. public abstract void Initialize() MoveTangently(int) Moves an element along the tangent of the path (per frame update). public abstract void MoveTangently(int index) Parameters index int SetElementsStartPosition() Places elements to their start positions. public abstract void SetElementsStartPosition() Spin() Starts a spin sequence according to handler policy. public void Spin() StartSynchronizedContinuousSpin(float) Starts continuous spinning for all elements with the provided synchronized speed. public void StartSynchronizedContinuousSpin(float synchronizedSpeed) Parameters synchronizedSpeed float Speed value to apply to all elements. Stop() Stops the current spin. public void Stop() StopImmediate() Stops immediately without transitions. public void StopImmediate()"
  },
  "api/Fallencake.UI.SpinningType.html": {
    "href": "api/Fallencake.UI.SpinningType.html",
    "title": "Enum SpinningType | ModularUIPack",
    "summary": "Enum SpinningType Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum SpinningType Fields Axial = 1 Elliptical = 0"
  },
  "api/Fallencake.UI.SubMenuBehaviour.html": {
    "href": "api/Fallencake.UI.SubMenuBehaviour.html",
    "title": "Enum SubMenuBehaviour | ModularUIPack",
    "summary": "Enum SubMenuBehaviour Namespace Fallencake.UI Assembly Fallencake.UI.dll Defines how a submenu is revealed from a parent menu item. public enum SubMenuBehaviour Fields Click = 1 Open the submenu only after an explicit click on the parent item. Hover = 0 Open the submenu when the pointer hovers over the parent item."
  },
  "api/Fallencake.UI.SwappableCanvasGroup.html": {
    "href": "api/Fallencake.UI.SwappableCanvasGroup.html",
    "title": "Class SwappableCanvasGroup | ModularUIPack",
    "summary": "Class SwappableCanvasGroup Namespace Fallencake.UI Assembly Fallencake.UI.dll Class that stores the state of CanvasGroups transitions on a Selectable. [Serializable] public class SwappableCanvasGroup : ISelectableStates<CanvasGroup> Inheritance object SwappableCanvasGroup Implements ISelectableStates<CanvasGroup> Properties DisabledState CanvasGroup that will be shown when entering disabled state. public CanvasGroup DisabledState { get; set; } Property Value CanvasGroup FadeDuration How long a fading alpha transition between states should take. public float FadeDuration { get; set; } Property Value float HighlightedState CanvasGroup that will be shown when entering highlighted state. public CanvasGroup HighlightedState { get; set; } Property Value CanvasGroup NormalState CanvasGroup that will be shown when entering normal state. public CanvasGroup NormalState { get; set; } Property Value CanvasGroup PressedState CanvasGroup that will be shown when entering pressed state. public CanvasGroup PressedState { get; set; } Property Value CanvasGroup SelectedState CanvasGroup that will be shown when entering selected state. public CanvasGroup SelectedState { get; set; } Property Value CanvasGroup"
  },
  "api/Fallencake.UI.SwappableSprite.html": {
    "href": "api/Fallencake.UI.SwappableSprite.html",
    "title": "Class SwappableSprite | ModularUIPack",
    "summary": "Class SwappableSprite Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class SwappableSprite : SelectableTransitionData<SelectionSpriteState, Sprite>, ITargetGraphic Inheritance object SelectableTransitionData<SelectionSpriteState, Sprite> SwappableSprite Implements ITargetGraphic Inherited Members SelectableTransitionData<SelectionSpriteState, Sprite>.SelectableStates SelectableTransitionData<SelectionSpriteState, Sprite>.GetTargetData(SelectionState) Fields SpriteStates public SelectionSpriteState SpriteStates Field Value SelectionSpriteState Properties Image Convenience function that converts the referenced Graphic to a Image, if possible. public Image Image { get; set; } Property Value Image SelectableStates public override ISelectableStates<Sprite> SelectableStates { get; } Property Value ISelectableStates<Sprite> TargetGraphic public Graphic TargetGraphic { get; set; } Property Value Graphic Events OnSetProperty public event Action OnSetProperty Event Type Action"
  },
  "api/Fallencake.UI.SwitchDirection.html": {
    "href": "api/Fallencake.UI.SwitchDirection.html",
    "title": "Enum SwitchDirection | ModularUIPack",
    "summary": "Enum SwitchDirection Namespace Fallencake.UI Assembly Fallencake.UI.dll Defines how the toggle handle should move when switching. None: no movement (useful for radio buttons); Horizontal: left-right movement (default); Vertical: up-down movement. public enum SwitchDirection Fields Horizontal = 1 None = 0 Vertical = 2"
  },
  "api/Fallencake.UI.SwitchEvent.html": {
    "href": "api/Fallencake.UI.SwitchEvent.html",
    "title": "Class SwitchEvent | ModularUIPack",
    "summary": "Class SwitchEvent Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class SwitchEvent : UnityEvent<bool> Inheritance object UnityEventBase UnityEvent<bool> SwitchEvent"
  },
  "api/Fallencake.UI.TemplatesProvider.html": {
    "href": "api/Fallencake.UI.TemplatesProvider.html",
    "title": "Class TemplatesProvider | ModularUIPack",
    "summary": "Class TemplatesProvider Namespace Fallencake.UI Assembly Fallencake.UI.dll ScriptableObject registry that stores references to available IDataTemplate assets. [CreateAssetMenu(fileName = \"TemplatesProvider\", menuName = \"Modular UI/Templates/Templates Provider\", order = 0)] public class TemplatesProvider : ScriptableObject, ITemplatesProvider Inheritance object Object ScriptableObject TemplatesProvider Implements ITemplatesProvider Properties Templates Underlying list of template assets. public List<ScriptableObject> Templates { get; } Property Value List<ScriptableObject> Methods GetTemplate(string) Finds a template by its TemplateName. public IDataTemplate GetTemplate(string templateName) Parameters templateName string Logical template name to match. Returns IDataTemplate The matching template or null if not found. GetTemplateByIndex(int) Gets a template by list index when present and of expected type. public IDataTemplate GetTemplateByIndex(int index) Parameters index int Index into Templates. Returns IDataTemplate The template at index or null if invalid or of different type."
  },
  "api/Fallencake.UI.TextSwapAnimator.LoopType.html": {
    "href": "api/Fallencake.UI.TextSwapAnimator.LoopType.html",
    "title": "Enum TextSwapAnimator.LoopType | ModularUIPack",
    "summary": "Enum TextSwapAnimator.LoopType Namespace Fallencake.UI Assembly Fallencake.UI.dll public enum TextSwapAnimator.LoopType Fields None = 0 PingPong = 2 SimpleLoop = 1"
  },
  "api/Fallencake.UI.TextSwapAnimator.html": {
    "href": "api/Fallencake.UI.TextSwapAnimator.html",
    "title": "Class TextSwapAnimator | ModularUIPack",
    "summary": "Class TextSwapAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll public class TextSwapAnimator : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TextSwapAnimator Methods SetChangeInterval(float) public void SetChangeInterval(float newInterval) Parameters newInterval float SetTexts(string, string) public void SetTexts(string newInitialText, string newTargetText) Parameters newInitialText string newTargetText string StartAnimation() public void StartAnimation()"
  },
  "api/Fallencake.UI.TextTweenAnimator.html": {
    "href": "api/Fallencake.UI.TextTweenAnimator.html",
    "title": "Class TextTweenAnimator | ModularUIPack",
    "summary": "Class TextTweenAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll public class TextTweenAnimator : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TextTweenAnimator Methods SetTextInstant(string, bool, Color?) public void SetTextInstant(string currentText, bool isOn, Color? color = null) Parameters currentText string isOn bool color Color? UpdateText(string) public void UpdateText(string currentText) Parameters currentText string UpdateText(string, bool, Color?) public void UpdateText(string currentText, bool isOn, Color? color = null) Parameters currentText string isOn bool color Color?"
  },
  "api/Fallencake.UI.TintGraphicPopupTweenParameters.html": {
    "href": "api/Fallencake.UI.TintGraphicPopupTweenParameters.html",
    "title": "Class TintGraphicPopupTweenParameters | ModularUIPack",
    "summary": "Class TintGraphicPopupTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll Popup tween parameters for animating Graphic color values with show/hide states [Serializable] public class TintGraphicPopupTweenParameters : PopupTweenParametersData<Graphic, Color>, IPopupTweenParametersData<Graphic, Color>, ITweenTargetData<Graphic> Inheritance object PopupTweenParametersData<Graphic, Color> TintGraphicPopupTweenParameters Implements IPopupTweenParametersData<Graphic, Color> ITweenTargetData<Graphic> Inherited Members PopupTweenParametersData<Graphic, Color>.Target PopupTweenParametersData<Graphic, Color>.ShowValue PopupTweenParametersData<Graphic, Color>.HideValue Constructors TintGraphicPopupTweenParameters() public TintGraphicPopupTweenParameters() TintGraphicPopupTweenParameters(Graphic, Color, Color, bool) public TintGraphicPopupTweenParameters(Graphic target, Color showColor, Color hideColor, bool useCurrentColorAsStart = false) Parameters target Graphic showColor Color hideColor Color useCurrentColorAsStart bool Properties HideColor Color when the element is hidden public Color HideColor { get; set; } Property Value Color HideValue public override Color HideValue { get; } Property Value Color ShowColor Color when the element is shown public Color ShowColor { get; set; } Property Value Color ShowValue public override Color ShowValue { get; } Property Value Color Target public override Graphic Target { get; } Property Value Graphic UseCurrentColorAsStart If true, uses the current color of the target as the start color instead of the specified ShowColor public bool UseCurrentColorAsStart { get; set; } Property Value bool Methods Initialize() Initializes the show color with the current color of the target if UseCurrentColorAsStart is true. This should be called once during the popup animator initialization. public void Initialize()"
  },
  "api/Fallencake.UI.TintGraphicTweenParameters.html": {
    "href": "api/Fallencake.UI.TintGraphicTweenParameters.html",
    "title": "Class TintGraphicTweenParameters | ModularUIPack",
    "summary": "Class TintGraphicTweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll Tween parameters for animating Graphic color values [Serializable] public class TintGraphicTweenParameters : TweenParametersData<Graphic, Color>, ITweenParametersData<Graphic, Color>, ITweenTargetData<Graphic> Inheritance object TweenParametersData<Graphic, Color> TintGraphicTweenParameters Implements ITweenParametersData<Graphic, Color> ITweenTargetData<Graphic> Inherited Members TweenParametersData<Graphic, Color>.Target TweenParametersData<Graphic, Color>.Value TweenParametersData<Graphic, Color>.StartValue Constructors TintGraphicTweenParameters() public TintGraphicTweenParameters() TintGraphicTweenParameters(Graphic, Color) public TintGraphicTweenParameters(Graphic target, Color color) Parameters target Graphic color Color Properties Color Target color for the tint animation public Color Color { get; set; } Property Value Color StartValue public override Color StartValue { get; } Property Value Color Target public override Graphic Target { get; } Property Value Graphic Value public override Color Value { get; } Property Value Color"
  },
  "api/Fallencake.UI.TintTween.html": {
    "href": "api/Fallencake.UI.TintTween.html",
    "title": "Class TintTween | ModularUIPack",
    "summary": "Class TintTween Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public class TintTween : TweenBase<Graphic, Color>, ITargetableTween<Graphic, Color>, ITween Inheritance object TweenBase<Graphic, Color> TintTween Implements ITargetableTween<Graphic, Color> ITween Inherited Members TweenBase<Graphic, Color>._target TweenBase<Graphic, Color>._startValue TweenBase<Graphic, Color>._endValue TweenBase<Graphic, Color>._duration TweenBase<Graphic, Color>._delay TweenBase<Graphic, Color>._ease TweenBase<Graphic, Color>.Target TweenBase<Graphic, Color>.StartValue TweenBase<Graphic, Color>.EndValue TweenBase<Graphic, Color>.Duration TweenBase<Graphic, Color>.Delay TweenBase<Graphic, Color>.Ease TweenBase<Graphic, Color>.IsTweened TweenBase<Graphic, Color>._isTweened TweenBase<Graphic, Color>._tweenCoroutine TweenBase<Graphic, Color>.Play(MonoBehaviour, bool) TweenBase<Graphic, Color>.Reset(bool) TweenBase<Graphic, Color>.ResetTarget() TweenBase<Graphic, Color>.OnComplete() TweenBase<Graphic, Color>.GetTargetValue(bool) Constructors TintTween() public TintTween() TintTween(Graphic, Color, Color, float, float, bool, AnimationCurve) public TintTween(Graphic target, Color startValue, Color endValue, float duration, float delay, bool useCurrentColorAsStart = false, AnimationCurve ease = null) Parameters target Graphic startValue Color endValue Color duration float delay float useCurrentColorAsStart bool ease AnimationCurve Properties UseCurrentColorAsStart public bool UseCurrentColorAsStart { get; set; } Property Value bool Methods Play(MonoBehaviour, bool) Plays the tween on a coroutine holder. Implementations should start a coroutine and call OnComplete() when finished. public override void Play(MonoBehaviour coroutineHolder, bool isForward = true) Parameters coroutineHolder MonoBehaviour MonoBehaviour used to start/stop coroutines. isForward bool If true plays towards EndValue, otherwise towards StartValue. ResetTarget() Implemented by concrete tweens to restore target to its initial state. protected override void ResetTarget()"
  },
  "api/Fallencake.UI.ToggleBase.html": {
    "href": "api/Fallencake.UI.ToggleBase.html",
    "title": "Class ToggleBase | ModularUIPack",
    "summary": "Class ToggleBase Namespace Fallencake.UI Assembly Fallencake.UI.dll Base toggle control that encapsulates toggle state, events and saving logic. Inherits from MultipleGraphicsSelectable to reuse transition and target graphics system. public abstract class ToggleBase : MultipleGraphicsSelectable, IMultiSelectable, ISaveable Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour Selectable MultipleGraphicsSelectable ToggleBase Implements IMultiSelectable ISaveable Derived ModularToggle Inherited Members MultipleGraphicsSelectable._colorableGraphics MultipleGraphicsSelectable._swappableGraphics MultipleGraphicsSelectable._swappableCanvasGroupe MultipleGraphicsSelectable.ColorableGraphics MultipleGraphicsSelectable.SwappableGraphics MultipleGraphicsSelectable.SwappableCanvasGroupe MultipleGraphicsSelectable._transition MultipleGraphicsSelectable.SelectableTransition MultipleGraphicsSelectable._tweenCoroutine MultipleGraphicsSelectable.Start() MultipleGraphicsSelectable.OnDestroy() MultipleGraphicsSelectable.DoStateTransition(Selectable.SelectionState, bool) MultipleGraphicsSelectable.AddNewColorableGraphics() MultipleGraphicsSelectable.AddNewSwappableSprite() MultipleGraphicsSelectable.AddColorableGraphic(Graphic, SelectionColorBlock) MultipleGraphicsSelectable.AddColorableGraphic(Graphic, Color, Color, Color, Color, Color, float, float) MultipleGraphicsSelectable.AddSwappableSprite(Graphic, SelectionSpriteState) MultipleGraphicsSelectable.AddSwappableSprite(Image, Sprite, Sprite, Sprite, Sprite) MultipleGraphicsSelectable.SetFadingCanvasGroups(CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, CanvasGroup, float) Fields OnValueChanged Invoked when the toggle value changes or when alwaysNotify is requested. public SwitchEvent OnValueChanged Field Value SwitchEvent _ease [SerializeField] protected AnimationCurve _ease Field Value AnimationCurve _group [SerializeField] protected ModularToggleGroup _group Field Value ModularToggleGroup _handle [SerializeField] protected RectTransform _handle Field Value RectTransform _invokeEventsOnStart [SerializeField] protected bool _invokeEventsOnStart Field Value bool _isInitialized protected bool _isInitialized Field Value bool _isOn [SerializeField] protected bool _isOn Field Value bool _switchDuration [SerializeField] [Range(0.1, 10)] protected float _switchDuration Field Value float Properties IsOn Whether the toggle is currently active. public bool IsOn { get; set; } Property Value bool IsSavingEnabled Enables save/load behavior for the component. public bool IsSavingEnabled { get; set; } Property Value bool SaveKey PlayerPrefs key used to persist the state. public string SaveKey { get; set; } Property Value string Methods AnimateSwitch() Toggle the current value and update visuals/events. public virtual void AnimateSwitch() Awake() Convenience function to get the Animator component on the GameObject. protected override void Awake() Examples using UnityEngine; using System.Collections; using UnityEngine.UI; // Required when Using UI elements. public class ExampleClass : MonoBehaviour { private Animator buttonAnimator; public Button button; void Start() { //Assigns the \"buttonAnimator\" with the button's animator. buttonAnimator = button.animator; } } EditorApplyIsOn() Apply IsOn from inspector instantly; safe for edit and play modes. public void EditorApplyIsOn() Initialize() protected virtual void Initialize() InstantSwitch(bool) Instantly update visuals of handle/background. protected virtual void InstantSwitch(bool isOn) Parameters isOn bool LoadState() Loads component state from persistent storage. public void LoadState() OnDisable() protected override void OnDisable() OnEnable() protected override void OnEnable() OnPointerClick(PointerEventData) Handle pointer click to toggle value when interactable. public virtual void OnPointerClick(PointerEventData eventData) Parameters eventData PointerEventData OnSubmit(BaseEventData) Handle submit (e.g., keyboard) to toggle value when interactable. public virtual void OnSubmit(BaseEventData eventData) Parameters eventData BaseEventData PlaySwitchTween(bool) Play animated transition between states. Override in derived controls. protected virtual void PlaySwitchTween(bool isOn) Parameters isOn bool SaveState() Saves component state to persistent storage. public void SaveState() Set(bool, bool, bool, bool) Core setter with semantics similar to Unity's Toggle.Set. protected void Set(bool value, bool sendCallback = true, bool animate = true, bool alwaysNotify = false) Parameters value bool Desired toggle value. sendCallback bool Whether to invoke OnValueChanged. animate bool Whether to animate transition (otherwise updates instantly). alwaysNotify bool If true, invokes OnValueChanged even if the value did not change. SetIsOn(bool, bool, bool, bool) Sets the toggle value using the core Set(...) semantics. Exposes control over callbacks, animation and forced notification. public void SetIsOn(bool value, bool sendCallback = true, bool animate = true, bool alwaysNotify = false) Parameters value bool Desired toggle value. sendCallback bool Whether to invoke OnValueChanged. animate bool Whether to animate transition. alwaysNotify bool If true, invokes OnValueChanged even when value did not change. SetIsOnWithoutNotify(bool, bool) Sets the toggle value without invoking OnValueChanged. Intended for group-internal updates. public void SetIsOnWithoutNotify(bool value, bool animate = false) Parameters value bool Desired toggle value. animate bool Whether to animate transition. SetOff() Set toggle to Off state. public virtual void SetOff() SetOn() Set toggle to On state. public virtual void SetOn() SetToggleGroup(ModularToggleGroup, bool) Assigns toggle to a group, managing registration and initial notification. protected void SetToggleGroup(ModularToggleGroup newGroup, bool setMemberValue) Parameters newGroup ModularToggleGroup setMemberValue bool SwitchOff() public void SwitchOff() SwitchOn() public void SwitchOn() SwitchView(bool, bool) Update visuals either instantly or with tween. protected virtual void SwitchView(bool isOn, bool isInstant = false) Parameters isOn bool isInstant bool"
  },
  "api/Fallencake.UI.ToggleGraphic.html": {
    "href": "api/Fallencake.UI.ToggleGraphic.html",
    "title": "Class ToggleGraphic | ModularUIPack",
    "summary": "Class ToggleGraphic Namespace Fallencake.UI Assembly Fallencake.UI.dll Describes a target Graphic and its on/off colors to be animated with the toggle state. [Serializable] public class ToggleGraphic Inheritance object ToggleGraphic Properties OffColor public Color OffColor { get; } Property Value Color OnColor public Color OnColor { get; } Property Value Color TargetGraphic public Graphic TargetGraphic { get; } Property Value Graphic"
  },
  "api/Fallencake.UI.ToggleTweenAnimator.html": {
    "href": "api/Fallencake.UI.ToggleTweenAnimator.html",
    "title": "Class ToggleTweenAnimator | ModularUIPack",
    "summary": "Class ToggleTweenAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll Animator that plays separate tween sets for ON and OFF states and provides helpers to invert and stop. public class ToggleTweenAnimator : MonoBehaviour, ITweenAnimator Inheritance object Object Component Behaviour MonoBehaviour ToggleTweenAnimator Implements ITweenAnimator Properties OffTweens Exposes OFF tweens list for configuration or runtime adjustments. public List<ITween> OffTweens { get; } Property Value List<ITween> OnTweens Exposes ON tweens list for configuration or runtime adjustments. public List<ITween> OnTweens { get; } Property Value List<ITween> Tweens Returns the primary tweens list for generic interface access. For this animator it exposes the ON tweens by default. public List<ITween> Tweens { get; set; } Property Value List<ITween> Methods InvertStates() Inverts ON and OFF tween lists, swapping their contents. public void InvertStates() Play(Action) Plays the default state tweens (ON state) for generic interface support. public void Play(Action onComplete) Parameters onComplete Action Callback invoked after the tweens complete. PlayOffState(Action) Plays the OFF state tweens. public void PlayOffState(Action onComplete = null) Parameters onComplete Action Optional callback executed when all OFF tweens complete. PlayOnState(Action) Plays the ON state tweens. public void PlayOnState(Action onComplete = null) Parameters onComplete Action Optional callback executed when all ON tweens complete. PlayState(bool) Plays tweens for the specified state. public void PlayState(bool isOn) Parameters isOn bool If true, plays ON state tweens; otherwise plays OFF state tweens. Stop() Stops any running tween sequences and resets both ON and OFF tweens. public void Stop()"
  },
  "api/Fallencake.UI.TweenAnimator.html": {
    "href": "api/Fallencake.UI.TweenAnimator.html",
    "title": "Class TweenAnimator | ModularUIPack",
    "summary": "Class TweenAnimator Namespace Fallencake.UI Assembly Fallencake.UI.dll Base class for simple tween animators that orchestrate a list of tweens. public abstract class TweenAnimator : TweenAnimatorBase, ITweenAnimator Inheritance object Object Component Behaviour MonoBehaviour TweenAnimatorBase TweenAnimator Implements ITweenAnimator Derived SimpleTweenAnimator Inherited Members TweenAnimatorBase.OnDisable() TweenAnimatorBase.PlayTween(TweenParameters, LoopType, bool, Action) TweenAnimatorBase.PlayPopupTween(PopupTweenParameters, bool, bool, bool, Action, Action) TweenAnimatorBase.OnTweenComplete(ITweenBasicParameters, bool, Action) TweenAnimatorBase.OnSimpleTweenComplete(ITweenBasicParameters, bool, Action) TweenAnimatorBase.OnSimpleTweenComplete(ITweenBasicParameters, bool, bool, Action) Properties Tweens Tweens to be played by this animator. public List<ITween> Tweens { get; set; } Property Value List<ITween> Methods Play(Action) Plays all configured tweens. Implementations decide direction and completion behavior. public abstract void Play(Action onComplete = null) Parameters onComplete Action Callback invoked after all tweens complete. Stop() Stops playback and optionally resets tweens depending on implementation. public abstract void Stop()"
  },
  "api/Fallencake.UI.TweenAnimatorBase.html": {
    "href": "api/Fallencake.UI.TweenAnimatorBase.html",
    "title": "Class TweenAnimatorBase | ModularUIPack",
    "summary": "Class TweenAnimatorBase Namespace Fallencake.UI Assembly Fallencake.UI.dll Base MonoBehaviour providing common tween playback helpers and loop handling for UI animators. public abstract class TweenAnimatorBase : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TweenAnimatorBase Derived PopupTweenAnimator TweenAnimator Methods OnDisable() protected virtual void OnDisable() OnSimpleTweenComplete(ITweenBasicParameters, bool, Action) Stops tween coroutine and optionally keeps reference when looping. protected void OnSimpleTweenComplete(ITweenBasicParameters tween, bool isLooped, Action onComplete = null) Parameters tween ITweenBasicParameters isLooped bool onComplete Action OnSimpleTweenComplete(ITweenBasicParameters, bool, bool, Action) Variant of OnSimpleTweenComplete(ITweenBasicParameters, bool, Action) that also checks completion flag. protected void OnSimpleTweenComplete(ITweenBasicParameters tween, bool isEnabledOnComplete, bool isLooped, Action onComplete = null) Parameters tween ITweenBasicParameters isEnabledOnComplete bool isLooped bool onComplete Action OnTweenComplete(ITweenBasicParameters, bool, Action) Stops a tween coroutine and invokes completion callback based on flags. protected virtual void OnTweenComplete(ITweenBasicParameters tween, bool isEnabledOnComplete, Action onComplete) Parameters tween ITweenBasicParameters isEnabledOnComplete bool onComplete Action PlayPopupTween(PopupTweenParameters, bool, bool, bool, Action, Action) Plays a popup-style tween (show/hide) with per-mode durations/eases and optional instant mode. protected virtual void PlayPopupTween(PopupTweenParameters tween, bool isShowing, bool isEnabledOnComplete, bool isInstantly = false, Action onComplete = null, Action onUpdate = null) Parameters tween PopupTweenParameters isShowing bool isEnabledOnComplete bool isInstantly bool onComplete Action onUpdate Action PlayTween(TweenParameters, LoopType, bool, Action) Plays a single tween using extension coroutines and supports optional loop policies. protected virtual void PlayTween(TweenParameters tween, LoopType loopType = LoopType.None, bool isEnabledOnComplete = true, Action onComplete = null) Parameters tween TweenParameters loopType LoopType isEnabledOnComplete bool onComplete Action"
  },
  "api/Fallencake.UI.TweenBase-2.html": {
    "href": "api/Fallencake.UI.TweenBase-2.html",
    "title": "Class TweenBase<TTarget, TParameter> | ModularUIPack",
    "summary": "Class TweenBase<TTarget, TParameter> Namespace Fallencake.UI Assembly Fallencake.UI.dll Generic base for strongly-typed tweens that animate a target from a start value to an end value. public abstract class TweenBase<TTarget, TParameter> : ITargetableTween<TTarget, TParameter>, ITween Type Parameters TTarget Type of animated target component. TParameter Type of tweened parameter. Inheritance object TweenBase<TTarget, TParameter> Implements ITargetableTween<TTarget, TParameter> ITween Derived FadeTween MoveTween OffsetTween RotateTween ScaleTween SizeTween TintTween Fields _delay [SerializeField] protected float _delay Field Value float _duration [SerializeField] protected float _duration Field Value float _ease [SerializeField] protected AnimationCurve _ease Field Value AnimationCurve _endValue [SerializeField] protected TParameter _endValue Field Value TParameter _isTweened protected bool _isTweened Field Value bool _startValue [SerializeField] protected TParameter _startValue Field Value TParameter _target [SerializeField] protected TTarget _target Field Value TTarget _tweenCoroutine protected Coroutine _tweenCoroutine Field Value Coroutine Properties Delay Delay before the tween starts, in seconds. public float Delay { get; set; } Property Value float Duration Total duration of the tween, in seconds. public float Duration { get; set; } Property Value float Ease Easing curve used to interpolate between values. public AnimationCurve Ease { get; } Property Value AnimationCurve EndValue End value used when playing forward. public TParameter EndValue { get; } Property Value TParameter IsTweened Whether this tween has completed at least one play. public bool IsTweened { get; } Property Value bool StartValue Start value used when playing backward or for immediate resets. public TParameter StartValue { get; } Property Value TParameter Target The target component animated by this tween. public TTarget Target { get; } Property Value TTarget Methods GetTargetValue(bool) Returns the value that should be applied to the target based on direction. protected TParameter GetTargetValue(bool isForward) Parameters isForward bool Direction flag passed to Play(MonoBehaviour, bool). Returns TParameter OnComplete() Marks the tween as completed; typically called at the end of Play. protected void OnComplete() Play(MonoBehaviour, bool) Plays the tween on a coroutine holder. Implementations should start a coroutine and call OnComplete() when finished. public abstract void Play(MonoBehaviour coroutineHolder, bool isForward = true) Parameters coroutineHolder MonoBehaviour MonoBehaviour used to start/stop coroutines. isForward bool If true plays towards EndValue, otherwise towards StartValue. Reset(bool) Resets tween state; optionally resets the target to the start value. public void Reset(bool isResetTarget) Parameters isResetTarget bool If true, calls ResetTarget(). ResetTarget() Implemented by concrete tweens to restore target to its initial state. protected abstract void ResetTarget()"
  },
  "api/Fallencake.UI.TweenExtensions.html": {
    "href": "api/Fallencake.UI.TweenExtensions.html",
    "title": "Class TweenExtensions | ModularUIPack",
    "summary": "Class TweenExtensions Namespace Fallencake.UI Assembly Fallencake.UI.dll Collection of coroutine-based tween helpers for common UI and transform animations. public static class TweenExtensions Inheritance object TweenExtensions Methods FadeCanvasGroup(CanvasGroup, float, float, AnimationCurve, bool, bool, float, Action, Action) Fades a UnityEngine.CanvasGroup with interactivity and instant flags, supporting per-frame update. public static IEnumerator FadeCanvasGroup(this CanvasGroup canvasGroup, float endAlpha, float duration, AnimationCurve ease, bool isInteractable, bool isInstantly, float delay = 0, Action onComplete = null, Action onUpdate = null) Parameters canvasGroup CanvasGroup endAlpha float duration float ease AnimationCurve isInteractable bool isInstantly bool delay float onComplete Action onUpdate Action Returns IEnumerator FadeCanvasGroup(CanvasGroup, float, float, AnimationCurve, float, Action) Fades a UnityEngine.CanvasGroup to endAlpha. public static IEnumerator FadeCanvasGroup(this CanvasGroup canvasGroup, float endAlpha, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null) Parameters canvasGroup CanvasGroup endAlpha float duration float ease AnimationCurve delay float onComplete Action Returns IEnumerator FadeCanvasGroupInstantly(CanvasGroup, float, bool, Action) Sets a UnityEngine.CanvasGroup alpha immediately and optionnaly toggles interactivity. public static void FadeCanvasGroupInstantly(this CanvasGroup canvasGroup, float endAlpha, bool isInteractable, Action onComplete = null) Parameters canvasGroup CanvasGroup endAlpha float isInteractable bool onComplete Action FadeGraphic(Graphic, float, float, float, AnimationCurve, float, Action, Action) Animates Graphic alpha channel from specific start alpha to end alpha while keeping the color the same public static IEnumerator FadeGraphic(this Graphic target, float startAlpha, float endAlpha, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null, Action onUpdate = null) Parameters target Graphic Target Graphic to animate startAlpha float Start alpha value (0-1) endAlpha float Target alpha value (0-1) duration float Animation duration ease AnimationCurve Animation curve delay float Delay before starting animation onComplete Action Callback when animation completes onUpdate Action Callback called every frame during animation Returns IEnumerator FadeGraphic(Graphic, float, float, AnimationCurve, float, Action) Fades a UnityEngine.UI.Graphic alpha to endAlpha. public static IEnumerator FadeGraphic(this Graphic target, float endAlpha, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null) Parameters target Graphic endAlpha float duration float ease AnimationCurve delay float onComplete Action Returns IEnumerator FadeGraphic(Graphic, float, float, AnimationCurve, float, Action, Action) Animates Graphic alpha channel smoothly while keeping the color the same public static IEnumerator FadeGraphic(this Graphic target, float endAlpha, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null, Action onUpdate = null) Parameters target Graphic Target Graphic to animate endAlpha float Target alpha value (0-1) duration float Animation duration ease AnimationCurve Animation curve delay float Delay before starting animation onComplete Action Callback when animation completes onUpdate Action Callback called every frame during animation Returns IEnumerator FadeImage(Image, float, float, AnimationCurve, float, Action) Fades an UnityEngine.UI.Image alpha to endAlpha. public static IEnumerator FadeImage(this Image image, float endAlpha, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null) Parameters image Image endAlpha float duration float ease AnimationCurve delay float onComplete Action Returns IEnumerator MoveRectTransform(RectTransform, Vector3, float, AnimationCurve, float, Action, Action) Moves a UnityEngine.RectTransform.anchoredPosition to endPosition. public static IEnumerator MoveRectTransform(this RectTransform transform, Vector3 endPosition, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null, Action onUpdate = null) Parameters transform RectTransform endPosition Vector3 duration float ease AnimationCurve delay float onComplete Action onUpdate Action Returns IEnumerator MoveTransform(Transform, Vector3, float, AnimationCurve, bool, float, Action) Moves a transform from its current position to endPosition. public static IEnumerator MoveTransform(this Transform target, Vector3 endPosition, float duration, AnimationCurve ease, bool isLocalMovement = false, float delay = 0, Action onComplete = null) Parameters target Transform endPosition Vector3 duration float ease AnimationCurve isLocalMovement bool delay float onComplete Action Returns IEnumerator MoveTransform(Transform, Vector3, Vector3, float, AnimationCurve, bool, float, Action) Animates Transform position from specific start position to end position public static IEnumerator MoveTransform(this Transform target, Vector3 startPosition, Vector3 endPosition, float duration, AnimationCurve ease, bool isLocalMovement = false, float delay = 0, Action onComplete = null) Parameters target Transform Target Transform to animate startPosition Vector3 Start position value endPosition Vector3 Target position value duration float Animation duration ease AnimationCurve Animation curve isLocalMovement bool Whether to use local position or world position delay float Delay before starting animation onComplete Action Callback when animation completes Returns IEnumerator OffsetRectTransform(RectTransform, OffsetValues, float, AnimationCurve, float, Action, Action) Animates RectTransform offsetMin and offsetMax values smoothly public static IEnumerator OffsetRectTransform(this RectTransform target, OffsetValues endOffsetValues, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null, Action onUpdate = null) Parameters target RectTransform Target RectTransform to animate endOffsetValues OffsetValues Target offset values duration float Animation duration ease AnimationCurve Animation curve delay float Delay before starting animation onComplete Action Callback when animation completes onUpdate Action Returns IEnumerator RotateTransform(Transform, Vector3, float, AnimationCurve, float, Action) Rotates a transform to endRotation (Euler angles). public static IEnumerator RotateTransform(this Transform target, Vector3 endRotation, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null) Parameters target Transform endRotation Vector3 duration float ease AnimationCurve delay float onComplete Action Returns IEnumerator RotateTransform(Transform, Vector3, Vector3, float, AnimationCurve, float, Action) Animates Transform rotation from specific start rotation to end rotation public static IEnumerator RotateTransform(this Transform target, Vector3 startRotation, Vector3 endRotation, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null) Parameters target Transform Target Transform to animate startRotation Vector3 Start rotation value (euler angles) endRotation Vector3 Target rotation value (euler angles) duration float Animation duration ease AnimationCurve Animation curve delay float Delay before starting animation onComplete Action Callback when animation completes Returns IEnumerator ScaleTransform(Transform, Vector3, float, AnimationCurve, float, Action, Action) Scales a transform to endScale. public static IEnumerator ScaleTransform(this Transform target, Vector3 endScale, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null, Action onUpdate = null) Parameters target Transform endScale Vector3 duration float ease AnimationCurve delay float onComplete Action onUpdate Action Returns IEnumerator ScaleTransform(Transform, Vector3, Vector3, float, AnimationCurve, float, Action, Action) Animates Transform scale from specific start scale to end scale public static IEnumerator ScaleTransform(this Transform target, Vector3 startScale, Vector3 endScale, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null, Action onUpdate = null) Parameters target Transform Target Transform to animate startScale Vector3 Start scale value endScale Vector3 Target scale value duration float Animation duration ease AnimationCurve Animation curve delay float Delay before starting animation onComplete Action Callback when animation completes onUpdate Action Callback called every frame during animation Returns IEnumerator ScaleTransformInstantly(Transform, Vector3, Action) Sets a transform scale immediately. public static void ScaleTransformInstantly(this Transform target, Vector3 endScale, Action onComplete = null) Parameters target Transform endScale Vector3 onComplete Action SizeRectTransform(RectTransform, Vector2, float, AnimationCurve, float, Action, Action) Animates RectTransform sizeDelta values smoothly public static IEnumerator SizeRectTransform(this RectTransform target, Vector2 endSize, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null, Action onUpdate = null) Parameters target RectTransform Target RectTransform to animate endSize Vector2 Target size values duration float Animation duration ease AnimationCurve Animation curve delay float Delay before starting animation onComplete Action Callback when animation completes onUpdate Action Returns IEnumerator SwapObjects(RectTransform, RectTransform, CanvasGroup, CanvasGroup, Vector2, float, AnimationCurve, Action) Swaps two objects by moving their positions and cross-fading their UnityEngine.CanvasGroup alphas. public static IEnumerator SwapObjects(RectTransform currentTransform, RectTransform previousTransform, CanvasGroup currentCanvasGroup, CanvasGroup previousCanvasGroup, Vector2 endPosition, float duration, AnimationCurve ease, Action onComplete = null) Parameters currentTransform RectTransform Transform to move in. previousTransform RectTransform Transform to move out. currentCanvasGroup CanvasGroup CanvasGroup to fade in. previousCanvasGroup CanvasGroup CanvasGroup to fade out. endPosition Vector2 Delta position to move each transform. duration float Animation duration in seconds. ease AnimationCurve Easing curve. onComplete Action Callback after finishing. Returns IEnumerator SwitchToggleHandle(RectTransform, bool, bool, float, AnimationCurve, Graphic, Color, Image, Color, CanvasGroup, CanvasGroup, float, float) Backward-compatible wrapper of SwitchToggleHandleAxis(RectTransform, bool, bool, float, AnimationCurve, Graphic, Color, Image, Color, IList<ToggleGraphic>, CanvasGroup, CanvasGroup, float, float, SwitchDirection) for horizontal movement. public static IEnumerator SwitchToggleHandle(RectTransform handle, bool isOn, bool isStretchingHandle, float duration, AnimationCurve ease, Graphic handleGraphic, Color handleEndColor, Image backgroundImage, Color backgroundEndColor, CanvasGroup handleOverlap = null, CanvasGroup backgroundOverlap = null, float stretchScaleX = 1, float stretchScaleY = 1) Parameters handle RectTransform isOn bool isStretchingHandle bool duration float ease AnimationCurve handleGraphic Graphic handleEndColor Color backgroundImage Image backgroundEndColor Color handleOverlap CanvasGroup backgroundOverlap CanvasGroup stretchScaleX float stretchScaleY float Returns IEnumerator SwitchToggleHandleAxis(RectTransform, bool, bool, float, AnimationCurve, Graphic, Color, Image, Color, IList<ToggleGraphic>, CanvasGroup, CanvasGroup, float, float, SwitchDirection) Switches a toggle handle with optional stretching, color/alpha overlays and axis selection. public static IEnumerator SwitchToggleHandleAxis(RectTransform handle, bool isOn, bool isStretchingHandle, float duration, AnimationCurve ease, Graphic handleGraphic, Color handleEndColor, Image backgroundImage, Color backgroundEndColor, IList<ToggleGraphic> colorTargets, CanvasGroup handleOverlap = null, CanvasGroup backgroundOverlap = null, float stretchScaleX = 1, float stretchScaleY = 1, SwitchDirection switchDirection = SwitchDirection.Horizontal) Parameters handle RectTransform isOn bool isStretchingHandle bool duration float ease AnimationCurve handleGraphic Graphic handleEndColor Color backgroundImage Image backgroundEndColor Color colorTargets IList<ToggleGraphic> handleOverlap CanvasGroup backgroundOverlap CanvasGroup stretchScaleX float stretchScaleY float switchDirection SwitchDirection Returns IEnumerator SwitchToggleHandleAxisExtended(RectTransform, bool, bool, float, AnimationCurve, Graphic, Color, Image, Color, IList<ToggleGraphic>, CanvasGroup, CanvasGroup, float, float, SwitchDirection) Extended API: explicit method name that supports a list of color targets. Keeps older code calling SwitchToggleHandleAxis intact, while new code may call this name for clarity. public static IEnumerator SwitchToggleHandleAxisExtended(RectTransform handle, bool isOn, bool isStretchingHandle, float duration, AnimationCurve ease, Graphic handleGraphic, Color handleEndColor, Image backgroundImage, Color backgroundEndColor, IList<ToggleGraphic> colorTargets, CanvasGroup handleOverlap = null, CanvasGroup backgroundOverlap = null, float stretchScaleX = 1, float stretchScaleY = 1, SwitchDirection switchDirection = SwitchDirection.Horizontal) Parameters handle RectTransform isOn bool isStretchingHandle bool duration float ease AnimationCurve handleGraphic Graphic handleEndColor Color backgroundImage Image backgroundEndColor Color colorTargets IList<ToggleGraphic> handleOverlap CanvasGroup backgroundOverlap CanvasGroup stretchScaleX float stretchScaleY float switchDirection SwitchDirection Returns IEnumerator TintGraphic(Transform, Color, float, AnimationCurve, float, Action) Convenience: finds a UnityEngine.UI.Graphic on the transform and tints it. public static IEnumerator TintGraphic(this Transform transform, Color endColor, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null) Parameters transform Transform endColor Color duration float ease AnimationCurve delay float onComplete Action Returns IEnumerator TintGraphic(Graphic, Color, float, AnimationCurve, float, Action) Tints a UnityEngine.UI.Graphic color to endColor. public static IEnumerator TintGraphic(this Graphic target, Color endColor, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null) Parameters target Graphic endColor Color duration float ease AnimationCurve delay float onComplete Action Returns IEnumerator TintGraphic(Graphic, Color, float, AnimationCurve, float, Action, Action) Tints a UnityEngine.UI.Graphic color to endColor and invokes onUpdate per frame. public static IEnumerator TintGraphic(this Graphic target, Color endColor, float duration, AnimationCurve ease, float delay = 0, Action onComplete = null, Action onUpdate = null) Parameters target Graphic endColor Color duration float ease AnimationCurve delay float onComplete Action onUpdate Action Returns IEnumerator"
  },
  "api/Fallencake.UI.TweenParameters.html": {
    "href": "api/Fallencake.UI.TweenParameters.html",
    "title": "Class TweenParameters | ModularUIPack",
    "summary": "Class TweenParameters Namespace Fallencake.UI Assembly Fallencake.UI.dll Parameter container describing a single basic tween (non-popup) and its easing/duration. [Serializable] public class TweenParameters : ITweenParameters, ITweenBasicParameters Inheritance object TweenParameters Implements ITweenParameters ITweenBasicParameters Remarks Holds a generic TweenType and an UnityEngine.AnimationCurve for easing, along with specific parameter blocks like MoveTweenParameters, RotateTweenParameters, ScaleTweenParameters, FadeCanvasGroupTweenParameters, OffsetTweenParameters, SizeTweenParameters, and TintGraphicTweenParameters. The engine chooses the applicable block based on Type. Constructors TweenParameters() Initializes with defaults and creates empty parameter blocks for all tween types. public TweenParameters() TweenParameters(TweenType, AnimationCurve, float, MoveTweenParameters, RotateTweenParameters, ScaleTweenParameters, FadeCanvasGroupTweenParameters, OffsetTweenParameters, SizeTweenParameters, TintGraphicTweenParameters) Constructs a tween parameter set with explicit parameter blocks. public TweenParameters(TweenType tweenType, AnimationCurve ease, float duration, MoveTweenParameters moveParams, RotateTweenParameters rotateParams, ScaleTweenParameters scaleParams, FadeCanvasGroupTweenParameters fadeParams, OffsetTweenParameters offsetParams = null, SizeTweenParameters sizeParams = null, TintGraphicTweenParameters tintParams = null) Parameters tweenType TweenType The tween type. ease AnimationCurve The easing curve. duration float The duration in seconds. moveParams MoveTweenParameters Move parameters block. rotateParams RotateTweenParameters Rotate parameters block. scaleParams ScaleTweenParameters Scale parameters block. fadeParams FadeCanvasGroupTweenParameters CanvasGroup fade parameters block. offsetParams OffsetTweenParameters Offset parameters block. sizeParams SizeTweenParameters Size parameters block. tintParams TintGraphicTweenParameters Tint parameters block. Fields _ease [SerializeField] protected AnimationCurve _ease Field Value AnimationCurve Properties Coroutine Runtime coroutine reference used during playback. public Coroutine Coroutine { get; set; } Property Value Coroutine Duration Duration in seconds for this tween. public float Duration { get; } Property Value float Ease Easing curve used by this tween. public AnimationCurve Ease { get; } Property Value AnimationCurve FadeParameters Parameter block for CanvasGroup fade tween. public FadeCanvasGroupTweenParameters FadeParameters { get; } Property Value FadeCanvasGroupTweenParameters MoveParameters Parameter block for movement tween. public MoveTweenParameters MoveParameters { get; } Property Value MoveTweenParameters OffsetParameters Parameter block for RectTransform offset tween. public OffsetTweenParameters OffsetParameters { get; } Property Value OffsetTweenParameters RotateParameters Parameter block for rotation tween. public RotateTweenParameters RotateParameters { get; } Property Value RotateTweenParameters ScaleParameters Parameter block for scale tween. public ScaleTweenParameters ScaleParameters { get; } Property Value ScaleTweenParameters SizeParameters Parameter block for RectTransform size tween. public SizeTweenParameters SizeParameters { get; } Property Value SizeTweenParameters TintParameters Parameter block for Graphic tint tween. public TintGraphicTweenParameters TintParameters { get; } Property Value TintGraphicTweenParameters Type The tween type represented by this instance. public TweenType Type { get; } Property Value TweenType"
  },
  "api/Fallencake.UI.TweenParametersData-2.html": {
    "href": "api/Fallencake.UI.TweenParametersData-2.html",
    "title": "Class TweenParametersData<TTarget, TValue> | ModularUIPack",
    "summary": "Class TweenParametersData<TTarget, TValue> Namespace Fallencake.UI Assembly Fallencake.UI.dll [Serializable] public abstract class TweenParametersData<TTarget, TValue> : ITweenParametersData<TTarget, TValue>, ITweenTargetData<TTarget> Type Parameters TTarget TValue Inheritance object TweenParametersData<TTarget, TValue> Implements ITweenParametersData<TTarget, TValue> ITweenTargetData<TTarget> Derived FadeCanvasGroupTweenParameters MoveTweenParameters OffsetTweenParameters RotateTweenParameters ScaleTweenParameters SizeTweenParameters TintGraphicTweenParameters Properties StartValue public abstract TValue StartValue { get; } Property Value TValue Target public abstract TTarget Target { get; } Property Value TTarget Value public abstract TValue Value { get; } Property Value TValue"
  },
  "api/Fallencake.UI.TweenType.html": {
    "href": "api/Fallencake.UI.TweenType.html",
    "title": "Enum TweenType | ModularUIPack",
    "summary": "Enum TweenType Namespace Fallencake.UI Assembly Fallencake.UI.dll Types of built-in tweens supported by the tween system. public enum TweenType Fields Fade = 4 Alpha fade tween for UnityEngine.CanvasGroup. Move = 1 Position tween for UnityEngine.RectTransform. None = 0 No tween. Offset = 5 Offset tween for UnityEngine.RectTransform.offsetMin/UnityEngine.RectTransform.offsetMax. Rotate = 2 Rotation tween for UnityEngine.RectTransform. Scale = 3 Scale tween for UnityEngine.RectTransform. Size = 6 Size tween for UnityEngine.RectTransform.sizeDelta. Tint = 7 Color tint tween for UnityEngine.UI.Graphic."
  },
  "api/Fallencake.UI.UIGradient.ColorBlendMode.html": {
    "href": "api/Fallencake.UI.UIGradient.ColorBlendMode.html",
    "title": "Enum UIGradient.ColorBlendMode | ModularUIPack",
    "summary": "Enum UIGradient.ColorBlendMode Namespace Fallencake.UI Assembly Fallencake.UI.dll How gradient color blends with original vertex color. public enum UIGradient.ColorBlendMode Fields Additive = 1 Multiply = 2 Override = 0"
  },
  "api/Fallencake.UI.UIGradient.GradientType.html": {
    "href": "api/Fallencake.UI.UIGradient.GradientType.html",
    "title": "Enum UIGradient.GradientType | ModularUIPack",
    "summary": "Enum UIGradient.GradientType Namespace Fallencake.UI Assembly Fallencake.UI.dll Supported gradient directions. public enum UIGradient.GradientType Fields Horizontal = 0 Vertical = 1"
  },
  "api/Fallencake.UI.UIGradient.html": {
    "href": "api/Fallencake.UI.UIGradient.html",
    "title": "Class UIGradient | ModularUIPack",
    "summary": "Class UIGradient Namespace Fallencake.UI Assembly Fallencake.UI.dll Mesh effect that applies a color UnityEngine.Gradient to a UnityEngine.UI.Graphic, with horizontal or vertical direction, optional vertex splitting, and blend modes. [DisallowMultipleComponent] [AddComponentMenu(\"Modular UI/Gradient\")] public class UIGradient : BaseMeshEffect Inheritance object Object Component Behaviour MonoBehaviour UIBehaviour BaseMeshEffect UIGradient Properties BlendMode How the computed gradient color is combined with the original vertex color. public UIGradient.ColorBlendMode BlendMode { get; set; } Property Value UIGradient.ColorBlendMode Gradient Gradient used to color the vertices. public Gradient Gradient { get; set; } Property Value Gradient ModifyVertices When true, triangles are split at gradient stops to improve color fidelity. public bool ModifyVertices { get; set; } Property Value bool Offset Positional offset of the gradient in normalized units [-1..1]. public float Offset { get; set; } Property Value float Scale Zoom factor of the gradient evaluation (values > 1 zoom in). public float Scale { get; set; } Property Value float Type Direction of the gradient. public UIGradient.GradientType Type { get; set; } Property Value UIGradient.GradientType Methods ModifyMesh(Mesh) Function that is called when the Graphic is populating the mesh. public override void ModifyMesh(Mesh mesh) Parameters mesh Mesh The generated mesh of the Graphic element that needs modification. ModifyMesh(VertexHelper) Call used to modify mesh. Place any custom mesh processing in this function. public override void ModifyMesh(VertexHelper helper) Parameters helper VertexHelper"
  },
  "api/Fallencake.UI.UISpinner.html": {
    "href": "api/Fallencake.UI.UISpinner.html",
    "title": "Class UISpinner | ModularUIPack",
    "summary": "Class UISpinner Namespace Fallencake.UI Assembly Fallencake.UI.dll public class UISpinner : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour UISpinner Properties angle public float angle { get; } Property Value float currentRotationSpeed public float currentRotationSpeed { get; } Property Value float hasCompletedFirstRotation public bool hasCompletedFirstRotation { get; } Property Value bool isSpinning public bool isSpinning { get; } Property Value bool Methods Initialize(ISpinnerHandler, int) public void Initialize(ISpinnerHandler spinnerHandler, int index) Parameters spinnerHandler ISpinnerHandler index int Spin() public void Spin() StartContinuousSpin() Starts continuous spinning mode public void StartContinuousSpin() StartSynchronizedContinuousSpin(float) Starts synchronized continuous spinning with specified speed public void StartSynchronizedContinuousSpin(float synchronizedSpeed) Parameters synchronizedSpeed float Speed to synchronize to Stop() public void Stop() StopImmediate() public void StopImmediate()"
  },
  "api/Fallencake.UI.html": {
    "href": "api/Fallencake.UI.html",
    "title": "Namespace Fallencake.UI | ModularUIPack",
    "summary": "Namespace Fallencake.UI Classes AnimatedImageScroller Drives continuous UV scrolling for a collection of ScrollableImage items. AtomSpinner Stylized loading spinner composed of multiple orbital elements configured by AtomSpinnerParameters. AtomSpinnerParameters Parameter bundle for configuring a single atom spinner element and its orbit. AxialSpinnerHandler Axial spinner handler that positions elements along an axis and rotates them around their centers. BaseSelector Base component for selectable UI controls that manage a list of items and synchronize labels, icons, indicators, animations, and saving behavior. BasicData Base class for data elements, which contain a name and an icon Button Modular, multi-graphic UI button with single- and double-click support, group selection behavior, and optional click ripple effects. CanvasGroupTweenExtensions Helpers for animating UnityEngine.CanvasGroup visibility based on selectable SelectionState. ClickEffect Base behaviour for transient click effects that animate an UnityEngine.UI.Image. ColorAssetCollection Adapter around an IColorAssetProvider that exposes a collection-like API for selecting and animating colors across a set of UI assets. ColorCollectionData ScriptableObject that stores a list of selectable colors for UI elements. ColorableCollection Component for applying colors or gradients from collections to multiple UI assets with optional tinting. ColorableGraphic Transition data for a UnityEngine.UI.Graphic using a SelectionColorBlock across selection states. ContextMenuArea Click-capture area for a ModularContextMenu. Ensures a transparent UnityEngine.UI.Image is present to receive raycasts. ContextMenuBase Base class for context menu implementations providing lifecycle, content management and popup animation orchestration via PopupTweenAnimator. ContextMenuItem Data model for a single context menu item. ContextMenuItemView Unified view/controller for a context menu item. Provides type-safe access to text, icon, and click subscription for both Unity UI Button and modular Button variants. ContextSubMenu Submenu implementation that opens on hover or click depending on SubMenuBehaviour. Inherits base layout/animation behavior from ContextMenuBase. ContextSubMenuItem Data model for a submenu child item. DataTemplate ScriptableObject that stores a named collection of selectable data items for UI components (e.g., dropdowns, selectors). DraggableUI Enables dragging of a target UnityEngine.RectTransform within a defined drag area. Provides events for drag lifecycle and optional bring-to-front behavior. DropdownEvent Event invoked with the selected item index when the dropdown value changes. DropdownItem DropdownMenu Configurable dropdown UI component supporting tween or Animator-based open/close, item selection, sounds, and optional state saving. DropdownMenu.ItemTextChangedEvent DropdownTweenAnimatorHandler Tween-based animation handler for DropdownMenu open/close using size/alpha interpolation. DropdownUnityAnimatorHandler Animator-based dropdown animation handler. Plays named states on an UnityEngine.Animator. EllipticalSpinnerHandler Elliptical geometry spinner handler that positions elements along an ellipse and moves/rotates them tangentially over time. FadeCanvasGroupPopupTweenParameters FadeCanvasGroupTweenParameters FadeSelectorInputFieldAnimator Animator that fades placeholder and selector via UnityEngine.CanvasGroup.alpha on select/deselect. FadeTween FillImageScroller Specialized scroller that animates a fill by moving a UnityEngine.RectTransform's Y position according to a numeric value mapped between configurable minimum and maximum offsets. FillSelectorInputFieldAnimator Animator that moves/scales placeholder and fills a selector UnityEngine.UI.Image on select. FrameSwapAnimator Animated frame swapper that cycles through sprites with smooth fading transitions. GradientAssetCollection GradientCollectionData HeadSpinner Stylized head-and-body spinner that stretches and rotates a body towards a rotating head element. ImageCollection ImageCollectionData ImageIndicator Represents a single indicator element with activated/deactivated states, background visibility and selection events for highlighting current step. InputFieldAnimator Base animator for input field visual feedback. Handles select/deselect animations using tweened coroutines and exposes events for selection state changes. JampingSpinner Stylized jumping spinner that combines orbital movement with squash-and-stretch and shadow tweens. JampingSpinnerParameters Configuration bundle for a jumping spinner element, its shadow and supporting tweeners. LineSelectorInputFieldAnimator Animator that scales a selector line and adjusts placeholder pivot/scale to indicate focus. LinearSlider Linear slider implementation supporting horizontal/vertical directions and two fill modes (Filled or Sliced). ModularAnimator General-purpose animator that plays a list of tweens with optional loop policies and events. ModularContextMenu A modular popup menu appears upon user interaction, such as a right-click mouse operation. ModularInputField Modular wrapper over TMPro.TMP_InputField that adds animation hooks, audio feedback via IInputFieldAudioProvider and convenient submit handling. ModularModalWindow Simple modal window with title, content, optional icon and confirm/cancel buttons. Supports animated show/hide via PopupTweenAnimator. ModularPopupAnimator Animator for show/hide popup sequences using a list of PopupTweenParameters. Ensures completion callbacks fire with the longest tween of each phase. ModularSpinner Configurable spinner control that delegates movement to a strategy handler and exposes a rich set of options for rotation geometry and behavior. ModularToggle A modular toggle consisting of several graphic elements, like changeable background and handle. ModularToggleGroup Group controller for ToggleBase elements. Ensures only one toggle is on at a time unless AllowSwitchOff is enabled. MovePopupTweenParameters MoveTween MoveTweenParameters MultipleGraphicsSelectable Base selectable that orchestrates transitions for multiple UI graphics when its selection state changes. NavigationScrollbar OffsetPopupTweenParameters Popup tween parameters for animating RectTransform offsetMin and offsetMax values with separate show and hide values OffsetTween OffsetTweenParameters Tween parameters for animating RectTransform offsetMin and offsetMax values (Left, Right, Top, Bottom margins) OnButtonClickedEvent UnityEvent for button events PanelData PanelManager Modular Panel Manager. Handles switching between panels with optional popup animations, editor-friendly preview, and button synchronization. PanelManager.PanelChangeEvent ParticleLocalSpawner PopupTweenAnimator PopupTweenParameters Parameter container describing a single popup tween and its show/hide behavior. PopupTweenParametersData<TTarget, TValue> ProgressBar A modular progress bar component with support for different fill types, directions, animations, and audio feedback. ProgressBar.ProgressEvent ProgressBar.ProgressValueEvent RadialSlider Radial slider implementation that maps value to 360° arc with configurable origin and clockwise/counterclockwise fill direction. RippleEffect Expanding ripple click effect that scales an image and fades its color, destroying itself when complete. RotateTween RotateTweenParameters ScalePopupTweenParameters ScaleTween ScaleTweenParameters ScrollableImage Represents a scrollable texture bound to a UnityEngine.UI.RawImage. Manages UV offset over time to create a seamless scrolling effect. SelectableGroup A group of selectable UI elements that manages selection state and interactions between buttons. Provides functionality for single/multiple selection modes and deselection behavior. SelectableTransitionData<ISelectableDataStates, T> SelectedIndexEvent SelectedTextEvent SelectionSpriteState Selector Simple selector component that updates text, icons, layouts, and indicators based on the selected item. SelectorItem Represents a single selectable item: a display name, optional icon, and a selection event. SimpleTweenAnimator Simple Tween Animator class for handling basic tween animations. SimpleUIParticle SizePopupTweenParameters Popup tween parameters for animating RectTransform sizeDelta values with separate show and hide values SizeTween SizeTweenParameters Tween parameters for animating RectTransform sizeDelta values (Width and Height) Slider Slider.SliderEvent SpinnerEvent SpinnerHandler Base implementation of ISpinnerHandler that manages a set of UISpinner wrappers and coordinates their start/stop, timing and layout queries. SwappableCanvasGroup Class that stores the state of CanvasGroups transitions on a Selectable. SwappableSprite SwitchEvent TemplatesProvider ScriptableObject registry that stores references to available IDataTemplate assets. TextSwapAnimator TextTweenAnimator TintGraphicPopupTweenParameters Popup tween parameters for animating Graphic color values with show/hide states TintGraphicTweenParameters Tween parameters for animating Graphic color values TintTween ToggleBase Base toggle control that encapsulates toggle state, events and saving logic. Inherits from MultipleGraphicsSelectable to reuse transition and target graphics system. ToggleGraphic Describes a target Graphic and its on/off colors to be animated with the toggle state. ToggleTweenAnimator Animator that plays separate tween sets for ON and OFF states and provides helpers to invert and stop. TweenAnimator Base class for simple tween animators that orchestrate a list of tweens. TweenAnimatorBase Base MonoBehaviour providing common tween playback helpers and loop handling for UI animators. TweenBase<TTarget, TParameter> Generic base for strongly-typed tweens that animate a target from a start value to an end value. TweenExtensions Collection of coroutine-based tween helpers for common UI and transform animations. TweenParameters Parameter container describing a single basic tween (non-popup) and its easing/duration. TweenParametersData<TTarget, TValue> UIGradient Mesh effect that applies a color UnityEngine.Gradient to a UnityEngine.UI.Graphic, with horizontal or vertical direction, optional vertex splitting, and blend modes. UISpinner Structs OffsetValues Represents offset values for RectTransform margins offsetMin controls Left and Bottom margins offsetMax controls Right and Top margins SecondaryBarTrigger Represents a trigger pair for secondary progress bar in custom triggers mode. When the primary bar reaches 'primaryValue', the secondary bar should display 'secondaryValue'. The delay between primary and secondary bar updates is controlled by _secondaryBarDelay: Positive delay: primary bar updates first, then secondary bar after delay Negative delay: secondary bar updates first, then primary bar after delay Zero delay: both bars update simultaneously SelectionColorBlock Interfaces IAssetCollection<TType> IBasicData Base interface for data elements, which contain a name and an icon IColorAssetCollection<T> IColorAssetProvider IColorSetter IDataTemplate Interface for data templates, which contain a list of elements IDropdownAnimationHandler IDropdownMenu IGradientAssetProvider IGroupSelectable Interface for elements that can be part of a group IInputFieldAnimator IMultiSelectable Defines the contract for UI controls that support multiple coordinated graphic transitions (color tinting, sprite swapping, and CanvasGroup fading). IMultipleClicksHandler IOnClickEffect IPopupTweenAnimator IPopupTweenParameters IPopupTweenParametersData<TTarget, TValue> ISaveable ISelectableStates<T> ISlider Minimal slider contract exposing current value and bounds with a formatted display value. ISpinner Contract for spinner-like UI components that can start and stop animated rotation. ISpinnerHandler Strategy interface that drives spinning behavior for ModularSpinner. Provides geometry, timing and element control APIs used by concrete handlers. ITargetGraphic ITargetableTween<TTarget, TParameter> ITemplatesProvider Interface for the templates provider, which contains a list of available templates ITween ITweenAnimator ITweenBasicParameters ITweenParameters ITweenParametersData<TTarget, TValue> ITweenTargetData<TTarget> Enums AnimationType CameraSource Specifies the camera source to use for UI interaction/rendering in the context menu system. ClickEffectUpdateMode Update timing used by the click ripple effect. ColorizingType ContextItemType Types of items that can appear inside a context menu. DropdownDirection ElementStartPosition FacingDirection FadeTargetType Target types supported by fade tweens. LinearSlider.FillType LinearSlider.SliderDirection LoopType Looping behavior for tween playback. ModularModalWindow.ContentType ModularModalWindow.StateBehaviour PanelPosition Predefined panel placement presets relative to the screen or an anchor. ParticleLocalSpawner.RandomizationMode ParticleLocalSpawner.RotationDirection ParticleLocalSpawner.SpriteSelectionMode ProgressBar.AnimationType ProgressBar.FillType ProgressBar.ProgressDirection ProgressBar.TextDisplayMode RadialSlider.FillDirection SelectableTransition An enumeration of transition modes for a selectable object. SelectionState An enumeration of selected states of objects Slider.SliderAxis SpinningType SubMenuBehaviour Defines how a submenu is revealed from a parent menu item. SwitchDirection Defines how the toggle handle should move when switching. None: no movement (useful for radio buttons); Horizontal: left-right movement (default); Vertical: up-down movement. TextSwapAnimator.LoopType TweenType Types of built-in tweens supported by the tween system. UIGradient.ColorBlendMode How gradient color blends with original vertex color. UIGradient.GradientType Supported gradient directions."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ModularUIPack",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ModularUIPack",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ModularUIPack",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}